<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Web渗透信息收集</title>
      <link href="/posts/fccc.html"/>
      <url>/posts/fccc.html</url>
      
        <content type="html"><![CDATA[<p>“战争的胜利百分之九十取决于情报“ — — Napoléon Bonaparte</p><p>信息收集主要是收集服务器的配置信息和网站的敏感信息，主要包括域名信息、子域名信息、目标网站信息、目标网站真实IP、目录文件、开放端口和服务、中间件信息、脚本语言等等等。结合各路大佬的收集经验，菜鸟总结了8种信息收集的方式，有不足之处，欢迎赐教，欢迎斧正。个人感觉重点是顺手的工具、有IP代理池、日常收集的强大的字典、清晰可见的思维导图和多次的实战经验。</p><p><img src="https://s1.ax1x.com/2020/08/19/dQg3Dg.png" alt=""></p><h3 id="一-收集域名信息"><a href="#一-收集域名信息" class="headerlink" title="一 收集域名信息"></a>一 收集域名信息</h3><ul><li>1.whois查询</li></ul><p>whois（读作“Who is”，非缩写），标准的互联网协议，是用来查询域名的IP以及所有者等信息的传输协议。简单说，就是一个用来查询域名是否已经被注册，以及注册域名的详细信息的数据库（如域名所有人、域名注册商）。</p><p>通过whois来实现对域名信息的查询。早期的whois查询多以命令列接口存在，但是现在出现了一些网页接口简化的线上查询工具，可以一次向不同的数据库查询。网页接口的查询工具仍然依赖whois协议向服务器发送查询请求，命令列接口的工具仍然被系统管理员广泛使用。whois通常使用TCP协议43端口。每个域名/IP的whois信息由对应的管理机构保存。</p><p>Whois查询我们主要关注的重点是<strong>注册商、注册人、邮件、DNS解析服务器、注册人联系电话。</strong></p><p>目前常见的查询方法主要是通过站长工具等第三方平台查询，当然其实还可以在域名注册商那查询已经注册过的域名，例如中国万网（阿里云）、西部数码、新网、纳网、中资源、三五互联、新网互联、美橙互联、爱名网、易名网等等。还可以通过自己的注册代理机构查询。</p><p>各大注册商以及第三方站长工具的域名WHOIS信息查询地址如下：</p><p>中国万网域名WHOIS信息查询地址：<a href="https://whois.aliyun.com/" target="_blank" rel="noopener">https://whois.aliyun.com/</a></p><p>西部数码域名WHOIS信息查询地址：<a href="https://whois.west.cn/" target="_blank" rel="noopener">https://whois.west.cn/</a></p><p>新网域名WHOIS信息查询地址：<a href="http://whois.xinnet.com/domain/whois/index.jsp" target="_blank" rel="noopener">http://whois.xinnet.com/domain/whois/index.jsp</a></p><p>纳网域名WHOIS信息查询地址：<a href="http://whois.nawang.cn/" target="_blank" rel="noopener">http://whois.nawang.cn/</a></p><p>中资源域名WHOIS信息查询地址：<a href="https://www.zzy.cn/domain/whois.html" target="_blank" rel="noopener">https://www.zzy.cn/domain/whois.html</a></p><p>三五互联域名WHOIS信息查询地址：<a href="https://cp.35.com/chinese/whois.php" target="_blank" rel="noopener">https://cp.35.com/chinese/whois.php</a></p><p>新网互联域名WHOIS信息查询地址：<a href="http://www.dns.com.cn/show/domain/whois/index.do" target="_blank" rel="noopener">http://www.dns.com.cn/show/domain/whois/index.do</a></p><p>美橙互联域名WHOIS信息查询地址：<a href="https://whois.cndns.com/" target="_blank" rel="noopener">https://whois.cndns.com/</a></p><p>爱名网域名WHOIS信息查询地址：<a href="https://www.22.cn/domain/" target="_blank" rel="noopener">https://www.22.cn/domain/</a></p><p>易名网域名WHOIS信息查询地址：<a href="https://whois.ename.net/" target="_blank" rel="noopener">https://whois.ename.net/</a></p><p>下面是站长工具类第三方查询地址(部分网站注册人信息会隐藏或提示联系域名注册商获取，可以去who.is查询看看)</p><p>Kali的查询：whois -h 注册服务器地址  域名</p><p> 站长工具-站长之家<a href="http://whois.chinaz.com/" target="_blank" rel="noopener">域名WHOIS信息查询</a></p><ul><li><p>邮箱反查：<a href="http://whois.chinaz.com/reverse?ddlSearchMode=1" target="_blank" rel="noopener">http://whois.chinaz.com/reverse?ddlSearchMode=1</a></p></li><li><p>注册人反查：<a href="http://whois.chinaz.com/reverse?ddlSearchMode=1" target="_blank" rel="noopener">http://whois.chinaz.com/reverse?ddlSearchMode=1</a></p></li><li><p>电话反查：<a href="http://whois.chinaz.com/reverse?ddlSearchMode=1" target="_blank" rel="noopener">http://whois.chinaz.com/reverse?ddlSearchMode=1</a></p></li></ul><p>爱站网域名WHOIS信息查询地址：<a href="https://whois.aizhan.com/" target="_blank" rel="noopener">https://whois.aizhan.com/</a></p><p>腾讯云域名WHOIS信息查询地址：<a href="https://whois.cloud.tencent.com/" target="_blank" rel="noopener">https://whois.cloud.tencent.com/</a></p><p>国外的who.is：<a href="https://who.is/" target="_blank" rel="noopener">https://who.is/</a> </p><p>微步：<a href="https://x.threatbook.cn/" target="_blank" rel="noopener">https://x.threatbook.cn/</a> </p><p>Virus Total:<a href="https://www.virustotal.com" target="_blank" rel="noopener">https://www.virustotal.com</a></p><p>还有Kali中自带的whois查询、一些集成工具等。</p><p><a href="https://imgchr.com/i/dQg7ad" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/08/19/dQg7ad.png" alt=""></a></p><ul><li><p>2.备案信息查询</p><p>网站备案信息是根据国家法律法规规定，由网站所有者向国家有关部门申请的备案，是国家信息产业部对网站的一种管理途径，是为了防止在网上从事非法网站经营活动，当然主要是针对国内网站。</p></li></ul><p>备案查询我们主要关注的是：单位信息例如名称、备案编号、网站负责人、法人、电子邮箱、联系电话等。</p><p>常见查询备案信息的网站如下：</p><p>天眼查：<a href="https://www.tianyancha.com/" target="_blank" rel="noopener">https://www.tianyancha.com/</a> </p><p>ICP备案查询网：<a href="http://www.beianbeian.com/" target="_blank" rel="noopener">http://www.beianbeian.com/</a> </p><p>国家企业信用信息公示系统：<a href="http://www.gsxt.gov.cn/index.html" target="_blank" rel="noopener">http://www.gsxt.gov.cn/index.html</a></p><p>爱站的备案查询：<a href="https://icp.aizhan.com" target="_blank" rel="noopener">https://icp.aizhan.com</a></p><h3 id="二-收集子域名"><a href="#二-收集子域名" class="headerlink" title="二 收集子域名"></a>二 收集子域名</h3><p>子域名也就是二级域名，是指顶级域名下的域名。收集的子域名越多，我们测试的目标就越多，目标系统渗透成功的机率也越大。主站无懈可击的时候子域名是一个很好的突破口。常用的方法有4种</p><ul><li>1 .检测工具</li></ul><p>检测工具有很多，但重要的是需要日常完善字典，字典强大才是硬道理。常见的有</p><p>layer子域名挖掘机、subDomainsBrute、K8、orangescan、DNSRecon、Sublist3r、dnsmaper、wydomain等等，重点推荐layer子域名挖掘机（使用简单，界面细致）、Sublist3r（列举多资源下查到的域名）和subDomainsBrute。（递归查询多级域名），此类工具github都有下载地址和使用方法。</p><p>链接如下：</p><p>SubDomainBrute：<a href="https://github.com/lijiejie/subDomainsBrute" target="_blank" rel="noopener">https://github.com/lijiejie/subDomainsBrute</a></p><p>Sublist3r：<a href="https://github.com/aboul3la/Sublist3r" target="_blank" rel="noopener">https://github.com/aboul3la/Sublist3r</a></p><p>Layer（5.0增强版）：<a href="https://pan.baidu.com/s/1Jja4QK5BsAXJ0i0Ax8Ve2Q" target="_blank" rel="noopener">https://pan.baidu.com/s/1Jja4QK5BsAXJ0i0Ax8Ve2Q</a>  密码:aup5</p><p><a href="https://d.chinacycc.com（大佬推荐的说好用的很，但是收费。）" target="_blank" rel="noopener">https://d.chinacycc.com（大佬推荐的说好用的很，但是收费。）</a></p><ul><li>2.搜索引擎</li></ul><p>可以利用Google、Bing 、shodan和百度这样的搜索引擎进行搜索查询（site:<a href="http://www.xxx.com）" target="_blank" rel="noopener">www.xxx.com）</a></p><p><a href="https://imgchr.com/i/dQ2Ko9" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/08/19/dQ2Ko9.png" alt=""></a></p><p><a href="https://imgchr.com/i/dQ2Roj" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/08/19/dQ2Roj.png" alt=""></a></p><p>Google搜索语法：<a href="https://blog.csdn.net/pan0yan/article/details/41807071" target="_blank" rel="noopener">https://blog.csdn.net/pan0yan/article/details/41807071</a></p><p>Bing搜索语法：<a href="https://blog.csdn.net/hansel/article/details/53886828" target="_blank" rel="noopener">https://blog.csdn.net/hansel/article/details/53886828</a></p><p>百度搜索语法：<a href="https://www.cnblogs.com/k0xx/p/12794452.html" target="_blank" rel="noopener">https://www.cnblogs.com/k0xx/p/12794452.html</a></p><ul><li>3.第三方聚合应用枚举</li></ul><p>第三方服务聚合了大量的DNS数据集，并通过它们来检索给定域名的子域名。</p><p>（1）VirusTotal：<a href="https://www.virustotal.com/#/home/search" target="_blank" rel="noopener">https://www.virustotal.com/#/home/search</a></p><p>（2）DNSdumpster：<a href="https://dnsdumpster.com/" target="_blank" rel="noopener">https://dnsdumpster.com/</a> </p><p><a href="https://imgchr.com/i/dQ2zSx" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/08/19/dQ2zSx.png" alt=""></a></p><p><img src="https://s1.ax1x.com/2020/08/19/dQRYpq.png" alt=""></p><ul><li><ol start="4"><li>SSL证书查询</li></ol></li></ul><p>SSL/TLS证书通常包含域名、子域名和邮件地址，这些是我们需要获取的信息，通常CT是CA的一个项目，CA会把每个SSL/TLS证书发布到公共日志中，查找域名所属证书的最简单方法就是使用搜索引擎搜索一些公开CT日志。</p><p>主要网站如下：</p><p>（1）<a href="https://crt.sh/" target="_blank" rel="noopener">https://crt.sh/</a></p><p>（2）<a href="https://censys.io/" target="_blank" rel="noopener">https://censys.io/</a></p><p>（3）<a href="https://developers.facebook.com/tools/ct/" target="_blank" rel="noopener">https://developers.facebook.com/tools/ct/</a></p><p>（4）<a href="https://google.com/transparencyreport/https/ct/" target="_blank" rel="noopener">https://google.com/transparencyreport/https/ct/</a></p><ul><li><ol start="5"><li>在线网站查询（使用相对较少了）</li></ol></li></ul><p>（1）<a href="https://phpinfo.me/domain/" target="_blank" rel="noopener">https://phpinfo.me/domain/</a></p><p>（2）<a href="http://dns.aizhan.com" target="_blank" rel="noopener">http://dns.aizhan.com</a></p><p>（3）<a href="http://z.zcjun.com/（响应很快,推荐）" target="_blank" rel="noopener">http://z.zcjun.com/（响应很快,推荐）</a></p><p>（4）Github搜索子域名</p><h3 id="三-真实IP收集"><a href="#三-真实IP收集" class="headerlink" title="三 真实IP收集"></a>三 真实IP收集</h3><p>信息收集工程中IP地址是必不可少的，在域名收集工程中我们已经对ip段收集，whois、ping测试、指纹网站都可以探测ip地址，但是很多目标服务器存在CDN，那什么是CDN，如果绕过查找真实IP呢？</p><p>CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，只有在实际数据交互时才会从远程web服务器响应，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术。</p><p>确定有无cdn</p><p>（1）很简单，使用各种多地 ping 的服务，查看对应 IP 地址是否唯一，如果不唯一多半是使用了CDN， 多地 Ping 网站有：<br><a href="http://ping.chinaz.com/" target="_blank" rel="noopener">http://ping.chinaz.com/</a><br><a href="http://ping.aizhan.com/" target="_blank" rel="noopener">http://ping.aizhan.com/</a></p><p>(2)使用 nslookup 进行检测，原理同上，如果返回域名解析对应多个 IP 地址多半是使用了 CDN。</p><p>查询相关域名对应IP、别名记录等，判断出网站服务器所使用的服务商或服务器IP信息。</p><p><a href="http://tool.chinaz.com/nslookup/" target="_blank" rel="noopener">在线nslookup查询1</a></p><p><a href="http://tools.bugscaner.com/nslookup/" target="_blank" rel="noopener">在线nslookup查询2</a></p><p>有 CDN 的示例：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/rTicZ9Hibb6RWs9h1sGntI5u6ia7kUbocq3yJdzvkCnFsia3CR87T6U9uwV8ltzMTb240MQFzvd6x6hsmUfufpBBXw/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>无 CDN 的示例：</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/rTicZ9Hibb6RWs9h1sGntI5u6ia7kUbocq3ZT6dsOV9qaYn528hfv35WLR01jxeCics2NibeE1720pI6pIEnSmGQCQQ/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>绕过cdn的方法有多种，参考链接如下：<a href="https://www.cnblogs.com/qiudabai/p/9763739.html" target="_blank" rel="noopener">https://www.cnblogs.com/qiudabai/p/9763739.html</a></p><p>提一点的是绕过云cdn，fofa的title搜索（查看源码获取title），可以发现很多cdn 缓存服务器的ip地址，部分cdn缓存服务器经过区域传送，数据库是同步的，如果可以直接访问，  即可绕过云waf进行一些扫描、注入等操作。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/rTicZ9Hibb6RWs9h1sGntI5u6ia7kUbocq3gGHmBj3vDicicXPhFe8nOvtJqe3DYZVwEjsmNDmWib8Xb4KlftPIibJnPw/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"><img src="https://mmbiz.qpic.cn/mmbiz_jpg/rTicZ9Hibb6RWs9h1sGntI5u6ia7kUbocq3GCum33aOaLE6d47elLo0bcZcgFHQ6PjpulwY5icx2yjVz2jicXCR1EIQ/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>这里推荐一些c端、旁站的扫描网站和工具：</p><p><a href="http://www.webscan.cc/" target="_blank" rel="noopener">http://www.webscan.cc/</a></p><p>神器：<a href="https://github.com/robertdavidgraham/masscan" target="_blank" rel="noopener">https://github.com/robertdavidgraham/masscan</a></p><p>御剑1.5：<a href="https://download.csdn.net/download/peng119925/10722958" target="_blank" rel="noopener">https://download.csdn.net/download/peng119925/10722958</a></p><p>C端查询：IIS PUT Scanner（扫描速度快，自定义端口，有banner信息）</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/rTicZ9Hibb6RWs9h1sGntI5u6ia7kUbocq3CuqYoFtk70fZvvtz34XvhxITk0dq4axYcchzn8XzTDLBlBG4uDOmSw/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><h3 id="四-端口测试"><a href="#四-端口测试" class="headerlink" title="四 端口测试"></a>四 端口测试</h3><p>对网站域名对应的真实IP地址进行端口测试，很多有防护不能大批量扫描和漏洞测试，但是放在云上的网站如果cdn找到真实网站即可大批量扫描。</p><p>常见工具就是nmap(功能强大)、masscan、zmap和御剑tcp端口高速扫描工具(较快)，还有一些在线的端口扫描。<a href="http://coolaf.com/tool/port、https://tool.lu/portscan/index.html" target="_blank" rel="noopener">http://coolaf.com/tool/port、https://tool.lu/portscan/index.html</a>  </p><p>参考大神的思路：我们可以在收集子域对应的的ip后整理到txt中，然后nmap批量端口扫描、服务爆破和漏洞扫描，前提是不被封禁IP，可采用代理池。</p><p>nmap -iL ip.txt –script=auth,vuln &gt; finalscan.txt 扫描导出常见端口和漏洞。</p><p>常见端口说明和攻击方向根据web攻防这本书整理到个人博客：<a href="https://blog.csdn.net/qq_32434307/article/details/107248881" target="_blank" rel="noopener">https://blog.csdn.net/qq_32434307/article/details/107248881</a></p><p>常见端口漏洞：</p><table><thead><tr><th align="center">端口</th><th align="center">服务</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">21</td><td align="center">FTP</td><td align="center">主要看是否支持匿名，也可跑弱口令</td></tr><tr><td align="center">22</td><td align="center">SSH</td><td align="center">弱口令爆破</td></tr><tr><td align="center">22</td><td align="center">SSH</td><td align="center">弱口令爆破</td></tr><tr><td align="center">23</td><td align="center">telnet</td><td align="center">弱口令爆破</td></tr><tr><td align="center">80-90</td><td align="center">WEB</td><td align="center">常见WEB漏洞以及一些为管理后台</td></tr><tr><td align="center">161</td><td align="center">snmp</td><td align="center">public弱口令</td></tr><tr><td align="center">389</td><td align="center">ldap</td><td align="center">是否为匿名访问</td></tr><tr><td align="center">443</td><td align="center">openssl</td><td align="center">心脏出血以及一些WEB漏洞测试</td></tr><tr><td align="center">445</td><td align="center">smb</td><td align="center">跑弱口令，检测是否有ms_08067等溢出</td></tr><tr><td align="center">873</td><td align="center">rsync</td><td align="center">是否为匿名访问，也可以跑弱口令</td></tr><tr><td align="center">1025</td><td align="center">RPC</td><td align="center">NFS匿名访问</td></tr><tr><td align="center">1099</td><td align="center">java rmi</td><td align="center">远程命令执行漏洞</td></tr><tr><td align="center">1433</td><td align="center">mssql</td><td align="center">弱口令爆破</td></tr><tr><td align="center">1521</td><td align="center">oracle</td><td align="center">弱口令爆破</td></tr><tr><td align="center">2082/2083</td><td align="center">cpanel主机管理系统登陆</td><td align="center">弱口令爆破</td></tr><tr><td align="center">2222</td><td align="center">DA虚拟主机管理系统登陆</td><td align="center">弱口令爆破</td></tr><tr><td align="center">2601,2604</td><td align="center">zebra路由器</td><td align="center">默认密码zebra</td></tr><tr><td align="center">3128</td><td align="center">squid代理默认端口</td><td align="center">如果没设置口令很可能就直接漫游内网</td></tr><tr><td align="center">3306</td><td align="center">mysql</td><td align="center">弱口令爆破</td></tr><tr><td align="center">3312/3311</td><td align="center">kangle主机管理系统登陆</td><td align="center">说明</td></tr><tr><td align="center">3389</td><td align="center">RDP</td><td align="center">弱口令爆破，SHIFT后门，放大镜，输入法漏洞</td></tr><tr><td align="center">4440</td><td align="center">rundeck</td><td align="center">web</td></tr><tr><td align="center">4848</td><td align="center">GlassFish web中间件</td><td align="center">弱口令admin/adminadmin</td></tr><tr><td align="center">5432</td><td align="center">postgres</td><td align="center">弱口令爆破</td></tr><tr><td align="center">5560,7778</td><td align="center">iSqlPlus</td><td align="center"></td></tr><tr><td align="center">5900,5901,5902</td><td align="center">vnc</td><td align="center">弱口令爆破</td></tr><tr><td align="center">5984</td><td align="center">CouchDB</td><td align="center"><a href="http://xxx:5984/_utils/" target="_blank" rel="noopener">http://xxx:5984/_utils/</a></td></tr><tr><td align="center">6082</td><td align="center">varnish</td><td align="center"></td></tr><tr><td align="center">6379</td><td align="center">redis</td><td align="center">一般无验证，直接访问</td></tr><tr><td align="center">7001,7002</td><td align="center">weblogic</td><td align="center">弱口令爆破</td></tr><tr><td align="center">7778</td><td align="center">Kloxo</td><td align="center">主机控制面板登录</td></tr><tr><td align="center">8080</td><td align="center">tomcat\jboss</td><td align="center">弱口令爆破，jboss后台可能不验证</td></tr><tr><td align="center">8649</td><td align="center">ganglia</td><td align="center"></td></tr><tr><td align="center">8080-8090</td><td align="center">常见WEB端口</td><td align="center"></td></tr><tr><td align="center">8083</td><td align="center">Vestacp主机管理系统 （国外用较多）</td><td align="center"></td></tr><tr><td align="center">8649</td><td align="center">ganglia</td><td align="center"></td></tr><tr><td align="center">8888</td><td align="center">amh/LuManager</td><td align="center">主机管理系统默认端口 说明</td></tr><tr><td align="center">9000</td><td align="center">fcgi</td><td align="center">fcgi php命令执行漏洞</td></tr><tr><td align="center">9200</td><td align="center">elasticsearch</td><td align="center">代码执行</td></tr><tr><td align="center">9043</td><td align="center">websphere</td><td align="center">弱口令爆破</td></tr><tr><td align="center">10000</td><td align="center">Virtualmin/Webmin</td><td align="center">服务器虚拟主机管理系统</td></tr><tr><td align="center">11211</td><td align="center">memcache</td><td align="center">内存泄露</td></tr><tr><td align="center">27017,28017</td><td align="center">mongodb</td><td align="center">未授权访问</td></tr><tr><td align="center">50000</td><td align="center">Upnp</td><td align="center">SAP命令执行</td></tr><tr><td align="center">50060,50030</td><td align="center">hadoop</td><td align="center">WEB 未授权访问</td></tr></tbody></table><h3 id="五-网站信息收集"><a href="#五-网站信息收集" class="headerlink" title="五 网站信息收集"></a>五 网站信息收集</h3><p>网站信息信息收集主要是：操作系统，中间件，脚本语言，数据库，服务器，web容器、waf、cdn、cms、历史漏洞、dns区域传送等，可以使用以下方法查询。</p><p>常见指纹工具：御剑web指纹识别、轻量级web指纹识别、whatweb等</p><p>（1）常见网站信息识别网站：</p><p><strong>将首页或者其他页面通过修改大小写辨别网站所使用的系统：</strong></p><p>区分大小写（页面报错）–Linux</p><p>不区分大小写（页面正常）–Windows</p><p>潮汐指纹：<a href="http://finger.tidesec.net/（推荐）" target="_blank" rel="noopener">http://finger.tidesec.net/（推荐）</a></p><p>云悉(现在需要邀请码)：<a href="http://www.yunsee.cn/info.html" target="_blank" rel="noopener">http://www.yunsee.cn/info.html</a></p><p>CMS指纹识别：<a href="http://whatweb.bugscaner.com/look/" target="_blank" rel="noopener">http://whatweb.bugscaner.com/look/</a></p><p>第三方历史漏洞库：乌云、seebug、CNVD等</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/rTicZ9Hibb6RWs9h1sGntI5u6ia7kUbocq3qbAoyXml7Biba5636QTF3zeWPp1c9M94ebl2pQqcE34PSmNZj02yahw/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>（2）Waf识别：<a href="https://github.com/EnableSecurity/wafw00f" target="_blank" rel="noopener">https://github.com/EnableSecurity/wafw00f</a>  </p><p>kali上自带wafw00f，一条命令直接使用。建议最好在kali下使用，windows下的使用很麻烦。Nmap上也包含识别waf指纹的脚本模块。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/rTicZ9Hibb6RWs9h1sGntI5u6ia7kUbocq30ubR5PWya751PHQt4Ng1rYHXaRmP4l0Dr12FN92nnFZ8Eq7yzd9WCA/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><pre><code>在搜索框中输入XSS弹窗代码&lt;script&gt;alert('XSS')&lt;/script&gt; ，WAF拦截后判断WAF。在可能存在的注入页面输入检测注入漏洞代码and 1=2，被WAF拦截后判断WAF。</code></pre><p><img src="https://secpulseoss.oss-cn-shanghai.aliyuncs.com/wp-content/uploads/2018/08/%E5%9B%BE%E7%89%8725-1024x506.png" alt=""></p><p>（3）Dns区域传送漏洞，我们可以通过这个漏洞发现：</p><p>1）网络的拓扑结构，服务器集中的IP地址段</p><p>2）数据库服务器的IP地址，例如上述nwpudb2.nwpu.edu.cn</p><p>3）测试服务器的IP地址，例如test.nwpu.edu.cn</p><p>4）VPN服务器地址泄露</p><p>5）其他敏感服务器</p><p>  (4) 各端口对应数据库类型：</p><p>1433–sql server 3306–mysql oracle–1521 postgresql–5432  access–默认不开放连接端口，数据库存储在FTP服务器上</p><p>具体参考链接如下：</p><p><a href="http://www.lijiejie.com/dns-zone-transfer-1" target="_blank" rel="noopener">http://www.lijiejie.com/dns-zone-transfer-1</a></p><p><a href="https://blog.csdn.net/c465869935/article/details/53444117" target="_blank" rel="noopener">https://blog.csdn.net/c465869935/article/details/53444117</a></p><h3 id="六-敏感目录文件收集"><a href="#六-敏感目录文件收集" class="headerlink" title="六 敏感目录文件收集"></a>六 敏感目录文件收集</h3><p>攻防测试中探测web目录和隐藏的敏感文件是很重要环境，从中可以获取网站后台管理页面、文件上传界面、备份文件、WEB-INF、robots、svn和源代码等。</p><p>主要通过工具扫描，主要有</p><p>（1）御剑(互联网有很多字典加强版)</p><p>（2）7kbstorm <a href="https://github.com/7kbstorm/7kbscan-WebPathBrute" target="_blank" rel="noopener">https://github.com/7kbstorm/7kbscan-WebPathBrute</a></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/rTicZ9Hibb6RWs9h1sGntI5u6ia7kUbocq3ckIibxsZfSQgnT58z8bpDMrGJ1ea1euGTyan462icIn1ln7dWsLvUELQ/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>（3）搜索引擎（Google、baidu、bing等），搜索引擎搜索敏感文件也较为常见，一般是这样：site:xxx.xxx filetype:xls。</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/rTicZ9Hibb6RWs9h1sGntI5u6ia7kUbocq3WrYyuyTUG17O7iac4SS1UWZIthcrBTCDib0jMkOibOEAiaic6oM8OCnKzfA/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>（4）爬虫（AWVS、Burpsuite、北极熊等）</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/rTicZ9Hibb6RWs9h1sGntI5u6ia7kUbocq3RyScPMLeiazVdtKVBcdkHDRRTwbvuUBkfYQqaPJuF1gFTBxXJWdCfNg/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>（5）BBscan（lijiejie大佬的脚本：<a href="https://github.com/lijiejie/BBScastorn" target="_blank" rel="noopener">https://github.com/lijiejie/BBScastorn</a> ）</p><p>（6）凌风云搜索：<a href="https://www.lingfengyun.com/（部分用户可能上传云盘被在线抓取）" target="_blank" rel="noopener">https://www.lingfengyun.com/（部分用户可能上传云盘被在线抓取）</a></p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/rTicZ9Hibb6RWs9h1sGntI5u6ia7kUbocq3aibHWrmOrn0XZ8w6RKicY3uLdfcVboSiaBN67R7jGZ5ZSpNCx9zibugEbw/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><p>（7）github搜索</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/rTicZ9Hibb6RWs9h1sGntI5u6ia7kUbocq30fjCPdICA73g7F49JPuQuiaWgVOUFjGKDfAtfpBGDZ6rFDP4iaAjVdBQ/640?wx_fmt=jpeg&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1" alt="img"></p><h3 id="七-社会工程学收集"><a href="#七-社会工程学收集" class="headerlink" title="七 社会工程学收集"></a>七 社会工程学收集</h3><p>运用社会工程学进行信息收集和物理渗透，在近期</p><p>奇安信的“攻守皆有道，百战护山河”中提及社会工程信息收集和物理渗透是他们重要攻击途径之一。</p><p>社会工程学是一种通过对受害者心理弱点、本能反应、好奇心、信任、贪婪等心理陷阱进行诸如欺骗、伤害等危害手段；是一种黑客攻击方法，利用欺骗等手段骗取对方信任，获取机密情报；是一种利用人性脆弱点、贪婪等等的心理表现进行攻击。我们可以从社会工作人员和社工库入手，社工一家公司销售人、商务人员、门卫、前台人员来获得个人信息、邮箱、电话、内网地址、物理门禁；我们可以欺骗销售获得邮箱回复进而获取内网IP及服务器信息，我们可以欺骗客服申请重置密码、发送vpn账户等。</p><p>我们可以通过社工库查询一些关键信息。对于很多社工库来说，存储达到T，数据量达到亿级别都是小case。内容方面包括帐号密码、邮箱地址、个人信息等等。</p><p>互联网社工库，威力有多大，就看数据库的数量和质量了，理论上达到了一定的量，很多的东西都是可以查的出来的，特别是那些基本所有网站都一个密码的，只要一个社工库的收集的其中一个数据库有他的帐号密码，那么查出来的密码就可以直接登陆该用户的其他帐号了。</p><h3 id="八-近源信息收集"><a href="#八-近源信息收集" class="headerlink" title="八  近源信息收集"></a>八  近源信息收集</h3><p>（1）外接无线网卡主要是用来配合kali破解无线密码的，现在一般是通过抓握手包然后跑包来破解，还可以通过伪造SSID钓鱼、中间人攻击等等，主要是获取无线网密码、网段信息等。</p><p>（2）大菠萝可以捕获握手包并模仿目标AP。大菠萝可以完全模仿首选网络，从而实现中间人攻击，获取我们想要的无线网信息，为攻击目标系统收集信息。</p><p>（3）当前电子设备和电路的工作频率不断提高，而工作电压却逐渐降低，因此对电磁脉冲（EMP）的敏感性和易损性也不断增加。同时，电子系统中的集成电路对电磁脉冲比较敏感，往往一个较大的电磁脉冲，就会使集成块产生误码、甚至电子元器件失效或烧毁，所以我们可以使用EMP干扰来打开部分电子门禁和电子密码锁。如果我们使用EMP无法打开门禁，那我们还有一个方法，但是需要我们稍微靠近一下目标，找合适的机会破解IC卡，或复制ID卡。进而突破门禁，实现物理攻击和信息收集。</p><p>（4）当然我们也可由通过社工获取指纹信息，拓印出一个跟原指纹一模一样的指纹膜突破物理门禁、办公PC指纹识别等。</p><p>（5）如果你能接触到目标主机，那你就可以将键盘记录器接入到主机和键盘之间，并配置连接WI-FI，将键盘敲击的数据实时传回远程服务器。</p><p>（6）进入办公地点或者内网之后，可以在内网偷偷装一个PacketSquirrel，作为中间人攻击工具，PacketSquirrel可以捕获网络端点的数据包、并且可以使用VPN和反向shell获得远程访问权限，为攻击目标系统收集部分信息。</p><p>（7） badusb是HID（人机接口）攻击的一种，也称为热插拔攻击。想象一下，你可以走到一台计算机上，插入看似无害的USB驱动器，然后安装后门，窃听文档，窃取相关密码.，收集目标系统相关信息。</p><p>参考大佬链接：</p><p><a href="https://www.freebuf.com/database/195169.html" target="_blank" rel="noopener">https://www.freebuf.com/database/195169.html</a></p><p><a href="https://www.freebuf.com/articles/web/204883.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/204883.html</a></p><p><a href="https://www.cnblogs.com/nul1/p/11311731.html" target="_blank" rel="noopener">https://www.cnblogs.com/nul1/p/11311731.html</a></p><p><a href="https://mp.weixin.qq.com/s/XvcYaVMBkWiH2BW7kCWfNQ" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/XvcYaVMBkWiH2BW7kCWfNQ</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 信息收集 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 博客搭建指南</title>
      <link href="/posts/22380.html"/>
      <url>/posts/22380.html</url>
      
        <content type="html"><![CDATA[<h3 id="Hexo-博客搭建指南"><a href="#Hexo-博客搭建指南" class="headerlink" title="Hexo 博客搭建指南"></a>Hexo 博客搭建指南</h3><p><img src="https://s1.ax1x.com/2020/08/17/dmN8HJ.jpg" alt=""></p><h5 id="参照"><a href="#参照" class="headerlink" title="参照"></a>参照</h5><ul><li><a href="https://blog.csdn.net/jspnetcn/article/details/104111651" target="_blank" rel="noopener">基于Hexo的matery主题搭建博客并优化</a></li></ul><h4 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h4><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a> 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="https://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p><h4 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h4><p>安装 Hexo 相当简单，只需要先安装下列应用程序即可：</p><ul><li><a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">Node.js</a> (Node.js 版本需不低于 8.10，建议使用 Node.js 10.0 及以上版本)</li><li><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a></li></ul><pre><code>npm install -g hexo-cli</code></pre><p>安装以后，可以使用以下两种方式执行 Hexo:</p><ol><li><p><code>npx hexo</code></p></li><li><p>将 Hexo 所在的目录下的 node_modules 添加到环境变量之中即可直接使用 hexo:</p></li></ol><p><code>echo 'PATH="$PATH:./node_modules/.bin"' &gt;&gt; ~/.profile</code></p><h4 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h4><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p><pre><code>hexo init &lt;folder&gt;cd &lt;folder&gt;npm install</code></pre><p>新建完成后，指定文件夹的目录如下：</p><pre><code>.├── _config.yml├── package.json├── scaffolds├── source|   ├── _drafts|   └── _posts└── themes</code></pre><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>此时，通过 <code>hexo s</code> 命令即可在本地启动博客站点。</p><pre><code>~ hexo sINFO  Start processingINFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</code></pre><p>接下来将安装主题，配置博客托管平台，实现一键发布并刷新CDN缓存。</p><h4 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h4><h5 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h5><p><a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">hexo-theme-matery</a> 是一个采用 <code>Material Design</code> 和响应式设计的 Hexo 博客主题，点击 <a href="https://lhl001.github.io/">这里</a> 可以查看示例效果。点击 这里 <a href="https://codeload.github.com/blinkfox/hexo-theme-matery/zip/master" target="_blank" rel="noopener">下载</a> <code>master</code> 分支的最新稳定版的代码，解压缩后，将 <code>hexo-theme-matery</code> 的文件夹复制到hexo目录下的  <code>themes</code>  文件夹中即可。</p><h5 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h5><p>修改 Hexo 目录下的 <code>_config.yml</code> 的 <code>theme</code> 的值为：<code>theme: hexo-theme-matery</code></p><h6 id="config-yml-文件的其它修改建议"><a href="#config-yml-文件的其它修改建议" class="headerlink" title="_config.yml 文件的其它修改建议:"></a><code>_config.yml</code> 文件的其它修改建议:</h6><p>请修改 _config.yml 的 url 的值为你的网站主 <code>URL</code>（如：<a href="http://xxx.github.io）。" target="_blank" rel="noopener">http://xxx.github.io）。</a><br>建议修改两个 per_page 的分页条数值为 <code>6</code> 的倍数，如：12、18 等，这样文章列表在各个屏幕下都能较好的显示。<br>如果是中文用户，则建议修改 language 的值为 <code>zh-CN</code>。</p><h6 id="新建分类-categories-页"><a href="#新建分类-categories-页" class="headerlink" title="新建分类 categories 页"></a>新建分类 categories 页</h6><p>categories 页是用来展示所有分类的页面，如果 source 目录下还没有 <code>categories/index.md</code> 文件，那么就需要新建一个，命令如下</p><pre><code>hexo new page "categories"</code></pre><p>编辑刚刚新建的页面文件 <code>/source/categories/index.md</code>，至少需要以下内容：</p><pre><code>---title: categoriesdate: 2020/8/17 19:09:03 type: "categories"layout: "categories"---</code></pre><h6 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h6><p>tags 页是用来展示所有标签的页面，如果 source 目录下还没有 <code>tags/index.md</code> 文件，那么就需要新建一个，命令如下：</p><pre><code>hexo new page "tags"</code></pre><p>编辑刚刚新建的页面文件 <code>/source/tags/index.md</code>，至少需要以下内容：</p><pre><code>---title: tagsdate: 2020/8/17 19:10:26 type: "tags"layout: "tags"---</code></pre><h6 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h6><p>about 页是用来展示关于我和我的博客信息的页面，如果 source 目录下还没有 <code>about/index.md</code> 文件，那么就需要新建一个，命令如下：</p><pre><code>---title: aboutdate: 2020/8/17 19:11:17 type: "about"layout: "about"---</code></pre><h6 id="新建友情连接-friends-页（可选的）"><a href="#新建友情连接-friends-页（可选的）" class="headerlink" title="新建友情连接 friends 页（可选的）"></a>新建友情连接 friends 页（可选的）</h6><p>friends 页是用来展示友情连接信息的页面，如果 source 目录下还没有 <code>friends/index.md</code> 文件，那么就需要新建一个，命令如下：</p><pre><code>hexo new page "friends"</code></pre><p>编辑刚刚新建的页面文件<code>/source/friends/index.md</code>，至少需要以下内容：</p><pre><code>---title: friendsdate: 2020/8/17 19:12:12 type: "friends"layout: "friends"---</code></pre><p>同时，在 source 目录下新建 _data 目录，在 _data 目录中新建 <code>friends.json</code> 文件，文件内容如下所示：</p><pre><code>[{    "avatar": "http://image.luokangyuan.com/1_qq_27922023.jpg",    "name": "码酱",    "introduction": "我不是大佬，只是在追寻大佬的脚步",    "url": "http://luokangyuan.com/",    "title": "前去学习"}, {    "avatar": "http://static.blinkfox.com/20190601.png",    "name": "码农",    "introduction": "这里不隐含扭曲的价值观，而是整合并充盈正能量",    "url": "https://www.90c.vip/",    "title": "前去学习"}, {    "avatar": "https://jiangliuhong.gitee.io/images/avatar.jpg",    "name": "编程常青树",    "introduction": "平凡的脚步也可以走出伟大的行程",    "url": "https://jiangliuhong.gitee.io/",    "title": "前去学习"}]</code></pre><h4 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h4><p>由于 Hexo 自带的代码高亮主题显示不好看，所以主题中使用到了 <code>hexo-prism-plugin</code> 的 Hexo 插件来做代码高亮，安装命令如下:</p><pre><code>npm i -S hexo-prism-plugin</code></pre><p>然后，修改 Hexo 根目录下 _config.yml 文件中 highlight.enable 的值为 <code>false</code>，并新增 prism 插件相关的配置，主要配置如下 :</p><pre><code>highlight:  enable: falseprism_plugin:  mode: 'preprocess'# realtime/preprocess  theme: 'tomorrow'  line_number: false# default false  custom_css:</code></pre><h4 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h4><p>本主题中还使用到了 <code>hexo-generator-search</code> 的 Hexo 插件来做内容搜索，安装命令如下：</p><pre><code>npm install hexo-generator-search --save</code></pre><p>在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p><pre><code>search:  path: search.xml  field: post</code></pre><h4 id="修改页脚"><a href="#修改页脚" class="headerlink" title="修改页脚"></a>修改页脚</h4><p>页脚信息可能需要做定制化修改，而且它不便于做成配置信息，所以可能需要你自己去再修改和加工。修改的地方在主题文件的 <code>/layout/_partial/footer.ejs</code> 文件中，包括站点、使用的主题、访问量等。</p><pre><code>&lt;a href="https://github.com/lhl001" class="tooltipped" target="_blank" data-tooltip="访问我的GitHub" data-position="top" data-delay="50"&gt;&lt;i class="fa fa-github"&gt;&lt;/i&gt;&lt;/a&gt;</code></pre><p>其中，社交图标（如：fa-github）可以在 Font Awesome 中搜索找到。以下是常用社交图标的标识，供参考：</p><ul><li>Facebook: fa-facebook</li><li>Twitter: fa-twitter</li><li>Google-plus: fa-google-plus</li><li>Linkedin: fa-linkedin</li><li>Tumblr: fa-tumblr</li><li>Medium: fa-medium</li><li>Slack: fa-slack</li><li>新浪微博: fa-weibo</li><li>微信: fa-wechat</li><li>QQ: fa-qq</li></ul><h4 id="修改打赏的二维码图片"><a href="#修改打赏的二维码图片" class="headerlink" title="修改打赏的二维码图片"></a>修改打赏的二维码图片</h4><p>在主题文件的 <code>source/medias/reward</code> 文件中，可以替换成你的的微信和支付宝的打赏二维码图片。</p><h4 id="一键部署"><a href="#一键部署" class="headerlink" title="一键部署"></a>一键部署</h4><p>通过 <code>hexo-deployer-git</code> 插件可以实现一键将博客同时部署到多个git仓库中。如同时发布到github及gitee提供的pages服务。安装：</p><pre><code>npm install hexo-deployer-git --save</code></pre><p>修改 Hexo 根目录下的 _config.yml 文件中的如下内容:</p><pre><code>## Docs: https://hexo.io/docs/deployment.htmldeploy:  - type: git    repo: https://github.com/lxl80/blog.git    branch: gh-pages    ignore_hidden: false  - type: git    repo: https://gitee.com/lxl80/lxl80.git    branch: master    ignore_hidden: false</code></pre><h4 id="文章链接转静态短地址（建议安装）"><a href="#文章链接转静态短地址（建议安装）" class="headerlink" title="文章链接转静态短地址（建议安装）"></a>文章链接转静态短地址（建议安装）</h4><p>如果文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于 SEO，且 gitment 评论对中文链接也不支持。我们可以用 hexo-permalink-pinyin Hexo 插件生成文章时生成中文拼音的永久链接，或者用hexo-abbrlink 生成静态文章链接。以下结合hexo-abbrlink生成类似 /yyyy/mmdd+随机数.html 的文章链接地址。</p><p>安装命令如下：</p><pre><code>npm install hexo-abbrlink --save</code></pre><p>在 Hexo 根目录下的<code>_config.yml</code>文件中，修改 permalink: ，并在文件末尾新增 abbrlink:配置项：</p><pre><code>permalink: :year/:month:day:abbrlink.htmlabbrlink:   alg: crc16 #算法选项：crc16丨crc32  rep: dec #输出进制：dec为十进制，hex为十六进制</code></pre><h4 id="文章字数统计插件（可选的）"><a href="#文章字数统计插件（可选的）" class="headerlink" title="文章字数统计插件（可选的）"></a>文章字数统计插件（可选的）</h4><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装<code>hexo-wordcount</code>插件。</p><p>安装命令如下：</p><pre><code>npm i --save hexo-wordcount</code></pre><p>然后只需在本主题下的 <code>_config.yml</code> 文件中，激活以下配置项即可：</p><p>wordCount:<br>  enable: false # 将这个值设置为 true 即可.<br>  postWordCount: true<br>  min2read: true<br>  totalCount: true</p><h4 id="添加-RSS-订阅支持（可选的）"><a href="#添加-RSS-订阅支持（可选的）" class="headerlink" title="添加 RSS 订阅支持（可选的）"></a>添加 RSS 订阅支持（可选的）</h4><p>本主题中还使用到了 <code>hexo-generator-feed</code> 的 Hexo 插件来做 <code>RSS</code>，安装命令如下：</p><p>在 Hexo 根目录下的 <code>_config.yml</code> 文件中，新增以下的配置项：</p><pre><code>feed:  type: atom  path: atom.xml  limit: 20  hub:  content:  content_limit: 140  content_limit_delim: ' '  order_by: -date</code></pre><p>执行 <code>hexo clean &amp;&amp; hexo g</code> 重新生成博客文件，然后在 public 文件夹中即可看到 atom.xml 文件，说明已经安装成功了。</p><h4 id="自定制修改"><a href="#自定制修改" class="headerlink" title="自定制修改"></a>自定制修改</h4><p>在本主题的 <code>_config.yml</code> 中可以修改部分自定义信息，有以下几个部分：</p><ul><li>菜单</li><li>我的梦想</li><li>首页的音乐播放器和视频播放器配置</li><li>是否显示推荐文章名称和按钮配置</li><li>favicon 和 Logo</li><li>个人信息</li><li>TOC 目录</li><li>文章打赏信息</li><li>复制文章内容时追加版权信息</li><li>MathJax</li><li>文章字数统计、阅读时长</li><li>点击页面的’爱心’效果</li><li>我的项目</li><li>我的技能</li><li>我的相册</li><li>Gitalk、Gitment、Valine 和 disqus 评论配置</li><li>不蒜子统计和谷歌分析（Google Analytics）<br>默认特色图的集合。当文章没有设置特色图时，本主题会根据文章标题的 hashcode 值取余，来选择展示对应的特色图</li></ul><p>如果本主题中的诸多功能和主题色彩你不满意，可以在主题中自定义修改，很多更自由的功能和细节点的修改难以在主题的 <code>_config.yml</code> 中完成，需要修改源代码才来完成。以下列出了可能有用的地方：</p><h4 id="修改主题颜色"><a href="#修改主题颜色" class="headerlink" title="修改主题颜色"></a>修改主题颜色</h4><p>在主题文件的 <code>/source/css/matery.cs</code>s 文件中，搜索 .bg-color 来修改背景颜色：</p><pre><code>/* 整体背景颜色，包括导航、移动端的导航、页尾、标签页等的背景颜色. */.bg-color {    background-image: linear-gradient(to right, #4cbf30 0%, #0f9d58 100%);}@-webkit-keyframes rainbow {   /* 动态切换背景颜色. */}@keyframes rainbow {    /* 动态切换背景颜色. */}</code></pre><h4 id="修改-banner-图和文章特色图"><a href="#修改-banner-图和文章特色图" class="headerlink" title="修改 banner 图和文章特色图"></a>修改 banner 图和文章特色图</h4><p>可以直接在 /source/medias/banner 文件夹中更换喜欢的 banner 图片，主题代码中是每天动态切换一张，只需 7 张即可。如果会 JavaScript 代码，可以修改成自己喜欢切换逻辑，如：随机切换等，banner 切换的代码位置在 <code>/layout/_partial/bg-cover-content.ejs</code> 文件的 <script></script> 代码中：</p><pre><code>$('.bg-cover').css('background-image', 'url(/medias/banner/' + new Date().getDay() + '.jpg)');</code></pre><p>在 <code>/source/medias/featureimages</code> 文件夹中默认有 24 张特色图片，你可以再增加或者减少，并需要在 _config.yml 做同步修改。</p><h4 id="文章-Front-matter-介绍"><a href="#文章-Front-matter-介绍" class="headerlink" title="文章 Front-matter 介绍"></a>文章 Front-matter 介绍</h4><h5 id="Front-matter-选项详解"><a href="#Front-matter-选项详解" class="headerlink" title="Front-matter 选项详解"></a>Front-matter 选项详解</h5><p>Front-matter 选项中的所有内容均为非必填的。但仍然建议至少填写 title 和 date 的值。</p><table><thead><tr><th align="center">配置选项</th><th align="center">默认值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">title</td><td align="center"><code>Markdown</code> 的文件标题</td><td align="center">文章标题，强烈建议填写此选项</td></tr><tr><td align="center">date</td><td align="center">文件创建时的日期时间</td><td align="center">发布时间，强烈建议填写此选项，且最好保证全局唯一</td></tr><tr><td align="center">author</td><td align="center">根 <code>_config.yml</code> 中的 <code>author</code></td><td align="center">文章作者</td></tr><tr><td align="center">img</td><td align="center"><code>featureImages</code> 中的某个值</td><td align="center">文章特征图</td></tr><tr><td align="center">top</td><td align="center">true</td><td align="center">推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td align="center">cover</td><td align="center">false</td><td align="center">表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td align="center">coverImg</td><td align="center">无</td><td align="center">表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td align="center">password</td><td align="center">无</td><td align="center">文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td align="center">toc</td><td align="center">true</td><td align="center">是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td align="center">mathjax</td><td align="center">false</td><td align="center">是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td align="center">summary</td><td align="center">无</td><td align="center">文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td align="center">categories</td><td align="center">无</td><td align="center">文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td align="center">tags</td><td align="center">无</td><td align="center">文章标签，一篇文章可以多个标签</td></tr></tbody></table><blockquote><p><strong>注意</strong>:</p><p>1.如果 <code>img</code> 属性不填写的话，文章特色图会根据文章标题的 <code>hashcode</code> 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图<strong>各有特色</strong>。</p><p>2.date<code>的值尽量保证每篇文章是唯一的，因为本主题中</code>Gitalk<code>和</code>Gitment<code>识别</code>id<code>是通过</code>date<code>的值来作为唯一标识的。</code> </p><p>3.<code>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的</code>_config.yml` 中激活了配置。有些在线的 SHA256 加密的地址，可供使用：<a href="http://tool.oschina.net/encrypt?type=2" target="_blank" rel="noopener">开源中国在线工具</a>、<a href="http://encode.chahuo.com/" target="_blank" rel="noopener">chahuo</a>、<a href="http://tool.chinaz.com/tools/hash.aspx" target="_blank" rel="noopener">站长工具</a>。</p></blockquote><p>以下为文章的 <code>Front-matter</code> 示例。</p><pre><code>---title: 基于Hexo的hexo-theme-matery主题搭建博客并优化date: 2020-08-17 20:12:14---</code></pre><h3 id="最全示例"><a href="#最全示例" class="headerlink" title="最全示例"></a>最全示例</h3><pre><code>---title: 基于Hexo的hexo-theme-matery主题搭建博客并优化date: 2020-08-17 20:12:14author: 悬钟！img: /source/images/xxx.jpgtop: truecover: truecoverImg: /images/1.jpgpassword: 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92toc: falsemathjax: falsesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: 工具tags:  - blog  - hexo---</code></pre><blockquote><p>注意：hexo配置文件中的url一定要输入正确的域名，插件是根据url生成站点地图的。</p></blockquote><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><h5 id="指令说明"><a href="#指令说明" class="headerlink" title="指令说明"></a>指令说明</h5><p><code>hexo server</code> #启动本地服务器，用于预览主题。Hexo 会监视文件变动并自动更新，除修改站点配置文件外,无须重启服务器,直接刷新网页即可生效。</p><p><code>hexo server -s</code> #以静态模式启动</p><p><code>hexo server -p 5000</code> #更改访问端口 (默认端口为4000，’ctrl + c’关闭server)</p><p><code>hexo server -i IP地址</code> #自定义 IP</p><p><code>hexo clean</code> #清除缓存 ,网页正常情况下可以忽略此条命令,执行该指令后,会删掉站点根目录下的public文件夹</p><p><code>hexo g</code> #生成静态网页 (执行 $ <code>hexo g</code>后会在站点根目录下生成public文件夹, hexo会将”/blog/source/“ 下面的.md后缀的文件编译为.html后缀的文件,存放在”/blog/public/ “ 路径下)</p><p><code>hexo d</code> #自动生成网站静态文件，并将本地数据部署到设定的仓库(如github)</p><p><code>hexo init</code> 文件夹名称 #初始化XX文件夹名称</p><p><code>npm update hexo -g</code>#升级</p><p><code>npm install hexo -g</code> #安装</p><p><code>node-v</code> #查看node.js版本号</p><p><code>npm -v</code> #查看npm版本号</p><p><code>git --version</code> #查看git版本号</p><p><code>hexo -v</code> #查看hexo版本号</p><h3 id="简写指令"><a href="#简写指令" class="headerlink" title="简写指令"></a>简写指令</h3><pre><code>hexo n "我的第一篇文章"` 等价于 `hexo new "我的第一篇文章"` 还等价于 `hexo new post "我的第一篇文章"hexo p` 等价于 `hexo publishhexo g` 等价于 `hexo generatehexo s`等价于 `hexo serverhexo d` 等价于 `hexo deployhexo g -d`等价于`hexo generate --deploy</code></pre><p>注: <code>hexo clean</code> 没有 简写, <code>git --version</code> 没有简写</p><h5 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h5><ol><li><strong>通过hexo g -d部署时报Error: Spawn failed错误:</strong></li></ol><blockquote><p>这是由于git本地记录的提交版本号与github上不一致导致的，通过<code>git reset --hard commitCode</code>即可解决。</p></blockquote><ul><li>检查本地最近提交记录，获取最后一次提交记录的更新时间及标识，如<code>280a7fdd46fcfd7d34e652aec15523dcd247fac8</code></li></ul><pre><code>cd .deploy_gitcat .git/logs/HEAD</code></pre><ul><li><p>获取github pages服务所关联分支的最近一次提交记录，获取更新时间及标识。地址一般为：<code>https://github.com/用户名/仓库名/commits/分支名</code>，如<code>https://github.com/lxl80/blog/commits/gh-pages</code></p></li><li><p>如果发现提交最新的提交时间/标识不一致，通过以下命令即可解决:</p><pre class=" language-bash"><code class="language-bash">  <span class="token function">git</span> reset --hard f085038efdf79546c09641d37b2a2429c1ae8e60 <span class="token comment" spellcheck="true">#github上最新的提交标识</span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TYPORA的使用手册</title>
      <link href="/posts/34858.html"/>
      <url>/posts/34858.html</url>
      
        <content type="html"><![CDATA[<h1 id="TYPORA的使用手册"><a href="#TYPORA的使用手册" class="headerlink" title="TYPORA的使用手册"></a><a href="https://blog.csdn.net/SIMBA1949/article/details/79001226" target="_blank" rel="noopener">TYPORA的使用手册</a></h1><p>版权声明：本文为博主原创文章，遵循<a href="http://creativecommons.org/licenses/by-sa/4.0/" target="_blank" rel="noopener"> CC 4.0 by-sa </a>版权协议，转载请附上原文出处链接和本声明。本文链接：<a href="https://blog.csdn.net/SIMBA1949/article/details/79001226" target="_blank" rel="noopener">https://blog.csdn.net/SIMBA1949/article/details/79001226</a></p><p>[TOC]</p><p>Typora可以根据当前文档的标题层级，自动生成并显示大纲，窗口的右下角并有字数显示。</p><h2 id="标题的使用"><a href="#标题的使用" class="headerlink" title="标题的使用"></a>标题的使用</h2><h3 id="标题的使用格式"><a href="#标题的使用格式" class="headerlink" title="标题的使用格式"></a>标题的使用格式</h3><p># 一阶标题 或者快捷键Ctrl+1</p><p>##二阶标题 或者快捷键Ctrl+2</p><p>###三阶标题 或者快捷键Ctrl+3</p><p>####四阶标题 或者快捷键Ctrl+4</p><p>#####五阶标题 或者快捷键Ctrl+5</p><p>######六阶标题 或者快捷键Ctrl+6</p><h3 id="标题Typora显示形式是"><a href="#标题Typora显示形式是" class="headerlink" title="标题Typora显示形式是"></a>标题Typora显示形式是</h3><p><img src="https://img-blog.csdn.net/20180108112546034?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvU0lNQkExOTQ5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><h2 id="文本居中"><a href="#文本居中" class="headerlink" title="文本居中"></a>文本居中</h2><h3 id="文本居中使用格式"><a href="#文本居中使用格式" class="headerlink" title="文本居中使用格式"></a>文本居中使用格式</h3><pre><code>\&lt;center\&gt;这是要居中的文本内容\&lt;/center\&gt;1</code></pre><h3 id="文本居中在Typora中显示形式是"><a href="#文本居中在Typora中显示形式是" class="headerlink" title="文本居中在Typora中显示形式是"></a>文本居中在Typora中显示形式是</h3><p>这是要居中的文本</p><p>注：Typora目前并不会直接预览居中效果——相应的效果只有输出文本的时候才会显现。</p><h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><h3 id="下划线使用格式"><a href="#下划线使用格式" class="headerlink" title="下划线使用格式"></a>下划线使用格式</h3><p>\下划线的内容&lt;\u&gt; 或者快捷键Ctrl+U</p><h3 id="下划线在Typora显示形式是"><a href="#下划线在Typora显示形式是" class="headerlink" title="下划线在Typora显示形式是"></a>下划线在Typora显示形式是</h3><p>这就是我亲测的下划线</p><h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><h3 id="删除线使用格式"><a href="#删除线使用格式" class="headerlink" title="删除线使用格式"></a>删除线使用格式</h3><p>~~删除线的内容~~</p><h3 id="删除线在Typora显示形式是"><a href="#删除线在Typora显示形式是" class="headerlink" title="删除线在Typora显示形式是"></a>删除线在Typora显示形式是</h3><p><del>这是删除线的内容</del></p><h2 id="字体加粗"><a href="#字体加粗" class="headerlink" title="字体加粗"></a>字体加粗</h2><h3 id="字体加粗使用格式"><a href="#字体加粗使用格式" class="headerlink" title="字体加粗使用格式"></a>字体加粗使用格式</h3><p><strong>加粗字体</strong> 或者快捷键Ctrl+B</p><h3 id="字体加粗在Typora显示形式是"><a href="#字体加粗在Typora显示形式是" class="headerlink" title="字体加粗在Typora显示形式是"></a>字体加粗在Typora显示形式是</h3><p><strong>加粗字体 This is a bold font</strong></p><h2 id="字体倾斜"><a href="#字体倾斜" class="headerlink" title="字体倾斜"></a>字体倾斜</h2><h3 id="字体倾斜使用格式"><a href="#字体倾斜使用格式" class="headerlink" title="字体倾斜使用格式"></a>字体倾斜使用格式</h3><p><em>字体倾斜了</em> 或者快捷键Ctrl+I</p><h3 id="字体倾斜在Typora的显示形式"><a href="#字体倾斜在Typora的显示形式" class="headerlink" title="字体倾斜在Typora的显示形式"></a>字体倾斜在Typora的显示形式</h3><p><em>字体倾斜了 This is a alanted font</em></p><h2 id="图片的插入"><a href="#图片的插入" class="headerlink" title="图片的插入"></a>图片的插入</h2><p>最简单粗暴的图片插入方式如图：</p><p><img src="https://img-blog.csdn.net/20180108113042939?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvU0lNQkExOTQ5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>图片来源<a href="http://support.typora.io/Images" target="_blank" rel="noopener">http://support.typora.io/Images</a></p><h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><h3 id="超链接使用格式"><a href="#超链接使用格式" class="headerlink" title="超链接使用格式"></a>超链接使用格式</h3><p>第一种：[<a href="http://www.simba.com\](http://www.simba.com/)" target="_blank" rel="noopener">http://www.simba.com\](http://www.simba.com/)</a></p><p>第二种：快捷键Ctrl+K</p><p><a href="超链接地址">自定义内容</a> 例如：<a href="www.baidu.com">百度一下</a></p><h3 id="超链接在Typora显示形式是：（必须以http开头）"><a href="#超链接在Typora显示形式是：（必须以http开头）" class="headerlink" title="超链接在Typora显示形式是：（必须以http开头）"></a>超链接在Typora显示形式是：（必须以http开头）</h3><p>第一种：<a href="http://www.simba.com/" target="_blank" rel="noopener">http://www.simba.com</a></p><p>第二种：<a href="https://blog.csdn.net/SIMBA1949/article/details/www.baidu.com" target="_blank" rel="noopener">百度一下</a></p><p>按住Ctrl键+点击上面链接就可以直接访问该链接</p><h2 id="代码区域"><a href="#代码区域" class="headerlink" title="代码区域"></a>代码区域</h2><p>Typora支持对多种语言的代码区域进行<strong>语法高亮</strong>。这些语言可以说是<strong>涵盖了绝大部分经常使用的编程语言</strong>，包括C++，Python，MATLAB，甚至包含spreadsheet（也就是Excel电子表格）。用Typora记编程笔记，看起来一清二楚。如果设置代码语言为flow，那么可以直接画出一个流程图；还可以使用相应的方法画出时序图等图表。</p><h3 id="代码区域的使用格式"><a href="#代码区域的使用格式" class="headerlink" title="代码区域的使用格式"></a>代码区域的使用格式</h3><p><code></code> <code>+编程语言：例如java代码：</code> <code></code>java</p><h3 id="代码区域在typora中显示形式"><a href="#代码区域在typora中显示形式" class="headerlink" title="代码区域在typora中显示形式"></a>代码区域在typora中显示形式</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">simba</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我爱你，中国"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token number">12345</span></code></pre><h2 id="表格的使用"><a href="#表格的使用" class="headerlink" title="表格的使用"></a>表格的使用</h2><h3 id="表格的二种使用格式"><a href="#表格的二种使用格式" class="headerlink" title="表格的二种使用格式"></a>表格的二种使用格式</h3><p>第一种：快捷键<strong>Ctrl+T</strong>，会自动跳出设置行和列的设置框，如下图</p><p><img src="https://img-blog.csdn.net/20180108113324218?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvU0lNQkExOTQ5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p><p>第二种：</p><p>|国籍|省份|市区|</p><h3 id="表格在typora中显示形式"><a href="#表格在typora中显示形式" class="headerlink" title="表格在typora中显示形式"></a>表格在typora中显示形式</h3><p>第一种：</p><table><thead><tr><th>国籍</th><th>省份</th><th>市区</th></tr></thead><tbody><tr><td>中国</td><td>北京</td><td>东城区</td></tr></tbody></table><p>第二种：</p><table><thead><tr><th>国籍</th><th>省份</th><th>市区</th></tr></thead><tbody><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h2><h3 id="任务列表使用格式"><a href="#任务列表使用格式" class="headerlink" title="任务列表使用格式"></a>任务列表使用格式</h3><p>- [ ] 文字 （注：注意用空格隔开）</p><h3 id="任务列表在typora中的显示形式"><a href="#任务列表在typora中的显示形式" class="headerlink" title="任务列表在typora中的显示形式"></a>任务列表在typora中的显示形式</h3><ul><li><input checked="" disabled="" type="checkbox"> JAVA</li><li><input disabled="" type="checkbox"> C</li><li><input disabled="" type="checkbox"> C++</li><li><input disabled="" type="checkbox"> Python</li></ul><p>（注意：在CSDN博客上未显示，但是在Typora上显示如下图：<br><img src="https://img-blog.csdn.net/20180108114342465?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvU0lNQkExOTQ5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>）</p><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><h3 id="列表的使用格式"><a href="#列表的使用格式" class="headerlink" title="列表的使用格式"></a>列表的使用格式</h3><p>+ 、- 、* 创建无序列，任意数字开始+空格创建有序列表</p><h3 id="列表在typora中的显示形式"><a href="#列表在typora中的显示形式" class="headerlink" title="列表在typora中的显示形式"></a>列表在typora中的显示形式</h3><ul><li>java</li><li>C</li><li>C++</li><li>Python</li></ul><h2 id="数学表达式"><a href="#数学表达式" class="headerlink" title="数学表达式"></a>数学表达式</h2><p>Typora支持加入用LaTeX写成的数学公式，并且在软件界面下用MathJax直接渲染。</p><p>数学公式分为两种：</p><p>一种是行内公式(inline math)，可以在偏好设置中单独打开，由一个美元符号$将公式围起来；</p><p>一种是行外公式，直接按<strong>Ctrl+Shift+M</strong>；</p><p>注：上标和下标可以使用数学表达式来获取</p><h2 id="水平分割线"><a href="#水平分割线" class="headerlink" title="水平分割线"></a>水平分割线</h2><h3 id="水平分割线的使用格式"><a href="#水平分割线的使用格式" class="headerlink" title="水平分割线的使用格式"></a>水平分割线的使用格式</h3><p>***或者- - -</p><h3 id="水平分割线在typora中显示形式"><a href="#水平分割线在typora中显示形式" class="headerlink" title="水平分割线在typora中显示形式"></a>水平分割线在typora中显示形式</h3><hr><hr><p>（注意：在CSDN博客上未显示，但是在Typora上显示如下图：<br><img src="https://img-blog.csdn.net/20180108114442472?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvU0lNQkExOTQ5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>）</p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><h3 id="引用的使用格式"><a href="#引用的使用格式" class="headerlink" title="引用的使用格式"></a>引用的使用格式</h3><p>&gt;+空格</p><h3 id="引用在typora中的显示形式"><a href="#引用在typora中的显示形式" class="headerlink" title="引用在typora中的显示形式"></a>引用在typora中的显示形式</h3><blockquote><p>  与天奋斗，其乐无穷！与地奋斗，其乐无穷！与人奋斗，其乐无穷！</p><p>   ———— 《毛泽东选集》之《奋斗自勉》（毛泽东1917年）</p></blockquote><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><h3 id="注释的使用格式"><a href="#注释的使用格式" class="headerlink" title="注释的使用格式"></a>注释的使用格式</h3><p>要添加注释的文字[1](<a href="https://blog.csdn.net/SIMBA1949/article/details/79001226#fn" target="_blank" rel="noopener">https://blog.csdn.net/SIMBA1949/article/details/79001226#fn</a>:)</p><h3 id="注释在typora中显示形式"><a href="#注释在typora中显示形式" class="headerlink" title="注释在typora中显示形式"></a>注释在typora中显示形式</h3><p>中国<a href="https://blog.csdn.net/SIMBA1949/article/details/79001226#fn:" target="_blank" rel="noopener">2</a></p><h2 id="表情"><a href="#表情" class="headerlink" title="表情"></a>表情</h2><h3 id="表情的使用格式"><a href="#表情的使用格式" class="headerlink" title="表情的使用格式"></a>表情的使用格式</h3><p>:单词</p><h3 id="表情在typora中的显示形式"><a href="#表情在typora中的显示形式" class="headerlink" title="表情在typora中的显示形式"></a>表情在typora中的显示形式</h3><p><span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8">😃</span><br>（注意：在CSDN博客上未显示，但是在Typora上显示如下图：<br><img src="https://img-blog.csdn.net/20180108114531939?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvU0lNQkExOTQ5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"><br>）</p><h2 id="Typora快捷键"><a href="#Typora快捷键" class="headerlink" title="Typora快捷键"></a>Typora快捷键</h2><table><thead><tr><th>快捷键</th><th>作用</th><th>快捷键</th><th>作用</th></tr></thead><tbody><tr><td>Ctrl+1</td><td>一阶标题</td><td>Ctrl+B</td><td>字体加粗</td></tr><tr><td>Ctrl+2</td><td>二阶标题</td><td>Ctrl+I</td><td>字体倾斜</td></tr><tr><td>Ctrl+3</td><td>三阶标题</td><td>Ctrl+U</td><td>下划线</td></tr><tr><td>Ctrl+4</td><td>四阶标题</td><td>Ctrl+Home</td><td>返回Typora顶部</td></tr><tr><td>Ctrl+5</td><td>五阶标题</td><td>Ctrl+End</td><td>返回Typora底部</td></tr><tr><td>Ctrl+6</td><td>六阶标题</td><td>Ctrl+T</td><td>创建表格</td></tr><tr><td>Ctrl+L</td><td>选中某句话</td><td>Ctrl+K</td><td>创建超链接</td></tr><tr><td>Ctrl+D</td><td>选中某个单词</td><td>Ctrl+F</td><td>搜索</td></tr><tr><td>Ctrl+E</td><td>选中相同格式的文字</td><td>Ctrl+H</td><td>搜索并替换</td></tr><tr><td>Alt+Shift+5</td><td>删除线</td><td>Ctrl+Shift+I</td><td>插入图片</td></tr></tbody></table><p><em>如有侵权，联系 <a href="mailto:2025685938@qq.com" target="_blank" rel="noopener">2025685938@qq.com</a> 删除</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 渗透测试笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11.Linux命令（其他命令）</title>
      <link href="/posts/5204.html"/>
      <url>/posts/5204.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux命令（其他命令）"><a href="#Linux命令（其他命令）" class="headerlink" title="Linux命令（其他命令）"></a>Linux命令（其他命令）</h1><h2 id="1-bc"><a href="#1-bc" class="headerlink" title="1.bc"></a>1.bc</h2><p>​        bc 命令是任意精度计算器语言，通常在linux下当计算器用。</p><p>它类似基本的计算器, 使用这个计算器可以做基本的数学运算。</p><p><strong>常用的运算：</strong></p><ul><li>+ 加法</li><li>- 减法</li><li>* 乘法</li><li>/ 除法</li><li>^ 指数</li><li>% 余数</li></ul><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre><code>bc(选项)(参数)</code></pre><p><strong>选项值</strong></p><ul><li>-i：强制进入交互式模式；</li><li>-l：定义使用的标准数学库</li><li>； -w：对POSIX bc的扩展给出警告信息；</li><li>-q：不打印正常的GNU bc环境信息；</li><li>-v：显示指令版本信息；</li><li>-h：显示指令的帮助信息。</li></ul><p><strong>参数</strong></p><p>文件：指定包含计算任务的文件。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><pre><code>$ bcbc 1.06.95Copyright 1991-1994, 1997, 1998, 2000, 2004, 2006 Free Software Foundation, Inc.This is free software with ABSOLUTELY NO WARRANTY.For details type `warranty'.2+355-232+3*15</code></pre><p>输入 quit 退出。</p><p><strong>通过管道符</strong></p><pre><code>$ echo "15+5" | bc20</code></pre><p>scale=2 设小数位，2 代表保留两位:</p><pre><code>$ echo 'scale=2; (2.777 - 1.4744)/1' | bc1.30</code></pre><p>bc 除了 scale 来设定小数位之外，还有 ibase 和 obase 来其它进制的运算:</p><pre><code>$ echo "ibase=2;111" |bc7</code></pre><p><strong>进制转换</strong></p><pre><code>#!/bin/bashabc=192 echo "obase=2;$abc" | bc&lt;pre&gt;&lt;p&gt;执行结果为：11000000，这是用bc将十进制转换成二进制。&lt;/p&gt;&lt;pre&gt;#!/bin/bash abc=11000000 echo "obase=10;ibase=2;$abc" | bc</code></pre><p>执行结果为：192，这是用bc将二进制转换为十进制。</p><p>计算平方和平方根：</p><pre><code>$ echo "10^10" | bc 10000000000$ echo "sqrt(100)" | bc10</code></pre><h2 id="2-tail"><a href="#2-tail" class="headerlink" title="2.tail"></a>2.tail</h2><p>​        tail 命令可用于查看文件的内容，有一个常用的参数 <strong>-f</strong> 常用于查阅正在改变的日志文件。</p><p><strong>tail -f filename</strong> 会把 filename 文件里的最尾部的内容显示在屏幕上，并且不断刷新，只要 filename 更新就可以看到最新的文件内容。</p><h3 id="命令格式："><a href="#命令格式：" class="headerlink" title="命令格式："></a><strong>命令格式：</strong></h3><pre><code>tail [参数] [文件]  </code></pre><p><strong>参数：</strong></p><ul><li>-f 循环读取</li><li>-q 不显示处理信息</li><li>-v 显示详细的处理信息</li><li>-c&lt;数目&gt; 显示的字节数</li><li>-n&lt;行数&gt; 显示文件的尾部 n 行内容</li><li>–pid=PID 与-f合用,表示在进程ID,PID死掉之后结束</li><li>-q, –quiet, –silent 从不输出给出文件名的首部</li><li>-s, –sleep-interval=S 与-f合用,表示在每次反复的间隔休眠S秒</li></ul><p><strong>实例</strong></p><p>要显示 notes.log 文件的最后 10 行，请输入以下命令：</p><pre><code>tail notes.log</code></pre><p>要跟踪名为 notes.log 的文件的增长情况，请输入以下命令：</p><pre><code>tail -f notes.log</code></pre><p>此命令显示 notes.log 文件的最后 10 行。当将某些行添加至 notes.log 文件时，tail 命令会继续显示这些行。 显示一直继续，直到您按下（Ctrl-C）组合键停止显示。</p><p>显示文件 notes.log 的内容，从第 20 行至文件末尾:</p><pre><code>tail +20 notes.log</code></pre><p>显示文件 notes.log 的最后 10 个字符:</p><pre><code>tail -c 10 notes.log</code></pre><h2 id="3-xargs"><a href="#3-xargs" class="headerlink" title="3.xargs"></a>3.xargs</h2><p>​        xargs 是给命令传递参数的一个过滤器，也是组合多个命令的一个工具。</p><p>xargs 可以将管道或标准输入（stdin）数据转换成命令行参数，也能够从文件的输出中读取数据。</p><p>xargs 也可以将单行或多行文本输入转换为其他格式，例如多行变单行，单行变多行。</p><p>xargs 默认的命令是 echo，这意味着通过管道传递给 xargs 的输入将会包含换行和空白，不过通过 xargs 的处理，换行和空白将被空格取代。</p><p>xargs 是一个强有力的命令，它能够捕获一个命令的输出，然后传递给另外一个命令。</p><p>之所以能用到这个命令，关键是由于很多命令不支持|管道来传递参数，而日常工作中有有这个必要，所以就有了 xargs 命令，例如：</p><pre><code>find /sbin -perm +700 |ls -l       #这个命令是错误的find /sbin -perm +700 |xargs ls -l   #这样才是正确的</code></pre><p>xargs 一般是和管道一起使用。</p><p><strong>命令格式：</strong></p><pre><code>somecommand |xargs -item  command</code></pre><p><strong>参数：</strong></p><ul><li>-a file 从文件中读入作为sdtin</li><li>-e flag ，注意有的时候可能会是-E，flag必须是一个以空格分隔的标志，当xargs分析到含有flag这个标志的时候就停止。</li><li>-p 当每次执行一个argument的时候询问一次用户。</li><li>-n num 后面加次数，表示命令在执行的时候一次用的argument的个数，默认是用所有的。</li><li>-t 表示先打印命令，然后再执行。</li><li>-i 或者是-I，这得看linux支持了，将xargs的每项名称，一般是一行一行赋值给 {}，可以用 {} 代替。</li><li>-r no-run-if-empty 当xargs的输入为空的时候则停止xargs，不用再去执行了。</li><li>-s num 命令行的最大字符数，指的是 xargs 后面那个命令的最大命令行字符数。</li><li>-L num 从标准输入一次读取 num 行送给 command 命令。</li><li>-l 同 -L。</li><li>-d delim 分隔符，默认的xargs分隔符是回车，argument的分隔符是空格，这里修改的是xargs的分隔符。</li><li>-x exit的意思，主要是配合-s使用。。</li><li>-P 修改最大的进程数，默认是1，为0时候为as many as it can ，这个例子我没有想到，应该平时都用不到的吧。</li></ul><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>xargs 用作替换工具，读取输入数据重新格式化后输出。</p><p>定义一个测试文件，内有多行文本数据：</p><pre><code># cat test.txta b c d e f gh i j k l m no p qr s tu v w x y z</code></pre><p>多行输入单行输出：</p><pre><code># cat test.txt | xargsa b c d e f g h i j k l m n o p q r s t u v w x y z</code></pre><p>-n 选项多行输出：</p><pre><code># cat test.txt | xargs -n3a b cd e fg h ij k lm n op q rs t uv w xy z</code></pre><p>-d 选项可以自定义一个定界符：</p><pre><code># echo "nameXnameXnameXname" | xargs -dXname name name name</code></pre><p>结合 -n 选项使用：</p><pre><code># echo "nameXnameXnameXname" | xargs -dX -n2name namename name</code></pre><p>读取 stdin，将格式化后的参数传递给命令</p><p>假设一个命令为 sk.sh 和一个保存参数的文件 arg.txt：</p><pre><code>#!/bin/bash#sk.sh命令内容，打印出所有参数。echo $*</code></pre><p>arg.txt文件内容：</p><pre><code># cat arg.txtaaabbbccc</code></pre><p>xargs 的一个选项 -I，使用 -I 指定一个替换字符串 {}，这个字符串在 xargs 扩展时会被替换掉，当 -I 与 xargs 结合使用，每一个参数命令都会被执行一次：</p><pre><code># cat arg.txt | xargs -I {} ./sk.sh -p {} -l-p aaa -l-p bbb -l-p ccc -l</code></pre><p>复制所有图片文件到 /data/images 目录下：</p><pre><code>ls *.jpg | xargs -n1 -I {} cp {} /data/images</code></pre><p>xargs 结合 find 使用</p><p>用 rm 删除太多的文件时候，可能得到一个错误信息：<strong>/bin/rm Argument list too long.</strong> 用 xargs 去避免这个问题：</p><pre><code>find . -type f -name "*.log" -print0 | xargs -0 rm -f</code></pre><p>xargs -0 将 \0 作为定界符。</p><p>统计一个源代码目录中所有 php 文件的行数：</p><pre><code>find . -type f -name "*.php" -print0 | xargs -0 wc -l</code></pre><p>查找所有的 jpg 文件，并且压缩它们：</p><pre><code>find . -type f -name "*.jpg" -print | xargs tar -czvf images.tar.gz</code></pre><p>xargs 其他应用</p><p>假如你有一个文件包含了很多你希望下载的 URL，你能够使用 xargs下载所有链接：</p><pre><code># cat url-list.txt | xargs wget -c</code></pre><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><ul><li><a href="https://www.runoob.com/linux/linux-command-manual.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-command-manual.html</a></li></ul><p><em>如有侵权，联系 <a href="mailto:2025685938@qq.com" target="_blank" rel="noopener">2025685938@qq.com</a> 删除</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10.Linux命令（设备管理）</title>
      <link href="/posts/19804.html"/>
      <url>/posts/19804.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux命令（设备管理）"><a href="#Linux命令（设备管理）" class="headerlink" title="Linux命令（设备管理）"></a>Linux命令（设备管理）</h1><h2 id="1-setleds"><a href="#1-setleds" class="headerlink" title="1.setleds"></a>1.setleds</h2><p>setleds命令用来设定键盘上方三个 LED 的状态。在 Linux 中，每一个虚拟主控台都有独立的设定。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre><code>setleds [-v] [-L] [-D] [-F] [{+|-}num] [{+|-}caps] [{+|-}scroll]</code></pre><p><strong>参数</strong>：</p><ul><li>-F：预设的选项，设定虚拟主控台的状态。</li><li>-D：除了改变虚拟主控台的状态外，还改变预设的状态。</li><li>-L：不改变虚拟主控台的状态，但直接改变 LED 显示的状态。这会使得 LDE 显示和目前虚拟主控台的状态不符合。我们可以在稍后用 -L 且不含其它选项的 setleds 命令回复正常状态。</li><li>-num +num：将数字键打开或关闭。</li><li>-caps +caps：把大小写键打开或关闭。</li><li>-scroll +scroll：把选项键打开或关闭。</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>将数字键打开，其馀二个灯关闭。</p><pre><code># setleds +num -caps -scroll</code></pre><h2 id="2-loadkeys"><a href="#2-loadkeys" class="headerlink" title="2.loadkeys"></a>2.loadkeys</h2><p>loadkeys命令可以根据一个键盘定义表改变 linux 键盘驱动程序转译键盘输入过程。详细的说明请参考 dumpkeys。</p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><pre><code>loadkeys [ -d --default ] [ -h --help ] [ -q --quiet ] [ -v --verbose [ -v --verbose ]...] [ -m --mktable ] [ -c --clearcompose ] [ -s --clearstrings ] [ filename... ]</code></pre><p><strong>参数</strong>:</p><ul><li>-v –verbose：印出详细的资料，你可以重复以增加详细度。</li><li>-q –quiet：不要显示任何讯息。</li><li>-c –clearcompose：清除所有 composite 定义。</li><li>-s –clearstrings：将定串定义表清除。</li></ul><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><pre><code>定义按键组合&lt;pre&gt;# loadkeys control alt keycode 88 = F80 //现确定键代码string F80="runoob.com" //给变变量设定值//按下 Ctrl + D键 确定输入//效果：按下 Ctrl +Alt + F12 输出 Lx138.Com# dumpkeys --funcs-only //显示功能键……省略部分结果string F3 = "\033[[C"string F4 = "\033[[D"string F5 = "\033[[E"string F6 = "\033[17~"string F7 = "\033[18~"string F8 = "\033[19~"string F9 = "\033[20~"string F10 = "\033[21~"string F11 = "\033[23~"string F12 = "\033[24~"string F13 = "\033[25~"string F14 = "\033[26~"string F15 = "\033[28~"string F16 = "\033[29~"string F17 = "\033[31~"string F18 = "\033[32~"string F19 = "\033[33~"string F20 = "\033[34~"string Find = "\033[1~"string Insert = "\033[2~"string Remove = "\033[3~"string Select = "\033[4~"string Prior = "\033[5~"string Next = "\033[6~"string Macro = "\033[M"string Pause = "\033[P"string F80 = "runoob.com"</code></pre><h2 id="3-rdev"><a href="#3-rdev" class="headerlink" title="3.rdev"></a>3.rdev</h2><p>rdev命令可以用来查询/设置内核映像文件的根设备，RAM 磁盘大小或视频模式。</p><p>不带任何参数的 rdev 命令将输出当前根文件系统的 /etc/mtab 文件行。不带任何参数的 ramsize, vidmode, 和 rootflags 将显示帮助信息。</p><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><pre><code>rdev [-rsvh ] [-o offset ] [ image [value [ offset ] ] ]&lt;/p&gt;</code></pre><p>但是随著使用者想要设定的参数的不同，底下的方式也是一样：</p><pre><code>rdev [ -o offset ] [ image [ root_device [ offset ] ] ]swapdev [ -o offset ] [ image [ swap_device [ offset ] ] ]ramsize [ -o offset ] [ image [ size [ offset ] ] ]videomode [ -o offset ] [ image [ mode [ offset ] ] ]rootflags [ -o offset ] [ image [ flags [ offset ] ] ]</code></pre><p><strong>参数</strong>：</p><ul><li>-r： 使得 rdev 作为 ramsize 运行。</li><li>-R： 使得 rdev 作为 rootflags 运行。</li><li>-v： 使得 rdev 作为 vidmode 运行。</li><li>-h： 提供帮助。</li></ul><h2 id="4-dumpkeys"><a href="#4-dumpkeys" class="headerlink" title="4.dumpkeys"></a>4.dumpkeys</h2><p>dumpkeys命令用于显示键盘映射表，输出的内容可以被loadkeys命令识别,改变映射关系。</p><h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><pre><code>dumpkey[选择参数]</code></pre><p><strong>参数说明:</strong></p><ul><li>-i 驱动信息(键码范围、数量、状态键)</li><li>-l 详细驱动信息</li><li>-n 十六进制显示</li><li>-f 显示全部信息</li><li>-1 分行显示按键组合</li><li>-S 设定输出格式(0：预设 1：完整 2：分行 3简单)</li><li>–funcs-only 功能键信息</li><li>–keys-only 键组合信息</li><li>–compose-only 普通键信息</li></ul><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><p>显示功能键信息</p><pre><code># dumpkeys --funcs-only string F1 = "\033[[A"string F2 = "\033[[B"string F3 = "\033[[C"string F4 = "\033[[D"string F5 = "\033[[E"string F6 = "\033[17~"string F7 = "\033[18~"string F8 = "\033[19~"string F9 = "\033[20~"string F10 = "\033[21~"string F11 = "\033[23~"string F12 = "\033[24~"string F13 = "\033[25~"string F14 = "\033[26~"string F15 = "\033[28~"string F16 = "\033[29~"string F17 = "\033[31~"string F18 = "\033[32~"string F19 = "\033[33~"string F20 = "\033[34~"string Find = "\033[1~"string Insert = "\033[2~"string Remove = "\033[3~"string Select = "\033[4~"string Prior = "\033[5~"string Next = "\033[6~"string Macro = "\033[M"string Pause = "\033[P"root@snail-hnlinux:~# </code></pre><p>显示驱动信息</p><pre><code># dumpkeys -i键值码范围被内核支持: 1 - 255可绑定到键值的动作最大值: 256实际使用的键值数: 128其中 121 已动态分配被内核支持的动作码值范围0x0000 - 0x00ff0x0100 - 0x01ff0x0200 - 0x02130x0300 - 0x03130x0400 - 0x04050x0500 - 0x05ff0x0600 - 0x06030x0700 - 0x07080x0800 - 0x08ff0x0900 - 0x09190x0a00 - 0x0a080x0b00 - 0x0bff0x0c00 - 0x0c080x0d00 - 0x0dff0x0e00 - 0x0e0a内核支持的功能键数：256编写定义的最大nr: 256实际使用的编写定义nr: 68</code></pre><h2 id="5-MAKEDEV命令"><a href="#5-MAKEDEV命令" class="headerlink" title="5.MAKEDEV命令"></a>5.MAKEDEV命令</h2><p>MAKEDEV命令用于新增 /dev/ 下的装置档案，多数分区已经将所有的档案都产生，故一般而言不太会需要用到这个命令。</p><h3 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h3><pre><code>MAKEDEV -VMAKEDEV [ -n ] [ -v ] updateMAKEDEV [ -n ] [ -v ] [ -d ] device ...</code></pre><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><ul><li><a href="https://www.runoob.com/linux/linux-command-manual.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-command-manual.html</a></li></ul><p><em>如有侵权，联系 <a href="mailto:2025685938@qq.com" target="_blank" rel="noopener">2025685938@qq.com</a> 删除</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.Linux命令（备份压缩）</title>
      <link href="/posts/45949.html"/>
      <url>/posts/45949.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux命令（备份压缩）"><a href="#Linux命令（备份压缩）" class="headerlink" title="Linux命令（备份压缩）"></a>Linux命令（备份压缩）</h1><h2 id="1-ar"><a href="#1-ar" class="headerlink" title="1.ar"></a>1.ar</h2><p>ar命令用于建立或修改备存文件，或是从备存文件中抽取文件。</p><p>ar可让您集合许多文件，成为单一的备存文件。在备存文件中，所有成员文件皆保有原来的属性与权限。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre><code>ar[-dmpqrtx][cfosSuvV][a&lt;成员文件&gt;][b&lt;成员文件&gt;][i&lt;成员文件&gt;][备存文件][成员文件]</code></pre><p><strong>参数</strong>：</p><p><strong>必要参数</strong>：</p><ul><li>-d 　删除备存文件中的成员文件。</li><li>-m 　变更成员文件在备存文件中的次序。</li><li>-p 　显示备存文件中的成员文件内容。</li><li>-q 　将文件附加在备存文件末端。</li><li>-r 　将文件插入备存文件中。</li><li>-t 　显示备存文件中所包含的文件。</li><li>-x 　自备存文件中取出成员文件。</li></ul><p><strong>选项参数</strong>：</p><ul><li>a&lt;成员文件&gt; 　将文件插入备存文件中指定的成员文件之后。</li><li>b&lt;成员文件&gt; 　将文件插入备存文件中指定的成员文件之前。</li><li>c 　建立备存文件。</li><li>f 　为避免过长的文件名不兼容于其他系统的ar指令指令，因此可利用此参数，截掉要放入备存文件中过长的成员文件名称。</li><li>i&lt;成员文件&gt; 　将文件插入备存文件中指定的成员文件之前。</li><li>o 　保留备存文件中文件的日期。</li><li>s 　若备存文件中包含了对象模式，可利用此参数建立备存文件的符号表。</li><li>S 　不产生符号表。</li><li>u 　只将日期较新文件插入备存文件中。</li><li>v 　程序执行时显示详细的信息。</li><li>V 　显示版本信息。</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>打包文件</p><pre><code>[root@runoob.com ~]# ls   //显示当前目录文件   a.c    b.c d.c   install.log      qteanaconda-ks.cfg c.c Desktop [root@runoob.com ~]# ar rv one.bak a.c b.c //打包 a.c b.c文件 ar: 正在创建 one.baka - a.ca - b.c[root@runoob.com ~]# </code></pre><p>打包多个文件</p><pre><code>[root@runoob.com ~]# ar rv two.bak *.c  //打包以.c结尾的文件  ar: 正在创建 two.baka - a.ca - b.ca - c.ca - d.c[root@runoob.com ~]# </code></pre><p>显示打包文件的内容</p><pre><code>[root@runoob.com ~]# ar t two.bak    a.cb.cc.cd.c[root@runoob.com ~]# </code></pre><p>删除打包文件的成员文件</p><pre><code>[root@runoob.com ~]# ar d two.bak a.c b.c c.c  [root@runoob.com ~]# ar t two.bak       d.c</code></pre><h2 id="2-bunzip2"><a href="#2-bunzip2" class="headerlink" title="2.bunzip2"></a>2.bunzip2</h2><p>bunzip2命令是.bz2文件的解压缩程序。</p><p>bunzip2可解压缩.bz2格式的压缩文件。bunzip2实际上是bzip2的符号连接，执行bunzip2与bzip2 -d的效果相同。</p><p><strong>语法</strong>：bunzip2 [-fkLsvV][.bz2压缩文件]</p><p><strong>参数</strong>：</p><ul><li>-f或–force 　解压缩时，若输出的文件与现有文件同名时，预设不会覆盖现有的文件。若要覆盖，请使用此参数。</li><li>-k或–keep 　在解压缩后，预设会删除原来的压缩文件。若要保留压缩文件，请使用此参数。</li><li>-s或–small 　降低程序执行时，内存的使用量。</li><li>-v或–verbose 　解压缩文件时，显示详细的信息。</li><li>-L,–license,-V或–version 　显示版本信息。</li></ul><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>解压.bz2文件</p><pre><code># bunzip2 -v temp.bz2 //解压文件显示详细处理信息</code></pre><h2 id="3-bzip2"><a href="#3-bzip2" class="headerlink" title="3.bzip2"></a>3.bzip2</h2><p>bzip2命令是.bz2文件的压缩程序。</p><p>bzip2采用新的压缩演算法，压缩效果比传统的LZ77/LZ78压缩演算法来得好。若没有加上任何参数，bzip2压缩完文件后会产生.bz2的压缩文件，并删除原始的文件。</p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><pre><code>bzip2 [-cdfhkLstvVz][--repetitive-best][--repetitive-fast][- 压缩等级][要压缩的文件]</code></pre><p><strong>参数</strong>：</p><ul><li>-c或–stdout 　将压缩与解压缩的结果送到标准输出。</li><li>-d或–decompress 　执行解压缩。</li><li>-f或–force 　bzip2在压缩或解压缩时，若输出文件与现有文件同名，预设不会覆盖现有文件。若要覆盖，请使用此参数。</li><li>-h或–help 　显示帮助。</li><li>-k或–keep 　bzip2在压缩或解压缩后，会删除原始的文件。若要保留原始文件，请使用此参数。</li><li>-s或–small 　降低程序执行时内存的使用量。</li><li>-t或–test 　测试.bz2压缩文件的完整性。</li><li>-v或–verbose 　压缩或解压缩文件时，显示详细的信息。</li><li>-z或–compress 　强制执行压缩。</li><li>-L,–license,</li><li>-V或–version 　显示版本信息。</li><li>–repetitive-best 　若文件中有重复出现的资料时，可利用此参数提高压缩效果。</li><li>–repetitive-fast 　若文件中有重复出现的资料时，可利用此参数加快执行速度。</li><li>-压缩等级 　压缩时的区块大小。</li></ul><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><p>解压.bz2文件</p><pre><code>[root@w3cschool.cc ~]# bzip2 -v temp.bz2 //解压文件显示详细处理信息 </code></pre><p>压缩文件</p><pre><code>[root@w3cschool.cc ~]# bzip2 -c a.c b.c c.c</code></pre><p>检查文件完整性</p><pre><code>[root@w3cschool.cc ~]# bzip2 -t temp.bz2</code></pre><h2 id="4-bzip2recover"><a href="#4-bzip2recover" class="headerlink" title="4.bzip2recover"></a>4.bzip2recover</h2><p>bzip2recover命令用来修复损坏的.bz2文件。</p><p>bzip2是以区块的方式来压缩文件，每个区块视为独立的单位。因此，当某一区块损坏时，便可利用bzip2recover，试着将文件中的区块隔开来，以便解压缩正常的区块。通常只适用在压缩文件很大的情况。</p><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><pre><code>bzip2recover [.bz2 压缩文件]</code></pre><h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><p>修复.bz2文件</p><p># bzip2recover col.bz2</p><h2 id="5-gunzip"><a href="#5-gunzip" class="headerlink" title="5.gunzip"></a>5.gunzip</h2><p>gunzip命令用于解压文件。</p><p>gunzip是个使用广泛的解压缩程序，它用于解开被gzip压缩过的文件，这些压缩文件预设最后的扩展名为”.gz”。事实上gunzip就是gzip的硬连接，因此不论是压缩或解压缩，都可通过gzip指令单独完成。</p><h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><p><strong>参数</strong>：</p><pre><code>gunzip [-acfhlLnNqrtvV][-s &lt;压缩字尾字符串&gt;][文件...] 或 gunzip [-acfhlLnNqrtvV][-s &lt;压缩字尾字符串&gt;][目录]</code></pre><ul><li>-a或–ascii 　使用ASCII文字模式。</li><li>-c或–stdout或–to-stdout 　把解压后的文件输出到标准输出设备。</li><li>-f或-force 　强行解开压缩文件，不理会文件名称或硬连接是否存在以及该文件是否为符号连接。</li><li>-h或–help 　在线帮助。</li><li>-l或–list 　列出压缩文件的相关信息。</li><li>-L或–license 　显示版本与版权信息。</li><li>-n或–no-name 　解压缩时，若压缩文件内含有远来的文件名称及时间戳记，则将其忽略不予处理。</li><li>-N或–name 　解压缩时，若压缩文件内含有原来的文件名称及时间戳记，则将其回存到解开的文件上。</li><li>-q或–quiet 　不显示警告信息。</li><li>-r或–recursive 　递归处理，将指定目录下的所有文件及子目录一并处理。</li><li>-S&lt;压缩字尾字符串&gt;或–suffix&lt;压缩字尾字符串&gt; 　更改压缩字尾字符串。</li><li>-t或–test 　测试压缩文件是否正确无误。</li><li>-v或–verbose 　显示指令执行过程。</li><li>-V或–version 显示版本信息。</li></ul><h3 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h3><pre><code>&lt;p&gt;解压文件&lt;/p&gt;&lt;pre&gt;# gunzip ab.gz </code></pre><h2 id="6-unarj"><a href="#6-unarj" class="headerlink" title="6.unarj"></a>6.unarj</h2><p>unarj命令用于解压缩.arj文件。</p><p>unarj为.arj压缩文件的压缩程序。</p><h3 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h3><pre><code>unarj [eltx][.arj压缩文件]</code></pre><p><strong>参数</strong>：</p><ul><li>e 解压缩.arj文件。</li><li>l 显示压缩文件内所包含的文件。</li><li>t 检查压缩文件是否正确。</li><li>x 解压缩时保留原有的路径。</li></ul><h3 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h3><p>解压.arj文件</p><pre><code># unarj e test.arj</code></pre><h2 id="7-compress"><a href="#7-compress" class="headerlink" title="7.compress"></a>7.compress</h2><p>compress命令是一个相当古老的 unix 档案压缩指令，压缩后的档案会加上一个 .Z 延伸档名以区别未压缩的档案，压缩后的档案可以以 uncompress 解压。若要将数个档案压成一个压缩档，必须先将档案 tar 起来再压缩。由于 gzip 可以产生更理想的压缩比例，一般人多已改用 gzip 为档案压缩工具。</p><h3 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h3><pre><code>compress [-dfvcV] [-b maxbits] [file ...]</code></pre><p><strong>参数</strong>：</p><ul><li>c 输出结果至标准输出设备（一般指荧幕）</li><li>f 强迫写入档案，若目的档已经存在，则会被覆盖 (force)</li><li>v 将程序执行的讯息印在荧幕上 (verbose)</li><li>b 设定共同字串数的上限，以位元计算，可以设定的值为 9 至 16 bits 。由于值越大，能使用的共同字串就 越多，压缩比例就越大，所以一般使用预设值 16 bits (bits)</li><li>d 将压缩档解压缩</li><li>V 列出版本讯息</li><li><strong>范例</strong>：</li><li>将 source.dat 压缩成 source.dat.Z ，若 source.dat.Z 已经存在，内容则会被压缩档覆盖。</li><li>compress -f source.dat</li><li>将 source.dat 压缩成 source.dat.Z ，并列印出压缩比例。</li><li>-v 与 -f 可以一起使用</li><li>compress -vf source.dat</li><li>将压缩后的资料输出后再导入 target.dat.Z 可以改变压缩档名。</li><li>compress -c source.dat &gt; target.dat.Z</li><li>-b 的值越大，压缩比例就越大，范围是 9-16 ，预设值是 16 。</li><li>compress -b 12 source.dat</li><li>将 source.dat.Z 解压成 source.dat ，若档案已经存在，使用者按 y 以确定覆盖档案，若使用 -df 程序则会自动覆盖档案。由于系统会自动加入 .Z 为延伸档名，所以 source.dat 会自动当作 source.dat.Z 处理。</li><li>compress -d source.dat</li><li>compress -d source.dat.Z</li></ul><h3 id="压缩文件"><a href="#压缩文件" class="headerlink" title="压缩文件"></a>压缩文件</h3><pre><code>[root@runoob.com ~]# compress abc.h[root@runoob.com ~]# lsabc.h.Z</code></pre><p>解压文件</p><pre><code>[root@runoob.com ~]# compress -d abc.h.Z[root@runoob.com ~]# lsabc.h.</code></pre><p>按指定压缩比例进行压缩</p><pre><code>[root@runoob.com ~]# compress -b 7 abc.h</code></pre><p>强制压缩文件夹</p><pre><code>[root@runoob.com ~]# compress -rf /home/abc/ </code></pre><h2 id="8-cpio"><a href="#8-cpio" class="headerlink" title="8.cpio"></a>8.cpio</h2><p>cpio命令用于备份文件。</p><p>cpio是用来建立，还原备份档的工具程序，它可以加入，解开cpio或tra备份档内的文件。</p><h3 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h3><pre><code>cpio [-0aABckLovV][-C &lt;输入/输出大小&gt;][-F &lt;备份档&gt;][-H &lt;备份格式&gt;][-O &lt;备份档&gt;][--block-size=&lt;区块大小&gt;][--force-local][--help][--quiet][--version] 或 cpio [-bBcdfikmnrsStuvV][-C &lt;输入/输出大小&gt;][-E &lt;范本文件&gt;][-F &lt;备份档&gt;][-H &lt;备份格式&gt;][-I &lt;备份档&gt;][-M &lt;回传信息&gt;][-R &lt;拥有者&gt;&lt;:/.&gt;&lt;所属群组&gt;][--block-size=&lt;区块大小&gt;][--force-local][--help][--no-absolute-filenames][--no-preserve-owner][--only-verify-crc][--quiet][--sparse][--version][范本样式...] 或 cpio [-0adkiLmpuvV][-R &lt;拥有者&gt;&lt;:/.&gt;&lt;所属群组&gt;][--help][--no-preserve-owner][--quiet][--sparse][--version][目的目]</code></pre><p><strong>参数</strong>：</p><ul><li>-0或–null 　接受新增列控制字符，通常配合find指令的”-print0”参数使用。</li><li>-a或–reset-access-time 　重新设置文件的存取时间。</li><li>-A或–append 　附加到已存在的备份档中，且这个备份档必须存放在磁盘上，而不能放置于磁带机里。</li><li>-b或–swap 　此参数的效果和同时指定”-sS”参数相同。</li><li>-B 　将输入/输出的区块大小改成5210 Bytes。</li><li>-c 　使用旧ASCII备份格式。</li><li>-C&lt;区块大小&gt;或–io-size=&lt;区块大小&gt; 　设置输入/输出的区块大小，单位是Byte。</li><li>-d或–make-directories 　如有需要cpio会自行建立目录。</li><li>-E&lt;范本文件&gt;或–pattern-file=&lt;范本文件&gt; 　指定范本文件，其内含有一个或多个范本样式，让cpio解开符合范本条件的文件，格式为每列一个范本样式。</li><li>-f或–nonmatching 　让cpio解开所有不符合范本条件的文件。</li><li>-F&lt;备份档&gt;或–file=&lt;备份档&gt; 　指定备份档的名称，用来取代标准输入或输出，也能借此通过网络使用另一台主机的保存设备存取备份档。</li><li>-H&lt;备份格式&gt; 　指定备份时欲使用的文件格式。</li><li>-i或–extract 　执行copy-in模式，还原备份档。</li><li>-l&lt;备份档&gt; 　指定备份档的名称，用来取代标准输入，也能借此通过网络使用另一台主机的保存设备读取备份档。</li><li>-k 　此参数将忽略不予处理，仅负责解决cpio不同版本间的兼容性问题。</li><li>-l或–link 　以硬连接的方式取代复制文件，可在copy-pass模式下运用。</li><li>-L或–dereference 　不建立符号连接，直接复制该连接所指向的原始文件。</li><li>-m或preserve-modification-time 　不去更换文件的更改时间。</li><li>-M&lt;回传信息&gt;或–message=&lt;回传信息&gt; 　设置更换保存媒体的信息。</li><li>-n或–numeric-uid-gid 　使用”-tv”参数列出备份档的内容时，若再加上参数”-n”，则会以用户识别码和群组识别码替代拥有者和群组名称列出文件清单。</li><li>-o或–create 　执行copy-out模式，建立备份档。</li><li>-O&lt;备份档&gt; 　指定备份档的名称，用来取代标准输出，也能借此通过网络　使用另一台主机的保存设备存放备份档。</li><li>-p或–pass-through 　执行copy-pass模式，略过备份步骤，直接将文件复制到目的目录。</li><li>-r或–rename 　当有文件名称需要更动时，采用互动模式。</li><li>-R&lt;拥有者&gt;&lt;:/.&gt;&lt;所属群组&gt;或</li><li>—-owner&lt;拥有者&gt;&lt;:/.&gt;&lt;所属群组&gt; 　在copy-in模式还原备份档，或copy-pass模式复制文件时，可指定这些备份，复制的文件的拥有者与所属群组。</li><li>-s或–swap-bytes 　交换每对字节的内容。</li><li>-S或–swap-halfwords 　交换每半个字节的内容。</li><li>-t或–list 　将输入的内容呈现出来。</li><li>-u或–unconditional 　置换所有文件，不论日期时间的新旧与否，皆不予询问而直接覆盖。</li><li>-v或–verbose 　详细显示指令的执行过程。</li><li>-V或–dot 　执行指令时，在每个文件的执行程序前面加上”.”号</li><li>–block-size=&lt;区块大小&gt; 　设置输入/输出的区块大小，假如设置数值为5，则区块大小为2500，若设置成10，则区块大小为5120，依次类推。</li><li>–force-local 　强制将备份档存放在本地主机。</li><li>–help 　在线帮助。</li><li>–no-absolute-filenames 　使用相对路径建立文件名称。</li><li>–no-preserve-owner 　不保留文件的拥有者，谁解开了备份档，那些文件就归谁所有。</li><li>-only-verify-crc 　当备份档采用CRC备份格式时，可使用这项参数检查备份档内的每个文件是否正确无误。</li><li>–quiet 　不显示复制了多少区块。</li><li>–sparse 　倘若一个文件内含大量的连续0字节，则将此文件存成稀疏文件。</li><li>–version 　显示版本信息。</li></ul><h3 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h3><p>制作备份文件</p><pre><code>[root@runoob.com var]# ll //显示当前目录下的文件总用量 164drwxr-xr-x  2 root  root  4096 2008-03-30 accountdrwxr-xr-x  9 root  root  4096 2008-03-30 cachedrwxr-xr-x  3 netdump netdump 4096 2008-03-30 crashdrwxr-xr-x  3 root  root  4096 2008-03-30 dbdrwxr-xr-x  3 root  root  4096 2008-03-30 emptydrwxr-xr-x  3 root  root  4096 2008-03-30 ftpdrwxrwx--T  2 root  gdm   4096 4月 9 20:17 gdmdrwxr-xr-x 25 root  root  4096 2008-03-30 libdrwxr-xr-x  2 root  root  4096 2004-08-13 localdrwxrwxr-x  6 root  lock  4096 5月 8 15:25 lockdrwxr-xr-x 14 root  root  4096 5月 8 15:14 loglrwxrwxrwx  1 root  root   10 2008-03-30 mail -&gt; spool/maildrwxr-xr-x  2 root  root  4096 2004-08-13 nisdrwxr-xr-x  2 root  root  4096 2004-08-13 optdrwxr-xr-x  2 root  root  4096 2004-08-13 preservedrwxr-xr-x 16 root  root  4096 5月 8 15:14 rundrwxr-xr-x 16 root  root  4096 2008-03-30 spooldrwxrwxrwt  3 root  root  4096 1月 13 18:53 tmpdrwx------  2 root  root  4096 2004-07-08 tuxdrwxr-xr-x  8 root  root  4096 1月 19 19:39 wwwdrwxr-xr-x  3 root  root  4096 2008-03-30 yp[root@runoob.com var]# ls | cpio -o &gt;123.cpio //制作备份文件25 blocks[root@runoob.com var]# ll //显示当前目录下的文件总用量 172-rw-r--r--  1 root  root  1024 5月 24 13:06 123.cpiodrwxr-xr-x  2 root  root  4096 2008-03-30 accountdrwxr-xr-x  9 root  root  4096 2008-03-30 cachedrwxr-xr-x  3 netdump netdump 4096 2008-03-30 crashdrwxr-xr-x  3 root  root  4096 2008-03-30 dbdrwxr-xr-x  3 root  root  4096 2008-03-30 emptydrwxr-xr-x  3 root  root  4096 2008-03-30 ftpdrwxrwx--T  2 root  gdm   4096 4月 9 20:17 gdmdrwxr-xr-x 25 root  root  4096 2008-03-30 libdrwxr-xr-x  2 root  root  4096 2004-08-13 localdrwxrwxr-x  6 root  lock  4096 5月 8 15:25 lockdrwxr-xr-x 14 root  root  4096 5月 8 15:14 loglrwxrwxrwx  1 root  root   10 2008-03-30 mail -&gt; spool/maildrwxr-xr-x  2 root  root  4096 2004-08-13 nisdrwxr-xr-x  2 root  root  4096 2004-08-13 optdrwxr-xr-x  2 root  root  4096 2004-08-13 preservedrwxr-xr-x 16 root  root  4096 5月 8 15:14 rundrwxr-xr-x 16 root  root  4096 2008-03-30 spooldrwxrwxrwt  3 root  root  4096 1月 13 18:53 tmpdrwx------  2 root  root  4096 2004-07-08 tuxdrwxr-xr-x  8 root  root  4096 1月 19 19:39 wwwdrwxr-xr-x  3 root  root  4096 2008-03-30 yp[root@runoob.com var]# </code></pre><p>解压备份文件</p><pre><code>[root@runoob.com var]# ls | cpio -i -l 123.cpio</code></pre><p>解压缩备份文件，并列出详细信息</p><pre><code>[root@runoob.com var]# cpio -t -I 123.cpio  123.cpioa.cb.cc.c……省略部分结果</code></pre><p>强制解压缩</p><pre><code>[root@runoob.com var]# cpio -i -u -I 123.cpio </code></pre><p>解压缩时进行反向匹配，指定不解压的文件</p><pre><code>[root@runoob.com var]# cpio -i -I 123.cpio -f *.c //不解压.c结尾的文件</code></pre><p>向指定的.cpio文件添加文件</p><pre><code>[root@runoob.com var]# ls123.cpio crash ftp local mail preserve tmp ypaccount  db    gdm lock  nis  run       tuxcache     empty lib log  opt  spool   www[root@runoob.com var]# cpio -o -O 123.cpio -Adb  //用户输入 按下Ctrl+D结束输入1 block[root@runoob.com var]# </code></pre><p>从标准输入备份文件</p><pre><code>[root@runoob.com test]# ls              a. a.c b.c c.c d.c    f.c[root@runoob.com test]# cpio -o &gt;123.cpioa.c  //用户输入b.cc.c  //按下Ctrl+D完成输入3 block[root@runoob.com test]# </code></pre><p>复制文件</p><pre><code>[root@runoob.com test]# cpio -p /roota.c  //用户输入b.cc.c  //按下Ctrl+D完成输入3 block</code></pre><h2 id="9-dump"><a href="#9-dump" class="headerlink" title="9.dump"></a>9.dump</h2><p>dump命令用于备份文件系统。</p><p>dump为备份工具程序，可将目录或整个文件系统备份至指定的设备，或备份成一个大文件。</p><h3 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h3><pre><code>dump [-cnu][-0123456789][-b &lt;区块大小&gt;][-B &lt;区块数目&gt;][-d &lt;密度&gt;][-f &lt;设备名称&gt;][-h &lt;层级&gt;][-s &lt;磁带长度&gt;][-T &lt;日期&gt;][目录或文件系统] 或 dump [-wW]</code></pre><p><strong>参数</strong>：</p><ul><li>-0123456789 　备份的层级。</li><li>-b&lt;区块大小&gt; 　指定区块的大小，单位为KB。</li><li>-B&lt;区块数目&gt; 　指定备份卷册的区块数目。</li><li>-c 　修改备份磁带预设的密度与容量。</li><li>-d&lt;密度&gt; 　设置磁带的密度。单位为BPI。</li><li>-f&lt;设备名称&gt; 　指定备份设备。</li><li>-h&lt;层级&gt; 　当备份层级等于或大于指定的层级时，将不备份用户标示为”nodump”的文件。</li><li>-n 　当备份工作需要管理员介入时，向所有”operator”群组中的使用者发出通知。</li><li>-s&lt;磁带长度&gt; 　备份磁带的长度，单位为英尺。</li><li>-T&lt;日期&gt; 　指定开始备份的时间与日期。</li><li>-u 　备份完毕后，在/etc/dumpdates中记录备份的文件系统，层级，日期与时间等。</li><li>-w 　与-W类似，但仅显示需要备份的文件。</li><li>-W 　显示需要备份的文件及其最后一次备份的层级，时间与日期。</li></ul><h3 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h3><p>备份文件到磁带</p><pre><code># dump -0 -u /dev/tape /home/</code></pre><p>其中”-0”参数指定的是备份等级”-u”要求备份完毕之后将相应的信息存储到文件 /etc/dumpdates 留作记录</p><h2 id="10-uuencode"><a href="#10-uuencode" class="headerlink" title="10.uuencode"></a>10.uuencode</h2><p>uuencode命令用于将uuencode编码后的档案还原。</p><p>早期在许多 unix 系统的传送协定只能传送七位元字元，并不支援二进位档案，像中文文字档就有用到八位元，所以无法完整地送到另一架机器上。 uuencode 指令，可以将二进位档转换成七位元的档案，传送到另一架机器上再以 uudecode 还原。最常见的是用在以电子邮件传送二进位档。uuencode 编码后的资料都以 begin 开始，以 end 作为结束。</p><h3 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h3><pre><code> compress[必要参数][选择参数][目录或者文件]</code></pre><p><strong>参数说明：</strong></p><p><strong>必要参数：</strong></p><ul><li>无</li></ul><p><strong>选择参数：</strong></p><ul><li>h 显示帮助信息</li><li>v 显示版本信息</li></ul><h3 id="实例-8"><a href="#实例-8" class="headerlink" title="实例"></a>实例</h3><p>还原档案</p><pre><code># uuencode test.uud</code></pre><h2 id="11-gzexe"><a href="#11-gzexe" class="headerlink" title="11.gzexe"></a>11.gzexe</h2><p>gzexe命令用于压缩执行文件。</p><p>gzexe是用来压缩执行文件的程序。当您去执行被压缩过的执行文件时，该文件会自动解压然后继续执行，和使用一般的执行文件相同。</p><h3 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h3><pre><code>gzexe [-d][执行文件...]</code></pre><p><strong>参数</strong>：</p><ul><li>-d 　解开压缩文件。</li></ul><h3 id="实例-9"><a href="#实例-9" class="headerlink" title="实例"></a>实例</h3><p>压缩可执行文件</p><pre><code># gzexe abc </code></pre><h2 id="12-gzip"><a href="#12-gzip" class="headerlink" title="12.gzip"></a>12.gzip</h2><p>gzip命令用于压缩文件。</p><p>gzip是个使用广泛的压缩程序，文件经它压缩过后，其名称后面会多出”.gz”的扩展名。</p><h3 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h3><pre><code>gzip [-acdfhlLnNqrtvV][-S &amp;lt;压缩字尾字符串&amp;gt;][-&amp;lt;压缩效率&amp;gt;][--best/fast][文件...] 或 gzip [-acdfhlLnNqrtvV][-S &amp;lt;压缩字尾字符串&amp;gt;][-&amp;lt;压缩效率&amp;gt;][--best/fast][目录]</code></pre><p><strong>参数</strong>：</p><ul><li>-a或–ascii 　使用ASCII文字模式。</li><li>-c或–stdout或–to-stdout 　把压缩后的文件输出到标准输出设备，不去更动原始文件。</li><li>-d或–decompress或—-uncompress 　解开压缩文件。</li><li>-f或–force 　强行压缩文件。不理会文件名称或硬连接是否存在以及该文件是否为符号连接。</li><li>-h或–help 　在线帮助。</li><li>-l或–list 　列出压缩文件的相关信息。</li><li>-L或–license 　显示版本与版权信息。</li><li>-n或–no-name 　压缩文件时，不保存原来的文件名称及时间戳记。</li><li>-N或–name 　压缩文件时，保存原来的文件名称及时间戳记。</li><li>-q或–quiet 　不显示警告信息。</li><li>-r或–recursive 　递归处理，将指定目录下的所有文件及子目录一并处理。</li><li>-S&lt;压缩字尾字符串&gt;或—-suffix&lt;压缩字尾字符串&gt; 　更改压缩字尾字符串。</li><li>-t或–test 　测试压缩文件是否正确无误。</li><li>-v或–verbose 　显示指令执行过程。</li><li>-V或–version 　显示版本信息。</li><li>-&lt;压缩效率&gt; 　压缩效率是一个介于1－9的数值，预设值为”6”，指定愈大的数值，压缩效率就会愈高。</li><li>–best 　此参数的效果和指定”-9”参数相同。</li><li>–fast 　此参数的效果和指定”-1”参数相同。</li></ul><h3 id="实例-10"><a href="#实例-10" class="headerlink" title="实例"></a>实例</h3><p>压缩文件</p><pre><code>[root@runoob.com a]# ls //显示当前目录文件a.c b.h d.cpp[root@runoob.com a]# gzip * //压缩目录下的所有文件[root@runoob.com a]# ls //显示当前目录文件a.c.gz    b.h.gz    d.cpp.gz[root@runoob.com a]# </code></pre><p>接范例1， 列出详细的信息</p><pre><code>[root@runoob.com a]# gzip -dv * //解压文件，并列出详细信息a.c.gz:     0.0% -- replaced with a.cb.h.gz:     0.0% -- replaced with b.hd.cpp.gz:     0.0% -- replaced with d.cpp[root@runoob.com a]# </code></pre><p>接范例1，显示压缩文件的信息</p><pre><code>[root@runoob.com a]# gzip -l *     compressed    uncompressed ratio uncompressed_name         24          0  0.0% a.c         24          0  0.0% b.h         26          0  0.0% d.cpp</code></pre><h2 id="13-lha"><a href="#13-lha" class="headerlink" title="13.lha"></a>13.lha</h2><p>lha命令用于压缩或解压缩文件。</p><p>lha是从lharc演变而来的压缩程序，文件经它压缩后，会另外产生具有”.lzh”扩展名的压缩文件。</p><h3 id="语法-11"><a href="#语法-11" class="headerlink" title="语法"></a>语法</h3><pre><code>lha [-acdfglmnpqtuvx][-a &lt;0/1/2&gt;/u&lt;/0/1/2&gt;][-&lt;a/c/u&gt;d][-&lt;e/x&gt;i][-&lt;a/u&gt;o][-&lt;e/x&gt;w=&lt;目的目录&gt;][-&lt;a/u&gt;z][压缩文件][文件...] 或 lha [-acdfglmnpqtuvx][-a &lt;0/1/2&gt;/u&lt;/0/1/2&gt;][-&lt;a/c/u&gt;d][-&lt;e/x&gt;i][-&lt;a/u&gt;o][-&lt;e/x&gt;w=&lt;目的目录&gt;][-&lt;a/u&gt;z][压缩文件][目录...]</code></pre><p><strong>参数</strong>：</p><ul><li>-a或a 压缩文件，并加入到压缩文件内。</li><li>-a&lt;0/1/2&gt;/u&lt;/0/1/2&gt; 压缩文件时，采用不同的文件头。</li><li>-c或c 压缩文件，重新建构新的压缩文件后，再将其加入。</li><li>-d或d 从压缩文件内删除指定的文件。</li><li>-&lt;a/c/u&gt;d或&lt;a/c/u&gt;d 压缩文件，然后将其加入，重新建构，更新压缩文件或，删除原始文件，也就是把文件移到压缩文件中。</li><li>-e或e 解开压缩文件。</li><li>-f或f 强制执行lha命令，在解压时会直接覆盖已有的文件而不加以询问。</li><li>-g或g 使用通用的压缩格式，便于解决兼容性的问题。</li><li>-&lt;e/x&gt;i或&lt;e/x&gt;i 解开压缩文件时，忽略保存在压缩文件内的文件路径，直接将其解压后存放在现行目录下或是指定的目录中。</li><li>-l或l 列出压缩文件的相关信息。</li><li>-m或m 此参数的效果和同时指定”-ad”参数相同。</li><li>-n或n 不执行指令，仅列出实际执行会进行的动作。</li><li>-&lt;a/u&gt;o或&lt;a/u&gt;o 采用lharc兼容格式，将压缩后的文件加入，更新压缩文件。</li><li>-p或p 从压缩文件内输出到标准输出设备。</li><li>-q或q 不显示指令执行过程。</li><li>-t或t 检查备份文件内的每个文件是否正确无误。</li><li>-u或u 更换较新的文件到压缩文件内。</li><li>-u&lt;/0/1/2&gt;或u&lt;/0/1/2&gt; 在文件压缩时采用不同的文件头，然后更新到压缩文件内。</li><li>-v或v 详细列出压缩文件的相关信息。</li><li>-&lt;e/x&gt;w=&lt;目的目录&gt;或&lt;e/x&gt;w=&lt;目的目录&gt; 指定解压缩的目录。</li><li>-x或x 解开压缩文件。</li><li>-&lt;a/u&gt;z或&lt;a/u&gt;z 不压缩文件，直接把它加入，更新压缩文件。</li></ul><h3 id="实例-11"><a href="#实例-11" class="headerlink" title="实例"></a>实例</h3><p>缩文件</p><pre><code># lha -a abc.lhz a.b //压缩a.b文件，压缩后生成 abc.lhz文件</code></pre><p>压缩目录</p><pre><code># lha -a abc2 /home/hnlinux</code></pre><p>解压文件到当前目录</p><pre><code># lha -xiw=agis abc  //解压文件abc</code></pre><h2 id="14-restore"><a href="#14-restore" class="headerlink" title="14.restore"></a>14.restore</h2><p>restore命令用来还原由dump操作所备份下来的文件或整个文件系统(一个分区)。</p><p>restore 指令所进行的操作和dump指令相反，dump操作可用来备份文件，而restore操作则是写回这些已备份的文件。</p><h3 id="语法-12"><a href="#语法-12" class="headerlink" title="语法"></a>语法</h3><pre><code>restore [-cCvy][-b &lt;区块大小&gt;][-D &lt;文件系统&gt;][-f &lt;备份文件&gt;][-s &lt;文件编号&gt;] 或 restore [-chimvy][-b &lt;区块大小&gt;][-f &lt;备份文件&gt;][-s &lt;文件编号&gt;] 或 restore [-crvy][-b &lt;区块大小&gt;][-f &lt;备份文件&gt;][-s &lt;文件编号&gt;] 或 restore [-cRvy][-b &lt;区块大小&gt;][-D &lt;文件系统&gt;][-f &lt;备份文件&gt;][-s &lt;文件编号&gt;] 或 restore [chtvy][-b &lt;区块大小&gt;][-D &lt;文件系统&gt;][-f &lt;备份文件&gt;][-s &lt;文件编号&gt;][文件...] 或 restore [-chmvxy][-b &lt;区块大小&gt;][-D &lt;文件系统&gt;][-f &lt;备份文件&gt;][-s &lt;文件编号&gt;][文件...]</code></pre><p><strong>参数</strong>：</p><ul><li>-b&lt;区块大小&gt; 设置区块大小，单位是Byte。</li><li>-c 不检查dump操作的备份格式，仅准许读取使用旧格式的备份文件。</li><li>-C 使用对比模式，将备份的文件与现行的文件相互对比。</li><li>-D&lt;文件系统&gt; 允许用户指定文件系统的名称。</li><li>-f&lt;备份文件&gt; 从指定的文件中读取备份数据，进行还原操作。</li><li>-h 仅解出目录而不包括与该目录相关的所有文件。</li><li>-i 使用互动模式，在进行还原操作时，restore指令将依序询问用户。</li><li>-m 解开符合指定的inode编号的文件或目录而非采用文件名称指定。</li><li>-r 进行还原操作。</li><li>-R 全面还原文件系统时，检查应从何处开始进行。</li><li>-s&lt;文件编号&gt; 当备份数据超过一卷磁带时，您可以指定备份文件的编号。</li><li>-t 指定文件名称，若该文件已存在备份文件中，则列出它们的名称。</li><li>-v 显示指令执行过程。</li><li>-x 设置文件名称，且从指定的存储媒体里读入它们，若该文件已存在在备份文件中，则将其还原到文件系统内。</li><li>-y 不询问任何问题，一律以同意回答并继续执行指令。</li></ul><h2 id="15-tar"><a href="#15-tar" class="headerlink" title="15.tar"></a>15.tar</h2><p>tar命令用于备份文件。</p><p>tar是用来建立，还原备份文件的工具程序，它可以加入，解开备份文件内的文件。</p><h3 id="语法-13"><a href="#语法-13" class="headerlink" title="语法"></a>语法</h3><pre><code>tar [-ABcdgGhiklmMoOpPrRsStuUvwWxzZ][-b &lt;区块数目&gt;][-C &lt;目的目录&gt;][-f &lt;备份文件&gt;][-F &lt;Script文件&gt;][-K &lt;文件&gt;][-L &lt;媒体容量&gt;][-N &lt;日期时间&gt;][-T &lt;范本文件&gt;][-V &lt;卷册名称&gt;][-X &lt;范本文件&gt;][-&lt;设备编号&gt;&lt;存储密度&gt;][--after-date=&lt;日期时间&gt;][--atime-preserve][--backuup=&lt;备份方式&gt;][--checkpoint][--concatenate][--confirmation][--delete][--exclude=&lt;范本样式&gt;][--force-local][--group=&lt;群组名称&gt;][--help][--ignore-failed-read][--new-volume-script=&lt;Script文件&gt;][--newer-mtime][--no-recursion][--null][--numeric-owner][--owner=&lt;用户名称&gt;][--posix][--erve][--preserve-order][--preserve-permissions][--record-size=&lt;区块数目&gt;][--recursive-unlink][--remove-files][--rsh-command=&lt;执行指令&gt;][--same-owner][--suffix=&lt;备份字尾字符串&gt;][--totals][--use-compress-program=&lt;执行指令&gt;][--version][--volno-file=&lt;编号文件&gt;][文件或目录...]</code></pre><p><strong>参数</strong>：</p><ul><li>-A或–catenate 新增文件到已存在的备份文件。</li><li>-b&lt;区块数目&gt;或–blocking-factor=&lt;区块数目&gt; 设置每笔记录的区块数目，每个区块大小为12Bytes。</li><li>-B或–read-full-records 读取数据时重设区块大小。</li><li>-c或–create 建立新的备份文件。</li><li>-C&lt;目的目录&gt;或–directory=&lt;目的目录&gt; 切换到指定的目录。</li><li>-d或–diff或–compare 对比备份文件内和文件系统上的文件的差异。</li><li>-f&lt;备份文件&gt;或–file=&lt;备份文件&gt; 指定备份文件。</li><li>-F&lt;Script文件&gt;或–info-script=&lt;Script文件&gt; 每次更换磁带时，就执行指定的Script文件。</li><li>-g或–listed-incremental 处理GNU格式的大量备份。</li><li>-G或–incremental 处理旧的GNU格式的大量备份。</li><li>-h或–dereference 不建立符号连接，直接复制该连接所指向的原始文件。</li><li>-i或–ignore-zeros 忽略备份文件中的0 Byte区块，也就是EOF。</li><li>-k或–keep-old-files 解开备份文件时，不覆盖已有的文件。</li><li>-K&lt;文件&gt;或–starting-file=&lt;文件&gt; 从指定的文件开始还原。</li><li>-l或–one-file-system 复制的文件或目录存放的文件系统，必须与tar指令执行时所处的文件系统相同，否则不予复制。</li><li>-L&lt;媒体容量&gt;或-tape-length=&lt;媒体容量&gt; 设置存放每体的容量，单位以1024 Bytes计算。</li><li>-m或–modification-time 还原文件时，不变更文件的更改时间。</li><li>-M或–multi-volume 在建立，还原备份文件或列出其中的内容时，采用多卷册模式。</li><li>-N&lt;日期格式&gt;或–newer=&lt;日期时间&gt; 只将较指定日期更新的文件保存到备份文件里。</li><li>-o或–old-archive或–portability 将资料写入备份文件时使用V7格式。</li><li>-O或–stdout 把从备份文件里还原的文件输出到标准输出设备。</li><li>-p或–same-permissions 用原来的文件权限还原文件。</li><li>-P或–absolute-names 文件名使用绝对名称，不移除文件名称前的”/“号。</li><li>-r或–append 新增文件到已存在的备份文件的结尾部分。</li><li>-R或–block-number 列出每个信息在备份文件中的区块编号。</li><li>-s或–same-order 还原文件的顺序和备份文件内的存放顺序相同。</li><li>-S或–sparse 倘若一个文件内含大量的连续0字节，则将此文件存成稀疏文件。</li><li>-t或–list 列出备份文件的内容。</li><li>-T&lt;范本文件&gt;或–files-from=&lt;范本文件&gt; 指定范本文件，其内含有一个或多个范本样式，让tar解开或建立符合设置条件的文件。</li><li>-u或–update 仅置换较备份文件内的文件更新的文件。</li><li>-U或–unlink-first 解开压缩文件还原文件之前，先解除文件的连接。</li><li>-v或–verbose 显示指令执行过程。</li><li>-V&lt;卷册名称&gt;或–label=&lt;卷册名称&gt; 建立使用指定的卷册名称的备份文件。</li><li>-w或–interactive 遭遇问题时先询问用户。</li><li>-W或–verify 写入备份文件后，确认文件正确无误。</li><li>-x或–extract或–get 从备份文件中还原文件。</li><li>-X&lt;范本文件&gt;或–exclude-from=&lt;范本文件&gt; 指定范本文件，其内含有一个或多个范本样式，让ar排除符合设置条件的文件。</li><li>-z或–gzip或–ungzip 通过gzip指令处理备份文件。</li><li>-Z或–compress或–uncompress 通过compress指令处理备份文件。</li><li>-&lt;设备编号&gt;&lt;存储密度&gt; 设置备份用的外围设备编号及存放数据的密度。</li><li>–after-date=&lt;日期时间&gt; 此参数的效果和指定”-N”参数相同。</li><li>–atime-preserve 不变更文件的存取时间。</li><li>–backup=&lt;备份方式&gt;或–backup 移除文件前先进行备份。</li><li>–checkpoint 读取备份文件时列出目录名称。</li><li>–concatenate 此参数的效果和指定”-A”参数相同。</li><li>–confirmation 此参数的效果和指定”-w”参数相同。</li><li>–delete 从备份文件中删除指定的文件。</li><li>–exclude=&lt;范本样式&gt; 排除符合范本样式的文件。</li><li>–group=&lt;群组名称&gt; 把加入设备文件中的文件的所属群组设成指定的群组。</li><li>–help 在线帮助。</li><li>–ignore-failed-read 忽略数据读取错误，不中断程序的执行。</li><li>–new-volume-script=&lt;Script文件&gt; 此参数的效果和指定”-F”参数相同。</li><li>–newer-mtime 只保存更改过的文件。</li><li>–no-recursion 不做递归处理，也就是指定目录下的所有文件及子目录不予处理。</li><li>–null 从null设备读取文件名称。</li><li>–numeric-owner 以用户识别码及群组识别码取代用户名称和群组名称。</li><li>–owner=&lt;用户名称&gt; 把加入备份文件中的文件的拥有者设成指定的用户。</li><li>–posix 将数据写入备份文件时使用POSIX格式。</li><li>–preserve 此参数的效果和指定”-ps”参数相同。</li><li>–preserve-order 此参数的效果和指定”-A”参数相同。</li><li>–preserve-permissions 此参数的效果和指定”-p”参数相同。</li><li>–record-size=&lt;区块数目&gt; 此参数的效果和指定”-b”参数相同。</li><li>–recursive-unlink 解开压缩文件还原目录之前，先解除整个目录下所有文件的连接。</li><li>–remove-files 文件加入备份文件后，就将其删除。</li><li>–rsh-command=&lt;执行指令&gt; 设置要在远端主机上执行的指令，以取代rsh指令。</li><li>–same-owner 尝试以相同的文件拥有者还原文件。</li><li>–suffix=&lt;备份字尾字符串&gt; 移除文件前先行备份。</li><li>–totals 备份文件建立后，列出文件大小。</li><li>–use-compress-program=&lt;执行指令&gt; 通过指定的指令处理备份文件。</li><li>–version 显示版本信息。</li><li>–volno-file=&lt;编号文件&gt; 使用指定文件内的编号取代预设的卷册编号。</li></ul><h3 id="实例-12"><a href="#实例-12" class="headerlink" title="实例"></a>实例</h3><p>压缩文件 非打包</p><pre><code># touch a.c       # tar -czvf test.tar.gz a.c   //压缩 a.c文件为test.tar.gza.c</code></pre><p>列出压缩文件内容</p><pre><code># tar -tzvf test.tar.gz -rw-r--r-- root/root     0 2010-05-24 16:51:59 a.c</code></pre><p>解压文件</p><pre><code># tar -xzvf test.tar.gz a.c</code></pre><h2 id="16-uudecode"><a href="#16-uudecode" class="headerlink" title="16.uudecode"></a>16.uudecode</h2><p>uudecode 将 uuencode 编码后的档案还原， uudecode 只会将 begin 与 end 标记之间的编码资料还原，程序会跳过标记以外的资料。</p><h3 id="语法-14"><a href="#语法-14" class="headerlink" title="语法"></a>语法</h3><pre><code>uuencode [-hv] [file1 ...]&lt;/p&gt;</code></pre><p><strong>参数</strong>：</p><ul><li>h 列出指令使用格式 (help)</li><li>v 列出版本讯息</li></ul><h3 id="实例-13"><a href="#实例-13" class="headerlink" title="实例"></a>实例</h3><p>将 file.uud 还原，而还原后的档名储存在 file.uud 档中。</p><pre><code>uuencode file.uud</code></pre><p>可以一起还原好几个档案。</p><pre><code>uuencode file1.uud file2.uud</code></pre><h2 id="17-unzip"><a href="#17-unzip" class="headerlink" title="17.unzip"></a>17.unzip</h2><p>unzip命令用于解压缩zip文件</p><p>unzip为.zip压缩文件的解压缩程序。</p><h3 id="语法-15"><a href="#语法-15" class="headerlink" title="语法"></a>语法</h3><pre><code>unzip [-cflptuvz][-agCjLMnoqsVX][-P &lt;密码&gt;][.zip文件][文件][-d &lt;目录&gt;][-x &lt;文件&gt;] 或 unzip [-Z]</code></pre><p><strong>参数</strong>：</p><ul><li>-c 将解压缩的结果显示到屏幕上，并对字符做适当的转换。</li><li>-f 更新现有的文件。</li><li>-l 显示压缩文件内所包含的文件。</li><li>-p 与-c参数类似，会将解压缩的结果显示到屏幕上，但不会执行任何的转换。</li><li>-t 检查压缩文件是否正确。</li><li>-u 与-f参数类似，但是除了更新现有的文件外，也会将压缩文件中的其他文件解压缩到目录中。</li><li>-v 执行是时显示详细的信息。</li><li>-z 仅显示压缩文件的备注文字。</li><li>-a 对文本文件进行必要的字符转换。</li><li>-b 不要对文本文件进行字符转换。</li><li>-C 压缩文件中的文件名称区分大小写。</li><li>-j 不处理压缩文件中原有的目录路径。</li><li>-L 将压缩文件中的全部文件名改为小写。</li><li>-M 将输出结果送到more程序处理。</li><li>-n 解压缩时不要覆盖原有的文件。</li><li>-o 不必先询问用户，unzip执行后覆盖原有文件。</li><li>-P&lt;密码&gt; 使用zip的密码选项。</li><li>-q 执行时不显示任何信息。</li><li>-s 将文件名中的空白字符转换为底线字符。</li><li>-V 保留VMS的文件版本信息。</li><li>-X 解压缩时同时回存文件原来的UID/GID。</li><li>[.zip文件] 指定.zip压缩文件。</li><li>[文件] 指定要处理.zip压缩文件中的哪些文件。</li><li>-d&lt;目录&gt; 指定文件解压缩后所要存储的目录。</li><li>-x&lt;文件&gt; 指定不要处理.zip压缩文件中的哪些文件。</li><li>-Z unzip -Z等于执行zipinfo指令。</li></ul><h3 id="实例-14"><a href="#实例-14" class="headerlink" title="实例"></a>实例</h3><p>查看压缩文件中包含的文件：</p><pre><code># unzip -l abc.zip Archive: abc.zip Length   Date  Time  Name--------  ----  ----  ----  94618 05-21-10 20:44  a11.jpg  202001 05-21-10 20:44  a22.jpg    16 05-22-10 15:01  11.txt  46468 05-23-10 10:30  w456.JPG  140085 03-14-10 21:49  my.asp--------          -------  483188          5 files</code></pre><p>-v 参数用于查看压缩文件目录信息，但是不解压该文件。</p><pre><code># unzip -v abc.zip Archive: abc.zipLength  Method  Size Ratio  Date  Time  CRC-32  Name-------- ------ ------- -----  ----  ----  ------  ----  94618 Defl:N  93353  1% 05-21-10 20:44 9e661437 a11.jpg 202001 Defl:N  201833  0% 05-21-10 20:44 1da462eb a22.jpg   16 Stored    16  0% 05-22-10 15:01 ae8a9910 ? +-|￥+-? (11).txt  46468 Defl:N  39997 14% 05-23-10 10:30 962861f2 w456.JPG 140085 Defl:N  36765 74% 03-14-10 21:49 836fcc3f my.asp--------     ------- ---              ------- 483188      371964 23%              5 files</code></pre><h2 id="18-zip"><a href="#18-zip" class="headerlink" title="18.zip"></a>18.zip</h2><p>zip命令用于压缩文件。</p><p>zip是个使用广泛的压缩程序，文件经它压缩后会另外产生具有”.zip”扩展名的压缩文件。</p><h3 id="语法-16"><a href="#语法-16" class="headerlink" title="语法"></a>语法</h3><pre><code>zip [-AcdDfFghjJKlLmoqrSTuvVwXyz$][-b &lt;工作目录&gt;][-ll][-n &lt;字尾字符串&gt;][-t &lt;日期时间&gt;][-&lt;压缩效率&gt;][压缩文件][文件...][-i &lt;范本样式&gt;][-x &lt;范本样式&gt;]</code></pre><p><strong>参数</strong>：</p><ul><li>-A 调整可执行的自动解压缩文件。</li><li>-b&lt;工作目录&gt; 指定暂时存放文件的目录。</li><li>-c 替每个被压缩的文件加上注释。</li><li>-d 从压缩文件内删除指定的文件。</li><li>-D 压缩文件内不建立目录名称。</li><li>-f 此参数的效果和指定”-u”参数类似，但不仅更新既有文件，如果某些文件原本不存在于压缩文件内，使用本参数会一并将其加入压缩文件中。</li><li>-F 尝试修复已损坏的压缩文件。</li><li>-g 将文件压缩后附加在既有的压缩文件之后，而非另行建立新的压缩文件。</li><li>-h 在线帮助。</li><li>-i&lt;范本样式&gt; 只压缩符合条件的文件。</li><li>-j 只保存文件名称及其内容，而不存放任何目录名称。</li><li>-J 删除压缩文件前面不必要的数据。</li><li>-k 使用MS-DOS兼容格式的文件名称。</li><li>-l 压缩文件时，把LF字符置换成LF+CR字符。</li><li>-ll 压缩文件时，把LF+CR字符置换成LF字符。</li><li>-L 显示版权信息。</li><li>-m 将文件压缩并加入压缩文件后，删除原始文件，即把文件移到压缩文件中。</li><li>-n&lt;字尾字符串&gt; 不压缩具有特定字尾字符串的文件。</li><li>-o 以压缩文件内拥有最新更改时间的文件为准，将压缩文件的更改时间设成和该文件相同。</li><li>-q 不显示指令执行过程。</li><li>-r 递归处理，将指定目录下的所有文件和子目录一并处理。</li><li>-S 包含系统和隐藏文件。</li><li>-t&lt;日期时间&gt; 把压缩文件的日期设成指定的日期。</li><li>-T 检查备份文件内的每个文件是否正确无误。</li><li>-u 更换较新的文件到压缩文件内。</li><li>-v 显示指令执行过程或显示版本信息。</li><li>-V 保存VMS操作系统的文件属性。</li><li>-w 在文件名称里假如版本编号，本参数仅在VMS操作系统下有效。</li><li>-x&lt;范本样式&gt; 压缩时排除符合条件的文件。</li><li>-X 不保存额外的文件属性。</li><li>-y 直接保存符号连接，而非该连接所指向的文件，本参数仅在UNIX之类的系统下有效。</li><li>-z 替压缩文件加上注释。</li><li>-$ 保存第一个被压缩文件所在磁盘的卷册名称。</li><li>-&lt;压缩效率&gt; 压缩效率是一个介于1-9的数值。</li></ul><h3 id="实例-15"><a href="#实例-15" class="headerlink" title="实例"></a>实例</h3><p>将 /home/html/ 这个目录下所有文件和文件夹打包为当前目录下的 html.zip：</p><pre><code>zip -q -r html.zip /home/html</code></pre><p>如果在我们在 /home/html 目录下，可以执行以下命令：</p><pre><code>zip -q -r html.zip *</code></pre><p>从压缩文件 cp.zip 中删除文件 a.c</p><pre><code>zip -dv cp.zip a.c</code></pre><h2 id="19-zipinfo"><a href="#19-zipinfo" class="headerlink" title="19.zipinfo"></a>19.zipinfo</h2><p>zipinfo命令用于列出压缩文件信息。</p><p>执行zipinfo指令可得知ZIP压缩文件的详细信息。</p><h3 id="语法-17"><a href="#语法-17" class="headerlink" title="语法"></a>语法</h3><pre><code>zipinfo [-12hlmMstTvz] [压缩文件] [文件...] [ -  x &lt;范本样式&gt;]</code></pre><p><strong>参数</strong>：</p><ul><li>-1只列出文件名称。</li><li>-2此参数的效果和指定“-1”参数类似，但可搭配“-h”，“ - t”和“-z”参数使用。</li><li>-h只列出压缩文件的文件名称。</li><li>-l此参数的效果和指定“-m”参数类似，但会列出原始文件的大小而非每个文件的压缩率。</li><li>-m此参数的效果和指定“-s”参数类似，但多会列出每个文件的压缩率。</li><li>-M若信息内容超过一个画面，则采用类似更多指令的方式列出信息。</li><li>-s用类似执行“ls -l”指令的效果列出压缩文件内容。</li><li>-t只列出压缩文件内所包含的文件数目，压缩前后的文件大小及压缩率。</li><li>-T将压缩文件内每个文件的日期时间用年，月，日，时，分，秒的顺序列出。</li><li>-v详细显示压缩文件内每一个文件的信息。</li><li>-x &lt;范本样式&gt;不列出符合条件的文件的信息。</li><li>-z如果压缩文件内含有注释，就将注释显示出来。</li></ul><h3 id="实例-16"><a href="#实例-16" class="headerlink" title="实例"></a>实例</h3><p>显示压缩文件信息</p><pre><code>[root@w3cschool.cc a] #zipinfo cp.zip 存档：cp.zip 486字节4个文件-rw-r  -  r-- 2.3 unx 0 bx stor 24-May-10 18:54 ac-rw-r  -  r-- 2.3 unx 0 bx stor 24-May-10 18:54 bc-rw-r  -  r-- 2.3 unx 0 bx stor 24-May-10 18:54 cc-rw-r  -  r-- 2.3 unx 0 bx stor 24-May-10 18:54 ec4个文件，0个字节未压缩，0个字节压缩：0.0％[root@w3cschool.cc a]＃ </code></pre><p>显示压缩文件中每个文件的信息</p><pre><code>[root@w3cschool.cc a] #zipinfo -v cp.zip 存档：cp.zip 486字节4个文件中心目录结束记录：------------------------------- 中央结尾记录的实际偏差：464（000001D0h） 中央终点记录的预期偏差：464（000001D0h） （基于中心目录的长度及其预期的偏移量） 此zip文件构成单部分存档的唯一磁盘; 它的 中心目录包含4个条目。中央目录是248 （000000F8h）字节长，其（预期）偏移量以字节为单位 zip文件的开头是216（000000D8h）。 没有zipfile注释。中央目录条目＃1：--------------------------- AC 从归档开始的本地头的偏移量：0（00000000h）字节 文件系统或原产地操作系统：Unix 编码软件版本：2.3 所需的最低文件系统兼容性：MS-DOS，OS / 2或NT FAT 提取所需的最低软件版本：1.0 压缩方法：无（存储） 文件安全状态：未加密 扩展本地标题：没有 文件最后修改日期（DOS日期/时间）：2010年5月24日18:54:26 文件最后修改时（UT额外字段modtime）：2010年5月24日18:54:26本地 文件最后修改日期（UT额外字段modtime）：2010年5月24日10:54:26 UTC 32位CRC值（十六进制）：00000000 压缩大小：0字节 未压缩的大小：0字节 文件名长度：3个字符 额外字段的长度：13个字节 文件注释长度：0个字符 文件开头的磁盘号：磁盘1 表观文件类型：二进制 Unix文件属性（100644八进制）： -  rpm -r  -  r-- MS-DOS文件属性（00十六进制）：无 中心目录额外字段包含： -  ID为0x5455（通用时间）和5个数据字节的子字段。  本地额外字段具有UTC / GMT修改/访问时间。 -  ID为0x7855（Unix UID / GID）和0个数据字节的子字段。 没有文件评论。中央目录条目＃2：--------------------------- 公元前 从归档开始的本地头的偏移量：54（00000036h）个字节 文件系统或原产地操作系统：Unix 编码软件版本：2.3 所需的最低文件系统兼容性：MS-DOS，OS / 2或NT FAT 提取所需的最低软件版本：1.0 压缩方法：无（存储） 文件安全状态：未加密 扩展本地标题：没有 文件最后修改日期（DOS日期/时间）：2010年5月24日18:54:26 文件最后修改时（UT额外字段modtime）：2010年5月24日18:54:26本地 文件最后修改日期（UT额外字段modtime）：2010年5月24日10:54:26 UTC 32位CRC值（十六进制）：00000000 压缩大小：0字节 未压缩的大小：0字节 文件名长度：3个字符 额外字段的长度：13个字节 文件注释长度：0个字符 文件开头的磁盘号：磁盘1 表观文件类型：二进制 Unix文件属性（100644八进制）： -  rpm -r  -  r-- MS-DOS文件属性（00十六进制）：无 中心目录额外字段包含： -  ID为0x5455（通用时间）和5个数据字节的子字段。  本地额外字段具有UTC / GMT修改/访问时间。 -  ID为0x7855（Unix UID / GID）和0个数据字节的子字段。 没有文件评论。中央目录条目＃3：--------------------------- CC 从归档开始的本地头的偏移量：108（0000006Ch）个字节 文件系统或原产地操作系统：Unix 编码软件版本：2.3 所需的最低文件系统兼容性：MS-DOS，OS / 2或NT FAT 提取所需的最低软件版本：1.0 压缩方法：无（存储） 文件安全状态：未加密 扩展本地标题：没有 文件最后修改日期（DOS日期/时间）：2010年5月24日18:54:26 文件最后修改时（UT额外字段modtime）：2010年5月24日18:54:26本地 文件最后修改日期（UT额外字段modtime）：2010年5月24日10:54:26 UTC 32位CRC值（十六进制）：00000000 压缩大小：0字节 未压缩的大小：0字节 文件名长度：3个字符 额外字段的长度：13个字节 文件注释长度：0个字符 文件开头的磁盘号：磁盘1 表观文件类型：二进制 Unix文件属性（100644八进制）： -  rpm -r  -  r-- MS-DOS文件属性（00十六进制）：无 中心目录额外字段包含： -  ID为0x5455（通用时间）和5个数据字节的子字段。  本地额外字段具有UTC / GMT修改/访问时间。 -  ID为0x7855（Unix UID / GID）和0个数据字节的子字段。 没有文件评论。中央目录条目＃4：--------------------------- EC 从归档开始的本地头的偏移量：162（000000A2h）个字节 文件系统或原产地操作系统：Unix 编码软件版本：2.3 所需的最低文件系统兼容性：MS-DOS，OS / 2或NT FAT 提取所需的最低软件版本：1.0 压缩方法：无（存储） 文件安全状态：未加密 扩展本地标题：没有 文件最后修改日期（DOS日期/时间）：2010年5月24日18:54:26 文件最后修改时（UT额外字段modtime）：2010年5月24日18:54:26本地 文件最后修改日期（UT额外字段modtime）：2010年5月24日10:54:26 UTC 32位CRC值（十六进制）：00000000 压缩大小：0字节 未压缩的大小：0字节 文件名长度：3个字符 额外字段的长度：13个字节 文件注释长度：0个字符 文件开头的磁盘号：磁盘1 表观文件类型：二进制 Unix文件属性（100644八进制）： -  rpm -r  -  r-- MS-DOS文件属性（00十六进制）：无 中心目录额外字段包含： -  ID为0x5455（通用时间）和5个数据字节的子字段。  本地额外字段具有UTC / GMT修改/访问时间。 -  ID为0x7855（Unix UID / GID）和0个数据字节的子字段。 没有文件评论。</code></pre><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><ul><li><a href="https://www.runoob.com/linux/linux-command-manual.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-command-manual.html</a></li></ul><p><em>如有侵权，联系 <a href="mailto:2025685938@qq.com" target="_blank" rel="noopener">2025685938@qq.com</a> 删除</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.Linux命令（系统设置）</title>
      <link href="/posts/49806.html"/>
      <url>/posts/49806.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux命令（系统设置）"><a href="#Linux命令（系统设置）" class="headerlink" title="Linux命令（系统设置）"></a>Linux命令（系统设置）</h1><h2 id="1-reset"><a href="#1-reset" class="headerlink" title="1.reset"></a>1.reset</h2><p>​        reset命令其实和 tset 是一同个命令，它的用途是设定终端机的状态。一般而言，这个命令会自动的从环境变数、命令列或是其它的组态档决定目前终端机的型态。如果指定型态是 ‘?’ 的话，这个程序会要求使用者输入终端机的型别。</p><p>由于这个程序会将终端机设回原始的状态，除了在 login 时使用外，当系统终端机因为程序不正常执行而进入一些奇怪的状态时，你也可以用它来重设终端机o 例如不小心把二进位档用 cat 指令进到终端机，常会有终端机不再回应键盘输入，或是回应一些奇怪字元的问题。此时就可以用 reset 将终端机回复至原始状态。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre><code>tset [-IQqrs] [-] [-e ch] [-i ch] [-k ch] [-m mapping] [terminal]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-p 　将终端机类别显示在屏幕上，但不做设定的动作。这个命令可以用来取得目前终端机的类别。</li><li>-e ch 　将 erase 字元设成 ch</li><li>-i ch 　将中断字元设成 ch</li><li>-k ch 　将删除一行的字元设成 ch</li><li>-I 　不要做设定的动作，如果没有使用选项 -Q 的话，erase、中断及删除字元的目前值依然会送到屏幕上。</li><li>-Q 　不要显示 erase、中断及删除字元的值到屏幕上。</li><li>-r 　将终端机类别印在屏幕上。</li><li>-s 　将设定 TERM 用的命令用字串的型式送到终端机中，通常在 .login 或 .profile 中用。</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>让使用者输入一个终端机型别并将终端机设到该型别的预设状态</p><pre><code># reset ?</code></pre><p>将 erase 字元设定 control-h</p><pre><code># reset -e ^B</code></pre><p>将设定用的字串显示在屏幕上</p><pre><code># reset -sErase is control-B (^B).Kill is control-U (^U).Interrupt is control-C (^C).TERM=xterm;</code></pre><h2 id="2-clear"><a href="#2-clear" class="headerlink" title="2.clear"></a>2.clear</h2><p>clear命令用于清除屏幕。</p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><pre><code>clear</code></pre><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>清屏</p><pre><code>#clear</code></pre><h2 id="3-alias"><a href="#3-alias" class="headerlink" title="3.alias"></a>3.alias</h2><p> alias命令用于设置指令的别名。</p><p>用户可利用alias，自定指令的别名。若仅输入alias，则可列出目前所有的别名设置。alias的效力仅及于该次登入的操作。若要每次登入是即自动设好别名，可在.profile或.cshrc中设定指令的别名。</p><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><pre><code>alias[别名]=[指令名称]</code></pre><p><strong>参数说明</strong>：若不加任何参数，则列出目前所有的别名设置。</p><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><p>给命令设置别名</p><pre><code># alias lx=ls# lxanaconda-ks.cfg Desktop install.log install.log.syslog qte</code></pre><h2 id="4-dircolors"><a href="#4-dircolors" class="headerlink" title="4.dircolors"></a>4.dircolors</h2><p>dircolors命令用于设置ls指令在显示目录或文件时所用的色彩。</p><p>dircolors可根据[色彩配置文件]来设置LS_COLORS环境变量或是显示设置LS_COLORS环境变量的壳指令。</p><h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><pre><code>dircolors [色彩配置文件]</code></pre><p>或</p><pre><code>dircolors [-bcp] [ -  help] [ -  version]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-b或–sh或–bourne-shell显示在Boume shell中，将LS_COLORS设为目前预设置的shell指令。</li><li>-c或–csh或–c-shell显示在C shell中，将LS_COLORS设为目前预设置的shell指令。</li><li>-p或–print-database显示预设置</li><li>-help显示帮助。</li><li>-version显示版本信息。</li></ul><h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><p>显示默认值</p><pre><code>#dircolors -p //显示默认值#dircolors的配置文件，一个帮助您设置的实用程序＃LS_COLORS由GNU ls和--color选项使用的环境变量。#Copyright（C）1996,1999-2008#Free Software Foundation，Inc。＃复制和分发此文件，无论是否经过修改，＃是允许的，只要版权声明和本通知得到保留。＃关键字COLOR，OPTIONS和EIGHTBIT（受到尊敬#lackware版本的dircolors）被识别但被忽略。＃下面，每个可以着色的术语类型应该有一个TERM条目TERM EtermTERM ansiTERM color-xtermTERM con132x25TERM con132x30TERM con132x43TERM con132x60TERM con80x25TERM con80x28TERM xterm-debian＃下面是基本文件类型的颜色init字符串。颜色初始化#string由以下一个或多个数字代码组成：＃属性代码：＃00 =无01 =粗体04 =下划线05 =闪烁07 =反向08 =隐藏＃文字颜色代码：＃30 =黑色31 =红色32 =绿色33 =黄色34 =蓝色35 =品红色36 =青色37 =白色＃背景颜色代码：＃40 =黑色41 =红色42 =绿色43 =黄色44 =蓝色45 =品红色46 =青色47 =白色#NORMAL 00＃根本没有颜色代码#FILE 00＃常规文件：根本不使用任何颜色RESET 0＃重置为“正常”颜色DIR 01; 34＃目录LINK 01; 36＃符号链接。（如果将其设置为'target'而不是a＃数值，颜色与指向的文件相同。）HARDLINK 44; 37＃常规文件，带有多个链接FIFO 40; 33＃管道SOCK 01; 35＃插座DOOR 01; 35＃门BLK 40; 33; 01＃阻止设备驱动程序CHR 40; 33; 01＃字符设备驱动程序ORPHAN 40; 31; 01＃符号链接到不存在的文件或非stat'able文件SETUID 37; 41＃setuid文件（u + s）SETGID 30; 43＃setgid文件（g + s）CAPABILITY 30; 41＃文件具有功能STICKY_OTHER_WRITABLE 30; 42＃dir是粘性和其他可写的（+ t，o + w）OTHER_WRITABLE 34; 42＃dir是其他可写（o + w）且不粘STICKY 37; 44＃dir，粘滞位设置（+ t）而不是其他可写的＃这适用于具有执行权限的文件：执行01; 32＃列出您想要的任何文件扩展名，例如'.gz'或'.tar'＃在下面着色。放置扩展名，空格和颜色初始化字符串。＃（和'＃'之后要添加的任何评论）＃如果使用DOS样式的后缀，则可能需要取消注释以下内容：＃.cmd 01; 32＃可执行文件（亮绿色）＃.exe 01; 32＃.com 01; 32＃.btm 01; 32＃.bat 01; 32＃或者如果你想要将脚本着色，即使它们没有＃可执行位实际设置。＃.sh 01; 32＃.csh 01; 32#archives或压缩（鲜红色）.tar 01; 31.pcx 01; 35.mov 01; 35.mpg 01; 35.mpeg 01; 35.m2v 01; 35.mkv 01; 35.ogm 01; 35.mp4 01; 35.m4v 01; 35.mp4v 01; 35.vob 01; 35.qt 01; 35.nuv 01; 35.wmv 01; 35.asf 01; 35.rm 01; 35.rmvb 01; 35.flc 01; 35.avi 01; 35.fli 01; 35.flv 01; 35.gl 01; 35.dl 01; 35.xcf 01; 35.xwd 01; 35.yuv 01; 35＃http://wiki.xiph.org/index.php/MIME_Types_and_File_Extensions.axv 01; 35.anx 01; 35.ogv 01; 35.ogx 01; 35＃音频格式.aac 00; 36.au 00; 36.flac 00; 36.mid 00; 36.midi 00; 36.mka 00; 36.mp3 00; 36.mpc 00; 36.ogg 00; 36.ra 00; 36.wav 00; 36＃http://wiki.xiph.org/index.php/MIME_Types_and_File_Extensions.axa 00; 36.oga 00; 36.spx 00; 36.xspf 00; 36</code></pre><h2 id="5-aumix"><a href="#5-aumix" class="headerlink" title="5.aumix"></a>5.aumix</h2><p>aumix命令用于设置音效装置。</p><p>aumix(audio mixer)命令设置各项音效装置的信号强度以及指定播放与录音的装置。</p><h3 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h3><pre><code>aumix [-123bcilmoprstvwWx][(+/-)强度][PqR][-dfhILqS]</code></pre><p><strong>参数说明</strong>：[-123bcilmoprstvwWx]为频道参数，用来指定装置的频道；[PqR]可用来指定播放或录音装置；[-dfhILqS] 则为指令参数。若不加任何参数，aumix会显示简单的图形界面供调整设置频道参数。</p><ul><li>-1 　输入信号线１。</li><li>-2 　输入信号线２。</li><li>-3 　输入信号线３。</li><li>-b 　低音。</li><li>-c 　CD。</li><li>-i 　输入信号强度。</li><li>-m 　麦克风。</li><li>-o 　输出信号强度。</li><li>-p 　PC喇叭。</li><li>-r 　录音。</li><li>-s 　合成器。</li><li>-t 　高音。</li><li>-v 　主音量。</li><li>-w 　PCM。</li><li>-W 　PCM2。</li><li>-x 　混音器。</li><li>(+/-)强度 　出现(+/-)时，代表在原有的强度上加减指定值。若未使用(+/-)，则直接将强度设为指定值。 　指定音效装置</li><li>P 　指定播放装置。</li><li>q 　显示频道设置。</li><li>R 　指定录音装置。</li></ul><p><strong>指令参数</strong>：</p><ul><li>-d 　指定音效装置的名称。</li><li>-f 　指定存储或载入设置的文件。</li><li>-h 　在使用时显示信息。</li><li>-I 　以图形界面方式来执行aumix。</li><li>-L 　从$HOME/.aumixrc或/etc/aumixrc载入设置。</li><li>-q 　显示所有频道的设置值。</li><li>-S 　将设置值保存至/HOME/.aumixrc。</li></ul><h3 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h3><p>设置音效设备</p><pre><code># aumix</code></pre><h2 id="6-bind"><a href="#6-bind" class="headerlink" title="6.bind"></a>6.bind</h2><p>bind命令用于显示或设置键盘按键与其相关的功能。</p><p>您可以利用绑定命令了解有哪些按键组合与其功能，也可以自行指定要用哪些按键组合。</p><h3 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h3><pre><code>bind [-dlv] [ -  f &lt;按键配置文件&gt;] [ -  m &lt;按键配置&gt;] [ -  q &lt;功能&gt;]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-d显示按键配置的内容。</li><li>-f &lt;按键配置文件&gt;载入指定的按键配置文件。</li><li>-l列出所有的功能。</li><li>-m &lt;按键配置&gt;指定按键配置。</li><li>-q &lt;功能&gt;显示指定功能的按键。</li><li>-v列出目前的按键配置与其功能。</li></ul><h3 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h3><p>显示按键组合的所有功能</p><pre><code>＃bind -l //显示按键组合的内容退出接受在线别名扩展线箭头键前缀落后字节向后字符向后删除炭向后杀线落后的杀字反向词开始 - 历史的开始-线的......省略部分内容VI-转到标记VI-插入-BEGVI-插入模VI-比赛VI-运动模式VI-下一词VI-击VI-击，删除VI-上一个字六，把VI-重做六替换VI-擦去六，搜索VI-搜索再次VI-设置标志VI-SUBST六波浪线扩展VI-猛拉精氨酸VI-猛拉至猛拉猛拉，最后ARG猛拉，第n-ARG抽出流行</code></pre><p>显示当前按键组合的设置</p><pre><code>＃bind -l退出接受在线别名扩展线箭头键前缀落后字节向后字符向后删除炭向后杀线落后的杀字反向词开始 - 历史的开始-线的呼叫最后大骨节病宏利用字人物搜索人物检索用落后清屏完成完整的命令完整的文件名完整的主机名完整的成 - 括号完整的户名完整的变量复制反向词复制正向词复制区域作为杀dabbrev-扩大删除炭删除 - 炭或列表删除水平空间数字参数的显示壳版本做小写版本downcase字翻斗功能翻斗宏翻斗变量动态完整的历史编辑并执行命令emacs的编辑模式端-KBD宏结束历史行结束交换点和标志前后 - 删除 - 木炭前进字节前瞻性字符向前搜索历史正向词水珠完成单词水珠展开字水珠一览扩张历史和别名扩展线历史-扩大线历史搜索落后历史搜索前进插入注释插入完井插入，最后一个参数杀线杀区杀，整线杀字魔术空间菜单完成菜单完成后向接下来的历史非增量向前搜索历史非增量向前搜索历史，再次非增量反向搜索历史非增量反向搜索历史，再次老菜单完成操作和-GET-未来覆盖模式可能的命令，完井可能完井可能的文件名完井可能的主机名完井可能户名完井可能-可变完井以前的历史带引号的插入重绘电流线重新读取初始化文件反向搜索历史回复线自插入设置标志壳落后杀字壳反向词壳扩大线壳正向词外壳杀字跳过-CSI-序列启动大骨节病宏标签嵌件波浪线扩展转-字符转字TTY状态解开通用参数的UNIX的文件名，擦去UNIX的线丢弃UNIX的字擦去upcase字VI-追加-EOLVI-附加模式VI-ARG位六回至缩进VI-bwordVI-bWordVI-变化情况VI-变化焦炭VI-变更目的地VI-炭搜索六柱VI完成六，删除VI-删除到VI编辑模式VI-结束字VI-EOF，也许VI-ewordVI-eWord六，取历史VI-首张打印VI-FWORDVI-FWORDVI-转到标记VI-插入-BEGVI-插入模VI-比赛VI-运动模式VI-下一词VI-击VI-击，删除VI-上一个字六，把VI-重做六替换VI-擦去六，搜索VI-搜索再次VI-设置标志VI-SUBST六波浪线扩展VI-猛拉精氨酸VI-猛拉至猛拉猛拉，最后ARG猛拉，第n-ARG抽出流行根@蜗牛hnlinux：〜＃ 根@蜗牛hnlinux：〜＃ 根@蜗牛hnlinux：〜＃ 根@蜗牛hnlinux：〜＃ root @ snail-hnlinux：〜＃bind -vset bind-tty-special-chars on设置blink-matching-paren设置字节导向关闭设置完成 - 忽略 - 案例关闭设置convert-meta设置禁用完成关闭设置echo-control-characters设置启用键盘关闭设置enable-meta-key on设置expand-tilde设置history-preserve-point off设置水平滚动模式关闭设置input-meta设置标记目录设置标记修改后的行设置mark-symlinked-directories设置匹配隐藏文件设置元标志设置输出元数据设置页面完成次数设置prefer-visible-bell设置打印完成 - 水平关闭设置revert-all-at-newline off设置show-all-if-ambiguous off设置show-all-if-unmodified off设置skip-completed-text off设置visible-stats设置钟式音响设置评论开始＃设置completion-prefix-display-length 0设置完成查询项目100设置编辑模式emacs设置历史记录大小1000设置键盘映射emacs</code></pre><p>列出指定功能的按键和按键组合</p><pre><code>#bind -q abort//请用调用abort“Cg”，“C-xC-g”，“eC-g”。#bind -q accept-line //列出功能“accept-line”按键以及组合按键//请用调用accept-line“Cj”，“Cm”。</code></pre><h2 id="7-chroot"><a href="#7-chroot" class="headerlink" title="7.chroot"></a>7.chroot</h2><p>chroot命令用于改变根目录。</p><p>chroot(change root)命令把根目录换成指定的目的目录。</p><p>、</p><h3 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h3><pre><code>chroot [--help][--version][目的目录][执行指令...]</code></pre><p><strong>参数说明</strong>：</p><ul><li>–help 　在线帮助。</li><li>–version 　显示版本信息。</li></ul><h3 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h3><p>改变根目录</p><pre><code># chroot /mnt/ls //改变根目录</code></pre><h2 id="8-clock"><a href="#8-clock" class="headerlink" title="8.clock"></a>8.clock</h2><p>clock命令用于调整 RTC 时间。</p><p>RTC 是电脑内建的硬件时间，执行这项指令可以显示现在时刻，调整硬件时钟的时间，将系统时间设成与硬件时钟之时间一致，或是把系统时间回存到硬件时钟。</p><h3 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h3><pre><code>clock [--adjust][--debug][--directisa][--getepoch][--hctosys][--set --date="&lt;日期时间&gt;"][--setepoch --epoch=&lt; &gt;][--show][--systohc][--test][--utc][--version]</code></pre><p><strong>参数说明</strong>：</p><ul><li>–adjust 　第一次使用”–set”或”–systohc”参数设置硬件时钟，会在/etc目录下产生一个名称为adjtime的文件。当再次使用这两个参数调整硬件时钟，此文件便会记录两次调整间之差异，日后执行clock指令加上”–adjust”参数时，程序会自动根 据记录文件的数值差异，计算出平均值，自动调整硬件时钟的时间。</li><li>–debug 　详细显示指令执行过程，便于排错或了解程序执行的情形。</li><li>–directisa 　告诉clock指令不要通过/dev/rtc设备文件，直接对硬件时钟进行存取。这个参数适用于仅有ISA总线结构的老式电脑。</li><li>–getepoch 　把系统核心内的硬件时钟新时代数值，呈现到标准输出设备。</li><li>–hctosys 　Hardware Clock to System Time，把系统时间设成和硬件时钟一致。由于这个动作将会造成系统全面更新文件的存取时间，所以最好在系统启动时就执行它。</li><li>–set–date 　设置硬件时钟的日期和时间。</li><li>–setepoch–epoch=&lt;年份&gt; 　设置系统核心之硬件时钟的新时代数值，年份以四位树字表示。</li><li>–show 　读取硬件时钟的时间，并将其呈现至标准输出设备。</li><li>–systohc 　System Time to Hardware Clock，将系统时间存回硬件时钟内。</li><li>–test 　仅作测试，并不真的将时间写入硬件时钟或系统时间。</li><li>–utc 　把硬件时钟上的时间时为CUT，有时也称为UTC或UCT。</li><li>–version 　显示版本信息。</li></ul><h3 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h3><p>获取当前的时间</p><pre><code># clock //获取当前的时间</code></pre><p>显示UTC时间</p><pre><code># clock -utc //显示UTC时间</code></pre><h2 id="9-crontab"><a href="#9-crontab" class="headerlink" title="9.crontab"></a>9.crontab</h2><p>crontab是用来定期执行程序的命令。</p><p>当安装完成操作系统之后，默认便会启动此任务调度命令。</p><p>crond命令每分锺会定期检查是否有要执行的工作，如果有要执行的工作便会自动执行该工作。</p><p>而linux任务调度的工作主要分为以下两类：</p><ul><li>1、系统执行的工作：系统周期性所要执行的工作，如备份系统数据、清理缓存</li><li>2、个人执行的工作：某个用户定期要做的工作，例如每隔10分钟检查邮件服务器是否有新信，这些工作可由每个用户自行设置</li></ul><h3 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h3><pre><code>crontab [ -u user ] file</code></pre><p>或</p><pre><code>crontab [ -u user ] { -l | -r | -e }</code></pre><p><strong>说明：</strong></p><p>crontab 是用来让使用者在固定时间或固定间隔执行程序之用，换句话说，也就是类似使用者的时程表。</p><p>-u user 是指设定指定 user 的时程表，这个前提是你必须要有其权限(比如说是 root)才能够指定他人的时程表。如果不使用 -u user 的话，就是表示设定自己的时程表。</p><p><strong>参数说明</strong>：</p><ul><li>-e : 执行文字编辑器来设定时程表，内定的文字编辑器是 VI，如果你想用别的文字编辑器，则请先设定 VISUAL 环境变数来指定使用那个文字编辑器(比如说 setenv VISUAL joe)</li><li>-r : 删除目前的时程表</li><li>-l : 列出目前的时程表</li></ul><p>时程表的格式如下：</p><pre><code>f1 f2 f3 f4 f5 program</code></pre><ul><li>其中 f1 是表示分钟，f2 表示小时，f3 表示一个月份中的第几日，f4 表示月份，f5 表示一个星期中的第几天。program 表示要执行的程序。</li><li>当 f1 为 * 时表示每分钟都要执行 program，f2 为 * 时表示每小时都要执行程序，其馀类推</li><li>当 f1 为 a-b 时表示从第 a 分钟到第 b 分钟这段时间内要执行，f2 为 a-b 时表示从第 a 到第 b 小时都要执行，其馀类推</li><li>当 f1 为 */n 时表示每 n 分钟个时间间隔执行一次，f2 为 */n 表示每 n 小时个时间间隔执行一次，其馀类推</li><li>当 f1 为 a, b, c,… 时表示第 a, b, c,… 分钟要执行，f2 为 a, b, c,… 时表示第 a, b, c…个小时要执行，其馀类推</li></ul><p>使用者也可以将所有的设定先存放在文件中，用 crontab file 的方式来设定时程表。</p><h3 id="实例-8"><a href="#实例-8" class="headerlink" title="实例"></a>实例</h3><p>每月每天每小时的第 0 分钟执行一次 /bin/ls</p><pre><code>0 * * * * /bin/ls</code></pre><p>在 12 月内, 每天的早上 6 点到 12 点，每隔 3 个小时 0 分钟执行一次 /usr/bin/backup</p><pre><code>0 6-12/3 * 12 * /usr/bin/backup</code></pre><p>周一到周五每天下午 5:00 寄一封信给 <a href="mailto:alex@domain.name" target="_blank" rel="noopener">alex@domain.name</a></p><pre><code>0 17 * * 1-5 mail -s "hi" alex@domain.name &lt; /tmp/maildata</code></pre><p>每月每天的午夜 0 点 20 分, 2 点 20 分, 4 点 20 分….执行 echo “haha”</p><pre><code>20 0-23/2 * * * echo "haha"</code></pre><p>下面再看看几个具体的例子：</p><pre><code>0 */2 * * * /sbin/service httpd restart  意思是每两个小时重启一次apache 50 7 * * * /sbin/service sshd start  意思是每天7：50开启ssh服务 50 22 * * * /sbin/service sshd stop  意思是每天22：50关闭ssh服务 0 0 1,15 * * fsck /home  每月1号和15号检查/home 磁盘 1 * * * * /home/bruce/backup  每小时的第一分执行 /home/bruce/backup这个文件 00 03 * * 1-5 find /home "*.xxx" -mtime +4 -exec rm {} \;  每周一至周五3点钟，在目录/home中，查找文件名为*.xxx的文件，并删除4天前的文件。30 6 */10 * * ls  意思是每月的1、11、21、31日是的6：30执行一次ls命令</code></pre><p><strong>注意：</strong>当程序在你所指定的时间执行后，系统会寄一封信给你，显示该程序执行的内容，若是你不希望收到这样的信，请在每一行空一格之后加上 &gt; /dev/null 2&gt;&amp;1 即可</p><h2 id="10-declare"><a href="#10-declare" class="headerlink" title="10.declare"></a>10.declare</h2><p>Linux declare命令用于声明 shell 变量。</p><p>declare为shell指令，在第一种语法中可用来声明变量并设置变量的属性([rix]即为变量的属性），在第二种语法中可用来显示shell函数。若不加上任何参数，则会显示全部的shell变量与函数(与执行set指令的效果相同)。</p><h3 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h3><pre><code>declare [+/-][rxi][变量名称＝设置值] 或 declare -f</code></pre><p><strong>参数说明</strong>：</p><ul><li>+/- 　“-“可用来指定变量的属性，”+”则是取消变量所设的属性。</li><li>-f 　仅显示函数。</li><li>r 　将变量设置为只读。</li><li>x 　指定的变量会成为环境变量，可供shell以外的程序来使用。</li><li>i 　[设置值]可以是数值，字符串或运算式。</li></ul><h3 id="实例-9"><a href="#实例-9" class="headerlink" title="实例"></a>实例</h3><p>声明整数型变量</p><pre><code># declare -i ab //声明整数型变量# ab=56 //改变变量内容# echo $ab //显示变量内容56</code></pre><p>改变变量属性</p><pre><code># declare -i ef //声明整数型变量# ef=1  //变量赋值（整数值）# echo $ef //显示变量内容1# ef="wer" //变量赋值（文本值）# echo $ef 0# declare +i ef //取消变量属性# ef="wer"# echo $efwer</code></pre><p>设置变量只读</p><pre><code># declare -r ab //设置变量为只读# ab=88 //改变变量内容-bash: ab: 只读变量# echo $ab //显示变量内容56</code></pre><p>声明数组变量</p><pre><code># declare -a cd='([0]="a" [1]="b" [2]="c")' //声明数组变量# echo ${cd[1]}b //显示变量内容# echo ${cd[@]} //显示整个数组变量内容a b c</code></pre><p>显示函数</p><pre><code># declare -fcommand_not_found_handle () {   if [ -x /usr/lib/command-not-found ]; then    /usr/bin/python /usr/lib/command-not-found -- $1;    return $?;  else    if [ -x /usr/share/command-not-found ]; then      /usr/bin/python /usr/share/command-not-found -- $1;      return $?;    else      return 127;    fi;  fi}</code></pre><h2 id="11-depmod"><a href="#11-depmod" class="headerlink" title="11.depmod"></a>11.depmod</h2><p>depmod命令用于分析可载入模块的相依性。</p><p>depmod(depend module)可检测模块的相依性，供modprobe在安装模块时使用。</p><h3 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h3><pre><code>depmod [-adeisvV][-m &lt;文件&gt;][--help][模块名称]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-a或–all 　分析所有可用的模块。</li><li>-d或debug 　执行排错模式。</li><li>-e 　输出无法参照的符号。</li><li>-i 　不检查符号表的版本。</li><li>-m&lt;文件&gt;或system-map&lt;文件&gt; 　使用指定的符号表文件。</li><li>-s或–system-log 　在系统记录中记录错误。</li><li>-v或–verbose 　执行时显示详细的信息。</li><li>-V或–version 　显示版本信息。</li><li>–help 　显示帮助。</li></ul><h3 id="实例-10"><a href="#实例-10" class="headerlink" title="实例"></a>实例</h3><p>显示可用模块</p><pre><code># depmod -a //显示可用模块</code></pre><h2 id="12-dmesg"><a href="#12-dmesg" class="headerlink" title="12.dmesg"></a>12.dmesg</h2><p>dmesg命令用于显示开机信息。</p><p>kernel会将开机信息存储在ring buffer中。您若是开机时来不及查看信息，可利用dmesg来查看。开机信息亦保存在/var/log目录中，名称为dmesg的文件里。</p><h3 id="语法-11"><a href="#语法-11" class="headerlink" title="语法"></a>语法</h3><pre><code>dmesg [-cn][-s &lt;缓冲区大小&gt;]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-c 　显示信息后，清除ring buffer中的内容。</li><li>-s&lt;缓冲区大小&gt; 　预设置为8196，刚好等于ring buffer的大小。</li><li>-n 　设置记录信息的层级。</li></ul><h3 id="实例-11"><a href="#实例-11" class="headerlink" title="实例"></a>实例</h3><p>显示开机信息</p><pre><code># dmesg |lessWARNING: terminal is not fully functional[  0.000000] Initializing cgroup subsys cpuset[  0.000000] Initializing cgroup subsys cpu[  0.000000] Linux version 2.6.32-21-generic (buildd@rothera) (gcc version 4.4.3 (Ubuntu 4.4.3-4ubuntu5) ) #32-Ubuntu SMP Fri Apr 16 08:10:02 UTC 2010 (Ubuntu 2.6.32-21.32-generic 2.6.32.11+drm33.2)[  0.000000] KERNEL supported cpus:[  0.000000]  Intel GenuineIntel[  0.000000]  AMD AuthenticAMD[  0.000000]  NSC Geode by NSC[  0.000000]  Cyrix CyrixInstead[  0.000000]  Centaur CentaurHauls[  0.000000]  Transmeta GenuineTMx86[  0.000000]  Transmeta TransmetaCPU[  0.000000]  UMC UMC UMC UMC[  0.000000] BIOS-provided physical RAM map:[  0.000000] BIOS-e820: 0000000000000000 - 000000000009f800 (usable)[  0.000000] BIOS-e820: 000000000009f800 - 00000000000a0000 (reserved)[  0.000000] BIOS-e820: 00000000000ca000 - 00000000000cc000 (reserved)[  0.000000] BIOS-e820: 00000000000dc000 - 00000000000e0000 (reserved)[  0.000000] BIOS-e820: 00000000000e4000 - 0000000000100000 (reserved)[  0.000000] BIOS-e820: 0000000000100000 - 000000003fef0000 (usable)[  0.000000] BIOS-e820: 000000003fef0000 - 000000003feff000 (ACPI data)[  0.000000] BIOS-e820: 000000003feff000 - 000000003ff00000 (ACPI NVS)……省略部分内容</code></pre><p>显示开机信息</p><pre><code>#pwd   //查看当前所在目录/home/hnlinux/# dmesg &gt; boot.msg //将开机信息保存到 boot.msg文件中#ls //显示当前目录文件boot.msg</code></pre><h2 id="13-enable"><a href="#13-enable" class="headerlink" title="13.enable"></a>13.enable</h2><p>enable命令用于启动或关闭 shell 内建指令。</p><p>若要执行的文件名称与shell内建指令相同，可用enable -n来关闭shell内建指令。若不加-n参数，enable可重新启动关闭的指令。</p><h3 id="语法-12"><a href="#语法-12" class="headerlink" title="语法"></a>语法</h3><pre><code>enable [-n][-all][内建指令]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-n 　关闭指定的shell内建指令。</li><li>-all 　显示shell所有关闭与启动的指令。</li></ul><h3 id="实例-12"><a href="#实例-12" class="headerlink" title="实例"></a>实例</h3><p>显示shell内置命令</p><pre><code># enable //显示shell命令enable .enable :enable [enable aliasenable bgenable bindenable breakenable builtinenable callerenable cdenable commandenable compgenenable completeenable compoptenable continueenable declareenable dirsenable disownenable echoenable enableenable evalenable execenable exitenable exportenable falseenable fcenable fgenable getoptsenable hashenable helpenable historyenable jobsenable killenable letenable localenable logoutenable mapfileenable popdenable printfenable pushdenable pwdenable readenable readarrayenable readonlyenable returnenable setenable shiftenable shoptenable sourceenable suspendenable testenable timesenable trapenable trueenable typeenable typesetenable ulimitenable umaskenable unaliasenable unsetenable wait</code></pre><h2 id="14-eval"><a href="#14-eval" class="headerlink" title="14.eval"></a>14.eval</h2><p>eval命令用于重新运算求出参数的内容。</p><p>eval可读取一连串的参数，然后再依参数本身的特性来执行。</p><h3 id="语法-13"><a href="#语法-13" class="headerlink" title="语法"></a>语法</h3><pre><code>eval [参数]</code></pre><p><strong>参数说明</strong>：参数不限数目，彼此之间用分号分开。</p><h3 id="实例-13"><a href="#实例-13" class="headerlink" title="实例"></a>实例</h3><p>连接多个命令</p><pre><code># eval enable;ls //连接多个命令enable .enable :enable [enable aliasenable bgenable bindenable breakenable builtinenable callerenable cdenable commandenable compgenenable completeenable compoptenable continueenable declareenable dirsenable disownenable echoenable enableenable evalenable execenable exitenable exportenable falseenable fcenable fgenable getoptsenable hashenable helpenable historyenable jobsenable killenable letenable localenable logoutenable mapfileenable popdenable printfenable pushdenable pwdenable readenable readarrayenable readonlyenable returnenable setenable shiftenable shoptenable sourceenable suspendenable testenable timesenable trapenable trueenable typeenable typesetenable ulimitenable umaskenable unaliasenable unsetenable wait</code></pre><h2 id="15-export"><a href="#15-export" class="headerlink" title="15.export"></a>15.export</h2><p>export命令用于设置或显示环境变量。</p><p>在shell中执行程序时，shell会提供一组环境变量。export可新增，修改或删除环境变量，供后续执行的程序使用。export的效力仅及于该次登陆操作。</p><h3 id="语法-14"><a href="#语法-14" class="headerlink" title="语法"></a>语法</h3><pre><code>export [-fnp][变量名称]=[变量设置值]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-f 　代表[变量名称]中为函数名称。</li><li>-n 　删除指定的变量。变量实际上并未删除，只是不会输出到后续指令的执行环境中。</li><li>-p 　列出所有的shell赋予程序的环境变量。</li></ul><h3 id="实例-14"><a href="#实例-14" class="headerlink" title="实例"></a>实例</h3><p>列出当前所有的环境变量</p><pre><code># export -p //列出当前的环境变量值declare -x HOME=“/root“declare -x LANG=“zh_CN.UTF-8“declare -x LANGUAGE=“zh_CN:zh“declare -x LESSCLOSE=“/usr/bin/lesspipe %s %s“declare -x LESSOPEN=“| /usr/bin/lesspipe %s“declare -x LOGNAME=“root“declare -x LS_COLORS=““declare -x MAIL=“/var/mail/root“declare -x OLDPWDdeclare -x PATH=“/opt/toolchains/arm920t-eabi/bin:/opt/toolchains/arm920t-eabi/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games“declare -x PWD=“/root“declare -x SHELL=“/bin/bash“declare -x SHLVL=“1“declare -x SPEECHD_PORT=“6560“declare -x SSH_CLIENT=“192.168.1.65 1674 22“declare -x SSH_CONNECTION=“192.168.1.65 1674 192.168.1.3 22“declare -x SSH_TTY=“/dev/pts/2“declare -x TERM=“XTERM“declare -x USER=“root“declare -x XDG_SESSION_COOKIE=“93b5d3d03e032c0cf892a4474bebda9f-1273864738.954257-340206484“</code></pre><p>定义环境变量</p><pre><code># export MYENV //定义环境变量# export -p //列出当前的环境变量declare -x HOME=“/root“declare -x LANG=“zh_CN.UTF-8“declare -x LANGUAGE=“zh_CN:zh“declare -x LESSCLOSE=“/usr/bin/lesspipe %s %s“declare -x LESSOPEN=“| /usr/bin/lesspipe %s“declare -x LOGNAME=“root“declare -x LS_COLORS=““declare -x MAIL=“/var/mail/root“declare -x MYENVdeclare -x OLDPWDdeclare -x PATH=“/opt/toolchains/arm920t-eabi/bin:/opt/toolchains/arm920t-eabi/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games“declare -x PWD=“/root“declare -x SHELL=“/bin/bash“declare -x SHLVL=“1“declare -x SPEECHD_PORT=“6560“declare -x SSH_CLIENT=“192.168.1.65 1674 22“declare -x SSH_CONNECTION=“192.168.1.65 1674 192.168.1.3 22“declare -x SSH_TTY=“/dev/pts/2“declare -x TERM=“XTERM“declare -x USER=“root“declare -x XDG_SESSION_COOKIE=“93b5d3d03e032c0cf892a4474bebda9f-1273864738.954257-340206484“</code></pre><p>定义环境变量赋值</p><pre><code># export MYENV=7 //定义环境变量并赋值# export -pdeclare -x HOME=“/root“declare -x LANG=“zh_CN.UTF-8“declare -x LANGUAGE=“zh_CN:zh“declare -x LESSCLOSE=“/usr/bin/lesspipe %s %s“declare -x LESSOPEN=“| /usr/bin/lesspipe %s“declare -x LOGNAME=“root“declare -x LS_COLORS=““declare -x MAIL=“/var/mail/root“declare -x MYENV=“7“declare -x OLDPWDdeclare -x PATH=“/opt/toolchains/arm920t-eabi/bin:/opt/toolchains/arm920t-eabi/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games“declare -x PWD=“/root“declare -x SHELL=“/bin/bash“declare -x SHLVL=“1“declare -x SPEECHD_PORT=“6560“declare -x SSH_CLIENT=“192.168.1.65 1674 22“declare -x SSH_CONNECTION=“192.168.1.65 1674 192.168.1.3 22“declare -x SSH_TTY=“/dev/pts/2“declare -x TERM=“XTERM“declare -x USER=“root“declare -x XDG_SESSION_COOKIE=“93b5d3d03e032c0cf892a4474bebda9f-1273864738.954257-340206484“</code></pre><h2 id="16-pwunconv"><a href="#16-pwunconv" class="headerlink" title="16.pwunconv"></a>16.pwunconv</h2><p>pwunconv命令用于关闭用户的投影密码。</p><p>执行pwunconv指令可以关闭用户投影密码，它会把密码从shadow文件内，重回存到passwd文件里。</p><h3 id="语法-15"><a href="#语法-15" class="headerlink" title="语法"></a>语法</h3><pre><code>pwunconv</code></pre><h3 id="实例-15"><a href="#实例-15" class="headerlink" title="实例"></a>实例</h3><p>关闭用户的投影密码</p><pre><code># pwunconv</code></pre><h2 id="17-grpconv"><a href="#17-grpconv" class="headerlink" title="17.grpconv"></a>17.grpconv</h2><p>grpconv(group convert to shadow password)命令用于开启群组的投影密码。</p><p>Linux系统里的用户和群组密码，分别存放在/etc目录下的passwd和group文件中。因系统运作所需，任何人都得以读取它们，造成安全上的破绽。投影密码将文件内的密码改存在/etc目录下的shadow和gshadow文件内，只允许系统管理者读取，同时把原密码置换为”x”字符。投影密码的功能可随时开启或关闭，您只需执行grpconv指令就能开启群组投影密码。</p><h3 id="语法-16"><a href="#语法-16" class="headerlink" title="语法"></a>语法</h3><pre><code>grpconv</code></pre><h2 id="18-rpm"><a href="#18-rpm" class="headerlink" title="18.rpm"></a>18.rpm</h2><p>rpm 命令用于管理套件。</p><p>rpm(redhat package manager) 原本是 Red Hat Linux 发行版专门用来管理 Linux 各项套件的程序，由于它遵循 GPL 规则且功能强大方便，因而广受欢迎。逐渐受到其他发行版的采用。RPM 套件管理方式的出现，让 Linux 易于安装，升级，间接提升了 Linux 的适用度。</p><h3 id="语法-17"><a href="#语法-17" class="headerlink" title="语法"></a>语法</h3><pre><code>rpm [-acdhilqRsv][-b&lt;完成阶段&gt;&lt;套间档&gt;+][-e&lt;套件挡&gt;][-f&lt;文件&gt;+][-i&lt;套件档&gt;][-p&lt;套件档&gt;＋][-U&lt;套件档&gt;][-vv][--addsign&lt;套件档&gt;+][--allfiles][--allmatches][--badreloc][--buildroot&lt;根目录&gt;][--changelog][--checksig&lt;套件档&gt;+][--clean][--dbpath&lt;数据库目录&gt;][--dump][--excludedocs][--excludepath&lt;排除目录&gt;][--force][--ftpproxy&lt;主机名称或IP地址&gt;][--ftpport&lt;通信端口&gt;][--help][--httpproxy&lt;主机名称或IP地址&gt;][--httpport&lt;通信端口&gt;][--ignorearch][--ignoreos][--ignoresize][--includedocs][--initdb][justdb][--nobulid][--nodeps][--nofiles][--nogpg][--nomd5][--nopgp][--noorder][--noscripts][--notriggers][--oldpackage][--percent][--pipe&lt;执行指令&gt;][--prefix&lt;目的目录&gt;][--provides][--queryformat&lt;档头格式&gt;][--querytags][--rcfile&lt;配置档&gt;][--rebulid&lt;套件档&gt;][--rebuliddb][--recompile&lt;套件档&gt;][--relocate&lt;原目录&gt;=&lt;新目录&gt;][--replacefiles][--replacepkgs][--requires][--resign&lt;套件档&gt;+][--rmsource][--rmsource&lt;文件&gt;][--root&lt;根目录&gt;][--scripts][--setperms][--setugids][--short-circuit][--sign][--target=&lt;安装平台&gt;+][--test][--timecheck&lt;检查秒数&gt;][--triggeredby&lt;套件档&gt;][--triggers][--verify][--version][--whatprovides&lt;功能特性&gt;][--whatrequires&lt;功能特性&gt;]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-a 　查询所有套件。</li><li>-b&lt;完成阶段&gt;&lt;套件档&gt;+或-t &lt;完成阶段&gt;&lt;套件档&gt;+ 　设置包装套件的完成阶段，并指定套件档的文件名称。</li><li>-c 　只列出组态配置文件，本参数需配合”-l”参数使用。</li><li>-d 　只列出文本文件，本参数需配合”-l”参数使用。</li><li>-e&lt;套件档&gt;或–erase&lt;套件档&gt; 　删除指定的套件。</li><li>-f&lt;文件&gt;+ 　查询拥有指定文件的套件。</li><li>-h或–hash 　套件安装时列出标记。</li><li>-i 　显示套件的相关信息。</li><li>-i&lt;套件档&gt;或–install&lt;套件档&gt; 　安装指定的套件档。</li><li>-l 　显示套件的文件列表。</li><li>-p&lt;套件档&gt;+ 　查询指定的RPM套件档。</li><li>-q 　使用询问模式，当遇到任何问题时，rpm指令会先询问用户。</li><li>-R 　显示套件的关联性信息。</li><li>-s 　显示文件状态，本参数需配合”-l”参数使用。</li><li>-U&lt;套件档&gt;或–upgrade&lt;套件档&gt; 升级指定的套件档。</li><li>-v 　显示指令执行过程。</li><li>-vv 　详细显示指令执行过程，便于排错。</li><li>-addsign&lt;套件档&gt;+ 　在指定的套件里加上新的签名认证。</li><li>–allfiles 　安装所有文件。</li><li>–allmatches 　删除符合指定的套件所包含的文件。</li><li>–badreloc 　发生错误时，重新配置文件。</li><li>–buildroot&lt;根目录&gt; 　设置产生套件时，欲当作根目录的目录。</li><li>–changelog 　显示套件的更改记录。</li><li>–checksig&lt;套件档&gt;+ 　检验该套件的签名认证。</li><li>–clean 　完成套件的包装后，删除包装过程中所建立的目录。</li><li>–dbpath&lt;数据库目录&gt; 　设置欲存放RPM数据库的目录。</li><li>–dump 　显示每个文件的验证信息。本参数需配合”-l”参数使用。</li><li>–excludedocs 　安装套件时，不要安装文件。</li><li>–excludepath&lt;排除目录&gt; 　忽略在指定目录里的所有文件。</li><li>–force 　强行置换套件或文件。</li><li>–ftpproxy&lt;主机名称或IP地址&gt; 　指定FTP代理服务器。</li><li>–ftpport&lt;通信端口&gt; 　设置FTP服务器或代理服务器使用的通信端口。</li><li>–help 　在线帮助。</li><li>–httpproxy&lt;主机名称或IP地址&gt; 　指定HTTP代理服务器。</li><li>–httpport&lt;通信端口&gt; 　设置HTTP服务器或代理服务器使用的通信端口。</li><li>–ignorearch 　不验证套件档的结构正确性。</li><li>–ignoreos 　不验证套件档的结构正确性。</li><li>–ignoresize 　安装前不检查磁盘空间是否足够。</li><li>–includedocs 　安装套件时，一并安装文件。</li><li>–initdb 　确认有正确的数据库可以使用。</li><li>–justdb 　更新数据库，当不变动任何文件。</li><li>–nobulid 　不执行任何完成阶段。</li><li>–nodeps 　不验证套件档的相互关联性。</li><li>–nofiles 　不验证文件的属性。</li><li>–nogpg 　略过所有GPG的签名认证。</li><li>–nomd5 　不使用MD5编码演算确认文件的大小与正确性。</li><li>–nopgp 　略过所有PGP的签名认证。</li><li>–noorder 　不重新编排套件的安装顺序，以便满足其彼此间的关联性。</li><li>–noscripts 　不执行任何安装Script文件。</li><li>–notriggers 　不执行该套件包装内的任何Script文件。</li><li>–oldpackage 　升级成旧版本的套件。</li><li>–percent 　安装套件时显示完成度百分比。</li><li>–pipe&lt;执行指令&gt; 　建立管道，把输出结果转为该执行指令的输入数据。</li><li>–prefix&lt;目的目录&gt; 　若重新配置文件，就把文件放到指定的目录下。</li><li>–provides 　查询该套件所提供的兼容度。</li><li>–queryformat&lt;档头格式&gt; 　设置档头的表示方式。</li><li>–querytags 　列出可用于档头格式的标签。</li><li>–rcfile&lt;配置文件&gt; 　使用指定的配置文件。</li><li>–rebulid&lt;套件档&gt; 　安装原始代码套件，重新产生二进制文件的套件。</li><li>–rebuliddb 　以现有的数据库为主，重建一份数据库。</li><li>–recompile&lt;套件档&gt; 　此参数的效果和指定”–rebulid”参数类似，当不产生套件档。</li><li>–relocate&lt;原目录&gt;=&lt;新目录&gt; 　把本来会放到原目录下的文件改放到新目录。</li><li>–replacefiles 　强行置换文件。</li><li>–replacepkgs 　强行置换套件。</li><li>–requires 　查询该套件所需要的兼容度。</li><li>–resing&lt;套件档&gt;+ 　删除现有认证，重新产生签名认证。</li><li>–rmsource 　完成套件的包装后，删除原始代码。</li><li>–rmsource&lt;文件&gt; 　删除原始代码和指定的文件。</li><li>–root&lt;根目录&gt; 　设置欲当作根目录的目录。</li><li>–scripts 　列出安装套件的Script的变量。</li><li>–setperms 　设置文件的权限。</li><li>–setugids 　设置文件的拥有者和所属群组。</li><li>–short-circuit 　直接略过指定完成阶段的步骤。</li><li>–sign 　产生PGP或GPG的签名认证。</li><li>–target=&lt;安装平台&gt;+ 　设置产生的套件的安装平台。</li><li>–test 　仅作测试，并不真的安装套件。</li><li>–timecheck&lt;检查秒数&gt; 　设置检查时间的计时秒数。</li><li>–triggeredby&lt;套件档&gt; 　查询该套件的包装者。</li><li>–triggers 　展示套件档内的包装Script。</li><li>–verify 　此参数的效果和指定”-q”参数相同。</li><li>–version 　显示版本信息。</li><li>–whatprovides&lt;功能特性&gt; 　查询该套件对指定的功能特性所提供的兼容度。</li><li>–whatrequires&lt;功能特性&gt; 　查询该套件对指定的功能特性所需要的兼容度。</li></ul><h3 id="实例-16"><a href="#实例-16" class="headerlink" title="实例"></a>实例</h3><p>安装软件</p><pre><code># rpm -hvi dejagnu-1.4.2-10.noarch.rpm 警告：dejagnu-1.4.2-10.noarch.rpm: V3 DSA 签名：NOKEY, key ID db42a60e准备...           ########################################### [100%]</code></pre><p>显示软件安装信息</p><pre><code># rpm -qi dejagnu-1.4.2-10.noarch.rpm【第1次更新 教程、类似命令关联】</code></pre><h2 id="19-insmod"><a href="#19-insmod" class="headerlink" title="19.insmod"></a>19.insmod</h2><p>insmod(install module)命令用于载入模块。</p><p>Linux有许多功能是通过模块的方式，在需要时才载入kernel。如此可使kernel较为精简，进而提高效率，以及保有较大的弹性。这类可载入的模块，通常是设备驱动程序。</p><h3 id="语法-18"><a href="#语法-18" class="headerlink" title="语法"></a>语法</h3><pre><code>insmod [-fkmpsvxX][-o &lt;模块名称&gt;][模块文件][符号名称 = 符号值]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-f 　不检查目前kernel版本与模块编译时的kernel版本是否一致，强制将模块载入。</li><li>-k 　将模块设置为自动卸除。</li><li>-m 　输出模块的载入信息。</li><li>-o&lt;模块名称&gt; 　指定模块的名称，可使用模块文件的文件名。</li><li>-p 　测试模块是否能正确地载入kernel。</li><li>-s 　将所有信息记录在系统记录文件中。</li><li>-v 　执行时显示详细的信息。</li><li>-x 　不要汇出模块的外部符号。</li><li>-X 　汇出模块所有的外部符号，此为预设置。</li></ul><h3 id="实例-17"><a href="#实例-17" class="headerlink" title="实例"></a>实例</h3><p>加载模块</p><pre><code># insmod led.o //向内核加载模块</code></pre><h2 id="20-kbdconfig"><a href="#20-kbdconfig" class="headerlink" title="20.kbdconfig"></a>20.kbdconfig</h2><p>kbdconfig命令用于设置键盘类型。</p><p>kbdconfig(Red Hat Linux才有的指令)是一个用来设置键盘的程序，提供图形化的操作界面。kbdconfig实际上是修改/etc/sysconfig/keyboard的键盘配置文件。</p><h3 id="语法-19"><a href="#语法-19" class="headerlink" title="语法"></a>语法</h3><pre><code>kbdconfig [--back][--test]</code></pre><p><strong>参数</strong>：</p><ul><li>–back 　执行时将预设的Cancel按钮更改为Back按钮。</li><li>–test 　仅作测试，不会实际更改设置。</li></ul><h3 id="实例-18"><a href="#实例-18" class="headerlink" title="实例"></a>实例</h3><p>键盘设置：</p><pre><code># kdbconfig //设置键盘</code></pre><h2 id="21-lilo"><a href="#21-lilo" class="headerlink" title="21.lilo"></a>21.lilo</h2><p>lilo命令用于安装核心载入，开机管理程序。</p><p>lilo(linux loader)是个Linux系统核心载入程序，同时具备管理开机的功能。单独执行lilo指令，它会读取/etc/目录下的lilo.conf配置文件，然后根据其内容安装lilo。</p><h3 id="语法-20"><a href="#语法-20" class="headerlink" title="语法"></a>语法</h3><pre><code>lilo [-clqtV][-b&lt;外围设备代号&gt;][-C&lt;配置文件&gt;][-d&lt;延迟时间&gt;][－D&lt;识别标签&gt;][-f&lt;几何参数文件&gt;][-i&lt;开机磁区文件&gt;][-I&lt;识别标签&gt;][-m&lt;映射文件&gt;][-P&lt;fix/ignore&gt;][-r&lt;根目录&gt;][-R&lt;执行指令&gt;...][-s&lt;备份文件&gt;][-S&lt;备份文件&gt;][-uU&lt;外围设备代号&gt;][-v...]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-b&lt;外围设备代号&gt; 　指定安装lilo之处的外围设备代号。</li><li>-c 　使用紧致映射模式。</li><li>-C&lt;配置文件&gt; 　指定lilo的配置文件。</li><li>-d&lt;延迟时间&gt; 　设置开机延迟时间。</li><li>-D&lt;识别标签&gt; 　指定开机后预设启动的操作系统，或系统核心识别标签。</li><li>-f&lt;几何参数文件&gt; 　指定磁盘的几何参数配置文件。</li><li>-i&lt;开机磁区文件&gt; 　指定欲使用的开机磁区文件，预设是/boot目录里的boot.b文件。</li><li>-I&lt;识别标签&gt; 　显示系统核心存放之处。</li><li>-l 　产生线形磁区地址。</li><li>-m&lt;映射文件&gt; 　指定映射文件。</li><li>-P&lt;fix/ignore&gt; 　决定要修复或忽略分区表的错误。</li><li>-q 　列出映射的系统核心文件。</li><li>-r&lt;根目录&gt; 　设置系统启动时欲挂入成为根目录的目录。</li><li>-R&lt;执行指令&gt; 　设置下次启动系统时，首先执行的指令。</li><li>-s&lt;备份文件&gt; 　指定备份文件。</li><li>-S&lt;备份文件&gt; 　强制指定备份文件。</li><li>-t 　不执行指令，仅列出实际执行会进行的动作。</li><li>-u&lt;外围色设备代号&gt; 　删除lilo。</li><li>-U&lt;外围设备代号&gt; 　此参数的效果和指定”-u”参数类似，当不检查时间戳记。</li><li>-v 　显示指令执行过程。</li><li>-V 　显示版本信息。</li></ul><h3 id="实例-19"><a href="#实例-19" class="headerlink" title="实例"></a>实例</h3><p>安装lilo到第一台SCSI硬盘的第三个主要分区，采用3级模式。</p><pre><code># lilo -b /dev/sda3 -v -v -v</code></pre><p>指定安装lilo的配置文件和备份文件。</p><pre><code># lilo -C /etc/lilo.conf2 -s /boot/boot. Backup</code></pre><h2 id="22-liloconfig"><a href="#22-liloconfig" class="headerlink" title="22.liloconfig"></a>22.liloconfig</h2><p>liloconfig命令用于设置核心载入，开机管理程序。</p><p>liloconfig是Slackware发行版专门用来调整lilo设置的程序。它通过互动式操作界面，让用户能够利用键盘上的方向键等，轻易地操控lilo的安装，设置作业，而无须下达各种参数或撰写配置文件。</p><h3 id="语法-21"><a href="#语法-21" class="headerlink" title="语法"></a>语法</h3><pre><code>liloconfig</code></pre><h3 id="实例-20"><a href="#实例-20" class="headerlink" title="实例"></a>实例</h3><p>执行liloconfig命令</p><pre><code># liloconfig</code></pre><h2 id="23-lsmod"><a href="#23-lsmod" class="headerlink" title="23.lsmod"></a>23.lsmod</h2><p>lsmod命令用于显示已载入系统的模块。</p><p>执行lsmod(list modules)指令，会列出所有已载入系统的模块。Linux操作系统的核心具有模块化的特性，应此在编译核心时，务须把全部的功能都放入核心。您可以将这些功能编译成一个个单独的模块，待需要时再分别载入。</p><h3 id="语法-22"><a href="#语法-22" class="headerlink" title="语法"></a>语法</h3><pre><code>lsmod</code></pre><h3 id="实例-21"><a href="#实例-21" class="headerlink" title="实例"></a>实例</h3><p>显示模块信息</p><pre><code># lsmod Module         Size Used bynfsd         238935 11 lockd         64849 1 nfsdnfs_acl         2245 1 nfsdauth_rpcgss      33735 1 nfsdsunrpc        193181 10 nfsd,lockd,nfs_acl,auth_rpcgssexportfs        3437 1 nfsdxt_TCPMSS        2931 1 xt_tcpmss        1197 1 xt_tcpudp        2011 1 iptable_mangle     2771 1 ip_tables        9991 1 iptable_manglex_tables        14299 4 xt_TCPMSS,xt_tcpmss,xt_tcpudp,ip_tablespppoe          8943 2 pppox          2074 1 pppoebinfmt_misc       6587 1 snd_ens1371      18814 0 gameport        9089 1 snd_ens1371snd_ac97_codec    100646 1 snd_ens1371ac97_bus        1002 1 snd_ac97_codecsnd_pcm_oss      35308 0 snd_mixer_oss     13746 1 snd_pcm_osssnd_pcm        70662 3 snd_ens1371,snd_ac97_codec,snd_pcm_osssnd_seq_dummy      1338 0 snd_seq_oss      26726 0 snd_seq_midi      4557 0 snd_rawmidi      19056 2 snd_ens1371,snd_seq_midisnd_seq_midi_event   6003 2 snd_seq_oss,snd_seq_midisnd_seq        47263 6 snd_seq_dummy,snd_seq_oss,snd_seq_midi,snd_seq_midi_eventsnd_timer       19098 2 snd_pcm,snd_seqsnd_seq_device     5700 5 snd_seq_dummy,snd_seq_oss,snd_seq_midi,snd_rawmidi,snd_seqfbcon         35102 71 tileblit        2031 1 fbconfont          7557 1 fbconbitblit         4707 1 fbconppdev          5259 0 softcursor       1189 1 bitblitsnd          54148 10 snd_ens1371,snd_ac97_codec,snd_pcm_oss,snd_mixer_oss,snd_pcm,snd_seq_oss,snd_rawmidi,snd_seq,snd_timer,snd_seq_devicepsmouse        63245 0 serio_raw        3978 0 soundcore        6620 1 sndparport_pc       25962 1 snd_page_alloc     7076 1 snd_pcmvga16fb        11385 1 intel_agp       24177 1 vgastate        8961 1 vga16fbi2c_piix4        8335 0 shpchp         28820 0 agpgart        31724 1 intel_agplp           7028 0 parport        32635 3 ppdev,parport_pc,lpmptspi         14652 2 mptscsih        31325 1 mptspipcnet32        28890 0 floppy         53016 0 mii           4381 1 pcnet32mptbase        83022 2 mptspi,mptscsihscsi_transport_spi   21096 1 mptspi</code></pre><h2 id="24-minfo"><a href="#24-minfo" class="headerlink" title="24.minfo"></a>24.minfo</h2><p>minfo命令用于显示MS-DOS文件系统的各项参数。</p><p>minfo为mtools工具指令，可显示MS-DOS系统磁盘的各项参数，包括磁区数，磁头数…等。</p><h3 id="语法-23"><a href="#语法-23" class="headerlink" title="语法"></a>语法</h3><pre><code>&lt;/&gt;minfo [-v][驱动器代号]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-v 　除了一般信息外，并显示可开机磁区的内容。</li></ul><h3 id="实例-22"><a href="#实例-22" class="headerlink" title="实例"></a>实例</h3><p>显示DOS系统参数</p><pre><code># minfo -v C: //显示系统参数</code></pre><h2 id="25-set"><a href="#25-set" class="headerlink" title="25.set"></a>25.set</h2><p>set命令用于设置shell。</p><p>set指令能设置所使用shell的执行方式，可依照不同的需求来做设置。</p><h3 id="语法-24"><a href="#语法-24" class="headerlink" title="语法"></a>语法</h3><pre><code>set [+-abCdefhHklmnpPtuvx]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-a 　标示已修改的变量，以供输出至环境变量。</li><li>-b 　使被中止的后台程序立刻回报执行状态。</li><li>-C 　转向所产生的文件无法覆盖已存在的文件。</li><li>-d 　Shell预设会用杂凑表记忆使用过的指令，以加速指令的执行。使用-d参数可取消。</li><li>-e 　若指令传回值不等于0，则立即退出shell。</li><li>-f　 　取消使用通配符。</li><li>-h 　自动记录函数的所在位置。</li><li>-H Shell 　可利用”!”加&lt;指令编号&gt;的方式来执行history中记录的指令。</li><li>-k 　指令所给的参数都会被视为此指令的环境变量。</li><li>-l 　记录for循环的变量名称。</li><li>-m 　使用监视模式。</li><li>-n 　只读取指令，而不实际执行。</li><li>-p 　启动优先顺序模式。</li><li>-P 　启动-P参数后，执行指令时，会以实际的文件或目录来取代符号连接。</li><li>-t 　执行完随后的指令，即退出shell。</li><li>-u 　当执行时使用到未定义过的变量，则显示错误信息。</li><li>-v 　显示shell所读取的输入值。</li><li>-x 　执行指令后，会先显示该指令及所下的参数。</li><li>+&lt;参数&gt; 　取消某个set曾启动的参数。</li></ul><h3 id="实例-23"><a href="#实例-23" class="headerlink" title="实例"></a>实例</h3><p>显示环境变量</p><pre><code># setBASH=/bin/bashBASH_ARGC=()BASH_ARGV=()BASH_LINENO=()BASH_SOURCE=()BASH_VERSINFO=([0]="3" [1]="00" [2]="15" [3]="1" [4]="release" [5]="i386-redhat-linux-gnu")BASH_VERSION='3.00.15(1)-release'COLORS=/etc/DIR_COLORS.xtermCOLUMNS=99DIRSTACK=()EUID=0GROUPS=()G_BROKEN_FILENAMES=1HISTFILE=/root/.bash_historyHISTFILESIZE=1000HISTSIZE=1000HOME=/rootHOSTNAME=hnlinuxHOSTTYPE=i386IFS=$' 'INPUTRC=/etc/inputrcKDEDIR=/usrLANG=zh_CN.GB2312LESSOPEN='|/usr/bin/lesspipe.sh %s'LINES=34LMAIL=/var/spool/mail/rootMAILCHECK=60OLDPWD=/home/uptechOPTERR=1OPTIND=1OSTYPE=linux-gnuPATH=/usr/kerberos/sbin:/usr/kerberos/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/usr/X11R6/bin:/root/bin:/opt/crosstools/gcc-3.4.6-glibc-2.3.6/binPIPESTATUS=([0]="2")PPID=26005PROMPT_COMMAND='echo -ne "</code></pre><h2 id="26-modprobe"><a href="#26-modprobe" class="headerlink" title="26.modprobe"></a>26.modprobe</h2><p>modprobe命令用于自动处理可载入模块。</p><p>modprobe可载入指定的个别模块，或是载入一组相依的模块。modprobe会根据depmod所产生的相依关系，决定要载入哪些模块。若在载入过程中发生错误，在modprobe会卸载整组的模块。</p><h3 id="语法-25"><a href="#语法-25" class="headerlink" title="语法"></a>语法</h3><pre><code>modprobe [-acdlrtvV][--help][模块文件][符号名称 = 符号值]</code></pre><p><strong>参数</strong>：</p><ul><li>-a或–all 　载入全部的模块。</li><li>-c或–show-conf 　显示所有模块的设置信息。</li><li>-d或–debug 　使用排错模式。</li><li>-l或–list 　显示可用的模块。</li><li>-r或–remove 　模块闲置不用时，即自动卸载模块。</li><li>-t或–type 　指定模块类型。</li><li>-v或–verbose 　执行时显示详细的信息。</li><li>-V或–version 　显示版本信息。</li><li>-help 　显示帮助。</li></ul><h3 id="实例-24"><a href="#实例-24" class="headerlink" title="实例"></a>实例</h3><p>安装软驱模块：</p><pre><code>[root@w3cschool.cc ~]# modprobe -v floppy </code></pre><p>卸载软驱模块：</p><pre><code>[root@w3cschool.cc ~]# modprobe -v -r floppy </code></pre><h2 id="27-ntsysv"><a href="#27-ntsysv" class="headerlink" title="27.ntsysv"></a>27.ntsysv</h2><p>ntsysv命令用于设置系统的各种服务。</p><p>这是Red Hat公司遵循GPL规则所开发的程序，它具有互动式操作界面，您可以轻易地利用方向键和空格键等，开启，关闭操作系统在每个执行等级中，所要执行的系统服务。</p><h3 id="语法-26"><a href="#语法-26" class="headerlink" title="语法"></a>语法</h3><pre><code>ntsysv [--back][--level &lt;等级代号&gt;]</code></pre><p><strong>参数</strong>：</p><ul><li>–back 　在互动式界面里，显示Back钮，而非Cancel钮。</li><li>–level &lt;等级代号&gt; 　在指定的执行等级中，决定要开启或关闭哪些系统服务。</li></ul><h2 id="28-mouseconfig"><a href="#28-mouseconfig" class="headerlink" title="28.mouseconfig"></a>28.mouseconfig</h2><p>mouseconfig命令用于设置鼠标相关参数。</p><p>mouseconfig为鼠标设置程序，可自动设置相关参数，或者用户也可以利用所提供互动模式自行设置鼠标。mouseconfig是Red Hat Linux才有的命令。</p><h3 id="语法-27"><a href="#语法-27" class="headerlink" title="语法"></a>语法</h3><pre><code>mouseconfig [--back][--emulthree][--help][--expert][--kickstart][--noprobe][--test][--device &lt;连接端口&gt;][鼠标类型]</code></pre><p><strong>参数</strong>：</p><ul><li>–back 　在设置画面上显示Back按钮，而取代预设的Cancel按钮。</li><li>–device&lt;连接端口&gt; 　指定硬件连接端口。可用的选项有ttyS0，ttyS1，ttyS2，ttyS3与orpsaux。</li><li>–emulthree 　将二钮鼠标模拟成三钮鼠标。</li><li>–help 　显示帮助以及所有支持的鼠标类型。</li><li>–expert 　程序预设可自动判断部分设置值。若要自行设置，请使用–expert参数。</li><li>–kickstart 　让程序自动检测并保存所有的鼠标设置。</li><li>–noprobe 　不要检测鼠标设备。</li><li>–test 　测试模式，不会改变任何设置。</li></ul><h3 id="实例-25"><a href="#实例-25" class="headerlink" title="实例"></a>实例</h3><p>以交互模式配置鼠标：</p><pre><code># mouseconfig -text</code></pre><h2 id="29-passwd"><a href="#29-passwd" class="headerlink" title="29.passwd"></a>29.passwd</h2><p> passwd命令用来更改使用者的密码</p><h3 id="语法-28"><a href="#语法-28" class="headerlink" title="语法"></a>语法</h3><pre><code>passwd [-k] [-l] [-u [-f]] [-d] [-S] [username]</code></pre><p><strong>必要参数</strong>：</p><ul><li>-d 删除密码</li><li>-f 强制执行</li><li>-k 更新只能发送在过期之后</li><li>-l 停止账号使用</li><li>-S 显示密码信息</li><li>-u 启用已被停止的账户</li><li>-x 设置密码的有效期</li><li>-g 修改群组密码</li><li>-i 过期后停止用户账号</li></ul><p><strong>选择参数</strong>：</p><ul><li>–help 显示帮助信息</li><li>–version 显示版本信息</li></ul><h3 id="实例-26"><a href="#实例-26" class="headerlink" title="实例"></a>实例</h3><p>修改用户密码</p><pre><code># passwd runoob  //设置runoob用户的密码Enter new UNIX password:  //输入新密码，输入的密码无回显Retype new UNIX password:  //确认密码passwd: password updated successfully# </code></pre><p>显示账号密码信息</p><pre><code># passwd -S runoobrunoob P 05/13/2010 0 99999 7 -1</code></pre><p>删除用户密码</p><pre><code># passwd -d lx138 passwd: password expiry information changed.</code></pre><h2 id="30-pwconv"><a href="#30-pwconv" class="headerlink" title="30.pwconv"></a>30.pwconv</h2><p>pwconv命令用于开启用户的投影密码。</p><p>Linux系统里的用户和群组密码，分别存放在名称为passwd和group的文件中，　这两个文件位于/etc目录下。因系统运作所需，任何人都得以读取它们，造成安全上的破绽。投影密码将文件内的密码改存在/etc目录下的shadow和gshadow文件内，只允许系统管理者读取，同时把原密码置换为”x”字符，有效的强化了系统的安全性。</p><h3 id="语法-29"><a href="#语法-29" class="headerlink" title="语法"></a>语法</h3><pre><code>pwconv</code></pre><h3 id="实例-27"><a href="#实例-27" class="headerlink" title="实例"></a>实例</h3><p>开启用户的投影密码</p><pre><code># pwconv </code></pre><h2 id="31-rdate"><a href="#31-rdate" class="headerlink" title="31.rdate"></a>31.rdate</h2><p>rdate命令用于显示其他主机的日期与时间。</p><p>执行rdate指令，向其他主机询问系统时间并显示出来。</p><h3 id="语法-30"><a href="#语法-30" class="headerlink" title="语法"></a>语法</h3><pre><code>rdate [-ps][主机名称或IP地址...]</code></pre><p><strong>参数</strong>：</p><ul><li>-p 　显示远端主机的日期与时间。</li><li>-s 　把从远端主机收到的日期和时间，回存到本地主机的系统时间。</li><li>-u 传输协议使用UDP协议</li><li>-l 使用syslog显示错误信息</li><li>-t&lt;时间&gt; 设置超时时间</li></ul><h2 id="32-resize"><a href="#32-resize" class="headerlink" title="32.resize"></a>32.resize</h2><p>resize命令设置终端机视窗的大小。</p><p>执行resize指令可设置虚拟终端机的视窗大小。</p><h3 id="语法-31"><a href="#语法-31" class="headerlink" title="语法"></a>语法</h3><pre><code>resize [-cu][-s &lt;列数&gt; &lt;行数&gt;]</code></pre><p><strong>参数</strong>：</p><ul><li>-c 　就算用户环境并非C Shell，也用C Shell指令改变视窗大小。</li><li>-s &lt;列数&gt; &lt;行数&gt; 　设置终端机视窗的垂直高度和水平宽度。</li><li>-u 　就算用户环境并非Bourne Shell，也用Bourne Shell指令改变视窗大小。</li></ul><h3 id="实例-28"><a href="#实例-28" class="headerlink" title="实例"></a>实例</h3><p>使用 C shell</p><pre><code>[root@linux runoob]# resize -cset noglob;setenv COLUMNS '99';setenv LINES '34';unset noglob;</code></pre><p>使用 Bourne shell</p><pre><code>[root@hnlinux runoob]# resize -uCOLUMNS=99;LINES=34;export COLUMNS LINES;</code></pre><p>设置指定大小</p><pre><code>[root@hnlinux runoob]# resize -s 80 160</code></pre><h2 id="33-rmmod"><a href="#33-rmmod" class="headerlink" title="33.rmmod"></a>33.rmmod</h2><p>rmmod命令用于删除模块。</p><p>执行rmmod指令，可删除不需要的模块。Linux操作系统的核心具有模块化的特性，应此在编译核心时，务须把全部的功能都放如核心。你可以将这些功能编译成一个个单独的模块，待有需要时再分别载入它们。</p><h3 id="语法-32"><a href="#语法-32" class="headerlink" title="语法"></a>语法</h3><pre><code>rmmod [-as][模块名称...]</code></pre><p><strong>参数</strong>：</p><ul><li>-a 　删除所有目前不需要的模块。</li><li>-s 　把信息输出至syslog常驻服务，而非终端机界面。</li></ul><h3 id="实例-29"><a href="#实例-29" class="headerlink" title="实例"></a>实例</h3><p>显示已安装的模块</p><pre><code># lsmodModule         Size Used bycramfs         39042 1 nfsd         238935 11 lockd         64849 1 nfsdnfs_acl         2245 1 nfsdauth_rpcgss      33735 1 nfsdsunrpc        193181 10 nfsd,lockd,nfs_acl,auth_rpcgssexportfs        3437 1 nfsdxt_TCPMSS        2931 0 xt_tcpmss        1197 0 xt_tcpudp        2011 0 iptable_mangle     2771 0 ip_tables        9991 1 iptable_manglex_tables        14299 4 ……省略部分结果pppoe          8943 0 pppox          2074 1 pppoebinfmt_misc       6587 1 snd_ens1371      18814 0 gameport        9089 1 snd_ens1371snd_ac97_codec    100646 1 snd_ens1371ac97_bus        1002 1 snd_ac97_codecsnd_pcm_oss      35308 0 </code></pre><p>卸载模块</p><pre><code># rmmod -v pppoe //卸载模块pppoeChecking ppoe for persistent data</code></pre><p>安装模块</p><pre><code># insmod -v pppoe &gt;1.log //安装模块~# tail -b 30 1.log //显示文件信息</code></pre><h2 id="34-grpunconv"><a href="#34-grpunconv" class="headerlink" title="34.grpunconv"></a>34.grpunconv</h2><p>grpunconv命令用于关闭群组的投影密码。</p><p>执行grpunconv指令可关闭群组投影密码，它会把密码从gshadow文件内，回存到group文件里。</p><h3 id="语法-33"><a href="#语法-33" class="headerlink" title="语法"></a>语法</h3><pre><code>grpunconv</code></pre><h3 id="实例-30"><a href="#实例-30" class="headerlink" title="实例"></a>实例</h3><p>未关闭的情况</p><pre><code>cat /etc/gshadow | grep cdy cdy:123456::</code></pre><p>关闭影子密码</p><pre><code>cat /etc/gshadowcat: /etc/gshadow: 没有那个文件或目录</code></pre><p>查看密码已经复制到 /etc/group 中了。</p><pre><code>cat /etc/group | grep cdycdy:123456:1000:</code></pre><h2 id="35-modinfo"><a href="#35-modinfo" class="headerlink" title="35.modinfo"></a>35.modinfo</h2><p> modinfo命令用于显示kernel模块的信息。</p><p>modinfo会显示kernel模块的对象文件，以显示该模块的相关信息。</p><h3 id="语法-34"><a href="#语法-34" class="headerlink" title="语法"></a>语法</h3><pre><code>modinfo [-adhpV][模块文件]</code></pre><p><strong>参数</strong>：</p><ul><li>-a或–author 　显示模块开发人员。</li><li>-d或–description 　显示模块的说明。</li><li>-h或–help 　显示modinfo的参数使用方法。</li><li>-p或–parameters 　显示模块所支持的参数。</li><li>-V或–version 　显示版本信息。</li></ul><h3 id="实例-31"><a href="#实例-31" class="headerlink" title="实例"></a>实例</h3><p>显示sg模块的信息。</p><pre><code># modinfo sgfilename:    /lib/modules/2.6.9-42.ELsmp/kernel/drivers/scsi/sg.koauthor:     Douglas Gilbertdescription:  SCSI generic (sg) driverlicense:    GPLversion:    3.5.31 B0B0CB1BB59F0669A1F0D6Bparm:      def_reserved_size:size of buffer reserved for each fdparm:      allow_dio:allow direct I/O (default: 0 (disallow))alias:     char-major-21-*vermagic:    2.6.9-42.ELsmp SMP 686 REGPARM 4KSTACKS gcc-3.4depends:    scsi_mod</code></pre><h2 id="36-time"><a href="#36-time" class="headerlink" title="36.time"></a>36.time</h2><p>time命令的用途，在于量测特定指令执行时所需消耗的时间及系统资源等资讯。</p><p>例如CPU时间，记忆体，输入输出等等。需要特别注意的是，部分资讯在Linux上显示不出来。这是因为在Linux上部分资源的分配函式与时间指令所预设的方式并不相同，以致于time指令无法取得这些资料。</p><h3 id="语法-35"><a href="#语法-35" class="headerlink" title="语法"></a>语法</h3><pre><code>时间[选项]命令[参数]</code></pre><p><strong>参数</strong>：</p><ul><li>-o或–output = FILE：设定结果输出档。这个选项会将时间的输出写入所指定的档案中。如果档案已经存在，系统将覆写其内容。</li><li>-a或–append：配合-o使用，会将结果写到档案的末端，而不会覆盖掉原来的内容。</li><li>-f FORMAT或–format = FORMAT：以FORMAT字串设定显示方式。当这个选项没有被设定的时候，会用系统预设的格式。不过你可以用环境变数time来设定这个格式，如此一来就不必每次登入系统都要设定一次。</li></ul><p><strong>time指令可以显示的资源有四大项，分别是</strong>：</p><ul><li>时间资源</li><li>内存资源</li><li>IO资源</li><li>命令信息</li></ul><p><strong>详细的内容如下</strong>：</p><p>1，时间资源</p><p>E执行指令所花费的时间，格式是：[小时]：分钟：秒。请注意这个数字并不代表实际的CPU时间。</p><p>e执行指令所花费的时间，单位是秒。请注意这个数字并不代表实际的CPU时间。</p><p>S指令执行时在核心模式（内核模式）所花费的时间，单位是秒。</p><p>U指令执行时在使用者模式（用户模式）所花费的时间，单位是秒。</p><p>P执行指令时CPU的占用比例。其实这个数字就是核心模式加上使用者模式的CPU时间除以总时间。</p><p>2，内存资源</p><p>M执行时所占用的实体记忆体的最大值。单位是KB</p><p>t执行时所占用的实体记忆体的平均值，单位是KB</p><p>K执行程序所占用的记忆体总量（stack + data + text）的平均大小，单位是KB</p><p>D执行程序的自有资料区（unshared data area）的平均大小，单位是KB</p><p>p执行程序的自有堆叠（unshared stack）的平均大小，单位是KB</p><p>X执行程序间共享内容（共享文本）的平均值，单位是KB</p><p>Z系统记忆体页的大小，单位是字节。对同一个系统来说这是个常数</p><p>3，IO资源</p><p>这个该页的内容必须从置换档里再读出来。</p><p>R此程序的次要记忆体页错误发生次数。所谓的次要记忆体页错误是指某一记忆体页虽然已经置换到置换档中，但尚未分配给其他程序。此时该页的内容并未被破坏，不必从置换档里读出来</p><p>W此程序被交换到置换档的次数</p><p>c此程序被强迫中断（像是分配到的CPU时间耗尽）的次数</p><p>w此程序自愿中断（像是在等待某一个I / O执行完毕，像是磁碟读取等等）的次数</p><p>我此程序所输入的档案数</p><p>O此程序所输出的档案数</p><p>r此程序所收到的Socket Message</p><p>s此程序所送出的Socket Message</p><p>k此程序所收到的信号（Signal）数量</p><p>4，命令信息</p><p>C执行时的参数以及指令名称</p><p>x指令的结束代码（退出状态）</p><p>-p或–portability：这个选项会自动把显示格式设定成为：</p><p>真正的％e用户％Usys％S：这么做的目的是为了与POSIX规格相容。</p><p>-v或–verbose：这个选项会把所有程序中用到的资源通通列出来，不但如一般英文语句，还有说明。对不想花时间去熟习格式设定或是刚刚开始接触这个指令的人相当有用。</p><h3 id="实例-32"><a href="#实例-32" class="headerlink" title="实例"></a>实例</h3><pre><code>1.＃时间日期2.太阳3月26日22:45:34 GMT-8 20063。 4.真正的0m0.136s5.用户0m0.010s6. sys 0m0.070s7.＃</code></pre><p>在以上实例中，执行命令“time date”（见第1行）。</p><p>系统先执行命令 “日期”，第2行为命令 “日期” 的执行结果。</p><p>第3-6行为执行命令 “日期” 的时间统计结果，其中第4行的 “真实” 为实际时间，第5行 “用户” 为用户CPU时间，第6行 “SYS” 为系统CPU时间。</p><p>以上三种时间的显示格式均为MMmNN [.FFF]秒。</p><p>利用下面的指令</p><pre><code>时间-v ps -aux</code></pre><p>我们可以获得执行ps -aux的结果和所花费的系统资源。如下面所列的资料：</p><pre><code>USER PID％CPU％MEM VSZ RSS TTY STAT START TIME COMMAND根1 0.0 0.4 1096 472？S Apr19 0:04 initroot 2 0.0 0.0 0 0？SW Apr19 0:00 [kflushd]root 3 0.0 0.0 0 0？SW Apr19 0:00 [kpiod]......root 24269 0.0 1.0 2692 996 pts / 3 R 12:16 0:00 ps -aux命令被定时：“ps -aux”用户时间（秒）：0.05系统时间（秒）：0.06这项工作获得的CPU百分比：68％经过（挂钟）时间（h：mm：ss或m：ss）：0：00.16平均共享文本大小（千字节）：0平均非共享数据大小（千字节）：0平均堆栈大小（kbytes）：0平均总大小（千字节）：0最大驻留集大小（千字节）：0平均居民集大小（千字节）：0主要（需要I / O）页面错误：238轻微（回收框架）页面错误：46自愿上下文切换：0非自愿上下文切换：0掉期：0文件系统输入：0文件系统输出：0发送的套接字消息：0收到套接字消息：0交信号：0页面大小（字节）：4096退出状态：0</code></pre><h2 id="37-setup"><a href="#37-setup" class="headerlink" title="37.setup"></a>37.setup</h2><p>setup命令设置公用程序，是一个启动图形设置系统的命令。</p><p>setup 命令：用来配置X，打印设置，时区设置，系统服务，网络配置，配置，防火墙配置，验证配置，鼠标配置。</p><h3 id="语法-36"><a href="#语法-36" class="headerlink" title="语法"></a>语法</h3><pre><code>setup</code></pre><p>setup是一个设置公用程序，提供图形界面的操作方式。在setup中可设置7类的选项：</p><ul><li>１.登陆认证方式</li><li>２.键盘组态设置</li><li>３.鼠标组态设置</li><li>４.开机时所要启动的系统服务</li><li>５.声卡组态设置</li><li>６.时区设置</li><li>７.X Windows组态设置</li></ul><h2 id="38-sndconfig"><a href="#38-sndconfig" class="headerlink" title="38.sndconfig"></a>38.sndconfig</h2><p>sndconfig命令用于设置声卡。</p><p>sndconfig为声卡设置程序，支持PnP设置，可自动检测并设置PnP声卡。</p><h3 id="语法-37"><a href="#语法-37" class="headerlink" title="语法"></a>语法</h3><pre><code>sndconfig [--help][--noautoconfig][--noprobe]</code></pre><p><strong>参数</strong>：</p><ul><li>–help 　显示帮助。</li><li>–noautoconfig 　不自动设置PnP的声卡。</li><li>–noprobe 　不自动检测PnP声卡。</li></ul><h2 id="39-setenv"><a href="#39-setenv" class="headerlink" title="39.setenv"></a>39.setenv</h2><p>setenv命令用于查询或显示环境变量。</p><p>setenv为tsch中查询或设置环境变量的指令。</p><h3 id="语法-38"><a href="#语法-38" class="headerlink" title="语法"></a>语法</h3><pre><code>setenv [变量名称][变量值]</code></pre><h3 id="实例-33"><a href="#实例-33" class="headerlink" title="实例"></a>实例</h3><p>显示环境变量</p><pre><code>setenv</code></pre><p>设置环境变量</p><pre><code># setenv USER lx138</code></pre><h2 id="40-setconsole"><a href="#40-setconsole" class="headerlink" title="40.setconsole"></a>40.setconsole</h2><p>setconsole命令用于设置系统终端。</p><p>setconsole可用来指定系统终端。</p><h3 id="语法-39"><a href="#语法-39" class="headerlink" title="语法"></a>语法</h3><pre><code>setconsole [serial][ttya][ttyb]</code></pre><p><strong>参数</strong>：</p><ul><li>serial 　使用PROM终端。</li><li>ttya,cua0或ttyS0 　使用第１个串口设备作为终端。</li><li>ttyb,cua1或ttyS1 　使用第２个串口设备作为终端。</li><li>video 　使用主机上的现卡作为终端。</li></ul><h3 id="实例-34"><a href="#实例-34" class="headerlink" title="实例"></a>实例</h3><p>设置终端</p><pre><code># setconsole ttyS0</code></pre><h2 id="41-timeconfig"><a href="#41-timeconfig" class="headerlink" title="41.timeconfig"></a>41.timeconfig</h2><p>timeconfig命令用于设置时区。</p><p>这是Red Hat公司遵循GPL规则所开发的程序，它具有互动式操作界面，您可以轻易地利用方向键和空格键等，设置系统时间所属的时区。</p><h3 id="语法-40"><a href="#语法-40" class="headerlink" title="语法"></a>语法</h3><pre><code>timeconfig [--arc][--back][--test][--utc][时区名称]</code></pre><p><strong>参数</strong>：</p><ul><li>–arc 　使用Alpha硬件结构的格式存储系统时间。</li><li>–back 　在互动式界面里，显示Back钮而非Cancel钮。</li><li>–test 　仅作测试，并不真的改变系统的时区。</li><li>–utc 　把硬件时钟上的时间视为CUT，有时也称为UTC或UCT。</li></ul><h3 id="实例-35"><a href="#实例-35" class="headerlink" title="实例"></a>实例</h3><pre><code># timeconfig //设置时区</code></pre><h2 id="42-ulimit"><a href="#42-ulimit" class="headerlink" title="42.ulimit"></a>42.ulimit</h2><p>ulimit命令用于控制shell程序的资源。</p><p>的ulimit为壳内建指令，可用来控制外壳执行程序的资源。</p><h3 id="语法-41"><a href="#语法-41" class="headerlink" title="语法"></a>语法</h3><pre><code>ulimit [-aHS] [ -  c &lt;core文件上限&gt;] [ -  d &lt;数据节区大小&gt;] [ -  f &lt;文件大小&gt;] [ -  m &lt;内存大小&gt;] [ -  n &lt;文件数目&gt;] [ - p &lt;缓冲区大小&gt;] [ -  s &lt;堆叠大小&gt;] [ -  t &lt;CPU时间&gt;] [ -  u &lt;程序数目&gt;] [ -  v &lt;虚拟内存大小&gt;]</code></pre><p><strong>参数</strong>：</p><ul><li>-a显示目前资源限制的设定。</li><li>-c &lt;core文件上限&gt;设定core files的最大值，单位为区块。</li><li>-d &lt;数据节区大小&gt;程序数据节区的最大值，单位为KB。</li><li>-f &lt;文件大小&gt; shell所能建立的最大文件，单位为区块。</li><li>-H设定资源的硬性限制，也就是管理员所设下的限制。</li><li>-m &lt;内存大小&gt;指定可使用内存的上限，单位为KB。</li><li>-n &lt;文件数目&gt;指定同一时间最多可开启的文件数。</li><li>-p &lt;缓冲区大小&gt;指定管道缓冲区的大小，单位512字节。</li><li>-s &lt;堆叠大小&gt;指定堆叠的上限，单位为KB。</li><li>-S设定资源的弹性限制。</li><li>-t &lt;CPU时间&gt;指定CPU使用时间的上限，单位为秒。</li><li>-u &lt;程序数目&gt;用户最多可开启的程序数目。</li><li>-v &lt;虚拟内存大小&gt;指定可使用的虚拟内存上限，单位为KB。</li></ul><h3 id="实例-36"><a href="#实例-36" class="headerlink" title="实例"></a>实例</h3><p>显示系统资源的设置</p><pre><code>[root@w3cschool.cc~] #ulimit -a核心文件大小（块，-c）0数据seg大小（kbytes，-d）无限制文件大小（块，-f）无限制待处理信号（-i）1024最大锁定内存（kbytes，-l）32最大内存大小（千字节，-m）无限制打开文件（-n）1024管道大小（512字节，-p）8POSIX消息队列（字节，-q）819200堆栈大小（kbytes，-s）10240cpu时间（秒，-t）无限制最大用户进程（-u）4096虚拟内存（kbytes，-v）无限制文件锁（-x）无限制[root@w3cschool.cc~]＃ </code></pre><p>设置单一用户程序数目上限</p><pre><code>[root@w3cschool.cc~] #ulimit -u 500 //设置单一用户程序上限[root@w3cschool.cc~] #ulimit -a核心文件大小（块，-c）0数据seg大小（kbytes，-d）无限制文件大小（块，-f）无限制待处理信号（-i）1024最大锁定内存（kbytes，-l）32最大内存大小（千字节，-m）无限制打开文件（-n）1024管道大小（512字节，-p）8POSIX消息队列（字节，-q）819200堆栈大小（kbytes，-s）10240cpu时间（秒，-t）无限制最大用户进程（-u）500虚拟内存（kbytes，-v）无限制文件锁（-x）无限制[root@w3cschool.cc~]＃ </code></pre><h2 id="43-unset"><a href="#43-unset" class="headerlink" title="43.unset"></a>43.unset</h2><p>unset命令用于删除变量或函数。</p><p>unset为shell内建指令，可删除变量或函数。</p><h3 id="语法-42"><a href="#语法-42" class="headerlink" title="语法"></a>语法</h3><pre><code>unset [-fv][变量或函数名称]</code></pre><p><strong>参数</strong>：</p><ul><li>-f 　仅删除函数。</li><li>-v 　仅删除变量。</li></ul><h3 id="实例-37"><a href="#实例-37" class="headerlink" title="实例"></a>实例</h3><p>删除环境变量</p><pre><code>[root@runoob.com ~]# lx="ls -lh" //设定环境变量[root@runoob.com ~]# $lx //使用环境变量总用量 116K-rw-r--r-- 1 root root 2.1K 2008-03-30 anaconda-ks.cfgdrwx------ 3 root root 4.0K 3月 30 21:22 Desktop-rw-r--r-- 1 root root 50K 2008-03-30 install.log-rw-r--r-- 1 root root 32K 2008-03-30 install.log.sysloglrwxrwxrwx 1 root root  9 2008-03-30 qte -&gt; /opt/qte/[root@runoob.com ~]# set //查看当前的环境变量BASH=/bin/bashBASH_ARGC=()BASH_ARGV=()……省略部分内容PROMPT_COMMAND='echo -ne "33]0;${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/~}07"'PS1='[u@h W]$ 'PS2='&gt; 'PS4='+ 'PWD=/rootQTDIR=/usr/lib/qt-3.3SHELL=/bin/bashSSH_TTY=/dev/pts/4SUPPORTED=zh_CN.UTF-8:zh_CN:zh:en_US.UTF-8:en_US:enSYSFONT=latarcyrheb-sun16TERM=xtermUID=0USER=root_=-lhlx='ls -lh'[root@runoob.com ~]# unset lx //删除环境变量[root@runoob.com ~]# set //显示当前环境变量BASH=/bin/bashBASH_ARGC=()BASH_ARGV=()……省略部分内容PROMPT_COMMAND='echo -ne "33]0;${USER}@${HOSTNAME%%.*}:${PWD/#$HOME/~}07"'PS1='[u@h W]$ 'PS2='&gt; 'PS4='+ 'PWD=/rootQTDIR=/usr/lib/qt-3.3SHELL=/bin/bashSSH_TTY=/dev/pts/4SUPPORTED=zh_CN.UTF-8:zh_CN:zh:en_US.UTF-8:en_US:enSYSFONT=latarcyrheb-sun16TERM=xtermUID=0USER=root_=-lh</code></pre><h2 id="44-chkconfig"><a href="#44-chkconfig" class="headerlink" title="44.chkconfig"></a>44.chkconfig</h2><p>chkconfig命令用于检查，设置系统的各种服务。</p><p>这是Red Hat公司遵循GPL规则所开发的程序，它可查询操作系统在每一个执行等级中会执行哪些系统服务，其中包括各类常驻服务。</p><h3 id="语法-43"><a href="#语法-43" class="headerlink" title="语法"></a>语法</h3><pre><code>chkconfig [--add][--del][--list][系统服务] 或 chkconfig [--level &lt;等级代号&gt;][系统服务][on/off/reset]</code></pre><p><strong>参数</strong>：</p><ul><li>–add 　增加所指定的系统服务，让chkconfig指令得以管理它，并同时在系统启动的叙述文件内增加相关数据。</li><li>–del 　删除所指定的系统服务，不再由chkconfig指令管理，并同时在系统启动的叙述文件内删除相关数据。</li><li>–level&lt;等级代号&gt; 　指定读系统服务要在哪一个执行等级中开启或关毕。</li></ul><h3 id="实例-38"><a href="#实例-38" class="headerlink" title="实例"></a>实例</h3><p>列出chkconfig所知道的所有命令。</p><pre><code># chkconfig -list </code></pre><p>开启服务。</p><pre><code># chkconfig telnet on //开启Telnet服务# chkconfig -list //列出chkconfig所知道的所有的服务的情况</code></pre><p>关闭服务</p><pre><code># chkconfig telnet off  //关闭Telnet服务# chkconfig -list //列出chkconfig所知道的所有的服务的情况</code></pre><h2 id="45-apmd"><a href="#45-apmd" class="headerlink" title="45.apmd"></a>45.apmd</h2><p>apmd命令用于进阶电源管理服务程序。</p><p>apmd负责BIOS进阶电源管理(APM)相关的记录，警告与管理工作。</p><h3 id="语法-44"><a href="#语法-44" class="headerlink" title="语法"></a>语法</h3><pre><code>apmd [-u v V W][-p &lt;百分比变化量&gt;][-w &lt;百分比值&gt;]</code></pre><p><strong>参数</strong>：</p><ul><li>-p&lt;百分比变化量&gt;或–percentage&lt;百分比变化量&gt; 当电力变化的幅度超出设置的百分比变化量，即记录事件百分比变化量的预设值为5，若设置值超过100，则关闭此功能。</li><li>-u或–utc 将BIOS时钟设为UTC，以便从悬待模式恢复时，将-u参数传送至clock或hwclock程序。</li><li>-v或–verbose 记录所有的APM事件。</li><li>-V或–version 显示版本信息。</li><li>-w&lt;百分比值&gt;或–warn&lt;百分比值&gt; 当电池不在充电状态时，且电池电量低于设置的百分比值，则在syslog(2)的ALERT层记录警告信息。百分比值的预设置为10，若设置为0，则关闭此功能。</li><li>-W或–wall 发出警告信息给所有人。</li></ul><h3 id="实例-39"><a href="#实例-39" class="headerlink" title="实例"></a>实例</h3><p>记录所有的电源管理事件</p><pre><code># apmd -v</code></pre><p>设置BIOS时钟</p><pre><code># apmd -utc //设置BIOS时钟为UTC </code></pre><h2 id="46-hwclock"><a href="#46-hwclock" class="headerlink" title="46.hwclock"></a>46.hwclock</h2><p>hwclock命令用于显示与设定硬件时钟。</p><p>在Linux中有硬件时钟与系统时钟等两种时钟。硬件时钟是指主机板上的时钟设备，也就是通常可在BIOS画面设定的时钟。系统时钟则是指kernel中的时钟。当Linux启动时，系统时钟会去读取硬件时钟的设定，之后系统时钟即独立运作。所有Linux相关指令与函数都是读取系统时钟的设定。</p><h3 id="语法-45"><a href="#语法-45" class="headerlink" title="语法"></a>语法</h3><pre><code>hwclock [--adjust][--debug][--directisa][--hctosys][--show][--systohc][--test][--utc][--version][--set --date=&lt;日期与时间&gt;]</code></pre><p><strong>参数</strong>：</p><ul><li>–adjust 　hwclock每次更改硬件时钟时，都会记录在/etc/adjtime文件中。使用–adjust参数，可使hwclock根据先前的记录来估算硬件时钟的偏差，并用来校正目前的硬件时钟。</li><li>–debug 　显示hwclock执行时详细的信息。</li><li>–directisa 　hwclock预设从/dev/rtc设备来存取硬件时钟。若无法存取时，可用此参数直接以I/O指令来存取硬件时钟。</li><li>–hctosys 　将系统时钟调整为与目前的硬件时钟一致。</li><li>–set –date=&lt;日期与时间&gt; 　设定硬件时钟。</li><li>–show 　显示硬件时钟的时间与日期。</li><li>–systohc 　将硬件时钟调整为与目前的系统时钟一致。</li><li>–test 　仅测试程序，而不会实际更改硬件时钟。</li><li>–utc 　若要使用格林威治时间，请加入此参数，hwclock会执行转换的工作。</li><li>–version 　显示版本信息。</li></ul><h3 id="实例-40"><a href="#实例-40" class="headerlink" title="实例"></a>实例</h3><p>显示当前时间</p><pre><code># hwclock 2010年05月27日 星期四 18时04分31秒 -0.704214 seconds</code></pre><p>查看版本信息</p><pre><code># hwclock -vhwclock from util-linux-2.12a</code></pre><h2 id="47-mkkickstart"><a href="#47-mkkickstart" class="headerlink" title="47.mkkickstart"></a>47.mkkickstart</h2><p>mkkickstart命令用于建立安装的组态文件。</p><p>mkkickstart可根据目前系统的设置来建立组态文件，供其他电脑在安装时使用。组态文件的内容包括使用语言，网络环境，系统磁盘状态，以及X Windows的设置等信息。</p><h3 id="语法-46"><a href="#语法-46" class="headerlink" title="语法"></a>语法</h3><pre><code>mkkickstart [--bootp][--dhcp][--nonet][--nox][--version][--nfs &lt;远端电脑:路径&gt;]</code></pre><p><strong>参数</strong>：</p><ul><li>–bootp 　安装与开机时，使用BOOTP。</li><li>–dhcp 　安装与开机时，使用DHCP。</li><li>–nfs&lt;远端电脑:路径&gt; 　使用指定的网络路径安装。</li><li>–nonet 　不要进行网络设置，即假设在没有网络环境的状态下。</li><li>–nox 　不要进行X Windows的环境设置。</li><li>–version 　显示版本信息。</li></ul><h3 id="实例-41"><a href="#实例-41" class="headerlink" title="实例"></a>实例</h3><p>构建一个安装组态文件：</p><pre><code># mkkickstart --nonet -bootp</code></pre><h2 id="48-fbset"><a href="#48-fbset" class="headerlink" title="48.fbset"></a>48.fbset</h2><p> fbset命令用于设置景框缓冲区。</p><p>fbset指令可用于设置景框缓冲区的大小，还能调整画面之分辨率，位置，高低宽窄，色彩 深度，并可决定是否启动先卡之各项硬件特性。</p><h3 id="语法-47"><a href="#语法-47" class="headerlink" title="语法"></a>语法</h3><pre><code>fbset [-ahinsvVx][-db &lt;信息文件&gt;][-fb &lt;外围设备代号&gt;][--test][显示模式]</code></pre><p><strong>参数</strong>：</p><ul><li>-a或–all 　改变所有使用该设备之虚拟终端机的显示模式。</li><li>-db&lt;信息文件&gt; 　指定显示模式的信息文件，预设值文件名称为fb.modes，存放在/etc目录下</li><li>-fb&lt;外围设备代号&gt; 　指定用来做为输出景框缓冲区之外围设备，预设置为”/dev/fd0”。</li><li>-h或-help 　在线帮助。</li><li>-i或–info 　列出所有景框缓冲区之相关信息。</li><li>-ifb&lt;外围设备代号&gt; 　使用另一个景框缓冲区外围设备之设置值。</li><li>-n或–now 　马上改变显示模式。</li><li>-ofb&lt;外围设备代号&gt; 　此参数效果和指定”-fb”参数相同。</li><li>-s或–show 　列出目前显示模式之设置。</li><li>-v或–verbose 　显示指令执行过程。</li><li>-V或–version 　显示版本信息。</li><li>-x或–xfree86 　使用XFree86兼容模式。</li><li>–test 　仅做测试，并不改变现行的显示模式。</li></ul><h3 id="实例-42"><a href="#实例-42" class="headerlink" title="实例"></a>实例</h3><p>设置画面分辨率 和桌面分辨率</p><pre><code># fbset -g 800 688 1024 768//画面分辨率为800*600 桌面分辨率为1024*768</code></pre><p>启动硬件文本加速</p><pre><code># fbset -accel true  // 启动硬件文本加速</code></pre><p>启动广播功能</p><pre><code># fbset -bcast true //启动广播功能</code></pre><h2 id="49-unalias"><a href="#49-unalias" class="headerlink" title="49.unalias"></a>49.unalias</h2><p>unalias命令用于删除别名。</p><p>unalias为shell内建指令，可删除别名设置。</p><h3 id="语法-48"><a href="#语法-48" class="headerlink" title="语法"></a>语法</h3><pre><code>unalias [-a][别名]</code></pre><p><strong>参数</strong>：</p><ul><li>-a 　删除全部的别名。</li></ul><h3 id="实例-43"><a href="#实例-43" class="headerlink" title="实例"></a>实例</h3><p>给命令设置别名</p><pre><code>[root@runoob.com ~]# alias lx=ls[root@runoob.com ~]# lxanaconda-ks.cfg Desktop install.log install.log.syslog qte</code></pre><p>删除别名</p><pre><code>[root@runoob.com ~]# alias lx //显示别名alias lx='ls'[root@runoob.com ~]# unalias lx //删除别名[root@runoob.com ~]# lx-bash: lx: command not found</code></pre><h2 id="50-SVGATextMode"><a href="#50-SVGATextMode" class="headerlink" title="50.SVGATextMode"></a>50.SVGATextMode</h2><p>SVGATextMode命令用于加强文字模式的显示画面。</p><p>SVGATextMode可用来设置文字模式下的显示画面，包括分辨率，字体和更新频率等。</p><h3 id="语法-49"><a href="#语法-49" class="headerlink" title="语法"></a>语法</h3><pre><code>SVGATextMode [-acdfhmnrsv][-t &lt;配置文件&gt;][模式]</code></pre><p><strong>参数</strong>：</p><ul><li>-a 　如果新显示模式的屏幕大小与原先不同时，SVGATextMode会执行必要的系统设置。</li><li>-c 　维持原有的VGA时脉。</li><li>-d 　执行时会显示详细的信息，供排错时参考。</li><li>-f 　不要执行配置文件中有关字体载入的指令。</li><li>-h 　显示帮助。</li><li>-m 　允许1x1的方式来重设屏幕大小。</li><li>-n 　仅测试指定的模式。</li><li>-r 　通知或重设与屏幕大小相关的程序。</li><li>-s 　显示配置文件中所有可用的模式。</li><li>-t&lt;配置文件&gt; 　指定配置文件。</li><li>-v 　SVGATextMode在配置新的显示模式时，预设会先检查垂直与水平的更新更新频率是否在配置文件所指定的范围内，如果不在范围内，则不设置新的显示模式。</li><li>模式］ 　[模式]参数必须是配置文件中模式的名称。</li></ul><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><ul><li><a href="https://www.runoob.com/linux/linux-command-manual.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-command-manual.html</a></li></ul><p><em>如有侵权，联系 <a href="mailto:2025685938@qq.com" target="_blank" rel="noopener">2025685938@qq.com</a> 删除</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.Linux命令（磁盘管理）</title>
      <link href="/posts/25366.html"/>
      <url>/posts/25366.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux命令（磁盘管理）"><a href="#Linux命令（磁盘管理）" class="headerlink" title="Linux命令（磁盘管理）"></a>Linux命令（磁盘管理）</h1><h2 id="1-cd"><a href="#1-cd" class="headerlink" title="1.cd"></a>1.cd</h2><p>​        cd命令用于切换当前工作目录至 dirName(目录参数)。</p><p>其中 dirName 表示法可为绝对路径或相对路径。若目录名称省略，则变换至使用者的 home 目录 (也就是刚 login 时所在的目录)。</p><p>另外，”~” 也表示为 home 目录 的意思，”.” 则是表示目前所在的目录，”..” 则表示目前目录位置的上一层目录。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre><code>cd [dirName]</code></pre><ul><li>dirName：要切换的目标目录。</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>跳到 /usr/bin/ :</p><pre><code>cd /usr/bin</code></pre><p>跳到自己的 home 目录 :</p><pre><code>cd ~</code></pre><p>跳到目前目录的上上两层 :</p><pre><code>cd ../..</code></pre><h2 id="2-df"><a href="#2-df" class="headerlink" title="2.df"></a>2.df</h2><p>​        df命令用于显示目前在Linux系统上的文件系统的磁盘使用情况统计。</p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><pre><code>df [选项]... [FILE]...</code></pre><ul><li>文件-a, –all 包含所有的具有 0 Blocks 的文件系统</li><li>文件–block-size={SIZE} 使用 {SIZE} 大小的 Blocks</li><li>文件-h, –human-readable 使用人类可读的格式(预设值是不加这个选项的…)</li><li>文件-H, –si 很像 -h, 但是用 1000 为单位而不是用 1024</li><li>文件-i, –inodes 列出 inode 资讯，不列出已使用 block</li><li>文件-k, –kilobytes 就像是 –block-size=1024</li><li>文件-l, –local 限制列出的文件结构</li><li>文件-m, –megabytes 就像 –block-size=1048576</li><li>文件–no-sync 取得资讯前不 sync (预设值)</li><li>文件-P, –portability 使用 POSIX 输出格式</li><li>文件–sync 在取得资讯前 sync</li><li>文件-t, –type=TYPE 限制列出文件系统的 TYPE</li><li>文件-T, –print-type 显示文件系统的形式</li><li>文件-x, –exclude-type=TYPE 限制列出文件系统不要显示 TYPE</li><li>文件-v (忽略)</li><li>文件–help 显示这个帮手并且离开</li><li>文件–version 输出版本资讯并且离开</li></ul><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>显示文件系统的磁盘使用情况统计：</p><pre><code># df Filesystem     1K-blocks    Used     Available Use% Mounted on /dev/sda6       29640780 4320704     23814388  16%     / udev             1536756       4     1536752    1%     /dev tmpfs             617620     888     616732     1%     /run none                5120       0     5120       0%     /run/lock none             1544044     156     1543888    1%     /run/shm </code></pre><p>第一列指定文件系统的名称，第二列指定一个特定的文件系统1K-块1K是1024字节为单位的总内存。用和可用列正在使用中，分别指定的内存量。</p><p>使用列指定使用的内存的百分比，而最后一栏”安装在”指定的文件系统的挂载点。</p><p>df也可以显示磁盘使用的文件系统信息：</p><pre><code># df test Filesystem     1K-blocks    Used      Available Use% Mounted on /dev/sda6       29640780    4320600   23814492  16%       / </code></pre><p>用一个-i选项的df命令的输出显示inode信息而非块使用量。</p><pre><code>df -i Filesystem      Inodes    IUsed    IFree     IUse% Mounted on /dev/sda6      1884160    261964   1622196   14%        / udev           212748     560      212188    1%         /dev tmpfs          216392     477      215915    1%         /run none           216392     3        216389    1%         /run/lock none           216392     8        216384    1%         /run/shm </code></pre><p>显示所有的信息:</p><pre><code># df --total Filesystem     1K-blocks    Used    Available Use% Mounted on /dev/sda6       29640780 4320720    23814372  16%     / udev             1536756       4    1536752   1%      /dev tmpfs             617620     892    616728    1%      /run none                5120       0    5120      0%      /run/lock none             1544044     156    1543888   1%      /run/shm total           33344320 4321772    27516860  14% </code></pre><p>我们看到输出的末尾，包含一个额外的行，显示总的每一列。</p><p>-h选项，通过它可以产生可读的格式df命令的输出：</p><pre><code># df -h Filesystem      Size  Used   Avail Use% Mounted on /dev/sda6       29G   4.2G   23G   16%     / udev            1.5G  4.0K   1.5G   1%     /dev tmpfs           604M  892K   603M   1%     /run none            5.0M     0   5.0M   0%     /run/lock none            1.5G  156K   1.5G   1%     /run/shm </code></pre><p>我们可以看到输出显示的数字形式的’G’（千兆字节），”M”（兆字节）和”K”（千字节）。</p><p>这使输出容易阅读和理解，从而使显示可读的。请注意，第二列的名称也发生了变化，为了使显示可读的”大小”。</p><h2 id="3-dirs"><a href="#3-dirs" class="headerlink" title="3.dirs"></a>3.dirs</h2><pre><code>     dirs命令用于显示目录记录。</code></pre><p>显示目录堆叠中的记录。</p><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><pre><code>dirs [+/-n -l]</code></pre><p><strong>参数</strong>：</p><ul><li>+n 显示从左边算起第n笔的目录。</li><li>-n 显示从右边算起第n笔的目录。</li><li>-l 显示目录完整的记录。</li></ul><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><p>列出”/home/cc/Ruijie”里所有内容的详细信息。可用如下命令。</p><pre><code>dir -l /home/cc/Ruijie</code></pre><p>下面是显示的内容：</p><pre><code>$ dir -l /home/cc/Ruijie总计2168-rwxr-xr-x 1 cc cc  112876 2008-06-26 libpcap.so.0.6.2 -rwxr-xr-x 1 cc cc  737192 2008-06-26 libstdc++.so.5 -rwxr-xr-x 1 cc cc1938 2004-04-23 readme.txt-rwxr-xr-x 1 cc cc 1350772 2005-08-31 xrgsu</code></pre><h2 id="4-du"><a href="#4-du" class="headerlink" title="4.du"></a>4.du</h2><p>​        du命令用于显示目录或文件的大小。</p><p>du会显示指定的目录或文件所占用的磁盘空间。</p><h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><pre><code>du [-abcDhHklmsSx][-L &lt;符号连接&gt;][-X &lt;文件&gt;][--block-size][--exclude=&lt;目录或文件&gt;][--max-depth=&lt;目录层数&gt;][--help][--version][目录或文件]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-a或-all 显示目录中个别文件的大小。</li><li>-b或-bytes 显示目录或文件大小时，以byte为单位。</li><li>-c或–total 除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和。</li><li>-D或–dereference-args 显示指定符号连接的源文件大小。</li><li>-h或–human-readable 以K，M，G为单位，提高信息的可读性。</li><li>-H或–si 与-h参数相同，但是K，M，G是以1000为换算单位。</li><li>-k或–kilobytes 以1024 bytes为单位。</li><li>-l或–count-links 重复计算硬件连接的文件。</li><li>-L&lt;符号连接&gt;或–dereference&lt;符号连接&gt; 显示选项中所指定符号连接的源文件大小。</li><li>-m或–megabytes 以1MB为单位。</li><li>-s或–summarize 仅显示总计。</li><li>-S或–separate-dirs 显示个别目录的大小时，并不含其子目录的大小。</li><li>-x或–one-file-xystem 以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过。</li><li>-X&lt;文件&gt;或–exclude-from=&lt;文件&gt; 在&lt;文件&gt;指定目录或文件。</li><li>–exclude=&lt;目录或文件&gt; 略过指定的目录或文件。</li><li>–max-depth=&lt;目录层数&gt; 超过指定层数的目录后，予以忽略。</li><li>–help 显示帮助。</li><li>–version 显示版本信息。</li></ul><h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><p>显示目录或者文件所占空间:</p><pre><code># du608     ./test6308     ./test44       ./scf/lib4       ./scf/service/deploy/product4       ./scf/service/deploy/info12      ./scf/service/deploy16      ./scf/service4       ./scf/doc4       ./scf/bin32      ./scf8       ./test31288    .</code></pre><p>只显示当前目录下面的子目录的目录大小和当前目录的总的大小，最下面的1288为当前目录的总大小</p><p>显示指定文件所占空间</p><pre><code># du log2012.log 300     log2012.log</code></pre><p>方便阅读的格式显示test目录所占空间情况：</p><pre><code># du -h test608K    test/test6308K    test/test44.0K    test/scf/lib4.0K    test/scf/service/deploy/product4.0K    test/scf/service/deploy/info12K     test/scf/service/deploy16K     test/scf/service4.0K    test/scf/doc4.0K    test/scf/bin32K     test/scf8.0K    test/test31.3M    test</code></pre><h2 id="5-edquota"><a href="#5-edquota" class="headerlink" title="5.edquota"></a>5.edquota</h2><p>​         edquota命令用于编辑用户或群组的磁盘配额。</p><p>edquota预设会使用vi来编辑使用者或群组的磁盘配额设置。</p><h3 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h3><pre><code>edquota [-p &lt;源用户名称&gt;][-ug][用户或群组名称...]</code></pre><p>或</p><pre><code>edquota [-ug] -t</code></pre><p><strong>参数</strong>：</p><ul><li>-u 设置用户的磁盘配额，这是预设的参数。</li><li>-g 设置群组的磁盘配额。</li><li>-p&lt;源用户名称&gt; 将源用户的磁盘配额设置套用至其他用户或群组。</li><li>-t 设置宽限期限。</li></ul><h2 id="6-eject"><a href="#6-eject" class="headerlink" title="6.eject"></a>6.eject</h2><p>​        eject命令用于退出抽取式设备。</p><p>若设备已挂入，则eject会先将该设备卸除再退出。</p><h3 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h3><pre><code>eject [-dfhnqrstv][-a &lt;开关&gt;][-c &lt;光驱编号&gt;][设备]</code></pre><p><strong>参数说明</strong>：</p><ul><li>[设备] 设备可以是驱动程序名称，也可以是挂入点。</li><li>-a&lt;开关&gt;或–auto&lt;开关&gt; 控制设备的自动退出功能。</li><li>-c&lt;光驱编号&gt;或–changerslut&lt;光驱编号&gt; 选择光驱柜中的光驱。</li><li>-d或–default 显示预设的设备，而不是实际执行动作。</li><li>-f或–floppy 退出抽取式磁盘。</li><li>-h或–help 显示帮助。</li><li>-n或–noop 显示指定的设备。</li><li>-q或–tape 退出磁带。</li><li>-r或–cdrom 退出光盘。</li><li>-s或–scsi 以SCSI指令来退出设备。</li><li>-t或–trayclose 关闭光盘的托盘。</li><li>-v或–verbose 执行时，显示详细的说明。</li></ul><h3 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h3><pre><code># eject //不加参数默认弹出# eject -r /dev/cdrom //指定设备</code></pre><h2 id="7-mcd"><a href="#7-mcd" class="headerlink" title="7.mcd"></a>7.mcd</h2><p>​        mcd为mtools工具指令，可在MS-DOS文件系统中切换工作目录。若不加任何参数，则显示目前所在的磁盘与工作目录。</p><h3 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h3><pre><code>mcd [msdosdirectory]</code></pre><h3 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h3><p>变更目前工作目录到 a: emp 中。</p><pre><code>mcd a: emp</code></pre><p>传回目前工作目录。</p><pre><code>mcd</code></pre><h2 id="8-mdeltree"><a href="#8-mdeltree" class="headerlink" title="8.mdeltree"></a>8.mdeltree</h2><p>​        mdeltree命令可用来删除 MSDOS 格式档案及目录。</p><p>mdeltree 会将所指定的目录与目录之下的所有档案与目录都删除掉。如果所指定的档案或目录不存在，则会传回错误讯息。</p><h3 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h3><pre><code>mdeltree [-v] msdosdirectory [msdosdirectories...]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-v 显示更多的信息。</li></ul><h3 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h3><p>将 A 磁盘根目录中的 msdosdir 目录以下的档案与目录都删除掉。</p><pre><code>mcopy a:msdosdir</code></pre><h2 id="9-mdu"><a href="#9-mdu" class="headerlink" title="9.mdu"></a>9.mdu</h2><p>​        mdu命令用于显示MS-DOS目录所占用的磁盘空间。</p><p>mdu为mstools工具指令，可显示MS-DOS文件系统中目录所占用的磁盘空间。</p><h3 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h3><pre><code>mdu [-as][目录]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-a 显示每个文件及整个目录所占用的空间。</li><li>-s 仅显示整个目录所占用的空间。</li></ul><h2 id="10-mkdir"><a href="#10-mkdir" class="headerlink" title="10.mkdir"></a>10.mkdir</h2><p>​         mkdir命令用于建立名称为 dirName 之子目录。</p><h3 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h3><pre><code>mkdir [-p] dirName</code></pre><p><strong>参数说明</strong>：</p><ul><li>-p 确保目录名称存在，不存在的就建一个。</li></ul><h3 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h3><p>在工作目录下，建立一个名为 AAA 的子目录 :</p><pre><code>mkdir AAA</code></pre><p>在工作目录下的 BBB 目录中，建立一个名为 Test 的子目录。 若 BBB 目录原本不存在，则建立一个。（注：本例若不加 -p，且原本 BBB目录不存在，则产生错误。）</p><pre><code>mkdir -p BBB/Test</code></pre><h2 id="11-mlabel"><a href="#11-mlabel" class="headerlink" title="11.mlabel"></a>11.mlabel</h2><p>​        mlabel命令用于设定磁盘的标签 (Label)。</p><p>如果磁盘上设定过标签，mlabel 会将他显示给使用者。如果没有指定新标签并且没有指定 c 或 s 选项，mlabel 会提示使用者输入新的标签。如果直接按下 Enter ，就会将原本的标签删除。</p><h3 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h3><pre><code>mlabel [-vcs] drive:[new_label]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-v 更多的讯息。</li><li>-c 清除原有的标签，不出现提示讯息。</li><li>-s 显示目前的标签，不出现提示讯息。</li></ul><h3 id="实例-8"><a href="#实例-8" class="headerlink" title="实例"></a>实例</h3><p>将 A 盘的标签更改为 newlabel。</p><pre><code>mlabel a:newlabel</code></pre><h2 id="12-mmd"><a href="#12-mmd" class="headerlink" title="12.mmd"></a>12.mmd</h2><p>​        mmd命令用于在MS-DOS文件系统中建立目录。</p><p>mmd为mtools工具指令，模拟MS-DOS的md指令，可在MS-DOS的文件系统中建立目录。</p><h3 id="语法-11"><a href="#语法-11" class="headerlink" title="语法"></a>语法</h3><pre><code>mmd [目录...]</code></pre><h2 id="13-mrd"><a href="#13-mrd" class="headerlink" title="13.mrd"></a>13.mrd</h2><p>​        mrd命令用于删除MS-DOS文件系统中的目录。</p><p>mrd为mtools工具指令，模拟MS-DOS的rd指令，可删除MS-DOS的目录。</p><h3 id="语法-12"><a href="#语法-12" class="headerlink" title="语法"></a>语法</h3><pre><code>mrd [目录...]</code></pre><h2 id="14-mzip"><a href="#14-mzip" class="headerlink" title="14.mzip"></a>14.mzip</h2><p>​        mzip命令是Zip/Jaz磁盘驱动器控制指令。</p><p>mzip为mtools工具指令，可设置Zip或Jaz磁盘驱动区的保护模式以及执行退出磁盘的动作。</p><h3 id="语法-13"><a href="#语法-13" class="headerlink" title="语法"></a>语法</h3><pre><code>mzip [-efpqruwx]</code></pre><p><strong>参数</strong>：</p><ul><li>-e 退出磁盘。</li><li>-f 与-e参数一并使用，不管是否已经挂入磁盘中的文件系统，一律强制退出磁盘。</li><li>-p 设置磁盘的写入密码。</li><li>-q 显示目前的状态。</li><li>-r 将磁盘设为防写状态。</li><li>-u 退出磁盘以前，暂时解除磁盘的保护状态。</li><li>-w 将磁盘设为可写入状态。</li><li>-x 设置磁盘的密码。</li></ul><h2 id="15-pwd"><a href="#15-pwd" class="headerlink" title="15.pwd"></a>15.pwd</h2><p>​        pwd命令用于显示工作目录。</p><p>执行pwd指令可立刻得知您目前所在的工作目录的绝对路径名称。</p><h3 id="语法-14"><a href="#语法-14" class="headerlink" title="语法"></a>语法</h3><pre><code>pwd [--help][--version]</code></pre><p><strong>参数说明:</strong></p><ul><li>–help 在线帮助。</li><li>–version 显示版本信息。</li></ul><h3 id="实例-9"><a href="#实例-9" class="headerlink" title="实例"></a>实例</h3><p>查看当前所在目录：</p><pre><code># pwd/root/test           #输出结果</code></pre><h2 id="16-quota"><a href="#16-quota" class="headerlink" title="16.quota"></a>16.quota</h2><p>​        quota命令用于显示磁盘已使用的空间与限制。</p><p>执行quota指令，可查询磁盘空间的限制，并得知已使用多少空间。</p><h3 id="语法-15"><a href="#语法-15" class="headerlink" title="语法"></a>语法</h3><pre><code>quota [-quvV][用户名称...] 或 quota [-gqvV][群组名称...]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-g 列出群组的磁盘空间限制。</li><li>-q 简明列表，只列出超过限制的部分。</li><li>-u 列出用户的磁盘空间限制。</li><li>-v 显示该用户或群组，在所有挂入系统的存储设备的空间限制。</li><li>-V 显示版本信息。</li></ul><h3 id="实例-10"><a href="#实例-10" class="headerlink" title="实例"></a>实例</h3><pre><code># quota -guvs    &lt;==显示目前执行者（就是 root ）的 quota 值 # quota -uvs test &lt;==显示 test 这个使用者的 quota 值</code></pre><h2 id="17-mount"><a href="#17-mount" class="headerlink" title="17.mount"></a>17.mount</h2><p>​        mount命令是经常会使用到的命令，它用于挂载Linux系统外的文件。</p><h3 id="语法-16"><a href="#语法-16" class="headerlink" title="语法"></a>语法</h3><pre><code>mount [-hV]mount -a [-fFnrsvw] [-t vfstype]mount [-fnrsvw] [-o options [,...]] device | dirmount [-fnrsvw] [-t vfstype] [-o options] device dir</code></pre><p><strong>参数说明：</strong></p><ul><li>-V：显示程序版本</li><li>-h：显示辅助讯息</li><li>-v：显示较讯息，通常和 -f 用来除错。</li><li>-a：将 /etc/fstab 中定义的所有档案系统挂上。</li><li>-F：这个命令通常和 -a 一起使用，它会为每一个 mount 的动作产生一个行程负责执行。在系统需要挂上大量 NFS 档案系统时可以加快挂上的动作。</li><li>-f：通常用在除错的用途。它会使 mount 并不执行实际挂上的动作，而是模拟整个挂上的过程。通常会和 -v 一起使用。</li><li>-n：一般而言，mount 在挂上后会在 /etc/mtab 中写入一笔资料。但在系统中没有可写入档案系统存在的情况下可以用这个选项取消这个动作。</li><li>-s-r：等于 -o ro</li><li>-w：等于 -o rw</li><li>-L：将含有特定标签的硬盘分割挂上。</li><li>-U：将档案分割序号为 的档案系统挂下。-L 和 -U 必须在/proc/partition 这种档案存在时才有意义。</li><li>-t：指定档案系统的型态，通常不必指定。mount 会自动选择正确的型态。</li><li>-o async：打开非同步模式，所有的档案读写动作都会用非同步模式执行。</li><li>-o sync：在同步模式下执行。</li><li>-o atime、-o noatime：当 atime 打开时，系统会在每次读取档案时更新档案的『上一次调用时间』。当我们使用 flash 档案系统时可能会选项把这个选项关闭以减少写入的次数。</li><li>-o auto、-o noauto：打开/关闭自动挂上模式。</li><li>-o defaults:使用预设的选项 rw, suid, dev, exec, auto, nouser, and async.</li><li>-o dev、-o nodev-o exec、-o noexec允许执行档被执行。</li><li>-o suid、-o nosuid：</li><li>允许执行档在 root 权限下执行。</li><li>-o user、-o nouser：使用者可以执行 mount/umount 的动作。</li><li>-o remount：将一个已经挂下的档案系统重新用不同的方式挂上。例如原先是唯读的系统，现在用可读写的模式重新挂上。</li><li>-o ro：用唯读模式挂上。</li><li>-o rw：用可读写模式挂上。</li><li>-o loop=：使用 loop 模式用来将一个档案当成硬盘分割挂上系统。</li></ul><h3 id="实例-11"><a href="#实例-11" class="headerlink" title="实例"></a>实例</h3><p>将 /dev/hda1 挂在 /mnt 之下。</p><pre><code>#mount /dev/hda1 /mnt</code></pre><p>将 /dev/hda1 用唯读模式挂在 /mnt 之下。</p><pre><code>#mount -o ro /dev/hda1 /mnt</code></pre><p>将 /tmp/image.iso 这个光碟的 image 档使用 loop 模式挂在 /mnt/cdrom之下。用这种方法可以将一般网络上可以找到的 Linux 光 碟 ISO 档在不烧录成光碟的情况下检视其内容。</p><pre><code>#mount -o loop /tmp/image.iso /mnt/cdrom</code></pre><h2 id="18-mmount"><a href="#18-mmount" class="headerlink" title="18.mmount"></a>18.mmount</h2><p>mmount命令用于挂入MS-DOS文件系统。</p><p>mmount为mtools工具指令，可根据[mount参数]中的设置，将磁盘内容挂入到Linux目录中。</p><h3 id="语法-17"><a href="#语法-17" class="headerlink" title="语法"></a>语法</h3><pre><code>mmount [驱动器代号][mount参数]</code></pre><p><strong>参数</strong>：</p><ul><li>[mount参数]的用法请参考 <a href="https://www.runoob.com/linux/linux-comm-mount.html" target="_blank" rel="noopener">mount指令</a>。</li></ul><h2 id="19-rmdir"><a href="#19-rmdir" class="headerlink" title="19.rmdir"></a>19.rmdir</h2><p>​         rmdir命令删除空的目录。</p><h3 id="语法-18"><a href="#语法-18" class="headerlink" title="语法"></a>语法</h3><pre><code>rmdir [-p] dirName</code></pre><p><strong>参数</strong>：</p><ul><li><p>-p 是当子目录被删除后使它也成为空目录的话，则顺便一并删除。</p></li><li></li><li><h3 id="实例-12"><a href="#实例-12" class="headerlink" title="实例"></a>实例</h3></li><li><p>将工作目录下，名为 AAA 的子目录删除 :</p></li><li><pre><code></code></pre><p>  rmdir AAA</p><pre><code></code></pre></li><li><p>在工作目录下的 BBB 目录中，删除名为 Test 的子目录。若 Test 删除后，BBB 目录成为空目录，则 BBB 亦予删除。</p></li><li><pre><code></code></pre><p>  rmdir -p BBB/Test</p><pre><code></code></pre></li></ul><h2 id="20-rmt"><a href="#20-rmt" class="headerlink" title="20. rmt"></a>20. rmt</h2><p>​         rmt命令通过进程间通信远程控制磁带机。</p><p>通过rmt指令，用户可通过IPC连线，远端操控磁带机的倾倒和还原操作。</p><h3 id="语法-19"><a href="#语法-19" class="headerlink" title="语法"></a>语法</h3><pre><code>rmt</code></pre><h2 id="21-stat"><a href="#21-stat" class="headerlink" title="21.stat"></a>21.stat</h2><p>​        stat命令用于显示inode内容。</p><p>stat以文字的格式来显示inode的内容。</p><h3 id="语法-20"><a href="#语法-20" class="headerlink" title="语法"></a>语法</h3><pre><code>stat [文件或目录]</code></pre><h3 id="实例-13"><a href="#实例-13" class="headerlink" title="实例"></a>实例</h3><p>查看 testfile 文件的inode内容内容，可以用以下命令：</p><p># stat testfile</p><p>执行以上命令输出结果：</p><pre><code># stat testfile                #输入命令  File: `testfile'  Size: 102             Blocks: 8          IO Block: 4096   regular fileDevice: 807h/2055d      Inode: 1265161     Links: 1Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)Access: 2014-08-13 14:07:20.000000000 +0800Modify: 2014-08-13 14:07:07.000000000 +0800Change: 2014-08-13 14:07:07.000000000 +0800</code></pre><h2 id="22-tree"><a href="#22-tree" class="headerlink" title="22.tree"></a>22.tree</h2><pre><code>     tree命令用于以树状图列出目录的内容。</code></pre><p>执行tree指令，它会列出指定目录下的所有文件，包括子目录里的文件。</p><h3 id="语法-21"><a href="#语法-21" class="headerlink" title="语法"></a>语法</h3><pre><code>tree [-aACdDfFgilnNpqstux][-I &lt;范本样式&gt;][-P &lt;范本样式&gt;][目录...]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-a 显示所有文件和目录。</li><li>-A 使用ASNI绘图字符显示树状图而非以ASCII字符组合。</li><li>-C 在文件和目录清单加上色彩，便于区分各种类型。</li><li>-d 显示目录名称而非内容。</li><li>-D 列出文件或目录的更改时间。</li><li>-f 在每个文件或目录之前，显示完整的相对路径名称。</li><li>-F 在执行文件，目录，Socket，符号连接，管道名称名称，各自加上”*”,”/“,”=”,”@”,”|”号。</li><li>-g 列出文件或目录的所属群组名称，没有对应的名称时，则显示群组识别码。</li><li>-i 不以阶梯状列出文件或目录名称。</li><li>-I&lt;范本样式&gt; 不显示符合范本样式的文件或目录名称。</li><li>-l 如遇到性质为符号连接的目录，直接列出该连接所指向的原始目录。</li><li>-n 不在文件和目录清单加上色彩。</li><li>-N 直接列出文件和目录名称，包括控制字符。</li><li>-p 列出权限标示。</li><li>-P&lt;范本样式&gt; 只显示符合范本样式的文件或目录名称。</li><li>-q 用”?”号取代控制字符，列出文件和目录名称。</li><li>-s 列出文件或目录大小。</li><li>-t 用文件和目录的更改时间排序。</li><li>-u 列出文件或目录的拥有者名称，没有对应的名称时，则显示用户识别码。</li><li>-x 将范围局限在现行的文件系统中，若指定目录下的某些子目录，其存放于另一个文件系统上，则将该子目录予以排除在寻找范围外。</li></ul><h3 id="实例-14"><a href="#实例-14" class="headerlink" title="实例"></a>实例</h3><p>以树状图列出当前目录结构。可直接使用如下命令：</p><pre><code>tree</code></pre><p>该命令有如下输出结果：</p><pre><code># tree                   #以树状图列出当前目录结构  .                        #当前目录结构  |-- README  |-- examples.desktop  |-- file  |-- file.new  |-- index.htm  |-- test  | |-- README  | |-- file  | |-- testfile  | |-- testfile1  | |-- xaa  | |-- xab  | |-- xac  | |-- xad  | |-- xae  | |-- xaf  | |-- xag  | |-- xah  | `-- xai  |-- test.tar.gz  |-- test.zip  |-- testfile  |-- testfile.new  |-- testfile.patch  |-- testfile1  |-- testfile2  |-- testfile3  |-- xaa  |-- xab  |-- xac  |-- xad  |-- xae  |-- xaf  |-- xag  |-- xah  |-- xai  |-- \345\205\254\345\205\261\347\232\204  |-- \345\233\276\347\211\207  | |-- 075b5c2bb1628c1a5343c10a.jpg  | |-- 0c978fe989ac787e799757095719d3c4.jpg  | |-- 20050726194826866443.jpg  | |-- 20061113171548785122.jpg  | |-- 2007102221576687.jpg  | |-- 39.jpg  | |-- 434887ec4340916a78f0559a.jpg  | |-- 498da016ac02fb2bc93d6d08.jpg  | |-- 7b284f5a0f854da2f3bf90b204149a34.jpg  | |-- 9196c030d342a68d5edf0e98.jpg  | |-- a56c5a90de15c8a9a977a4cc.jpg  | |-- c74f62167c9d2b244a90a79e.jpg  | `-- img13.jpg  |-- \346\226\207\346\241\243  |-- \346\241\214\351\235\242  |-- \346\250\241\346\235\277  |-- \350\247\206\351\242\221  `-- \351\237\263\344\271\220  8 directories, 48 files           #统计信息，该目录共8个子目录，48个文件 </code></pre><h2 id="23-umount"><a href="#23-umount" class="headerlink" title="23.umount"></a>23.umount</h2><p>​        umount命令用于卸除文件系统。</p><p>umount可卸除目前挂在Linux目录中的文件系统。</p><h3 id="语法-22"><a href="#语法-22" class="headerlink" title="语法"></a>语法</h3><pre><code>umount [-ahnrvV][-t &lt;文件系统类型&gt;][文件系统]</code></pre><p><strong>参数</strong>：</p><ul><li>-a 卸除/etc/mtab中记录的所有文件系统。</li><li>-h 显示帮助。</li><li>-n 卸除时不要将信息存入/etc/mtab文件中。</li><li>-r 若无法成功卸除，则尝试以只读的方式重新挂入文件系统。</li><li>-t&lt;文件系统类型&gt; 仅卸除选项中所指定的文件系统。</li><li>-v 执行时显示详细的信息。</li><li>-V 显示版本信息。</li><li>[文件系统] 除了直接指定文件系统外，也可以用设备名称或挂入点来表示文件系统。</li></ul><h3 id="实例-15"><a href="#实例-15" class="headerlink" title="实例"></a>实例</h3><p>下面两条命令分别通过设备名和挂载点卸载文件系统，同时输出详细信息：</p><pre><code># umount -v /dev/sda1          通过设备名卸载  /dev/sda1 umounted  # umount -v /mnt/mymount/      通过挂载点卸载  /tmp/diskboot.img umounted </code></pre><p>如果设备正忙，卸载即告失败。卸载失败的常见原因是，某个打开的shell当前目录为挂载点里的某个目录：</p><pre><code># umount -v /mnt/mymount/  umount: /mnt/mymount: device is busy  umount: /mnt/mymount: device is busy </code></pre><h2 id="24-ls"><a href="#24-ls" class="headerlink" title="24.ls"></a>24.ls</h2><p>​        ls命令用于显示指定工作目录下之内容（列出目前工作目录所含之文件及子目录)。</p><h3 id="语法-23"><a href="#语法-23" class="headerlink" title="语法"></a>语法</h3><pre><code> ls [-alrtAFR] [name...]</code></pre><p><strong>参数</strong> :</p><ul><li>-a 显示所有文件及目录 (ls内定将文件名或目录名称开头为”.”的视为隐藏档，不会列出)</li><li>-l 除文件名称外，亦将文件型态、权限、拥有者、文件大小等资讯详细列出</li><li>-r 将文件以相反次序显示(原定依英文字母次序)</li><li>-t 将文件依建立时间之先后次序列出</li><li>-A 同 -a ，但不列出 “.” (目前目录) 及 “..” (父目录)</li><li>-F 在列出的文件名称后加一符号；例如可执行档则加 “*”, 目录则加 “/“</li><li>-R 若目录下有文件，则以下之文件亦皆依序列出</li></ul><h3 id="实例-16"><a href="#实例-16" class="headerlink" title="实例"></a>实例</h3><p>列出根目录()下的所有目录：</p><pre><code># ls /bin               dev   lib         media  net   root     srv  upload  wwwboot              etc   lib64       misc   opt   sbin     sys  usrhome  lost+found  mnt    proc  selinux  tmp  var</code></pre><p>列出目前工作目录下所有名称是 s 开头的文件，越新的排越后面 :</p><pre><code>ls -ltr s*</code></pre><p>将 /bin 目录以下所有目录及文件详细资料列出 :</p><pre><code>ls -lR /bin</code></pre><p>列出目前工作目录下所有文件及目录；目录于名称后加 “/“, 可执行档于名称后加 “*” :</p><pre><code>ls -AF</code></pre><h2 id="25-quotacheck"><a href="#25-quotacheck" class="headerlink" title="25.quotacheck"></a>25.quotacheck</h2><p>​        quotacheck命令用于检查磁盘的使用空间与限制。</p><p>执行quotacheck指令，扫描挂入系统的分区，并在各分区的文件系统根目录下产生quota.user和quota.group文件，设置用户和群组的磁盘空间限制。</p><h3 id="语法-24"><a href="#语法-24" class="headerlink" title="语法"></a>语法</h3><pre><code>quotacheck [-adgRuv][文件系统...]</code></pre><p><strong>参数</strong>：</p><ul><li>-a 扫描在/etc/fstab文件里，有加入quota设置的分区。</li><li>-d 详细显示指令执行过程，便于排错或了解程序执行的情形。</li><li>-g 扫描磁盘空间时，计算每个群组识别码所占用的目录和文件数目。</li><li>-R 排除根目录所在的分区。</li><li>-u 扫描磁盘空间时，计算每个用户识别码所占用的目录和文件数目。</li><li>-v 显示指令执行过程。</li></ul><h2 id="26-quotaoff"><a href="#26-quotaoff" class="headerlink" title="26.quotaoff"></a>26.quotaoff</h2><p>​        quotaoff命令关闭磁盘空间限制。</p><p>执行quotaoff指令可关闭用户和群组的磁盘空间限制。</p><h3 id="语法-25"><a href="#语法-25" class="headerlink" title="语法"></a>语法</h3><pre><code>quotaoff [-aguv][文件系统...]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-a 关闭在/etc/fstab文件里，有加入quota设置的分区的空间限制。</li><li>-g 关闭群组的磁盘空间限制。</li><li>-u 关闭用户的磁盘空间限制。</li><li>-v 显示指令执行过程。</li></ul><h3 id="实例-17"><a href="#实例-17" class="headerlink" title="实例"></a>实例</h3><p>关闭配额限制:</p><pre><code># quotaoff -a</code></pre><h2 id="27-lndir"><a href="#27-lndir" class="headerlink" title="27.lndir"></a>27.lndir</h2><p>​         lndir命令用于连接目录内容。</p><p>执行lndir指令，可一口气把源目录底下的文件和子目录统统建立起相互对应的符号连接。</p><h3 id="语法-26"><a href="#语法-26" class="headerlink" title="语法"></a>语法</h3><pre><code>lndir [-ignorelinks][-silent][源目录][目的目录]</code></pre><p><strong>参数</strong>：</p><ul><li>-ignorelinks 直接建立符号连接的符号连接。</li><li>-silent 不显示指令执行过程。</li></ul><h3 id="实例-18"><a href="#实例-18" class="headerlink" title="实例"></a>实例</h3><p>给目录下所有的文件或者子文件目录建立链接：</p><pre><code>lndir /home/uptech abc</code></pre><h2 id="28-repquota"><a href="#28-repquota" class="headerlink" title="28.repquota"></a>28.repquota</h2><p>​        repquota命令用于检查磁盘空间限制的状态。</p><p>执行repquota指令，可报告磁盘空间限制的状况，清楚得知每位用户或每个群组已使用多少空间。</p><h3 id="语法-27"><a href="#语法-27" class="headerlink" title="语法"></a>语法</h3><pre><code>repquota [-aguv][文件系统...]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-a 列出在/etc/fstab文件里，有加入quota设置的分区的使用状况，包括用户和群组。</li><li>-g 列出所有群组的磁盘空间限制。</li><li>-u 列出所有用户的磁盘空间限制。</li><li>-v 显示该用户或群组的所有空间限制。</li></ul><h2 id="29-quotaon"><a href="#29-quotaon" class="headerlink" title="29.quotaon"></a>29.quotaon</h2><p>​        quotaon命令用于开启磁盘空间限制。</p><p>执行quotaon指令可开启用户和群组的才磅秒年空间限制，各分区的文件系统根目录必须有quota.user和quota.group配置文件。</p><h3 id="语法-28"><a href="#语法-28" class="headerlink" title="语法"></a>语法</h3><pre><code>quotaon [-aguv][文件系统...]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-a 开启在/ect/fstab文件里，有加入quota设置的分区的空间限制。</li><li>-g 开启群组的磁盘空间限制。</li><li>-u 开启用户的磁盘空间限制。</li><li>-v 显示指令指令执行过程。</li></ul><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><ul><li><a href="https://www.runoob.com/linux/linux-command-manual.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-command-manual.html</a></li></ul><p><em>如有侵权，联系 <a href="mailto:2025685938@qq.com" target="_blank" rel="noopener">2025685938@qq.com</a> 删除</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.Linux命令（文档编辑）</title>
      <link href="/posts/51698.html"/>
      <url>/posts/51698.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux命令（文档编辑）"><a href="#Linux命令（文档编辑）" class="headerlink" title="Linux命令（文档编辑）"></a>Linux命令（文档编辑）</h1><h2 id="1-col"><a href="#1-col" class="headerlink" title="1.col"></a>1.col</h2><p>​        col命令用于过滤控制字符。</p><p>在许多UNIX说明文件里，都有RLF控制字符。当我们运用shell特殊字符”&gt;”和”&gt;&gt;”，把说明文件的内容输出成纯文本文件时，控制字符会变成乱码，col指令则能有效滤除这些控制字符。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre><code>col [-bfx][-l&lt;缓冲区列数&gt;] </code></pre><p><strong>参数</strong>：</p><ul><li>-b 过滤掉所有的控制字符，包括RLF和HRLF。</li><li>-f 滤除RLF字符，但允许将HRLF字符呈现出来。</li><li>-x 以多个空格字符来表示跳格字符。</li><li>-l&lt;缓冲区列数&gt; 预设的内存缓冲区有128列，您可以自行指定缓冲区的大小。</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>下面以 man 命令帮助文档为例，讲解col 命令的使用。</p><p>将man 命令的帮助文档保存为man_help，使用-b 参数过滤所有控制字符。在终端中使用如下命令：</p><pre><code>man man | col-b &gt; man_help  </code></pre><p><strong>注:</strong>其中”|”用于建立管道，把man命令的输出结果转为col命令的输入数据。</p><h2 id="2-colrm"><a href="#2-colrm" class="headerlink" title="2.colrm"></a>2.colrm</h2><p>​         colrm命令用于滤掉指定的行。</p><p>colrm指令从标准输入设备读取书记，转而输出到标准输出设备。如果不加任何参数，则该指令不会过滤任何一行。</p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><pre><code>colrm [开始行数编号&lt;结束行数编号&gt;]&lt;/p&gt;&lt;p&gt;&lt;b&gt;参数说明：&lt;/b&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;开始行数编号： 指定要删除的列的起始编号。&lt;/li&gt;&lt;li&gt;结束行数编号： 指定要删除的列的结束编号，有时候这个参数可以省略。&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;实例&lt;/h3&gt;&lt;p&gt;不带任何参数时该命令不会删除任何列：&lt;/p&gt;&lt;pre&gt;colrm</code></pre><p>按回车键后，光标将在第一行闪烁，等待标准输入，此时输入字符，如”Hello Linux！”，再按回车键后第二行将出现与第一行相同内容，此时按Ctrl+C组合键可以退出。终端中显示的内容如下所示：</p><pre><code>cmd@hdd-desktop:~$ colrm  Hello Linux! #输入Hello Linux！字符串  Hello Linux! #输出刚才输入的字符串Hello Linux！ </code></pre><p>如想要删除第4 列之后的所有内容，可以使用如下命令：</p><pre><code>colrm 4</code></pre><p>类似于上例，此时标准输入等待输入，用户输入字符串按回车键后，将输出如下结果：</p><pre><code>cmd@hdd-desktop:~$ colrm 4  Hello Linux! #输入Hello Linux！字符串  Hel #输出删除了第4列以后所有内容的字符串 </code></pre><p>删除指定列的内容。如删除第4列到第6列的内容，可使用如下命令：</p><pre><code>colrm 4 6 </code></pre><p>输出的结果如下：</p><pre><code>cmd@hdd-desktop:~$ colrm 4 6  Hello Linux! #输入Hello Linux！字符串  HelLinux! #输出删除了从第4列到第6列字符的字符串 </code></pre><h2 id="3-comm"><a href="#3-comm" class="headerlink" title="3.comm"></a>3.comm</h2><p>​         comm命令用于比较两个已排过序的文件。</p><p>这项指令会一列列地比较两个已排序文件的差异，并将其结果显示出来，如果没有指定任何参数，则会把结果分成3行显示：第1行仅是在第1个文件中出现过的列，第2行是仅在第2个文件中出现过的列，第3行则是在第1与第2个文件里都出现过的列。若给予的文件名称为”-“，则comm指令会从标准输入设备读取数据。</p><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><pre><code>comm [-123][--help][--version][第1个文件][第2个文件]</code></pre><p><strong>参数</strong>：</p><ul><li>-1 不显示只在第1个文件里出现过的列。</li><li>-2 不显示只在第2个文件里出现过的列。</li><li>-3 不显示只在第1和第2个文件里出现过的列。</li><li>–help 在线帮助。</li><li>–version 显示版本信息。</li></ul><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>aaa.txt 与 bbb.txt 的文件内容如下：</p><pre><code>[root@localhost text]# cat aaa.txt aaa bbb ccc ddd eee 111 222[root@localhost text]# cat bbb.txtbbb ccc aaa hhh ttt jjj&lt;p&gt;执行 comm 命令输出结果如下：&lt;/p&gt;[root@localhost text]# comm aaa.txt bbb.txt aaa                bbb                ccc        aaadddeee111222        hhh        ttt        jjj第一列  第二列  第三列</code></pre><p>输出的第一列只包含在aaa.txt中出现的行，第二列包含在bbb.txt中出现的行，第三列包含在aaa.txt和bbb.txt中相同的行。各列是以制表符（\t）作为定界符。</p><h2 id="4-csplit"><a href="#4-csplit" class="headerlink" title="4.csplit"></a>4.csplit</h2><p>​        csplit命令用于分割文件。</p><p>将文件依照指定的范本样式予以切割后，分别保存成名称为xx00,xx01,xx02…的文件。若给予的文件名称为”-“，则csplit指令会从标准输入设备读取数据。</p><h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><pre><code>csplit [-kqsz][-b&lt;输出格式&gt;][-f&lt;输出字首字符串&gt;][-n&lt;输出文件名位数&gt;][--help][--version][文件][范本样式...] </code></pre><p><strong>参数</strong>：</p><ul><li>-b&lt;输出格式&gt;或–suffix-format=&lt;输出格式&gt; 预设的输出格式其文件名称为xx00,xx01…等，您可以通过改变&lt;输出格式&gt;来改变输出的文件名。</li><li>-f&lt;输出字首字符串&gt;或–prefix=&lt;输出字首字符串&gt; 预设的输出字首字符串其文件名为xx00,xx01…等，如果你指定输出字首字符串为”hello”，则输出的文件名称会变成hello00,hello01…等。</li><li>-k或–keep-files 保留文件，就算发生错误或中断执行，也不能删除已经输出保存的文件。</li><li>-n&lt;输出文件名位数&gt;或–digits=&lt;输出文件名位数&gt; 预设的输出文件名位数其文件名称为xx00,xx01…等，如果你指定输出文件名位数为”3”，则输出的文件名称会变成xx000,xx001…等。</li><li>-q或-s或–quiet或–silent 不显示指令执行过程。</li><li>-z或–elide-empty-files 删除长度为0 Byte文件。</li><li>–help 在线帮助。</li><li>–version 显示版本信息。</li></ul><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><p>将文本文件testfile以第 2 行为分界点切割成两份，使用如下命令：</p><pre><code>csplit testfile 2</code></pre><p>testfile文件中的内容如下：</p><pre><code>$ cat testfile #查看testfile 文件内容  hello Linux!  Linux is a free Unix-type operating system.  This is a Linux testfile!  Linux </code></pre><p>使用csplit命令，输出结果如下：</p><pre><code>$ csplit testfile 2  13 #xx00文件字符个数  76 #xx01文件字符个数  </code></pre><p>其中第1 行是第一个文件xx00的字符个数，同样，第2 行为第二个文件xx01的字符个数。同时，在testfile 的同目录下将生成两个文件，文件名分别为xx00、xx01，xx00 中的内容为：</p><pre><code>$ cat xx00 #查看分割后的xx00文件内容  hello Linux! #testfile文件第1行的内容 </code></pre><p>xx01 中的内容为：</p><pre><code>$ cat xx01 #查看分割后的xx01文件内容  Linux is a free Unix-type operating system. #testfile文件第2行以后的内容  This is a Linux testfile!  Linux </code></pre><h2 id="5-ed"><a href="#5-ed" class="headerlink" title="5.ed"></a>5.ed</h2><p>​        ed命令是文本编辑器，用于文本编辑。</p><p>ed是Linux中功能最简单的文本编辑程序，一次仅能编辑一行而非全屏幕方式的操作。</p><p>ed命令并不是一个常用的命令，一般使用比较多的是vi 指令。但ed文本编辑器对于编辑大文件或对于在shell脚本程序中进行文本编辑很有用。</p><h3 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h3><pre><code>ed [-][-Gs][-p&lt;字符串&gt;][--help][--version][文件] </code></pre><p><strong>参数</strong>：</p><ul><li>-G或–traditional 提供回兼容的功能。</li><li>-p&lt;字符串&gt; 指定ed在command mode的提示字符。</li><li>-s,-,–quiet或–silent 不执行开启文件时的检查功能。</li><li>–help 显示帮助。</li><li>–version 显示版本信息。</li></ul><h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><p>以下是一个 Linux ed 完整实例解析：</p><pre><code>$ ed              &lt;- 激活 ed 命令 a                 &lt;- 告诉 ed 我要编辑新文件 My name is Titan. &lt;- 输入第一行内容 And I love Perl very much. &lt;- 输入第二行内容 .                 &lt;- 返回 ed 的命令行状态 i                 &lt;- 告诉 ed 我要在最后一行之前插入内容 I am 24.          &lt;- 将“I am 24.”插入“My name is Titan.”和“And I love Perl very much.”之间 .                 &lt;- 返回 ed 的命令行状态 c                 &lt;- 告诉 ed 我要替换最后一行输入内容 I am 24 years old. &lt;- 将“I am 24.”替换成“I am 24 years old.”（注意：这里替换的是最后输的内容） .                 &lt;- 返回 ed 的命令行状态 w readme.text     &lt;- 将文件命名为“readme.text”并保存（注意：如果是编辑已经存在的文件，只需要敲入 w 即可） q                 &lt;- 完全退出 ed 编辑器 </code></pre><p>这是文件的内容是：</p><pre><code>$ cat readme.text My name is Titan. I am 24 years old. And I love Perl vrey much. </code></pre><h2 id="6-egrep"><a href="#6-egrep" class="headerlink" title="6.egrep"></a>6.egrep</h2><p>​        egrep命令用于在文件内查找指定的字符串。</p><p>egrep执行效果与”grep-E”相似，使用的语法及参数可参照grep指令，与grep的不同点在于解读字符串的方法。</p><p>egrep是用extended regular expression语法来解读的，而grep则用basic regular expression 语法解读，extended regular expression比basic regular expression的表达更规范。</p><h3 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h3><pre><code>egrep [范本模式] [文件或目录] </code></pre><p><strong>参数说明：</strong></p><ul><li>[范本模式] ：查找的字符串规则。</li><li>[文件或目录] ：查找的目标文件或目录。</li></ul><h3 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h3><p>显示文件中符合条件的字符。例如，查找当前目录下所有文件中包含字符串”Linux”的文件，可以使用如下命令：</p><pre><code>egrep Linux *</code></pre><p>结果如下所示：</p><pre><code>$ egrep Linux * #查找当前目录下包含字符串“Linux”的文件  testfile:hello Linux! #以下五行为testfile 中包含Linux字符的行  testfile:Linux is a free Unix-type operating system.  testfile:This is a Linux testfile!  testfile:Linux  testfile:Linux  testfile1:helLinux! #以下两行为testfile1中含Linux字符的行  testfile1:This a Linux testfile!  #以下两行为testfile_2 中包含Linux字符的行  testfile_2:Linux is a free unix-type opterating system.  testfile_2:Linux test  xx00:hello Linux! #xx00包含Linux字符的行  xx01:Linux is a free Unix-type operating system. #以下三行为xx01包含Linux字符的行  xx01:This is a Linux testfile!  xx01:Linux </code></pre><h2 id="7-ex"><a href="#7-ex" class="headerlink" title="7.ex"></a>7.ex</h2><p>​        ex命令用于在Ex模式下启动vim文本编辑器。</p><p>ex执行效果如同vi -E，使用语法及参数可参照vi指令，如要从Ex模式回到普通模式，则在vim中输入”:vi”或”:visual”指令即可。</p><h3 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h3><pre><code>ex [选项][参数]</code></pre><p><strong>参数说明：</strong></p><ul><li><p>+数字：从文件指定的数字行开始显示</p></li><li><p>-b：使用二进制模式编辑文件</p></li><li><p>-c 指令：编辑完第一个文件后执行指定的指令</p></li><li><p>-d ：编辑多个文件时，显示差异部分</p></li><li><p>-m ：不允许修改文件</p></li><li><p>-n ：不使用缓存</p></li><li><p>-oN：其中 N 为数字</p></li><li><p>-r ：列出缓存，并显示恢复信息</p></li><li><p>-R ：以只读的方式打开文件</p></li><li><p>-s ：不显示任何错误信息</p></li><li><p>-V ：显示指令的详细执行过程</p></li><li><p>–help ：显示帮助信息</p></li><li><p>–version ：显示版本信息</p></li></ul><h3 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h3><p>在ex 指令后输入文件名按回车键后，即可进入ex 编辑模式，如编辑testfile文件，使用的命令格式如下：</p><pre><code>ex testfile </code></pre><p>输出的信息如下：</p><pre><code>"testfile" 5L, 95C </code></pre><p>“testfile”表示文件名，5L表示5 行，95 表示字节数</p><p>进入ex 模式。输入”visual”回到正常模式</p><p>它的操作与vim 中是一样的，此时如果在”:”后输入”visual”后按回车键，将进入到vi 指令全屏界面；如果输入”q”，则退出编辑器。</p><h2 id="8-fgrep"><a href="#8-fgrep" class="headerlink" title="8.fgrep"></a>8.fgrep</h2><p>​        本指令相当于执行grep指令加上参数”-F”，详见<a href="https://www.runoob.com/linux/linux-comm-grep.html" target="_blank" rel="noopener">grep命令</a>说明。</p><p>fgrep命令用于查找文件里符合条件的字符串。</p><h3 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h3><pre><code>fgrep [范本样式][文件或目录...]</code></pre><h3 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h3><p>具体使用实例请参考<a href="https://www.runoob.com/linux/linux-comm-grep.html" target="_blank" rel="noopener">grep命令</a>。</p><h2 id="9-fmt"><a href="#9-fmt" class="headerlink" title="9.fmt"></a>9.fmt</h2><p>​         fmt命令用于编排文本文件。</p><p>fmt指令会从指定的文件里读取内容，将其依照指定格式重新编排后，输出到标准输出设备。若指定的文件名为”-“，则fmt指令会从标准输入设备读取数据。</p><h3 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h3><pre><code>fmt [-cstu][-p&lt;列起始字符串&gt;][-w&lt;每列字符数&gt;][--help][--version][文件...]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-c或–crown-margin 每段前两列缩排。</li><li>-p&lt;列起始字符串&gt;或-prefix=&lt;列起始字符串&gt; 仅合并含有指定字符串的列，通常运用在程序语言的注解方面。</li><li>-s或–split-only 只拆开字数超出每列字符数的列，但不合并字数不足每列字符数的列。</li><li>-t或–tagged-paragraph 每列前两列缩排，但第1列和第2列的缩排格式不同。</li><li>-u或–uniform-spacing 每个字符之间都以一个空格字符间隔，每个句子之间则两个空格字符分隔。</li><li>-w&lt;每列字符数&gt;或–width=&lt;每列字符数&gt;或-&lt;每列字符数&gt; 设置每列的最大字符数。</li><li>–help 在线帮助。</li><li>–version 显示版本信息。</li></ul><h3 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h3><p>重排指定文件。如文件testfile共5 行文字，可以通过命令对该文件格式进行重排，其命令为：</p><pre><code>fmt testfile </code></pre><p>输出结果如下：</p><pre><code>$ fmt testfile #重排testfile 文件  hello Linux! Linux is a free Unix-type operating system. This is a  Linux testfile! Linux Linux </code></pre><p>将文件testfile重新排成85 个字符一行，并在标准输出设备上输出，其命令应该为：</p><pre><code>fmt -w 85 testfile</code></pre><p>为了对比，先使用cat 命令查看文件内容：</p><pre><code>$ cat testfile #查看testfile 文件的内容  hello Linux!  Linux is a free Unix-type operating system.  This is a Linux testfile!  Linux  Linux </code></pre><p>使用fmt命令重排之后，输出结果如下：</p><pre><code>$ fmt -w 85 testfile #指定重排宽度为85个字符  hello Linux! Linux is a free Unix-type operating system. This is a Linux testfile!  Linux Linux </code></pre><h2 id="10-fold"><a href="#10-fold" class="headerlink" title="10.fold"></a>10.fold</h2><p>​        fold命令用于限制文件列宽。<br>折叠指令会从指定的文件里读取内容，将超过限定列宽的列加入增列字符后，输出到标准输出设备若不指定任何文件名称，或是所给予的文件名为 “ - ”，则折叠指令会从标准输入设备读取数据。</p><h3 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h3><pre><code>fold [-bs] [ -  w &lt;每列行数&gt;] [ - 帮助] [ - 版本] [文件...]</code></pre><p><strong>参数</strong>：</p><ul><li>-b或–bytes以字节为单位计算列宽，而非采用行数编号为单位。</li><li>-s或–spaces以空格字符作为换列点。</li><li>-w &lt;每列行数&gt;或–width &lt;每列行数&gt;设置每列的最大行数。</li><li>–help在线帮助。</li><li>–version显示版本信息。</li></ul><h3 id="实例-8"><a href="#实例-8" class="headerlink" title="实例"></a>实例</h3><p>将一个名为testfile的文件的行折叠成宽度为30，可使用如下命令：</p><pre><code>fold -w 30 testfile</code></pre><p>为了对比，先将testfile的文件输出如下：</p><pre><code>$ cat testfile＃查看testfile中的内容  Linux网络正变得越来越普遍，但是 安全性往往被忽视  问题。不幸的是，在今天的环境中所有的网络是潜在的黑客攻击目标，  从绝密的军事研究网络到小型家庭局域网。  Linux Network Security专注于在Linux中保护Linux 网络环境，在哪里  需要考虑整个网络的安全性 而不仅仅是孤立的机器。  它结合了理论和实践技术 教管理员如何安装和  使用安全应用程序，以及如何使用 应用程序工作以及为什么它们是必要 </code></pre><p>然后使用折叠命令折叠显示：</p><pre><code>$ fold -w 30 testfile＃行折叠成宽度为30，显示testfile文件  Linux网络正在变得越来越多  重新和更常见，但securi  ty往往是一个被忽视的问题  即 不幸的是，在今天  环境所有网络都是  潜在的黑客攻击目标  绝密军事研究  网络到小型家庭局域网。  Linux Network Security重点关注  在网络中保护Linux  凯德环境，其中秒  整个网络的urity ne  编辑被认为是相当的  一个刚刚孤立的机器。它  使用理论和实践的混合  教授管理员的技巧  istrators如何安装和你  安全应用程序，如同  如何应用程序如何  rk以及为什么它们是必要的 </code></pre><h2 id="11-grep"><a href="#11-grep" class="headerlink" title="11.grep"></a>11.grep</h2><p>​         grep 命令用于查找文件里符合条件的字符串。</p><p>grep 指令用于查找内容包含指定的范本样式的文件，如果发现某文件的内容符合所指定的范本样式，预设 grep 指令会把含有范本样式的那一列显示出来。若不指定任何文件名称，或是所给予的文件名为 <strong>-</strong>，则 grep 指令会从标准输入设备读取数据。</p><h3 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h3><pre><code>grep [-abcEFGhHilLnqrsvVwxy][-A&lt;显示列数&gt;][-B&lt;显示列数&gt;][-C&lt;显示列数&gt;][-d&lt;进行动作&gt;][-e&lt;范本样式&gt;][-f&lt;范本文件&gt;][--help][范本样式][文件或目录...]</code></pre><p><strong>参数</strong>：</p><ul><li><strong>-a 或 –text</strong> : 不要忽略二进制的数据。</li><li><strong>-A&lt;显示行数&gt; 或 –after-context=&lt;显示行数&gt;</strong> : 除了显示符合范本样式的那一列之外，并显示该行之后的内容。</li><li><strong>-b 或 –byte-offset</strong> : 在显示符合样式的那一行之前，标示出该行第一个字符的编号。</li><li><strong>-B&lt;显示行数&gt; 或 –before-context=&lt;显示行数&gt;</strong> : 除了显示符合样式的那一行之外，并显示该行之前的内容。</li><li><strong>-c 或 –count</strong> : 计算符合样式的列数。</li><li><strong>-C&lt;显示行数&gt; 或 –context=&lt;显示行数&gt;或-&lt;显示行数&gt;</strong> : 除了显示符合样式的那一行之外，并显示该行之前后的内容。</li><li><strong>-d &lt;动作&gt; 或 –directories=&lt;动作&gt;</strong> : 当指定要查找的是目录而非文件时，必须使用这项参数，否则grep指令将回报信息并停止动作。</li><li><strong>-e&lt;范本样式&gt; 或 –regexp=&lt;范本样式&gt;</strong> : 指定字符串做为查找文件内容的样式。</li><li><strong>-E 或 –extended-regexp</strong> : 将样式为延伸的普通表示法来使用。</li><li><strong>-f&lt;规则文件&gt; 或 –file=&lt;规则文件&gt;</strong> : 指定规则文件，其内容含有一个或多个规则样式，让grep查找符合规则条件的文件内容，格式为每行一个规则样式。</li><li><strong>-F 或 –fixed-regexp</strong> : 将样式视为固定字符串的列表。</li><li><strong>-G 或 –basic-regexp</strong> : 将样式视为普通的表示法来使用。</li><li><strong>-h 或 –no-filename</strong> : 在显示符合样式的那一行之前，不标示该行所属的文件名称。</li><li><strong>-H 或 –with-filename</strong> : 在显示符合样式的那一行之前，表示该行所属的文件名称。</li><li><strong>-i 或 –ignore-case</strong> : 忽略字符大小写的差别。</li><li><strong>-l 或 –file-with-matches</strong> : 列出文件内容符合指定的样式的文件名称。</li><li><strong>-L 或 –files-without-match</strong> : 列出文件内容不符合指定的样式的文件名称。</li><li><strong>-n 或 –line-number</strong> : 在显示符合样式的那一行之前，标示出该行的列数编号。</li><li><strong>-o 或 –only-matching</strong> : 只显示匹配PATTERN 部分。</li><li><strong>-q 或 –quiet或–silent</strong> : 不显示任何信息。</li><li><strong>-r 或 –recursive</strong> : 此参数的效果和指定”-d recurse”参数相同。</li><li><strong>-s 或 –no-messages</strong> : 不显示错误信息。</li><li><strong>-v 或 –revert-match</strong> : 显示不包含匹配文本的所有行。</li><li><strong>-V 或 –version</strong> : 显示版本信息。</li><li><strong>-w 或 –word-regexp</strong> : 只显示全字符合的列。</li><li><strong>-x –line-regexp</strong> : 只显示全列符合的列。</li><li><strong>-y</strong> : 此参数的效果和指定”-i”参数相同。</li></ul><h3 id="实例-9"><a href="#实例-9" class="headerlink" title="实例"></a>实例</h3><p>1、在当前目录中，查找后缀有 file 字样的文件中包含 test 字符串的文件，并打印出该字符串的行。此时，可以使用如下命令：</p><pre><code>grep test *file </code></pre><p>结果如下所示：</p><pre><code>$ grep test test* #查找前缀有“test”的文件包含“test”字符串的文件  testfile1:This a Linux testfile! #列出testfile1 文件中包含test字符的行  testfile_2:This is a linux testfile! #列出testfile_2 文件中包含test字符的行  testfile_2:Linux test #列出testfile_2 文件中包含test字符的行 </code></pre><p>2、以递归的方式查找符合条件的文件。例如，查找指定目录/etc/acpi 及其子目录（如果存在子目录的话）下所有文件中包含字符串”update”的文件，并打印出该字符串所在行的内容，使用的命令为：</p><pre><code>grep -r update /etc/acpi </code></pre><p>输出结果如下：</p><pre><code>$ grep -r update /etc/acpi #以递归的方式查找“etc/acpi”  #下包含“update”的文件  /etc/acpi/ac.d/85-anacron.sh:# (Things like the slocate updatedb cause a lot of IO.)  Rather than  /etc/acpi/resume.d/85-anacron.sh:# (Things like the slocate updatedb cause a lot of  IO.) Rather than  /etc/acpi/events/thinkpad-cmos:action=/usr/sbin/thinkpad-keys--update </code></pre><p>3、反向查找。前面各个例子是查找并打印出符合条件的行，通过”-v”参数可以打印出不符合条件行的内容。</p><p>查找文件名中包含 test 的文件中不包含test 的行，此时，使用的命令为：</p><pre><code>grep -v test *test*</code></pre><p>结果如下所示：</p><pre><code>$ grep-v test* #查找文件名中包含test 的文件中不包含test 的行  testfile1:helLinux!  testfile1:Linis a free Unix-type operating system.  testfile1:Lin  testfile_1:HELLO LINUX!  testfile_1:LINUX IS A FREE UNIX-TYPE OPTERATING SYSTEM.  testfile_1:THIS IS A LINUX TESTFILE!  testfile_2:HELLO LINUX!  testfile_2:Linux is a free unix-type opterating system.  </code></pre><h2 id="12-ispell"><a href="#12-ispell" class="headerlink" title="12.ispell"></a>12.ispell</h2><p>​         ispell命令用于拼写检查程序。</p><p>ispell的预设会使用/usr/lib/ispell/english.hash字典文件来检查文本文件。若在检查的文件中找到字典没有的词汇，ispell的会建议使用的词汇，或是让你将新的词汇加入个人字典。</p><h3 id="语法-11"><a href="#语法-11" class="headerlink" title="语法"></a>语法</h3><pre><code>ispell [-aAbBClmMnNPStVx] [ -  d &lt;字典文件&gt;] [ -  L &lt;行数&gt;] [ -  p &lt;字典文件&gt;] [ -  w &lt;非字母字符&gt;] [ -  W &lt;字符串长度&gt;] [要检查的文件]</code></pre><p><strong>参数</strong>：</p><ul><li>-a当其他程序输出送到ispell时，必须使用此参数。</li><li>-A读取到“＆Include File＆”字符串时，就去检查字符串后所指定文件的内容。</li><li>-b产生备份文件，文件名为.bak。</li><li>-B检查连字错误。</li><li>-C不检查连字错误。</li><li>-d &lt;字典文件&gt;指定字典文件。</li><li>-l从标准输入设备读取字符串，结束后显示拼错的词汇。</li><li>-L &lt;行数&gt;指定内文显示的行数。</li><li>-m自动考虑字尾的变化。</li><li>-M进入ispell后，在画面下方显示指令的按键。</li><li>-n检查的文件为noff或troff的格式。</li><li>-N进入ispell后，在画面下方不显示指令的按键。</li><li>-p &lt;字典文件&gt;指定个人字典文件。</li><li>-P不考虑字尾变化的情形。</li><li>-S不排序建议取代的词汇。</li><li>-t检查的文件为TeX或LaTeX的格式。</li><li>-V非ANSI标准的字符会以“M- ^”的方式来显示。</li><li>-w &lt;非字母字符&gt;检查时，特别挑出含有指定的字符。</li><li>-W &lt;字符串长度&gt;不检查指定长度的词汇。</li><li>-x不要产生备份文件。</li></ul><h3 id="实例-10"><a href="#实例-10" class="headerlink" title="实例"></a>实例</h3><p>检查文件的拼写例如，检查testfile的文件，可使用如下命令：</p><pre><code>ispell testfile </code></pre><p>如果文件中出现可疑词汇，则第一个出现的可疑词汇以高亮显示，并在屏幕下方给出词汇的修改意见，以及ispell的的操作命令如下所示：</p><pre><code>netwrks文件：testfile  Linux网络变得越来越普遍，但安全性往往被忽视  问题。不幸  0：网络  [SP] &lt;number&gt; R）epl A）c）I）nsert L）ookup U）ncap Q）uit e（X）it or？求助</code></pre><p>本例中，检查出网络错误，并提示纠正信息，此时输入“0”，即使用网络来纠正错误，同时继续显示下一个错误，直到所有的错误显示完毕。</p><p>。通过以上实例我们可以发现，文件testfile的中有拼写错误，对该文件进行修改后需备份文件此时使用如下命令：</p><pre><code>ispell-b testfile＃检查拼写错误的同时，备份文件 </code></pre><p>如果文件已经无拼写错误，则不显示任何信息，通过LS命令我们也可以查看到当前文件目录下产生了文件testfile的的备份文件testfile.bak查看结果如下所示：</p><pre><code>$ ls＃以列表的形式查看当前目录下的文件  examples.desktop testfile_1 testfile.bak xx01模板图片音乐  testfile testfile1 testfile_2 xx00公共的视频文档桌面 </code></pre><p>其中，testfile.bak文件就是刚才命令生成的备份文件，内容与原来的testfile文件内容是一样的。</p><h2 id="13-jed"><a href="#13-jed" class="headerlink" title="13.jed"></a>13.jed</h2><p>​        jed命令用于编辑文本文件。</p><p>杰德是以俚语所写成的程序，适合用来编辑程序原始代码。</p><h3 id="语法-12"><a href="#语法-12" class="headerlink" title="语法"></a>语法</h3><pre><code>jed [-2n] [ -  batch] [ -  f &lt;函数&gt;] [ -  g &lt;行数&gt;] [ -  i &lt;文件&gt;] [ - 我&lt;文件&gt;] [ -  s &lt;字符串&gt;] [文件]</code></pre><p><strong>参数</strong>：</p><ul><li>-2显示上下两个编辑区。</li><li>-batch以批处理模式来执行。</li><li>-f &lt;函数&gt;执行Slang函数。</li><li>-g &lt;行数&gt;移到缓冲区中指定的行数。</li><li>-i &lt;文件&gt;将指定的文件载入缓冲区。</li><li>-n不要载入jed.rc配置文件。</li><li>-s &lt;字符串&gt;查找并移到指定的字符串。</li></ul><h3 id="实例-11"><a href="#实例-11" class="headerlink" title="实例"></a>实例</h3><p>。JED主要用于编辑程序的源码，编辑源码时将以彩色高亮的方式显示程序的语法例如使用JED编辑一个Ç语言的源代码文件，可使用如下命令：</p><pre><code>jed main.c＃用jed编辑器打开main.c文件 </code></pre><p>输出结果如下：</p><pre><code>F10键==&gt;文件编辑模式搜索缓冲区Windows系统帮助＃编辑器菜单  / *  -  *  -  linux-c  -  *  -  * /＃编辑区  #include &lt;linux / mm.h&gt; #include &lt;linux / sysctl.h&gt; #include &lt;linux / nsproxy.h&gt; static struct list_head *  net_ctl_header_lookup（struct ctl_table_root * root，struct nsproxy * namespaces）  {  return＆namespaces-&gt; net_ns-&gt; sysctl_table_headers;  }  static struct ctl_table_root net_sysctl_root = {  .lookup = net_ctl_header_lookup，  };  static int sysctl_net_init（struct net * net）  {  INIT_LIST_HEAD（NET-&gt; sysctl_table_headers）;  返回0;  }  ----- +（Jed 0.99.18U）Emacs：main.c（C）所有下午6:06 -------------------------- ---  ＃从左到右分别为JED版本编号，当前是模拟的Emacs编辑器，打开的文件名，现在的时间  加载/usr/share/jed/lib/modeinfo.slc </code></pre><h2 id="14-joe"><a href="#14-joe" class="headerlink" title="14.joe"></a>14.joe</h2><p>​        joe命令用于编辑文本文件。</p><p>joe是一个功能强大的全屏幕文本编辑程序。操作的复杂度要比微微高一点，但是功能较为齐全.Joe一次可开启多个文件，每个文件各放在一个编辑区内，并可在文件之间执行剪贴的动作。</p><h3 id="语法-13"><a href="#语法-13" class="headerlink" title="语法"></a>语法</h3><pre><code>joe [-asis] [ -  beep] [ -  csmode] [ -  dopadding] [ -  exask] [ -  force] [ -  help] [ -  keepup] [ -  lightoff] [ -  arking] [ -  mid] [ -  nobackups] [ -nonotice] [ -  NOSTA] [ -  NOXON] [ - 孤儿] [ -  backpath &lt;目录&gt;] [ - 列&lt;栏位&gt;] [ - 线&lt;行数&gt;] [ - 皮克&lt;行数&gt;] [ -  skiptop &lt;行数&gt;] [ -  autoindent crlf linums overwrite rdonly wordwrap] [+ &lt;行数&gt;] [ -  indentc &lt;缩排字符&gt;] [ -  istep &lt;缩排字符数&gt;] [ -  keymap &lt;按键配置文件&gt;] [ - lmargin &lt;栏数&gt;] [ -  rmargin &lt;栏数&gt;] [ - 标签&lt;栏数&gt;] [要编辑的文件] &lt;/ p&gt;</code></pre><p><strong>参数</strong>：</p><p>以下为程序参数</p><p>-asis字符码超过127的字符不做任何处理。</p><p>-backpath &lt;目录&gt;指定备份文件的目录。</p><p>-beep编辑时，若有错误即发出哗声。</p><ul><li>-columns &lt;栏位&gt;设置栏数。</li><li>-csmode可执行连续查找模式。</li><li>-dopadding是程序跟tty间存在缓冲区。</li><li>-exask在程序中，执行“Ctrl + k + x”时，会先确认是否要保存文件。</li><li>-force强制在最后一行的结尾处加上换行符号。</li><li>-help执行程序时一并显示帮助。</li><li>-keepup在进入程序后，画面上方为状态列。</li><li>-lightoff选取的区块在执行完区块命令后，就会回复成原来的状态。</li><li>-lines &lt;行数&gt;设置行数。</li><li>-marking在选取区块时，反白区块会随着光标移动。</li><li>-mid当光标移出画面时，即自动卷页，使光标回到中央。</li><li>-nobackups不建立备份文件。</li><li>-nonotice程序执行时，不显示版权信息。</li><li>-nosta程序执行时，不显示状态列。</li><li>-noxon尝试取消“Ctrl + s”与“Ctrl + q”键的功能。</li><li>-orphan若同时开启一个以上的文件，则其他文件会置于独立的缓冲区，而不会另外开启编辑区。</li><li>-pg &lt;行数&gt;按“PageUp”或“PageDown”换页时，所要保留前一页的行数。</li><li>-skiptop &lt;行数&gt;不使用屏幕上方指定的行数。</li><li>以下为文件参数</li><li>+ &lt;行数&gt;指定开启文件时，光标所在的行数。</li><li>-autoindent自动缩排。</li><li>-crlf在换行时，使用CR-LF字符。</li><li>-indentc &lt;缩排字符&gt;执行缩排时，实际插入的字符。</li><li>-istep &lt;缩排字符数&gt;每次执行缩排时，所移动的缩排字符数。</li><li>-keymap &lt;按键配置文件&gt;使用不同的按键配置文件。</li><li>-linums在每行前面加上行号。</li><li>-lmargin &lt;栏数&gt;设置左侧边界。</li><li>-overwrite设置覆盖模式。</li><li>-rmargin &lt;栏数&gt;设置右侧边界。</li><li>-tab &lt;栏数&gt;设置tab的宽度。</li><li>-rdonly以只读的方式开启文件-wordwrap编辑时若超过右侧边界，则自动换行。</li></ul><h3 id="实例-12"><a href="#实例-12" class="headerlink" title="实例"></a>实例</h3><p>利用joe命令编辑文本文件。例如利用joe编辑C语言源代码main.c，使用如下命令：</p><pre><code>joe main.c</code></pre><p>与JED类似，乔编辑器中Ç语言的语法也以彩色的方式显示效果如下：</p><pre><code>IA main.c（c）第1行Col 1 12:28 Ctrl-K H寻求帮助  ＃上排从左至右分别为打开的文件名，光标所在行列数，现在时间，显示操作说明  / *  -  *  -  linux-c  -  *  -  * /＃编辑区  #include &lt;linux / mm.h&gt; #include &lt;linux / sysctl.h&gt; #include &lt;linux / nsproxy.h&gt; static struct list_head *  net_ctl_header_lookup（struct ctl_table_root * root，struct nsproxy * namespaces）  {  return＆namespaces-&gt; net_ns-&gt; sysctl_table_headers;  }  static struct ctl_table_root net_sysctl_root = {  .lookup = net_ctl_header_lookup，  };  static int sysctl_net_init（struct net * net）  {  INIT_LIST_HEAD（NET-&gt; sysctl_table_headers）;  返回0;  }  ** Joe自己的编辑v3.5 **（utf-8）**版权所有。2006 ** #joe编辑区的版本及版权信息</code></pre><p>joe编辑器有一些常用的组合键，例如可以通过Ctrl + K + H寻求联机帮助，首先按Ctrl + K组合键，再输入字母H，即可调出帮助菜单，通过该帮助信息可以方便地获知如何对joe编辑器进行操作。</p><h2 id="15-join"><a href="#15-join" class="headerlink" title="15.join"></a>15.join</h2><p>​         join命令用于将两个文件中，指定栏位内容相同的行连接起来。</p><p>找出两个文件中，指定栏位内容相同的行，并加以合并，再输出到标准输出设备。</p><h3 id="语法-14"><a href="#语法-14" class="headerlink" title="语法"></a>语法</h3><pre><code>join [-i][-a&lt;1或2&gt;][-e&lt;字符串&gt;][-o&lt;格式&gt;][-t&lt;字符&gt;][-v&lt;1或2&gt;][-1&lt;栏位&gt;][-2&lt;栏位&gt;][--help][--version][文件1][文件2]</code></pre><p><strong>参数</strong>：</p><ul><li>-a&lt;1或2&gt; 除了显示原来的输出内容之外，还显示指令文件中没有相同栏位的行。</li><li>-e&lt;字符串&gt; 若[文件1]与[文件2]中找不到指定的栏位，则在输出中填入选项中的字符串。</li><li>-i或–igore-case 比较栏位内容时，忽略大小写的差异。</li><li>-o&lt;格式&gt; 按照指定的格式来显示结果。</li><li>-t&lt;字符&gt; 使用栏位的分隔字符。</li><li>-v&lt;1或2&gt; 跟-a相同，但是只显示文件中没有相同栏位的行。</li><li>-1&lt;栏位&gt; 连接[文件1]指定的栏位。</li><li>-2&lt;栏位&gt; 连接[文件2]指定的栏位。</li><li>–help 显示帮助。</li><li>–version 显示版本信息。</li></ul><h3 id="实例-13"><a href="#实例-13" class="headerlink" title="实例"></a>实例</h3><p>连接两个文件。</p><p>为了清楚地了解join命令，首先通过cat命令显示文件testfile_1和 testfile_2 的内容。</p><p>然后以默认的方式比较两个文件，将两个文件中指定字段的内容相同的行连接起来，在终端中输入命令：</p><pre><code>join testfile_1 testfile_2 </code></pre><p>首先查看testfile_1、testfile_2 中的文件内容：</p><pre><code>$ cat testfile_1 #testfile_1文件中的内容  Hello 95 #例如，本例中第一列为姓名，第二列为数额  Linux 85  test 30  cmd@hdd-desktop:~$ cat testfile_2 #testfile_2文件中的内容  Hello 2005 #例如，本例中第一列为姓名，第二列为年份  Linux 2009  test 2006 </code></pre><p>然后使用join命令，将两个文件连接，结果如下：</p><pre><code>$ join testfile_1 testfile_2 #连接testfile_1、testfile_2中的内容  Hello 95 2005 #连接后显示的内容  Linux 85 2009  test 30 2006 </code></pre><p>文件1与文件2的位置对输出到标准输出的结果是有影响的。例如将命令中的两个文件互换，即输入如下命令：</p><pre><code>join testfile_2 testfile_1</code></pre><p>最终在标准输出的输出结果将发生变化，如下所示：</p><pre><code>$ join testfile_2 testfile_1 #改变文件顺序连接两个文件  Hello 2005 95 #连接后显示的内容  Linux 2009 85  test 2006 30 </code></pre><h2 id="16-look"><a href="#16-look" class="headerlink" title="16.look"></a>16.look</h2><p> look命令用于查询单词。</p><p>look指令用于英文单字的查询。您仅需给予它欲查询的字首字符串，它会显示所有开头字符串符合该条件的单字。</p><h3 id="语法-15"><a href="#语法-15" class="headerlink" title="语法"></a>语法</h3><pre><code>look [-adf][-t&lt;字尾字符串&gt;][字首字符串][字典文件]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-a 使用另一个字典文件web2，该文件也位于/usr/dict目录下。</li><li>-d 只对比英文字母和数字，其余一慨忽略不予比对。</li><li>-f 忽略字符大小写差别。</li><li>-t&lt;字尾字符串&gt; 设置字尾字符串。</li></ul><h3 id="实例-14"><a href="#实例-14" class="headerlink" title="实例"></a>实例</h3><p>为了查找在testfile文件中以字母L开头的所有的行，可以输入如下命令：</p><pre><code>look L testfile </code></pre><p>原文件testfile中的内容如下：</p><pre><code>$ cat testfile #查看testfile 文件内容  HELLO LINUX!  Linux is a free unix-type opterating system.  This is a linux testfile!  Linux test </code></pre><p>在testfile文件中使用look命令查找以”L”开头的单词，结果如下：</p><pre><code>$ look L testfile                              #查找以“L”开头的单词  Linux is a free unix-type opterating system.   #第二行以“L”开头，列出全句  Linux test                                     #第四行以“L”开头，列出全句 </code></pre><h2 id="17-mtype"><a href="#17-mtype" class="headerlink" title="17.mtype"></a>17.mtype</h2><p>MTYPE为mtools的工具指令，模拟MS-DOS的类型指令，可显示MS-DOS文件的内容。</p><h3 id="语法-16"><a href="#语法-16" class="headerlink" title="语法"></a>语法</h3><pre><code>mtype [-st] [文件]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-s去除8位字符码集的第一个位，使它兼容于7位的ASCII。</li><li>-t将MS-DOS文本文件中的“换行+光标移至行首”字符转换成Linux的换行字符。</li></ul><h3 id="实例-15"><a href="#实例-15" class="headerlink" title="实例"></a>实例</h3><p>打开名为dos.txt的MS-DOS文件可使用如下命令：</p><pre><code>mtype dos.txt＃打开MS-DOS文件 </code></pre><p>显示结果如下：</p><pre><code>$ mtype dos.txt＃打开MS-DOS文件  Linux网络变得越来越普遍，但安全性往往被忽视  问题。不幸的是，在今天的环境中，所有网络都是潜在的黑客目标，  从绝密的军事研究网络到小型家庭局域网。  Linux Network Securty专注于在网络环境中保护Linux，其中  需要考虑整个网络的安全性而不仅仅是孤立的机器。  它使用理论和实践技术的组合来教授管理员如何安装和  使用安全应用程序，以及应用程序的工作方式以及必要的原因。  </code></pre><h2 id="18-pico"><a href="#18-pico" class="headerlink" title="18.pico"></a>18.pico</h2><pre><code>     pico命令用于编辑文字文件。</code></pre><p>pico是个简单易用，以显示导向为主的文字编辑程序，它伴随着处理电子邮件和新闻组的程序松而来。</p><h3 id="语法-17"><a href="#语法-17" class="headerlink" title="语法"></a>语法</h3><pre><code>pico [-bdefghjkmqtvwxz] [ -  n &lt;间隔秒数&gt;] [ -  o &lt;工作目录&gt;] [ -  r &lt;编辑页宽&gt;] [ -  s &lt;拼字检查器&gt;] [+ &lt;列数编号&gt;] [文件]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-b开启置换的功能。</li><li>-d开启删除的功能。</li><li>-e使用完整的文件名称。</li><li>-f支持键盘上的F1，F2 …等功能键。</li><li>-g显示光标。</li><li>-h在线帮助。</li><li>-j开启切换的功能。</li><li>-k预设pico在使用剪下命令时，会把光标所在的列的内容全部删除。</li><li>-m开启鼠标支持的功能，您可用鼠标点选命令列表。</li><li>-n &lt;间隔秒数&gt;设置多久检查一次新邮件。</li><li>-o &lt;工作目录&gt;设置工作目录。</li><li>-q忽略预设值。</li><li>-r &lt;编辑页宽&gt;设置编辑文件的页宽。</li><li>-s &lt;拼字检查器&gt;另外指定拼字检查器。</li><li>-t启动工具模式。</li><li>-v启动阅读模式，用户只能观看，无法编辑文件的内容。</li><li>-w关闭自动换行，通过这个参数可以编辑内容很长的列。</li><li>-x关闭换面下方的命令列表。</li><li>-z let pico可被Ctrl + z中断，暂存在后台作业里。</li><li>+ &lt;列数编号&gt;执行pico指令进入编辑模式时，从指定的列数开始编辑。</li></ul><h3 id="实例-16"><a href="#实例-16" class="headerlink" title="实例"></a>实例</h3><p>使用微微命令来编辑testfile的文件，在终端中输入如下命令：</p><pre><code>pico testfile </code></pre><p>输出结果如下：</p><pre><code>GNU nano 2.0.9文件：testfile＃从左到右分别为编辑器版本号，文件名  ＃编辑区  Linux网络变得越来越普遍，但安全性通常超过$  Linux Network Securty专注于在网络环境中保护Linux  [已读取3行]＃以下为菜单栏  ^ G求助^ O写入^ R读档^ Y上页^ K剪切文字^ C在标位置  ^ X离开^ J对齐^ W搜寻^ V下页^ U还原剪切^ T拼写检查 </code></pre><h2 id="19-rgrep"><a href="#19-rgrep" class="headerlink" title="19.rgrep"></a>19.rgrep</h2><p>​         rgrep命令用于递归查找文件里符合条件的字符串。</p><p>rgrep指令的功能和grep指令类似，可查找内容包含指定的范本样式的文件，如果发现某文件的内容符合所指定的范本样式，预设rgrep指令会把含有范本样式的那一列显示出来。</p><h3 id="语法-18"><a href="#语法-18" class="headerlink" title="语法"></a>语法</h3><pre><code>rgrep [-?BcDFhHilnNrv][-R&lt;范本样式&gt;][-W&lt;列长度&gt;][-x&lt;扩展名&gt;][--help][--version][范本样式][文件或目录...]</code></pre><p><strong>参说明数</strong>：</p><ul><li>-? 显示范本样式与范例的说明。</li><li>-B 忽略二进制的数据。</li><li>-c 计算符合范本样式的列数。</li><li>-D 排错模式，只列出指令搜寻的目录清单，而不会读取文件内容。</li><li>-F 当遇到符号连接时，rgrep预设是忽略不予处理，加上本参数后，rgrep指令就会读取该连接所指向的原始文件的内容。</li><li>-h 特别将符合范本样式的字符串标示出来。</li><li>-H 只列出符合范本样式的字符串，而非显示整列的内容。</li><li>-i 忽略字符大小写的差别。</li><li>-l 列出文件内容符合指定的范本样式的文件名称。</li><li>-n 在显示符合坊本样式的那一列之前，标示出该列的列数编号。</li><li>-N 不要递归处理。</li><li>-r 递归处理，将指定目录下的所有文件及子目录一并处理。</li><li>-R&lt;范本样式&gt; 此参数的效果和指定”-r”参数类似，但只主力符合范本样式文件名称的文件。</li><li>-v 反转查找。</li><li>-W&lt;列长度&gt; 限制符合范本样式的字符串所在列，必须拥有的字符数。</li><li>-x&lt;扩展名&gt; 只处理符合指定扩展名的文件名称的文件。</li><li>–help 在线帮助。</li><li>–version 显示版本信息。</li></ul><h3 id="实例-17"><a href="#实例-17" class="headerlink" title="实例"></a>实例</h3><p>在当前目录下查找句子中包含”Hello”字符串的文件，可使用如下命令：</p><pre><code>rgrep Hello * </code></pre><p>其搜索结果如下：</p><pre><code>$ rgrep Hello *             #在当前目录下查找句子中包含“Hello”字符串的文件  testfile_1:Hello 95         #testfile_1中包含“Hello”字符串的句子  testfile_2:Hello 2005       #testfile_2中包含“Hello”字符串的句子 </code></pre><h2 id="20-sed"><a href="#20-sed" class="headerlink" title="20.sed"></a>20.sed</h2><p>​        sed 命令是利用脚本来处理文本文件。</p><p>sed 可依照脚本的指令来处理、编辑文本文件。</p><p>Sed 主要用来自动编辑一个或多个文件、简化对文件的反复操作、编写转换程序等。</p><h3 id="语法-19"><a href="#语法-19" class="headerlink" title="语法"></a>语法</h3><pre><code>sed [-hnV][-e&lt;script&gt;][-f&lt;script文件&gt;][文本文件]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-e<script>或--expression=<script> 以选项中指定的script来处理输入的文本文件。</li><li>-f<script文件>或--file=<script文件> 以选项中指定的script文件来处理输入的文本文件。</li><li>-h或--help 显示帮助。</li><li>-n或--quiet或--silent 仅显示script处理后的结果。</li><li>-V或--version 显示版本信息。</li></ul><p><strong>动作说明</strong>：</p><ul><li>a ：新增， a 的后面可以接字串，而这些字串会在新的一行出现(目前的下一行)～</li><li>c ：取代， c 的后面可以接字串，这些字串可以取代 n1,n2 之间的行！</li><li>d ：删除，因为是删除啊，所以 d 后面通常不接任何咚咚；</li><li>i ：插入， i 的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)；</li><li>p ：打印，亦即将某个选择的数据印出。通常 p 会与参数 sed -n 一起运行～</li><li>s ：取代，可以直接进行取代的工作哩！通常这个 s 的动作可以搭配正规表示法！例如 1,20s/old/new/g 就是啦！</li></ul><h3 id="实例-18"><a href="#实例-18" class="headerlink" title="实例"></a>实例</h3><p>在testfile文件的第四行后添加一行，并将结果输出到标准输出，在命令行提示符下输入如下命令：</p><pre><code>sed -e 4a\newLine testfile </code></pre><p>首先查看testfile中的内容如下：</p><pre><code>$ cat testfile #查看testfile 中的内容  HELLO LINUX!  Linux is a free unix-type opterating system.  This is a linux testfile!  Linux test </code></pre><p>使用sed命令后，输出结果如下：</p><pre><code>$ sed -e 4a\newline testfile #使用sed 在第四行后添加新字符串  HELLO LINUX! #testfile文件原有的内容  Linux is a free unix-type opterating system.  This is a linux testfile!  Linux test  newline </code></pre><h3 id="以行为单位的新增-删除"><a href="#以行为单位的新增-删除" class="headerlink" title="以行为单位的新增/删除"></a>以行为单位的新增/删除</h3><p>将 /etc/passwd 的内容列出并且列印行号，同时，请将第 2~5 行删除！</p><pre><code>[root@www ~]# nl /etc/passwd | sed &#39;2,5d&#39;1 root<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8">&#x274c;</span>0:0:root:/root:/bin/bash6 sync<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8">&#x274c;</span>5:0:sync:/sbin:/bin/sync7 shutdown<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8">&#x274c;</span>6:0:shutdown:/sbin:/sbin/shutdown.....(后面省略).....</code></pre><p>sed 的动作为 '2,5d' ，那个 d 就是删除！因为 2-5 行给他删除了，所以显示的数据就没有 2-5 行罗～ 另外，注意一下，原本应该是要下达 sed -e 才对，没有 -e 也行啦！同时也要注意的是， sed 后面接的动作，请务必以 '' 两个单引号括住喔！</p><p>只要删除第 2 行</p><pre><code>nl /etc/passwd | sed &#39;2d&#39; </code></pre><p>要删除第 3 到最后一行</p><pre><code>nl /etc/passwd | sed &#39;3,$d&#39; </code></pre><p>在第二行后(亦即是加在第三行)加上『drink tea?』字样！</p><pre><code>[root@www ~]# nl /etc/passwd | sed &#39;2a drink tea&#39;1 root<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8">&#x274c;</span>0:0:root:/root:/bin/bash2 bin<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8">&#x274c;</span>1:1:bin:/bin:/sbin/nologindrink tea3 daemon<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8">&#x274c;</span>2:2:daemon:/sbin:/sbin/nologin.....(后面省略).....</code></pre><p>那如果是要在第二行前</p><pre><code>nl /etc/passwd | sed &#39;2i drink tea&#39; </code></pre><p>如果是要增加两行以上，在第二行后面加入两行字，例如 <strong>Drink tea or .....</strong> 与 <strong>drink beer?</strong></p><pre><code>[root@www ~]# nl /etc/passwd | sed &#39;2a Drink tea or ......\&gt; drink beer ?&#39;1 root<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8">&#x274c;</span>0:0:root:/root:/bin/bash2 bin<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8">&#x274c;</span>1:1:bin:/bin:/sbin/nologinDrink tea or ......drink beer ?3 daemon<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8">&#x274c;</span>2:2:daemon:/sbin:/sbin/nologin.....(后面省略).....</code></pre><p>每一行之间都必须要以反斜杠『 \ 』来进行新行的添加喔！所以，上面的例子中，我们可以发现在第一行的最后面就有 \ 存在。</p><h3 id="以行为单位的替换与显示"><a href="#以行为单位的替换与显示" class="headerlink" title="以行为单位的替换与显示"></a>以行为单位的替换与显示</h3><p>将第2-5行的内容取代成为『No 2-5 number』呢？</p><pre><code>[root@www ~]# nl /etc/passwd | sed &#39;2,5c No 2-5 number&#39;1 root<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8">&#x274c;</span>0:0:root:/root:/bin/bashNo 2-5 number6 sync<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8">&#x274c;</span>5:0:sync:/sbin:/bin/sync.....(后面省略).....</code></pre><p>透过这个方法我们就能够将数据整行取代了！</p><p>仅列出 /etc/passwd 文件内的第 5-7 行</p><pre><code>[root@www ~]# nl /etc/passwd | sed -n &#39;5,7p&#39;5 lp<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8">&#x274c;</span>4:7:lp:/var/spool/lpd:/sbin/nologin6 sync<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8">&#x274c;</span>5:0:sync:/sbin:/bin/sync7 shutdown<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8">&#x274c;</span>6:0:shutdown:/sbin:/sbin/shutdown</code></pre><p>可以透过这个 sed 的以行为单位的显示功能， 就能够将某一个文件内的某些行号选择出来显示。</p><h3 id="数据的搜寻并显示"><a href="#数据的搜寻并显示" class="headerlink" title="数据的搜寻并显示"></a>数据的搜寻并显示</h3><p>搜索 /etc/passwd有root关键字的行</p><pre><code>nl /etc/passwd | sed &#39;/root/p&#39;1  root<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8">&#x274c;</span>0:0:root:/root:/bin/bash1  root<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8">&#x274c;</span>0:0:root:/root:/bin/bash2  daemon<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8">&#x274c;</span>1:1:daemon:/usr/sbin:/bin/sh3  bin<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8">&#x274c;</span>2:2:bin:/bin:/bin/sh4  sys<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8">&#x274c;</span>3:3:sys:/dev:/bin/sh5  sync<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8">&#x274c;</span>4:65534:sync:/bin:/bin/sync....下面忽略 </code></pre><p>如果root找到，除了输出所有行，还会输出匹配行。</p><p>使用-n的时候将只打印包含模板的行。</p><pre><code>nl /etc/passwd | sed -n &#39;/root/p&#39;1  root<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8">&#x274c;</span>0:0:root:/root:/bin/bash</code></pre><h3 id="数据的搜寻并删除"><a href="#数据的搜寻并删除" class="headerlink" title="数据的搜寻并删除"></a>数据的搜寻并删除</h3><p>删除/etc/passwd所有包含root的行，其他行输出</p><pre><code>nl /etc/passwd | sed  &#39;/root/d&#39;2  daemon<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8">&#x274c;</span>1:1:daemon:/usr/sbin:/bin/sh3  bin<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8">&#x274c;</span>2:2:bin:/bin:/bin/sh....下面忽略#第一行的匹配root已经删除了</code></pre><h3 id="数据的搜寻并执行命令"><a href="#数据的搜寻并执行命令" class="headerlink" title="数据的搜寻并执行命令"></a>数据的搜寻并执行命令</h3><p>搜索/etc/passwd,找到root对应的行，执行后面花括号中的一组命令，每个命令之间用分号分隔，这里把bash替换为blueshell，再输出这行：</p><pre><code>nl /etc/passwd | sed -n &#39;/root/{s/bash/blueshell/;p;q}&#39;    1  root<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8">&#x274c;</span>0:0:root:/root:/bin/blueshell</code></pre><p>最后的q是退出。</p><h3 id="数据的搜寻并替换"><a href="#数据的搜寻并替换" class="headerlink" title="数据的搜寻并替换"></a>数据的搜寻并替换</h3><p>除了整行的处理模式之外， sed 还可以用行为单位进行部分数据的搜寻并取代。基本上 sed 的搜寻与替代的与 vi 相当的类似！他有点像这样：</p><pre><code>sed &#39;s/要被取代的字串/新的字串/g&#39;</code></pre><p>先观察原始信息，利用 /sbin/ifconfig 查询 IP</p><pre><code>[root@www ~]# /sbin/ifconfig eth0eth0 Link encap:Ethernet HWaddr 00:90:CC:A6:34:84inet addr:192.168.1.100 Bcast:192.168.1.255 Mask:255.255.255.0inet6 addr: fe80::290:ccff:fea6:3484/64 Scope:LinkUP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1.....(以下省略).....</code></pre><p>本机的ip是192.168.1.100。</p><p>将 IP 前面的部分予以删除</p><pre><code>[root@www ~]# /sbin/ifconfig eth0 | grep &#39;inet addr&#39; | sed &#39;s/^.*addr://g&#39;192.168.1.100 Bcast:192.168.1.255 Mask:255.255.255.0</code></pre><p>接下来则是删除后续的部分，亦即： 192.168.1.100 Bcast:192.168.1.255 Mask:255.255.255.0</p><p>将 IP 后面的部分予以删除</p><pre><code>[root@www ~]# /sbin/ifconfig eth0 | grep &#39;inet addr&#39; | sed &#39;s/^.*addr://g&#39; | sed &#39;s/Bcast.*$//g&#39;192.168.1.100</code></pre><h3 id="多点编辑"><a href="#多点编辑" class="headerlink" title="多点编辑"></a>多点编辑</h3><p>一条sed命令，删除/etc/passwd第三行到末尾的数据，并把bash替换为blueshell</p><pre><code>nl /etc/passwd | sed -e &#39;3,$d&#39; -e &#39;s/bash/blueshell/&#39;1  root<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8">&#x274c;</span>0:0:root:/root:/bin/blueshell2  daemon<span class="github-emoji" style="color: transparent;background:no-repeat url(https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8) center/contain" data-src="https://github.githubassets.com/images/icons/emoji/unicode/274c.png?v8">&#x274c;</span>1:1:daemon:/usr/sbin:/bin/sh</code></pre><p>-e表示多点编辑，第一个编辑命令删除/etc/passwd第三行到末尾的数据，第二条命令搜索bash替换为blueshell。</p><h3 id="直接修改文件内容-危险动作"><a href="#直接修改文件内容-危险动作" class="headerlink" title="直接修改文件内容(危险动作)"></a>直接修改文件内容(危险动作)</h3><p>sed 可以直接修改文件的内容，不必使用管道命令或数据流重导向！ 不过，由於这个动作会直接修改到原始的文件，所以请你千万不要随便拿系统配置来测试！ 我们还是使用文件 regular_express.txt 文件来测试看看吧！</p><p>regular_express.txt 文件内容如下：</p><pre><code>[root@www ~]# cat regular_express.txt runoob.google.taobao.facebook.zhihu-weibo-</code></pre><p>利用 sed 将 regular_express.txt 内每一行结尾若为 . 则换成 !</p><pre><code>[root@www ~]# sed -i &#39;s/\.$/\!/g&#39; regular_express.txt[root@www ~]# cat regular_express.txt runoob!google!taobao!facebook!zhihu-weibo-</code></pre><p>:q:q</p><p>利用 sed 直接在 regular_express.txt 最后一行加入 <strong># This is a test</strong>:</p><pre><code>[root@www ~]# sed -i &#39;$a # This is a test&#39; regular_express.txt[root@www ~]# cat regular_express.txt runoob!google!taobao!facebook!zhihu-weibo-# This is a test</code></pre><p>由於 $ 代表的是最后一行，而 a 的动作是新增，因此该文件最后新增 <strong># This is a test</strong>！</p><p>sed 的 <strong>-i</strong> 选项可以直接修改文件内容，这功能非常有帮助！举例来说，如果你有一个 100 万行的文件，你要在第 100 行加某些文字，此时使用 vim 可能会疯掉！因为文件太大了！那怎办？就利用 sed 啊！透过 sed 直接修改/取代的功能，你甚至不需要使用 vim 去修订！</p><h2 id="21-sort"><a href="#21-sort" class="headerlink" title="21.sort"></a>21.sort</h2><p>​        sort命令用于将文本文件内容加以排序。</p><p>sort可针对文本文件的内容，以行为单位来排序。</p><h3 id="语法-20"><a href="#语法-20" class="headerlink" title="语法"></a>语法</h3><pre><code>sort [-bcdfimMnr][-o&lt;输出文件&gt;][-t&lt;分隔字符&gt;][+&lt;起始栏位&gt;-&lt;结束栏位&gt;][--help][--verison][文件]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-b 忽略每行前面开始出的空格字符。</li><li>-c 检查文件是否已经按照顺序排序。</li><li>-d 排序时，处理英文字母、数字及空格字符外，忽略其他的字符。</li><li>-f 排序时，将小写字母视为大写字母。</li><li>-i 排序时，除了040至176之间的ASCII字符外，忽略其他的字符。</li><li>-m 将几个排序好的文件进行合并。</li><li>-M 将前面3个字母依照月份的缩写进行排序。</li><li>-n 依照数值的大小排序。</li><li>-o<输出文件> 将排序后的结果存入指定的文件。</li><li>-r 以相反的顺序来排序。</li><li>-t<分隔字符> 指定排序时所用的栏位分隔字符。</li><li>+<起始栏位>-<结束栏位> 以指定的栏位来排序，范围由起始栏位到结束栏位的前一栏位。</li><li>--help 显示帮助。</li><li>--version 显示版本信息。</li></ul><h3 id="实例-19"><a href="#实例-19" class="headerlink" title="实例"></a>实例</h3><p>在使用sort命令以默认的式对文件的行进行排序，使用的命令如下：</p><pre><code>sort testfile </code></pre><p>sort 命令将以默认的方式将文本文件的第一列以ASCII 码的次序排列，并将结果输出到标准输出。</p><p>使用 cat命令显示testfile文件可知其原有的排序如下：</p><pre><code>$ cat testfile      #testfile文件原有排序  test 30  Hello 95  Linux 85 </code></pre><p>使用sort命令重排后的结果如下：</p><pre><code>$ sort testfile #重排结果  Hello 95  Linux 85  test 30 </code></pre><h2 id="22-spell"><a href="#22-spell" class="headerlink" title="22.spell"></a>22.spell</h2><p>​        spell命令可建立拼写检查程序。</p><p>spell可从标准输入设备读取字符串，结束后显示拼错的词汇。</p><h3 id="语法-21"><a href="#语法-21" class="headerlink" title="语法"></a>语法</h3><pre><code>spell</code></pre><h3 id="实例-20"><a href="#实例-20" class="headerlink" title="实例"></a>实例</h3><p>检查文件testfile是否有拼写错误，在命令行提示符下输入如下命令：</p><pre><code>spell testfile </code></pre><p>如果文件中有单词拼写错误，则输出如下信息：</p><pre><code>$ spell testfile   #检查testfile 拼写错误  scurity            #以下为有错误的单词  tp  LANs  Securty  practicl  applcations  necesary </code></pre><p>如果所检查的文件没有单词拼写错误，那么，命令运行后不会给出任何信息。</p><p>检查从标准输入读取的字符串。例如在命令行中输入如下命令：</p><pre><code>spell </code></pre><p>按回车键后，输入一串字符串，然后按Ctrl+D 组合键退出spell，屏幕上将显示拼写有错误的单词。如下所示：</p><pre><code>$ spell #检查标准输入的字符串的拼写错误  hell,this is a linx sustem! #拼写错误的字符串  linx #以下为有拼写错误的单词  sustem </code></pre><h2 id="23-tr"><a href="#23-tr" class="headerlink" title="23.tr"></a>23.tr</h2><p>​         tr命令用于转换或删除文件中的字符。</p><p>tr指令从标准输入设备读取数据，经过字符串转译后，将结果输出到标准输出设备。</p><h3 id="语法-22"><a href="#语法-22" class="headerlink" title="语法"></a>语法</h3><pre><code>tr [-cdst] [ -  help] [ -  version] [第一字符集] [第二字符集]  tr [选项] ... SET1 [SET2] </code></pre><p><strong>参数说明：</strong></p><ul><li>-c，--complement：反选设定字符。也就是符合SET1的部份不做处理，不符合的剩余部份才进行转换</li><li>-d， - delete：删除指令字符</li><li>-s， - squeeze-repeats：缩减连续重复的字符成指定的单个字符</li><li>-t， - struncate-set1：削减SET1指定范围，使之与SET2设定长度相等</li><li>--help：显示程序用法信息</li><li>--version：显示程序本身的版本信息</li></ul><p>字符集合的范围：</p><ul><li>\ NNN八进制值的字符NNN（1到3为八进制值的字符）</li><li>\反斜杠</li><li>\ a Ctrl-G铃声</li><li>\ b Ctrl-H退格符</li><li>\ f Ctrl-L走行换页</li><li>\ n Ctrl-J新行</li><li>\ r \ n Ctrl-M回车</li><li>\ t Ctrl-I tab键</li><li>\ v Ctrl-X水平制表符</li><li>CHAR1-CHAR2：字符范围从CHAR1到CHAR2的指定，范围的指定以ASCII码的次序为基础，只能由小到大，不能由大到小。</li><li>[CHAR *]：这是SET2专用的设定，功能是重复指定的字符到与SET1相同长度为止</li><li>[CHAR * REPEAT]：这也是SET2专用的设定，功能是重复指定的字符到设定的REPEAT次数为止（REPEAT的数字采8进位制计算，以0为开始）</li><li>[：alnum：]：所有字母字符与数字</li><li>[：alpha：]：所有字母字符</li><li>[：blank：]：所有水平空格</li><li>[：cntrl：]：所有控制字符</li><li>[：digit：]：所有数字</li><li>[：graph：]：所有可打印的字符（不包含空格符）</li><li>[：lower：]：所有小写字母</li><li>[：print：]：所有可打印的字符（包含空格符）</li><li>[：punct：]：所有标点字符</li><li>[：space：]：所有水平与垂直空格符</li><li>[：upper：]：所有大写字母</li><li>[：xdigit：]：所有16进位制的数字</li><li>[= CHAR =]：所有符合指定的字符（等号里的CHAR，代表你可自订的字符）</li></ul><h3 id="实例-21"><a href="#实例-21" class="headerlink" title="实例"></a>实例</h3><p>将文件testfile的中的小写字母全部转换成大写字母，此时，可使用如下命令：</p><pre><code>cat testfile | tr az AZ </code></pre><p>testfile的文件中的内容如下：</p><pre><code>$ cat testfile #testfile原来的内容  Linux网络变得越来越普遍， 但是，成熟往往被忽视了  问题。不幸的是，在今天的环境中所有的网络是潜在的黑客攻击目标，  从秘密军事研究网络到小型家庭局域网。  Linux Network Securty专注于在Linux中保护Linux 网络环境，在哪里  需要考虑整个网络的安全性而不仅仅是孤立的机器。  它结合了理论和实践技术 教管理员如何安装和  使用安全应用程序，以及如何使用 applcations工作以及为什么他们是必要的。 </code></pre><p>使用tr命令大小写转换后，得到如下输出结果：</p><pre><code>$ cat testfile | tr az AZ＃转换后的输出  LINUX网络正在变得越来越普遍，但是它们已经被忽视了  问题。不幸的是，在今天的环境中，所有网络都是可能的HACKER目标，  从TP-SECRET军事研究网络到小型家庭局域网。  LINUX网络安全聚焦在网络环境中保护LINUX，在那里  整个网络的安全性需要考虑的不仅仅是隔离的机器。  它使用混合的理论和实践技术来管理管理员如何安装和  使用安全应用程序，以及应用程序如何工作以及为什么它们是必要的。 </code></pre><p>大小写转换，也可以通过[：下] [：上部]参数来实现例如使用如下命令：</p><pre><code>cat testfile | tr [：lower：] [：upper：] </code></pre><p>输出结果如下：</p><pre><code>$ cat testfile | tr [：lower：] [：upper：]＃转换后的输出  LINUX网络正在变得越来越普遍，但是它们已经被忽视了  问题。不幸的是，在今天的环境中，所有网络都是可能的HACKER目标，  从TP-SECRET军事研究网络到小型家庭局域网。  LINUX网络安全聚焦在网络环境中保护LINUX，在那里  整个网络的安全性需要考虑的不仅仅是隔离的机器。  它使用混合的理论和实践技术来管理管理员如何安装和  使用安全应用程序，以及应用程序如何工作以及为什么它们是必要的。 </code></pre><h2 id="24-expr"><a href="#24-expr" class="headerlink" title="24.expr"></a>24.expr</h2><p>​        expr命令是一个手工命令行计数器，用于在UNIX/LINUX下求表达式变量的值，一般用于整数值，也可用于字符串。</p><h3 id="语法-23"><a href="#语法-23" class="headerlink" title="语法"></a>语法</h3><pre><code>expr 表达式</code></pre><p><strong>表达式说明:</strong></p><ul><li>用空格隔开每个项；</li><li>用 / (反斜杠) 放在 shell 特定的字符前面；</li><li>对包含空格和其他特殊字符的字符串要用引号括起来</li></ul><h3 id="实例-22"><a href="#实例-22" class="headerlink" title="实例"></a>实例</h3><p>1、计算字串长度</p><pre><code>&gt; expr length “this is a test” 14</code></pre><p>2、抓取字串</p><pre><code>&gt; expr substr “this is a test” 3 5is is</code></pre><p>3、抓取第一个字符数字串出现的位置</p><pre><code>&gt; expr index &quot;sarasara&quot;  a 2</code></pre><p>4、整数运算</p><pre><code> &gt; expr 14 % 9 5 &gt; expr 10 + 10 20 &gt; expr 1000 + 900 1900 &gt; expr 30 / 3 / 2 5 &gt; expr 30 \* 3 (使用乘号时，必须用反斜线屏蔽其特定含义。因为shell可能会误解显示星号的意义) 90 &gt; expr 30 * 3 expr: Syntax error</code></pre><h2 id="25-uniq"><a href="#25-uniq" class="headerlink" title="25.uniq"></a>25.uniq</h2><p>​        uniq 命令用于检查及删除文本文件中重复出现的行列，一般与 sort 命令结合使用。</p><p>uniq 可检查文本文件中重复出现的行列。</p><h3 id="语法-24"><a href="#语法-24" class="headerlink" title="语法"></a>语法</h3><pre><code>uniq [-cdu][-f&lt;栏位&gt;][-s&lt;字符位置&gt;][-w&lt;字符位置&gt;][--help][--version][输入文件][输出文件]</code></pre><p><strong>参数</strong>：</p><ul><li>-c或--count 在每列旁边显示该行重复出现的次数。</li><li>-d或--repeated 仅显示重复出现的行列。</li><li>-f<栏位>或--skip-fields=<栏位> 忽略比较指定的栏位。</li><li>-s<字符位置>或--skip-chars=<字符位置> 忽略比较指定的字符。</li><li>-u或--unique 仅显示出一次的行列。</li><li>-w<字符位置>或--check-chars=<字符位置> 指定要比较的字符。</li><li>--help 显示帮助。</li><li>--version 显示版本信息。</li><li>[输入文件] 指定已排序好的文本文件。如果不指定此项，则从标准读取数据；</li><li>[输出文件] 指定输出的文件。如果不指定此选项，则将内容显示到标准输出设备（显示终端）。</li></ul><h3 id="实例-23"><a href="#实例-23" class="headerlink" title="实例"></a>实例</h3><p>文件testfile中第 2、3、5、6、7、9行为相同的行，使用 uniq 命令删除重复的行，可使用以下命令：</p><pre><code>uniq testfile </code></pre><p>testfile中的原有内容为：</p><pre><code>$ cat testfile      #原有内容  test 30  test 30  test 30  Hello 95  Hello 95  Hello 95  Hello 95  Linux 85  Linux 85 </code></pre><p>使用uniq 命令删除重复的行后，有如下输出结果：</p><pre><code>$ uniq testfile     #删除重复行后的内容  test 30  Hello 95  Linux 85 </code></pre><p>检查文件并删除文件中重复出现的行，并在行首显示该行重复出现的次数。使用如下命令：</p><pre><code>uniq -c testfile </code></pre><p>结果输出如下：</p><pre><code>$ uniq -c testfile      #删除重复行后的内容  3 test 30             #前面的数字的意义为该行共出现了3次  4 Hello 95            #前面的数字的意义为该行共出现了4次  2 Linux 85            #前面的数字的意义为该行共出现了2次 </code></pre><p>当重复的行并不相邻时，uniq 命令是不起作用的，即若文件内容为以下时，uniq 命令不起作用：</p><pre><code>$ cat testfile1      # 原有内容 test 30  Hello 95  Linux 85 test 30  Hello 95  Linux 85 test 30  Hello 95  Linux 85 </code></pre><p>这时我们就可以使用 sort：</p><pre><code>$ sort  testfile1 | uniqHello 95  Linux 85 test 30</code></pre><p>统计各行在文件中出现的次数：</p><pre><code>$ sort testfile1 | uniq -c   3 Hello 95     3 Linux 85    3 test 30</code></pre><p>在文件中找出重复的行：</p><pre><code>$ sort testfile1 | uniq -dHello 95  Linux 85 test 30  </code></pre><h2 id="26-wc"><a href="#26-wc" class="headerlink" title="26.wc"></a>26.wc</h2><p>​        wc命令用于计算字数。</p><p>利用WC指令我们可以计算文件的字节数，字数，或是列数，若不指定文件名称，或是所给予的文件名为 “ - ”，则WC指令会从标准输入设备读取数据。</p><h3 id="语法-25"><a href="#语法-25" class="headerlink" title="语法"></a>语法</h3><pre><code>wc [-clw] [ -  help] [ -  version] [文件...]</code></pre><p><strong>参数</strong>：</p><ul><li>-c或--bytes或--chars只显示Bytes数。</li><li>-l或--lines只显示行数。</li><li>-w或--words只显示字数。</li><li>--help在线帮助。</li><li>--version显示版本信息。</li></ul><h3 id="实例-24"><a href="#实例-24" class="headerlink" title="实例"></a>实例</h3><p>在默认的情况下，WC将计算指定文件的行数，字数，以及字节数使用的命令为：</p><pre><code>wc testfile </code></pre><p>先查看testfile的文件的内容，可以看到：</p><pre><code>$ cat testfile  Linux网络变得越来越普遍，但是精简往往被忽视了  问题。不幸的是，在今天的环境中，所有网络都是潜在的黑客目标，  从秘密军事研究网络到小型家庭局域网。  Linux Network Securty专注于在网络环境中保护Linux，其中  需要考虑整个网络的安全性而不仅仅是孤立的机器。  它使用理论和实践技术的组合来教授管理员如何安装和  使用安全应用程序，以及应用程序如何工作以及它们为什么是必要的。 </code></pre><h3 id="使用wc统计，结果如下："><a href="#使用wc统计，结果如下：" class="headerlink" title="使用wc统计，结果如下："></a>使用wc统计，结果如下：</h3><pre><code>$ wc testfile #testfile文件的统计信息  3 92 598 testfile #testfile文件的行数为3，单词数92，字节数598 </code></pre><p>其中，3个数字分别表示testfile文件的行数，单词数，以及该文件的字节数。</p><p>如果想同时统计多个文件的信息，例如同时统计testfile的，testfile_1，testfile_2，可使用如下命令：</p><pre><code>wc testfile testfile_1 testfile_2＃统计三个文件的信息 </code></pre><p>输出结果如下：</p><pre><code>$ wc testfile testfile_1 testfile_2＃统计三个文件的信息  3 92 598 testfile＃第一个文件行数为3，单词数92，字节数598  9 18 78 testfile_1＃第二个文件的行数为9，单词数18，字节数78  3 6 32 testfile_2＃第三个文件的行数为3，单词数6，字节数32  15 116 708总用量＃三个文件总共的行数为15，单词数116，字节数708 </code></pre><h2 id="27-let"><a href="#27-let" class="headerlink" title="27.let"></a>27.let</h2><p>​        let 命令是 BASH 中用于计算的工具，用于执行一个或多个表达式，变量计算中不需要加上 $ 来表示变量。如果表达式中包含了空格或其他特殊字符，则必须引起来。</p><h3 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h3><pre><code>let arg [arg ...]</code></pre><h3 id="参数说明："><a href="#参数说明：" class="headerlink" title="参数说明："></a>参数说明：</h3><p>arg：要执行的表达式</p><h3 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h3><p>自加操作：<strong>let no++</strong></p><p>自减操作：<strong>let no--</strong></p><p>简写形式 <strong>let no+=10，let no-=20</strong>，分别等同于 <strong>let no=no+10，let no=no-20</strong>。</p><p>以下实例计算 a 和 b 两个表达式，并输出结果：</p><pre><code>#!/bin/bashlet a=5+4let b=9-3 echo $a $b</code></pre><p>以上实例执行结果为：</p><pre><code>9 6</code></pre><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><ul><li><a href="https://www.runoob.com/linux/linux-command-manual.html">https://www.runoob.com/linux/linux-command-manual.html</a></li></ul><p><em>如有侵权，联系 <a href="mailto:2025685938@qq.com">2025685938@qq.com</a> 删除</em></p></script></script></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.Linux命令（文件管理）</title>
      <link href="/posts/51700.html"/>
      <url>/posts/51700.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-文件管理"><a href="#1-文件管理" class="headerlink" title="1.文件管理"></a>1.文件管理</h1><h2 id="1-cat"><a href="#1-cat" class="headerlink" title="1.cat"></a>1.cat</h2><p>cat 命令用于连接文件并打印到标准输出设备上。</p><h3 id="使用权限"><a href="#使用权限" class="headerlink" title="使用权限"></a>使用权限</h3><p>所有使用者</p><h3 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h3><pre><code>cat [-AbeEnstTuv] [--help] [--version] fileName</code></pre><h3 id="参数说明："><a href="#参数说明：" class="headerlink" title="参数说明："></a>参数说明：</h3><p><strong>-n 或 –number</strong>：由 1 开始对所有输出的行数编号。</p><p><strong>-b 或 –number-nonblank</strong>：和 -n 相似，只不过对于空白行不编号。</p><p><strong>-s 或 –squeeze-blank</strong>：当遇到有连续两行以上的空白行，就代换为一行的空白行。</p><p><strong>-v 或 –show-nonprinting</strong>：使用 ^ 和 M- 符号，除了 LFD 和 TAB 之外。</p><p><strong>-E 或 –show-ends</strong> : 在每行结束处显示 $。</p><p><strong>-T 或 –show-tabs</strong>: 将 TAB 字符显示为 ^I。</p><p><strong>-A, –show-all</strong>：等价于 -vET。</p><p><strong>-e：</strong>等价于”-vE”选项；</p><p><strong>-t：</strong>等价于”-vT”选项；</p><h3 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h3><p>把 textfile1 的文档内容加上行号后输入 textfile2 这个文档里：</p><pre><code>cat -n textfile1 &gt; textfile2</code></pre><p>把 textfile1 和 textfile2 的文档内容加上行号（空白行不加）之后将内容附加到 textfile3 文档里：</p><pre><code>cat -b textfile1 textfile2 &gt;&gt; textfile3</code></pre><p>清空 /etc/test.txt 文档内容：</p><pre><code>cat /dev/null &gt; /etc/test.txt</code></pre><p>cat 也可以用来制作镜像文件。例如要制作软盘的镜像文件，将软盘放好后输入：</p><pre><code>cat /dev/fd0 &gt; OUTFILE</code></pre><p>相反的，如果想把 image file 写到软盘，输入：</p><pre><code>cat IMG_FILE &gt; /dev/fd0</code></pre><p><strong>注</strong>：</p><ul><li>\1. OUTFILE 指输出的镜像文件名。</li><li>\2. IMG_FILE 指镜像文件。</li><li>\3. 若从镜像文件写回 device 时，device 容量需与相当。</li><li>\4. 通常用制作开机磁片。</li></ul><h2 id="2-chattr"><a href="#2-chattr" class="headerlink" title="2.chattr"></a>2.chattr</h2><p> chattr 命令用于改变文件属性。</p><p>这项指令可改变存放在ext2文件系统上的文件或目录属性，这些属性共有以下8种模式：</p><ol><li>a：让文件或目录仅供附加用途。</li><li>b：不更新文件或目录的最后存取时间。</li><li>c：将文件或目录压缩后存放。</li><li>d：将文件或目录排除在倾倒操作之外。</li><li>i：不得任意更动文件或目录。</li><li>s：保密性删除文件或目录。</li><li>S：即时更新文件或目录。</li><li>u：预防意外删除。</li></ol><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre><code>chattr [-RV][-v&lt;版本编号&gt;][+/-/=&lt;属性&gt;][文件或目录...]</code></pre><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>　　-R 递归处理，将指定目录下的所有文件及子目录一并处理。</p><p>　　-v&lt;版本编号&gt; 设置文件或目录版本。</p><p>　　-V 显示指令执行过程。</p><p>　　+&lt;属性&gt; 开启文件或目录的该项属性。</p><p>　　-&lt;属性&gt; 关闭文件或目录的该项属性。</p><p>　　=&lt;属性&gt; 指定文件或目录的该项属性。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>用chattr命令防止系统中某个关键文件被修改：</p><pre><code>chattr +i /etc/resolv.conflsattr /etc/resolv.conf</code></pre><p>会显示如下属性</p><pre><code>----i-------- /etc/resolv.conf</code></pre><p>让某个文件只能往里面追加数据，但不能删除，适用于各种日志文件：</p><pre><code>chattr +a /var/log/messages</code></pre><h2 id="3-chgrp"><a href="#3-chgrp" class="headerlink" title="3. chgrp"></a>3. chgrp</h2><p>chgrp 命令 用于变更文件或目录的所属群组。</p><p>在UNIX系统家族里，文件或目录权限的掌控以拥有者及所属群组来管理。您可以使用chgrp指令去变更文件与目录的所属群组，设置方式采用群组名称或群组识别码皆可。</p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><pre><code>chgrp [-cfhRv][--help][--version][所属群组][文件或目录...] 或 chgrp [-cfhRv][--help][--reference=&lt;参考文件或目录&gt;][--version][文件或目录...]</code></pre><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><p>　　-c或–changes 效果类似”-v”参数，但仅回报更改的部分。</p><p>　　-f或–quiet或–silent 　不显示错误信息。</p><p>　　-h或–no-dereference 　只对符号连接的文件作修改，而不更动其他任何相关文件。</p><p>　　-R或–recursive 　递归处理，将指定目录下的所有文件及子目录一并处理。</p><p>　　-v或–verbose 　显示指令执行过程。</p><p>　　–help 　在线帮助。</p><p>　　–reference=&lt;参考文件或目录&gt; 　把指定文件或目录的所属群组全部设成和参考文件或目录的所属群组相同。</p><p>　　–version 　显示版本信息。</p><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>实例1：改变文件的群组属性：</p><pre><code>chgrp -v bin log2012.log</code></pre><p>输出：</p><pre><code>[root@localhost test]# ll---xrw-r-- 1 root root 302108 11-13 06:03 log2012.log[root@localhost test]# chgrp -v bin log2012.log</code></pre><p>“log2012.log” 的所属组已更改为 bin</p><pre><code>[root@localhost test]# ll---xrw-r-- 1 root bin  302108 11-13 06:03 log2012.log</code></pre><p>说明： 将log2012.log文件由root群组改为bin群组</p><p>实例2：根据指定文件改变文件的群组属性</p><pre><code>chgrp --reference=log2012.log log2013.log</code></pre><p>输出：</p><pre><code>[root@localhost test]# ll---xrw-r-- 1 root bin  302108 11-13 06:03 log2012.log-rw-r--r-- 1 root root     61 11-13 06:03 log2013.log[root@localhost test]#  chgrp --reference=log2012.log log2013.log [root@localhost test]# ll---xrw-r-- 1 root bin  302108 11-13 06:03 log2012.log-rw-r--r-- 1 root bin      61 11-13 06:03 log2013.log</code></pre><p>说明： 改变文件log2013.log 的群组属性，使得文件log2013.log的群组属性和参考文件log2012.log的群组属性相同</p><h2 id="4-chmod"><a href="#4-chmod" class="headerlink" title="4.chmod"></a>4.chmod</h2><p>Linux/Unix 的文件调用权限分为三级 : 文件拥有者、群组、其他。利用 chmod 可以藉以控制文件如何被他人所调用。</p><p><strong>使用权限</strong> : 所有使用者</p><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><pre><code>chmod [-cfvR] [--help] [--version] mode file...</code></pre><h3 id="参数说明-1"><a href="#参数说明-1" class="headerlink" title="参数说明"></a>参数说明</h3><p>mode : 权限设定字串，格式如下 :</p><pre><code>[ugoa...][[+-=][rwxX]...][,...]</code></pre><p>其中：</p><ul><li>u 表示该文件的拥有者，g 表示与该文件的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是。</li><li>+ 表示增加权限、- 表示取消权限、= 表示唯一设定权限。</li><li>r 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该文件是个子目录或者该文件已经被设定过为可执行。</li></ul><p>其他参数说明：</p><ul><li>-c : 若该文件权限确实已经更改，才显示其更改动作</li><li>-f : 若该文件权限无法被更改也不要显示错误讯息</li><li>-v : 显示权限变更的详细资料</li><li>-R : 对目前目录下的所有文件与子目录进行相同的权限变更(即以递回的方式逐个变更)</li><li>–help : 显示辅助说明</li><li>–version : 显示版本</li></ul><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><p>将文件 file1.txt 设为所有人皆可读取 :</p><pre><code>chmod ugo+r file1.txt</code></pre><p>将文件 file1.txt 设为所有人皆可读取 :</p><pre><code>chmod a+r file1.txt</code></pre><p>将文件 file1.txt 与 file2.txt 设为该文件拥有者，与其所属同一个群体者可写入，但其他以外的人则不可写入 :</p><pre><code>chmod ug+w,o-w file1.txt file2.txt</code></pre><p>将 ex1.py 设定为只有该文件拥有者可以执行 :</p><pre><code>chmod u+x ex1.py</code></pre><p>将目前目录下的所有文件与子目录皆设为任何人可读取 :</p><pre><code>chmod -R a+r *</code></pre><p>此外chmod也可以用数字来表示权限如 :</p><pre><code>chmod 777 file</code></pre><p>语法为：</p><pre><code>chmod abc file</code></pre><p>其中a,b,c各为一个数字，分别表示User、Group、及Other的权限。</p><h4 id="r-4，w-2，x-1"><a href="#r-4，w-2，x-1" class="headerlink" title="r=4，w=2，x=1"></a>r=4，w=2，x=1</h4><ul><li>若要rwx属性则4+2+1=7；</li><li>若要rw-属性则4+2=6；</li><li>若要r-x属性则4+1=5。</li></ul><pre><code>chmod a=rwx file</code></pre><p>和</p><pre><code>chmod 777 file</code></pre><p>效果相同</p><pre><code>chmod ug=rwx,o=x file</code></pre><p>和</p><pre><code>chmod 771 file</code></pre><p>效果相同</p><p>若用chmod 4755 filename可使此程序具有root的权限</p><h2 id="5-chown"><a href="#5-chown" class="headerlink" title="5.chown"></a>5.chown</h2><p>​        Linux/Unix 是多人多工操作系统，所有的文件皆有拥有者。利用 chown 将指定文件的拥有者改为指定的用户或组，用户可以是用户名或者用户ID；组可以是组名或者组ID；文件是以空格分开的要改变权限的文件列表，支持通配符。 。</p><p>一般来说，这个指令只有是由系统管理者(root)所使用，一般使用者没有权限可以改变别人的文件拥有者，也没有权限可以自己的文件拥有者改设为别人。只有系统管理者(root)才有这样的权限。</p><p><strong>使用权限</strong> : root</p><h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><pre><code>chown [-cfhvR] [--help] [--version] user[:group] file...</code></pre><p><strong>参数</strong> :</p><ul><li>user : 新的文件拥有者的使用者 ID</li><li>group : 新的文件拥有者的使用者组(group)</li><li>-c : 显示更改的部分的信息</li><li>-f : 忽略错误信息</li><li>-h :修复符号链接</li><li>-v : 显示详细的处理信息</li><li>-R : 处理指定目录以及其子目录下的所有文件</li><li>–help : 显示辅助说明</li><li>–version : 显示版本</li></ul><h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><p>将文件 file1.txt 的拥有者设为 runoob，群体的使用者 runoobgroup :</p><pre><code>chown runoob:runoobgroup file1.txt</code></pre><p>将目前目录下的所有文件与子目录的拥有者皆设为 runoob，群体的使用者 runoobgroup:</p><pre><code>chown -R runoob:runoobgroup *</code></pre><h2 id="6-cksum"><a href="#6-cksum" class="headerlink" title="6.cksum"></a>6.cksum</h2><p>​         cksum命令用于检查文件的CRC是否正确。确保文件从一个系统传输到另一个系统的过程中不被损坏。</p><p>CRC是一种排错检查方式，该校验法的标准由CCITT所指定，至少可检测到99.998%的已知错误。</p><p>指定文件交由指令”cksum”进行校验后，该指令会返回校验结果供用户核对文件是否正确无误。若不指定任何文件名称或是所给予的文件名为”-“，则指令”cksum”会从标准输入设备中读取数据。</p><h3 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h3><pre><code>cksum [--help][--version][文件...]</code></pre><p><strong>参数</strong>：</p><ul><li>–help：在线帮助。</li><li>–version：显示版本信息。</li><li>文件…:需要进行检查的文件路径</li></ul><h3 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h3><p>使用指令”cksum”计算文件”testfile1”的完整性，输入如下命令：</p><pre><code>$ cksum testfile1       </code></pre><p>以上命令执行后，将输出校验码等相关的信息，具体输出信息如下所示：</p><pre><code>1263453430 78 testfile1         //输出信息 </code></pre><p>上面的输出信息中，”1263453430”表示校验码，”78”表示字节数。</p><p><strong>注意：</strong>如果文件中有任何字符被修改，都将改变计算后CRC校验码的值。</p><h2 id="7-cmp"><a href="#7-cmp" class="headerlink" title="7. cmp"></a>7. cmp</h2><p>​        cmp命令用于比较两个文件是否有差异。</p><p>当相互比较的两个文件完全一样时，则该指令不会显示任何信息。若发现有所差异，预设会标示出第一个不同之处的字符和列数编号。若不指定任何文件名称或是所给予的文件名为”-“，则cmp指令会从标准输入设备读取数据。</p><h3 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h3><pre><code>cmp [-clsv][-i &lt;字符数目&gt;][--help][第一个文件][第二个文件]</code></pre><p><strong>参数</strong>：</p><ul><li>-c或–print-chars 　除了标明差异处的十进制字码之外，一并显示该字符所对应字符。</li><li>-i&lt;字符数目&gt;或–ignore-initial=&lt;字符数目&gt; 　指定一个数目。</li><li>-l或–verbose 　标示出所有不一样的地方。</li><li>-s或–quiet或–silent 　不显示错误信息。</li><li>-v或–version 　显示版本信息。</li><li>–help 　在线帮助。</li></ul><h3 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h3><p>要确定两个文件是否相同，请输入：</p><pre><code>cmp prog.o.bak prog.o </code></pre><p>这比较 prog.o.bak 和 prog.o。如果文件相同，则不显示消息。如果文件不同，则显示第一个不同的位置；例如：</p><pre><code>prog.o.bak prog.o differ: char 4, line 1 </code></pre><p>如果显示消息 cmp: EOF on prog.o.bak，则 prog.o 的第一部分与 prog.o.bak 相同，但在 prog.o 中还有其他数据。</p><h2 id="8-diff"><a href="#8-diff" class="headerlink" title="8.diff"></a>8.diff</h2><p>​        diff命令用于比较文件的差异。</p><p>diff以逐行的方式，比较文本文件的异同处。如果指定要比较目录，则diff会比较目录中相同文件名的文件，但不会比较其中子目录。</p><h3 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h3><pre><code>diff [-abBcdefHilnNpPqrstTuvwy][-&lt;行数&gt;][-C &lt;行数&gt;][-D &lt;巨集名称&gt;][-I &lt;字符或字符串&gt;][-S &lt;文件&gt;][-W &lt;宽度&gt;][-x &lt;文件或目录&gt;][-X &lt;文件&gt;][--help][--left-column][--suppress-common-line][文件或目录1][文件或目录2]</code></pre><p><strong>参数</strong>：</p><p>-&lt;行数&gt; 　指定要显示多少行的文本。此参数必须与-c或-u参数一并使用。</p><p>-a或–text 　diff预设只会逐行比较文本文件。</p><p>-b或–ignore-space-change 　不检查空格字符的不同。</p><ul><li>-B或–ignore-blank-lines 　不检查空白行。</li><li>-c 　显示全部内文，并标出不同之处。</li><li>-C&lt;行数&gt;或–context&lt;行数&gt; 　与执行”-c-&lt;行数&gt;”指令相同。</li><li>-d或–minimal 　使用不同的演算法，以较小的单位来做比较。</li><li>-D&lt;巨集名称&gt;或ifdef&lt;巨集名称&gt; 　此参数的输出格式可用于前置处理器巨集。</li><li>-e或–ed 　此参数的输出格式可用于ed的script文件。</li><li>-f或-forward-ed 　输出的格式类似ed的script文件，但按照原来文件的顺序来显示不同处。</li><li>-H或–speed-large-files 　比较大文件时，可加快速度。</li><li>-l&lt;字符或字符串&gt;或–ignore-matching-lines&lt;字符或字符串&gt; 　若两个文件在某几行有所不同，而这几行同时都包含了选项中指定的字符或字符串，则不显示这两个文件的差异。</li><li>-i或–ignore-case 　不检查大小写的不同。</li><li>-l或–paginate 　将结果交由pr程序来分页。</li><li>-n或–rcs 　将比较结果以RCS的格式来显示。</li><li>-N或–new-file 　在比较目录时，若文件A仅出现在某个目录中，预设会显示：</li><li>Only in目录：文件A若使用-N参数，则diff会将文件A与一个空白的文件比较。</li><li>-p 　若比较的文件为C语言的程序码文件时，显示差异所在的函数名称。</li><li>-P或–unidirectional-new-file 　与-N类似，但只有当第二个目录包含了一个第一个目录所没有的文件时，才会将这个文件与空白的文件做比较。</li><li>-q或–brief 　仅显示有无差异，不显示详细的信息。</li><li>-r或–recursive 　比较子目录中的文件。</li><li>-s或–report-identical-files 　若没有发现任何差异，仍然显示信息。</li><li>-S&lt;文件&gt;或–starting-file&lt;文件&gt; 　在比较目录时，从指定的文件开始比较。</li><li>-t或–expand-tabs 　在输出时，将tab字符展开。</li><li>-T或–initial-tab 　在每行前面加上tab字符以便对齐。</li><li>-u,-U&lt;列数&gt;或–unified=&lt;列数&gt; 　以合并的方式来显示文件内容的不同。</li><li>-v或–version 　显示版本信息。</li><li>-w或–ignore-all-space 　忽略全部的空格字符。</li><li>-W&lt;宽度&gt;或–width&lt;宽度&gt; 　在使用-y参数时，指定栏宽。</li><li>-x&lt;文件名或目录&gt;或–exclude&lt;文件名或目录&gt; 　不比较选项中所指定的文件或目录。</li><li>-X&lt;文件&gt;或–exclude-from&lt;文件&gt; 　您可以将文件或目录类型存成文本文件，然后在=&lt;文件&gt;中指定此文本文件。</li><li>-y或–side-by-side 　以并列的方式显示文件的异同之处。</li><li>–help 　显示帮助。</li><li>–left-column 　在使用-y参数时，若两个文件某一行内容相同，则仅在左侧的栏位显示该行内容。</li><li>–suppress-common-lines 　在使用-y参数时，仅显示不同之处。</li></ul><h3 id="实例1：比较两个文件"><a href="#实例1：比较两个文件" class="headerlink" title="实例1：比较两个文件"></a>实例1：比较两个文件</h3><pre><code>[root@localhost test3]# diff log2014.log log2013.log 3c3&lt; 2014-03---&gt; 2013-038c8&lt; 2013-07---&gt; 2013-0811,12d10&lt; 2013-11&lt; 2013-12</code></pre><p>上面的”3c3”和”8c8”表示log2014.log和log20143log文件在3行和第8行内容有所不同；”11,12d10”表示第一个文件比第二个文件多了第11和12行。</p><h3 id="实例2：并排格式输出"><a href="#实例2：并排格式输出" class="headerlink" title="实例2：并排格式输出"></a>实例2：并排格式输出</h3><pre><code>[root@localhost test3]# diff log2014.log log2013.log  -y -W 502013-01                 2013-012013-02                 2013-022014-03               | 2013-032013-04                 2013-042013-05                 2013-052013-06                 2013-062013-07                 2013-072013-07               | 2013-082013-09                 2013-092013-10                 2013-102013-11               &lt;2013-12               &lt;[root@localhost test3]# diff log2013.log log2014.log  -y -W 502013-01                 2013-012013-02                 2013-022013-03               | 2014-032013-04                 2013-042013-05                 2013-052013-06                 2013-062013-07                 2013-072013-08               | 2013-072013-09                 2013-092013-10                 2013-10                      &gt; 2013-11                      &gt; 2013-12</code></pre><p><strong>说明：</strong></p><ul><li>“|”表示前后2个文件内容有不同</li><li>“&lt;”表示后面文件比前面文件少了1行内容</li><li>“&gt;”表示后面文件比前面文件多了1行内容</li></ul><h2 id="9-diffstat"><a href="#9-diffstat" class="headerlink" title="9.diffstat"></a>9.diffstat</h2><p>​         diffstat命令根据diff的比较结果，显示统计数字。</p><p>diffstat读取diff的输出结果，然后统计各文件的插入，删除，修改等差异计量。</p><h3 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h3><pre><code>diff [-wV][-n &lt;文件名长度&gt;][-p &lt;文件名长度&gt;]</code></pre><p><strong>参数</strong>：</p><ul><li>-n&lt;文件名长度&gt; 　指定文件名长度，指定的长度必须大于或等于所有文件中最长的文件名。</li><li>-p&lt;文件名长度&gt; 　与-n参数相同，但此处的&lt;文件名长度&gt;包括了文件的路径。</li><li>-w 　指定输出时栏位的宽度。</li><li>-V 　显示版本信息。</li></ul><h3 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h3><p>用户也可以直接使用”|”将diff指令所输出的结果直接送给diffstat指令进行统计结果的显示。</p><p>使用该指令时，若所比较的文件或者子目录不在当前目录下，则应该使用其完整路径。</p><p>将目录”test1”和”test2”下的同名文件”testf.txt”使用diff指令进行比较。然后使用diffstat指令对结果进行统计显示，输入如下命令：</p><pre><code>$ diff test1 test2 | diffstat   #进行比较结果的统计显示</code></pre><p>注意：使用这条命令可以非常方便地实现统计显示的功能。</p><p>对于查看文件中的内容，用户可以通过指令”cat”进行查看即可，具体操作如下：</p><pre><code>$ cat test1/testf.txt           #查看test1/testf的内容  abc  def  ghi  jkl  mno  pqr  stu  vws  $ cat test2/testf.txt           #查看test2/testf的内容  abc  def  ghi  jkl  mno</code></pre><p>从上面的文件内容显示，可以看到两个文件内容的差别。现在来运行刚才的命令，对文件比较的结果进行统计显示，结果如下：</p><h2 id="10-file"><a href="#10-file" class="headerlink" title="10.file"></a>10.file</h2><p>​         file命令用于辨识文件类型。</p><p>通过file指令，我们得以辨识该文件的类型。</p><h3 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h3><pre><code>file [-bcLvz][-f &lt;名称文件&gt;][-m &lt;魔法数字文件&gt;...][文件或目录...]</code></pre><p><strong>参数</strong>：</p><ul><li>-b 　列出辨识结果时，不显示文件名称。</li><li>-c 　详细显示指令执行过程，便于排错或分析程序执行的情形。</li><li>-f&lt;名称文件&gt; 　指定名称文件，其内容有一个或多个文件名称时，让file依序辨识这些文件，格式为每列一个文件名称。</li><li>-L 　直接显示符号连接所指向的文件的类别。</li><li>-m&lt;魔法数字文件&gt; 　指定魔法数字文件。</li><li>-v 　显示版本信息。</li><li>-z 　尝试去解读压缩文件的内容。</li><li>[文件或目录…] 要确定类型的文件列表，多个文件之间使用空格分开，可以使用shell通配符匹配多个文件。</li></ul><h3 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h3><p>显示文件类型：</p><pre><code>[root@localhost ~]# file install.loginstall.log: UTF-8 Unicode text[root@localhost ~]# file -b install.log      &lt;== 不显示文件名称UTF-8 Unicode text[root@localhost ~]# file -i install.log      &lt;== 显示MIME类别。install.log: text/plain; charset=utf-8[root@localhost ~]# file -b -i install.logtext/plain; charset=utf-8</code></pre><p>显示符号链接的文件类型</p><pre><code>[root@localhost ~]# ls -l /var/maillrwxrwxrwx 1 root root 10 08-13 00:11 /var/mail -&gt; spool/mail[root@localhost ~]# file /var/mail/var/mail: symbolic link to `spool/mail'[root@localhost ~]# file -L /var/mail/var/mail: directory[root@localhost ~]# file /var/spool/mail/var/spool/mail: directory[root@localhost ~]# file -L /var/spool/mail/var/spool/mail: directory</code></pre><h2 id="11-find"><a href="#11-find" class="headerlink" title="11.find"></a>11.find</h2><p>​        find命令用来在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。如果使用该命令时，不设置任何参数，则find命令将在当前目录下查找子目录与文件。并且将查找到的子目录和文件全部进行显示。</p><h3 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h3><pre><code>find   path   -option   [   -print ]   [ -exec   -ok   command ]   {} \;</code></pre><p><strong>参数说明</strong> :</p><p>find 根据下列规则判断 path 和 expression，在命令列上第一个 - ( ) , ! 之前的部份为 path，之后的是 expression。如果 path 是空字串则使用目前路径，如果 expression 是空字串则使用 -print 为预设 expression。</p><p>expression 中可使用的选项有二三十个之多，在此只介绍最常用的部份。</p><p>-mount, -xdev : 只检查和指定目录在同一个文件系统下的文件，避免列出其它文件系统中的文件</p><p>-amin n : 在过去 n 分钟内被读取过</p><p>-anewer file : 比文件 file 更晚被读取过的文件</p><p>-atime n : 在过去n天内被读取过的文件</p><p>-cmin n : 在过去 n 分钟内被修改过</p><p>-cnewer file :比文件 file 更新的文件</p><p>-ctime n : 在过去n天内被修改过的文件</p><p>-empty : 空的文件-gid n or -group name : gid 是 n 或是 group 名称是 name</p><p>-ipath p, -path p : 路径名称符合 p 的文件，ipath 会忽略大小写</p><p>-name name, -iname name : 文件名称符合 name 的文件。iname 会忽略大小写</p><p>-size n : 文件大小 是 n 单位，b 代表 512 位元组的区块，c 表示字元数，k 表示 kilo bytes，w 是二个位元组。-type c : 文件类型是 c 的文件。</p><p>d: 目录</p><p>c: 字型装置文件</p><p>b: 区块装置文件</p><p>p: 具名贮列</p><p>f: 一般文件</p><p>l: 符号连结</p><p>s: socket</p><p>-pid n : process id 是 n 的文件</p><p>你可以使用 ( ) 将运算式分隔，并使用下列运算。</p><p>exp1 -and exp2</p><p>! expr</p><p>-not expr</p><p>exp1 -or exp2</p><p>exp1, exp2</p><h3 id="实例-8"><a href="#实例-8" class="headerlink" title="实例"></a>实例</h3><p>将目前目录及其子目录下所有延伸档名是 c 的文件列出来。</p><pre><code># find . -name "*.c"</code></pre><p>将目前目录其其下子目录中所有一般文件列出</p><pre><code># find . -type f</code></pre><p>将目前目录及其子目录下所有最近 20 天内更新过的文件列出</p><pre><code># find . -ctime -20</code></pre><p>查找/var/log目录中更改时间在7日以前的普通文件，并在删除之前询问它们：</p><pre><code># find /var/log -type f -mtime +7 -ok rm {} \;</code></pre><p>查找前目录中文件属主具有读、写权限，并且文件所属组的用户和其他用户具有读权限的文件：</p><pre><code># find . -type f -perm 644 -exec ls -l {} \;</code></pre><p>为了查找系统中所有文件长度为0的普通文件，并列出它们的完整路径：</p><pre><code># find / -type f -size 0 -exec ls -l {} \;</code></pre><h2 id="12-git"><a href="#12-git" class="headerlink" title="12.git"></a>12.git</h2><p>​        git命令是文字模式下的文件管理员。</p><p>git是用来管理文件的程序，它十分类似DOS下的Norton Commander，具有互动式操作界面。它的操作方法和Norton Commander几乎一样。</p><h3 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h3><pre><code>git</code></pre><p>操作说明：</p><ul><li>F1 ：执行info指令，查询指令相关信息，会要求您输入欲查询的名称。</li><li>F2 ：执行cat指令，列出文件内容。</li><li>F3 ：执行gitview指令，观看文件内容。</li><li>F4 ：执行vi指令，编辑文件内容。</li><li>F5 ：执行cp指令，复制文件或目录，会要求您输入目标文件或目录。</li><li>F6 ：执行mv指令，移动文件或目录，或是更改其名称，会要求您输入目标文件或目录。</li><li>F7 ：执行mkdir指令，建立目录。</li><li>F8 ：执行rm指令，删除文件或目录。</li><li>F9 ：执行make指令，批处理执行指令或编译程序时，会要求您输入相关命令。</li><li>F10 ：离开git文件管理员。</li></ul><h2 id="13-gitview"><a href="#13-gitview" class="headerlink" title="13. gitview"></a>13. gitview</h2><p>​        gitview命令用于观看文件的内容，它会同时显示十六进制和ASCII格式的字码。</p><h3 id="语法-11"><a href="#语法-11" class="headerlink" title="语法"></a>语法</h3><pre><code>gitview [-bchilv][文件]</code></pre><p><strong>参数</strong>：</p><ul><li>-b 　单色模式，不使用ANSI控制码显示彩色。</li><li>-c 　彩色模式，使用ANSI控制码显示色彩。</li><li>-h 　在线帮助。</li><li>-i 　显示存放gitview程序的所在位置。</li><li>-l 　不使用先前的显示字符。</li><li>-v 　显示版本信息。</li></ul><h3 id="实例-9"><a href="#实例-9" class="headerlink" title="实例"></a>实例</h3><p>使用指令gitview以彩色模式观看文件”/home/ rootlocal/demo.txt”中的内容，输入如下命令：</p><pre><code>$ gitview -c /home/rootlocal/demo.txt      #使用gitview指令观看指定文件内容</code></pre><h2 id="14-indent"><a href="#14-indent" class="headerlink" title="14.indent"></a>14.indent</h2><p>​        indent命令用于调整C原始代码文件的格式。</p><p>indent可辨识C的原始代码文件，并加以格式化，以方便程序设计师阅读。</p><h3 id="语法-12"><a href="#语法-12" class="headerlink" title="语法"></a>语法</h3><pre><code>indent [参数][源文件] 或 indent [参数][源文件][-o 目标文件]</code></pre><p><strong>参数</strong>：</p><ul><li>-bad或–blank-lines-after-declarations 　在声明区段或加上空白行。</li><li>-bap或–blank-lines-after-procedures 　在程序或加上空白行。</li><li>-bbb或–blank-lines-after-block-comments 　在注释区段后加上空白行。</li><li>-bc或–blank-lines-after-commas 　在声明区段中，若出现逗号即换行。</li><li>-bl或–braces-after-if-line 　if(或是else,for等等)与后面执行区段的”{“不同行，且”}”自成一行。</li><li>-bli&lt;缩排格数&gt;或–brace-indent&lt;缩排格数&gt; 　设置{ }缩排的格数。</li><li>-br或–braces-on-if-line 　if(或是else,for等等)与后面执行跛段的”{“不同行，且”}”自成一行。</li><li>-bs或–blank-before-sizeof 　在sizeof之后空一格。</li><li>-c&lt;栏数&gt;或–comment-indentation&lt;栏数&gt; 　将注释置于程序码右侧指定的栏位。</li><li>-cd&lt;栏数&gt;或–declaration-comment-column&lt;栏数&gt; 　将注释置于声明右侧指定的栏位。</li><li>-cdb或–comment-delimiters-on-blank-lines 　注释符号自成一行。</li><li>-ce或–cuddle-else 　将else置于”}”(if执行区段的结尾)之后。</li><li>-ci&lt;缩排格数&gt;或–continuation-indentation&lt;缩排格数&gt; 　叙述过长而换行时，指定换行后缩排的格数。</li><li>-cli&lt;缩排格数&gt;或–case-indentation-&lt;缩排格数&gt; 　使用case时，switch缩排的格数。</li><li>-cp&lt;栏数&gt;或-else-endif-column&lt;栏数&gt; 　将注释置于else与elseif叙述右侧定的栏位。</li><li>-cs或–space-after-cast 　在cast之后空一格。</li><li>-d&lt;缩排格数&gt;或-line-comments-indentation&lt;缩排格数&gt; 　针对不是放在程序码右侧的注释，设置其缩排格数。</li><li>-di&lt;栏数&gt;或–declaration-indentation&lt;栏数&gt; 　将声明区段的变量置于指定的栏位。</li><li>-fc1或–format-first-column-comments 　针对放在每行最前端的注释，设置其格式。</li><li>-fca或–format-all-comments 　设置所有注释的格式。</li><li>-gnu或–gnu-style 　指定使用GNU的格式，此为预设值。</li><li>-i&lt;格数&gt;或–indent-level&lt;格数&gt; 　设置缩排的格数。</li><li>-ip&lt;格数&gt;或–parameter-indentation&lt;格数&gt; 　设置参数的缩排格数。</li><li>-kr或–k-and-r-style 　指定使用Kernighan&amp;Ritchie的格式。</li><li>-lp或–continue-at-parentheses 　叙述过长而换行，且叙述中包含了括弧时，将括弧中的每行起始栏位内容垂直对其排列。</li><li>-nbad或–no-blank-lines-after-declarations 　在声明区段后不要加上空白行。</li><li>-nbap或–no-blank-lines-after-procedures 　在程序后不要加上空白行。</li><li>-nbbb或–no-blank-lines-after-block-comments 　在注释区段后不要加上空白行。</li><li>-nbc或–no-blank-lines-after-commas 　在声明区段中，即使出现逗号，仍旧不要换行。</li><li>-ncdb或–no-comment-delimiters-on-blank-lines 　注释符号不要自成一行。</li><li>-nce或–dont-cuddle-else 　不要将else置于”}”之后。</li><li>-ncs或–no-space-after-casts 　不要在cast之后空一格。</li><li>-nfc1或–dont-format-first-column-comments 　不要格式化放在每行最前端的注释。</li><li>-nfca或–dont-format-comments 　不要格式化任何的注释。</li><li>-nip或–no-parameter-indentation 　参数不要缩排。</li><li>-nlp或–dont-line-up-parentheses 　叙述过长而换行，且叙述中包含了括弧时，不用将括弧中的每行起始栏位垂直对其排列。</li><li>-npcs或–no-space-after-function-call-names 　在调用的函数名称之后，不要加上空格。</li><li>-npro或–ignore-profile 　不要读取indent的配置文件.indent.pro。</li><li>-npsl或–dont-break-procedure-type 　程序类型与程序名称放在同一行。</li><li>-nsc或–dont-star-comments 　注解左侧不要加上星号(*)。</li><li>-nsob或–leave-optional-semicolon 　不用处理多余的空白行。</li><li>-nss或–dont-space-special-semicolon 　若for或while区段仅有一行时，在分号前不加上空格。</li><li>-nv或–no-verbosity 　不显示详细的信息。</li><li>-orig或–original 　使用Berkeley的格式。</li><li>-pcs或–space-after-procedure-calls 　在调用的函数名称与”{“之间加上空格。</li><li>-psl或–procnames-start-lines 　程序类型置于程序名称的前一行。</li><li>-sc或–start-left-side-of-comments 　在每行注释左侧加上星号(*)。</li><li>-sob或–swallow-optional-blank-lines 　删除多余的空白行。</li><li>-ss或–space-special-semicolon 　若for或swile区段今有一行时，在分号前加上空格。</li><li>-st或–standard-output 　将结果显示在标准输出设备。</li><li>-T 　数据类型名称缩排。</li><li>-ts&lt;格数&gt;或–tab-size&lt;格数&gt; 　设置tab的长度。</li><li>-v或–verbose 　执行时显示详细的信息。</li><li>-version 　显示版本信息。</li></ul><h3 id="Indent代码格式化说明"><a href="#Indent代码格式化说明" class="headerlink" title="Indent代码格式化说明"></a>Indent代码格式化说明</h3><table><thead><tr><th align="left">使用的indent参数</th><th align="left">值</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">–blank-lines-after-declarations</td><td align="left">bad</td><td align="left">变量声明后加空行</td></tr><tr><td align="left">–blank-lines-after-procedures</td><td align="left">bap</td><td align="left">函数结束后加空行</td></tr><tr><td align="left">–blank-lines-before-block-comments</td><td align="left">bbb</td><td align="left">块注释前加空行</td></tr><tr><td align="left">–break-before-boolean-operator</td><td align="left">bbo</td><td align="left">较长的行，在逻辑运算符前分行</td></tr><tr><td align="left">–blank-lines-after-commas</td><td align="left">nbc</td><td align="left">变量声明中，逗号分隔的变量不分行</td></tr><tr><td align="left">–braces-after-if-line</td><td align="left">bl</td><td align="left">“if”和”{“分做两行</td></tr><tr><td align="left">–brace-indent 0</td><td align="left">bli0</td><td align="left">“{“不继续缩进</td></tr><tr><td align="left">–braces-after-struct-decl-line</td><td align="left">bls</td><td align="left">定义结构，”struct”和”{“分行</td></tr><tr><td align="left">–comment-indentationn</td><td align="left">c33</td><td align="left">语句后注释开始于行33</td></tr><tr><td align="left">–declaration-comment-columnn</td><td align="left">cd33</td><td align="left">变量声明后注释开始于行33</td></tr><tr><td align="left">–comment-delimiters-on-blank-lines</td><td align="left">ncdb</td><td align="left">不将单行注释变为块注释</td></tr><tr><td align="left">–cuddle-do-while</td><td align="left">ncdw</td><td align="left">“do — while”的”while”和其前面的”}”另起一行</td></tr><tr><td align="left">–cuddle-else</td><td align="left">nce</td><td align="left">“else”和其前面的”}”另起一行</td></tr><tr><td align="left">–case-indentation 0</td><td align="left">cli0</td><td align="left">switch中的case语句所进0个空格</td></tr><tr><td align="left">–else-endif-columnn</td><td align="left">cp33</td><td align="left">#else, #endif后面的注释开始于行33</td></tr><tr><td align="left">–space-after-cast</td><td align="left">cs</td><td align="left">在类型转换后面加空格</td></tr><tr><td align="left">–line-comments-indentation n</td><td align="left">d0</td><td align="left">单行注释（不从1列开始的），不向左缩进</td></tr><tr><td align="left">–break-function-decl-args</td><td align="left">nbfda</td><td align="left">关闭：函数的参数一个一行</td></tr><tr><td align="left">–declaration-indentationn</td><td align="left">di2</td><td align="left">变量声明，变量开始于2行，即不必对齐</td></tr><tr><td align="left">–format-first-column-comments</td><td align="left">nfc1</td><td align="left">不格式化起于第一行的注释</td></tr><tr><td align="left">–format-all-comments</td><td align="left">nfca</td><td align="left">不开启全部格式化注释的开关</td></tr><tr><td align="left">–honour-newlines</td><td align="left">hnl</td><td align="left">Prefer to break long lines at the position of newlines in the input.</td></tr><tr><td align="left">–indent-leveln</td><td align="left">i4</td><td align="left">设置缩进多少字符，如果为tab的整数倍，用tab来缩进，否则用空格填充。</td></tr><tr><td align="left">–parameter-indentationn</td><td align="left">ip5</td><td align="left">旧风格的函数定义中参数说明缩进5个空格</td></tr><tr><td align="left">–line-length 75</td><td align="left">l75</td><td align="left">非注释行最长75</td></tr><tr><td align="left">–continue-at-parentheses</td><td align="left">lp</td><td align="left">续行从上一行出现的括号开始</td></tr><tr><td align="left">–space-after-procedure-calls</td><td align="left">pcs</td><td align="left">函数和”(“之间插入一个空格</td></tr><tr><td align="left">–space-after-parentheses</td><td align="left">nprs</td><td align="left">在”（”后”）”前不插入空格</td></tr><tr><td align="left">–procnames-start-lines</td><td align="left">psl</td><td align="left">将函数名和返回类型放在两行定义</td></tr><tr><td align="left">–space-after-for</td><td align="left">saf</td><td align="left">for后面有空格</td></tr><tr><td align="left">–space-after-if</td><td align="left">sai</td><td align="left">if后面有空格</td></tr><tr><td align="left">–space-after-while</td><td align="left">saw</td><td align="left">while后面有空格</td></tr><tr><td align="left">–start-left-side-of-comments</td><td align="left">nsc</td><td align="left">不在生成的块注释中加*</td></tr><tr><td align="left">–swallow-optional-blank-lines</td><td align="left">nsob</td><td align="left">不去掉可添加的空行</td></tr><tr><td align="left">–space-special-semicolon</td><td align="left">nss</td><td align="left">一行的for或while语句，在”;”前不加空。</td></tr><tr><td align="left">–tab-size</td><td align="left">ts4</td><td align="left">一个tab为4个空格（要能整除”-in”）</td></tr><tr><td align="left">–use-tabs</td><td align="left">ut</td><td align="left">使用tab来缩进</td></tr></tbody></table><h2 id="15-cut"><a href="#15-cut" class="headerlink" title="15.cut"></a>15.cut</h2><p>​        cut命令用于显示每行从开头算起 num1 到 num2 的文字。</p><h3 id="语法-13"><a href="#语法-13" class="headerlink" title="语法"></a>语法</h3><pre><code>cut  [-bn] [file]cut [-c] [file]cut [-df] [file]</code></pre><p><strong>使用说明:</strong></p><p>cut 命令从文件的每一行剪切字节、字符和字段并将这些字节、字符和字段写至标准输出。</p><p>如果不指定 File 参数，cut 命令将读取标准输入。必须指定 -b、-c 或 -f 标志之一。</p><p><strong>参数:</strong></p><ul><li>-b ：以字节为单位进行分割。这些字节位置将忽略多字节字符边界，除非也指定了 -n 标志。</li><li>-c ：以字符为单位进行分割。</li><li>-d ：自定义分隔符，默认为制表符。</li><li>-f ：与-d一起使用，指定显示哪个区域。</li><li>-n ：取消分割多字节字符。仅和 -b 标志一起使用。如果字符的最后一个字节落在由 -b 标志的 List 参数指示的<br>范围之内，该字符将被写出；否则，该字符将被排除</li></ul><h3 id="实例-10"><a href="#实例-10" class="headerlink" title="实例"></a>实例</h3><p>当你执行who命令时，会输出类似如下的内容：</p><pre><code>$ whorocrocket :0           2009-01-08 11:07rocrocket pts/0        2009-01-08 11:23 (:0.0)rocrocket pts/1        2009-01-08 14:15 (:0.0)</code></pre><p>如果我们想提取每一行的第3个字节，就这样：</p><pre><code>$ who|cut -b 3cc</code></pre><h2 id="16-ln"><a href="#16-ln" class="headerlink" title="16.ln"></a>16.ln</h2><p>​        ln命令是一个非常重要命令，它的功能是为某一个文件在另外一个位置建立一个同步的链接。</p><p>当我们需要在不同的目录，用到相同的文件时，我们不需要在每一个需要的目录下都放一个必须相同的文件，我们只要在某个固定的目录，放上该文件，然后在 其它的目录下用ln命令链接（link）它就可以，不必重复的占用磁盘空间。</p><h3 id="语法-14"><a href="#语法-14" class="headerlink" title="语法"></a>语法</h3><pre><code> ln [参数][源文件或目录][目标文件或目录]</code></pre><p>其中参数的格式为</p><p>[-bdfinsvF] [-S backup-suffix] [-V {numbered,existing,simple}]</p><p>[–help] [–version] [–]</p><p><strong>命令功能</strong> :<br>Linux文件系统中，有所谓的链接(link)，我们可以将其视为档案的别名，而链接又可分为两种 : 硬链接(hard link)与软链接(symbolic link)，硬链接的意思是一个档案可以有多个名称，而软链接的方式则是产生一个特殊的档案，该档案的内容是指向另一个档案的位置。硬链接是存在同一个文件系统中，而软链接却可以跨越不同的文件系统。</p><p>不论是硬链接或软链接都不会将原本的档案复制一份，只会占用非常少量的磁碟空间。</p><p><strong>软链接</strong>：</p><ul><li>1.软链接，以路径的形式存在。类似于Windows操作系统中的快捷方式</li><li>2.软链接可以 跨文件系统 ，硬链接不可以</li><li>3.软链接可以对一个不存在的文件名进行链接</li><li>4.软链接可以对目录进行链接</li></ul><p><strong>硬链接</strong>：</p><ul><li>1.硬链接，以文件副本的形式存在。但不占用实际空间。</li><li>2.不允许给目录创建硬链接</li><li>3.硬链接只有在同一个文件系统中才能创建</li></ul><h4 id="命令参数"><a href="#命令参数" class="headerlink" title="命令参数"></a>命令参数</h4><p><strong>必要参数</strong>：</p><ul><li>-b 删除，覆盖以前建立的链接</li><li>-d 允许超级用户制作目录的硬链接</li><li>-f 强制执行</li><li>-i 交互模式，文件存在则提示用户是否覆盖</li><li>-n 把符号链接视为一般目录</li><li>-s 软链接(符号链接)</li><li>-v 显示详细的处理过程</li></ul><p><strong>选择参数</strong>：</p><ul><li>-S “-S&lt;字尾备份字符串&gt; “或 “–suffix=&lt;字尾备份字符串&gt;”</li><li>-V “-V&lt;备份方式&gt;”或”–version-control=&lt;备份方式&gt;”</li><li>–help 显示帮助信息</li><li>–version 显示版本信息</li></ul><h3 id="实例-11"><a href="#实例-11" class="headerlink" title="实例"></a>实例</h3><p>给文件创建软链接，为log2013.log文件创建软链接link2013，如果log2013.log丢失，link2013将失效：</p><pre><code>ln -s log2013.log link2013</code></pre><p>输出：</p><pre><code>[root@localhost test]# ll-rw-r--r-- 1 root bin      61 11-13 06:03 log2013.log[root@localhost test]# ln -s log2013.log link2013[root@localhost test]# lllrwxrwxrwx 1 root root     11 12-07 16:01 link2013 -&gt; log2013.log-rw-r--r-- 1 root bin      61 11-13 06:03 log2013.log</code></pre><p>给文件创建硬链接，为log2013.log创建硬链接ln2013，log2013.log与ln2013的各项属性相同</p><pre><code>ln log2013.log ln2013</code></pre><p>输出：</p><pre><code>[root@localhost test]# lllrwxrwxrwx 1 root root     11 12-07 16:01 link2013 -&gt; log2013.log-rw-r--r-- 1 root bin      61 11-13 06:03 log2013.log[root@localhost test]# ln log2013.log ln2013[root@localhost test]# lllrwxrwxrwx 1 root root     11 12-07 16:01 link2013 -&gt; log2013.log-rw-r--r-- 2 root bin      61 11-13 06:03 ln2013-rw-r--r-- 2 root bin      61 11-13 06:03 log2013.log</code></pre><h2 id="17-less"><a href="#17-less" class="headerlink" title="17.less"></a>17.less</h2><p>​        less 与 more 类似，但使用 less 可以随意浏览文件，而 more 仅能向前移动，却不能向后移动，而且 less 在查看之前不会加载整个文件。</p><h3 id="语法-15"><a href="#语法-15" class="headerlink" title="语法"></a>语法</h3><pre><code>less [参数] 文件 </code></pre><p><strong>参数说明</strong>：</p><ul><li>-b &lt;缓冲区大小&gt; 设置缓冲区的大小</li><li>-e 当文件显示结束后，自动离开</li><li>-f 强迫打开特殊文件，例如外围设备代号、目录和二进制文件</li><li>-g 只标志最后搜索的关键词</li><li>-i 忽略搜索时的大小写</li><li>-m 显示类似more命令的百分比</li><li>-N 显示每行的行号</li><li>-o &lt;文件名&gt; 将less 输出的内容在指定文件中保存起来</li><li>-Q 不使用警告音</li><li>-s 显示连续空行为一行</li><li>-S 行过长时间将超出部分舍弃</li><li>-x &lt;数字&gt; 将”tab”键显示为规定的数字空格</li><li>/字符串：向下搜索”字符串”的功能</li><li>?字符串：向上搜索”字符串”的功能</li><li>n：重复前一个搜索（与 / 或 ? 有关）</li><li>N：反向重复前一个搜索（与 / 或 ? 有关）</li><li>b 向后翻一页</li><li>d 向后翻半页</li><li>h 显示帮助界面</li><li>Q 退出less 命令</li><li>u 向前滚动半页</li><li>y 向前滚动一行</li><li>空格键 滚动一页</li><li>回车键 滚动一行</li><li>[pagedown]： 向下翻动一页</li><li>[pageup]： 向上翻动一页</li></ul><h3 id="实例-12"><a href="#实例-12" class="headerlink" title="实例"></a>实例</h3><p>1、查看文件</p><pre><code>less log2013.log</code></pre><p>2、ps查看进程信息并通过less分页显示</p><pre><code>ps -ef |less</code></pre><p>3、查看命令历史使用记录并通过less分页显示</p><pre><code>[root@localhost test]# history | less22  scp -r tomcat6.0.32 root@192.168.120.203:/opt/soft23  cd ..24  scp -r web root@192.168.120.203:/opt/25  cd soft26  ls……省略……</code></pre><p>4、浏览多个文件</p><pre><code>less log2013.log log2014.log</code></pre><p>说明：<br>输入 ：n后，切换到 log2014.log<br>输入 ：p 后，切换到log2013.log</p><h3 id="附加备注"><a href="#附加备注" class="headerlink" title="附加备注"></a>附加备注</h3><p>1.全屏导航</p><ul><li>ctrl + F - 向前移动一屏</li><li>ctrl + B - 向后移动一屏</li><li>ctrl + D - 向前移动半屏</li><li>ctrl + U - 向后移动半屏</li></ul><p>2.单行导航</p><ul><li>j - 向前移动一行</li><li>k - 向后移动一行</li></ul><p>3.其它导航</p><ul><li>G - 移动到最后一行</li><li>g - 移动到第一行</li><li>q / ZZ - 退出 less 命令</li></ul><p>4.其它有用的命令</p><ul><li>v - 使用配置的编辑器编辑当前文件</li><li>h - 显示 less 的帮助文档</li><li>&amp;pattern - 仅显示匹配模式的行，而不是整个文件</li></ul><p>5.标记导航</p><p>当使用 less 查看大文件时，可以在任何一个位置作标记，可以通过命令导航到标有特定标记的文本位置：</p><ul><li>ma - 使用 a 标记文本的当前位置</li><li>‘a - 导航到标记 a 处</li></ul><h2 id="18-locate"><a href="#18-locate" class="headerlink" title="18.locate"></a>18.locate</h2><p>​        locate命令用于查找符合条件的文档，他会去保存文档和目录名称的数据库内，查找合乎范本样式条件的文档或目录。</p><p>一般情况我们只需要输入 <strong>locate your_file_name</strong> 即可查找指定文件。</p><h3 id="语法-16"><a href="#语法-16" class="headerlink" title="语法"></a>语法</h3><pre><code>locate [-d ][--help][--version][范本样式...]</code></pre><p><strong>参数：</strong></p><ul><li>-d或–database= 配置locate指令使用的数据库。locate指令预设的数据库位于/var/lib/slocate目录里，文档名为slocate.db，您可使用 这个参数另行指定。</li><li>–help 　在线帮助。</li><li>–version 　显示版本信息。</li></ul><h3 id="实例-13"><a href="#实例-13" class="headerlink" title="实例"></a>实例</h3><p>查找passwd文件，输入以下命令：</p><pre><code>locate passwd</code></pre><h3 id="附加说明"><a href="#附加说明" class="headerlink" title="附加说明"></a>附加说明</h3><p>locate与find 不同: find 是去硬盘找，locate 只在/var/lib/slocate资料库中找。</p><p>locate的速度比find快，它并不是真的查找，而是查数据库，一般文件数据库在/var/lib/slocate/slocate.db中，所以locate的查找并不是实时的，而是以数据库的更新为准，一般是系统自己维护，也可以手工升级数据库 ，命令为：</p><pre><code>locate -u </code></pre><h2 id="19-lsattr命令"><a href="#19-lsattr命令" class="headerlink" title="19.lsattr命令"></a>19.lsattr命令</h2><p>​        lsattr命令用于显示文件属性。</p><p>用chattr执行改变文件或目录的属性，可执行lsattr指令查询其属性。</p><h3 id="语法-17"><a href="#语法-17" class="headerlink" title="语法"></a>语法</h3><pre><code>lsattr [-adlRvV][文件或目录...]</code></pre><p><strong>参数</strong>：</p><ul><li>-a 　显示所有文件和目录，包括以”.”为名称开头字符的额外内建，现行目录”.”与上层目录”..”。</li><li>-d 　显示，目录名称，而非其内容。</li><li>-l 　此参数目前没有任何作用。</li><li>-R 　递归处理，将指定目录下的所有文件及子目录一并处理。</li><li>-v 　显示文件或目录版本。</li><li>-V 　显示版本信息。</li></ul><h3 id="实例-14"><a href="#实例-14" class="headerlink" title="实例"></a>实例</h3><p>1、用chattr命令防止系统中某个关键文件被修改：</p><pre><code># chattr +i /etc/resolv.conf</code></pre><p>然后用mv /etc/resolv.conf等命令操作于该文件，都是得到Operation not permitted 的结果。</p><p>vim编辑该文件时会提示W10: Warning: Changing a readonly file错误。要想修改此文件就要把i属性去掉：</p><pre><code>chattr -i /etc/resolv.conf</code></pre><p>使用 lsattr 命令来显示文件属性：</p><pre><code># lsattr /etc/resolv.conf</code></pre><p>输出结果为:</p><pre><code>----i-------- /etc/resolv.conf</code></pre><p>2、让某个文件只能往里面追加数据，但不能删除，适用于各种日志文件：</p><pre><code># chattr +a /var/log/messages</code></pre><h2 id="20-mattrib"><a href="#20-mattrib" class="headerlink" title="20.mattrib"></a>20.mattrib</h2><p>​        mattrib命令用来变更或显示MS-DOS文件的属性。</p><p>mattrib为mtools工具指令，模拟MS-DOS的attrib指令，可变更MS-DOS文件的属性。</p><h3 id="语法-18"><a href="#语法-18" class="headerlink" title="语法"></a>语法</h3><pre><code>mattrib [-a|+a] [-h|+h] [-r|+r] [-s|+s] [-/] [-X] msdosfile [ msdosfiles ... ]</code></pre><p><strong>参数</strong>：</p><ul><li>-a/+a 除去/设定备份属性。</li><li>-h/+h 除去/设定隐藏属性。</li><li>-r/+r 除去/设定唯读属性。</li><li>-s/+s 除去/设定系统属性。</li><li>-/ 递回的处理包含所有子目录下的档案。</li><li>-X 以较短的格式输出结果。</li></ul><h3 id="实例-15"><a href="#实例-15" class="headerlink" title="实例"></a>实例</h3><p>列出 A 槽 MSDOS 格式磁片上所有文件的属性。</p><pre><code>mattrib a: </code></pre><p>除去 A 槽磁片上 msdos.sys 档案的隐藏、系统与唯读属性。</p><pre><code>mattrib -h -s -r a:msdos.sys</code></pre><p>除去 A 槽磁片上包含子目录下所有档案的唯读属性。</p><pre><code>mattrib -r -/ a:*.*</code></pre><h2 id="21-mc"><a href="#21-mc" class="headerlink" title="21.mc"></a>21.mc</h2><p>​         mc命令用于提供一个菜单式的文件管理程序。</p><p>执行mc之后，将会看到菜单式的文件管理程序，共分成４个部分。</p><h3 id="语法-19"><a href="#语法-19" class="headerlink" title="语法"></a>语法</h3><pre><code>mc [-abcdfhkPstuUVx][-C &lt;参数&gt;][-l &lt;文件&gt;][-v &lt;文件&gt;][目录]</code></pre><p>　　<strong>参　　数</strong>：</p><ul><li>-a 　当mc程序画线时不用绘图字符画线。</li><li>-b 　使用单色模式显示。</li><li>-c 　使用彩色模式显示。</li><li>-C&lt;参数&gt; 　指定显示的颜色。</li><li>-d 　不使用鼠标。</li><li>-f 　显示mc函数库所在的目录。</li><li>-h 　显示帮助。</li><li>-k 　重设softkeys成预设置。</li><li>-l&lt;文件&gt; 　在指定文件中保存ftpfs对话窗的内容。</li><li>-P 　程序结束时，列出最后的工作目录。</li><li>-s 　用慢速的终端机模式显示，在这模式下将减少大量的绘图及文字显示。</li><li>-t 　使用TEMPCAP变量设置终端机，而不使用预设置。</li><li>-u 　不用目前的shell程序。</li><li>-U 　使用目前的shell程序。</li><li>-v&lt;文件&gt; 　使用mc的内部编辑器来显示指定的文件。</li><li>-V 　显示版本信息。</li><li>-x 　指定以xterm模式显示。</li></ul><h3 id="Linux-MC-相关操作"><a href="#Linux-MC-相关操作" class="headerlink" title="Linux MC 相关操作"></a>Linux MC 相关操作</h3><table><thead><tr><th align="left">命令按键</th><th align="left">描 述</th></tr></thead><tbody><tr><td align="left">F9 or Esc+9</td><td align="left">激活菜单栏</td></tr><tr><td align="left">Tab</td><td align="left">在两个窗口间移动</td></tr><tr><td align="left">F10 or Esc+0</td><td align="left">退出MC</td></tr><tr><td align="left">Control-Enter or Alt-Enter</td><td align="left">可以将文件名拷贝到命令行</td></tr><tr><td align="left">F1 or Esc+1</td><td align="left">打开帮助页面</td></tr></tbody></table><p>虽然MC很好用，不过我还是建议大家使用命令行工具！</p><h2 id="22-mdel"><a href="#22-mdel" class="headerlink" title="22.mdel"></a>22.mdel</h2><p>​        mdel命令用来删除 MSDOS 格式的档案。</p><p>在删除只读之前会有提示信息产生。</p><h3 id="语法-20"><a href="#语法-20" class="headerlink" title="语法"></a>语法</h3><pre><code>mdel [-v] msdosfile [ msdosfiles ... ]</code></pre><p><strong>参数：</strong></p><ul><li>-v 显示更多的讯息。</li></ul><h3 id="实例-16"><a href="#实例-16" class="headerlink" title="实例"></a>实例</h3><p>将 A 槽磁片根目录中的 autoexec.bat 删除。</p><pre><code>mdel a:autoexec.bat . </code></pre><h2 id="23-mdir"><a href="#23-mdir" class="headerlink" title="23.mdir"></a>23.mdir</h2><p>​        mdir命令用于显示MS-DOS目录。</p><p>mdir为mtools工具指令，模拟MS-DOS的dir指令，可显示MS-DOS文件系统中的目录内容。</p><h3 id="语法-21"><a href="#语法-21" class="headerlink" title="语法"></a>语法</h3><pre><code>mdir [-afwx/][目录]</code></pre><p><strong>参数</strong>：</p><ul><li>-/ 显示目录下所有子目录与文件。</li><li>-a 　显示隐藏文件。</li><li>-f 　不显示磁盘所剩余的可用空间。</li><li>-w 　仅显示目录或文件名称，并以横排方式呈现，以便一次能显示较多的目录或文件。</li><li>-X 　仅显示目录下所有子目录与文件的完整路径，不显示其他信息。</li></ul><h3 id="实例-17"><a href="#实例-17" class="headerlink" title="实例"></a>实例</h3><p>显示a盘中的内容</p><pre><code>$ mdir -/ a:\*   </code></pre><p>以上命令执行后，mdir将显示指定盘”a:"中的所有子目录及其中的文件信息，如下所示：</p><pre><code>Volume in drive A has no label  #加载信息  Volume Serial Number is 13D2~055C  Directory for A:\                   #以下为目录信息  ./TEST &lt;DIR&gt; 2011-08-23 16:59     #显示格式为文件名，目录大小，修改时间  AUTORUN.INF 265 2011-08-23 16:53  AUTORUN.BAT 43 2011-08-23 16:56  3 files 308 bytes               #统计总大小  724 325 bytes free              #剩余空间  </code></pre><h2 id="24-mktemp"><a href="#24-mktemp" class="headerlink" title="24.mktemp"></a>24.mktemp</h2><p>​         mktemp命令用于建立暂存文件。</p><p>mktemp建立的一个暂存文件，供shell script使用。</p><h3 id="语法-22"><a href="#语法-22" class="headerlink" title="语法"></a>语法</h3><pre><code>mktemp [-qu][文件名参数]</code></pre><p><strong>参数</strong>：</p><ul><li>-q 　执行时若发生错误，不会显示任何信息。</li><li>-u 　暂存文件会在mktemp结束前先行删除。</li><li>[文件名参数] 　文件名参数必须是以”自订名称.XXXXXX”的格式。</li></ul><h3 id="实例-18"><a href="#实例-18" class="headerlink" title="实例"></a>实例</h3><p>使用mktemp 命令生成临时文件时，文件名参数应当以”文件名.XXXX”的形式给出，mktemp 会根据文件名参数建立一个临时文件。在命令行提示符输入如下命令：</p><pre><code>mktemp tmp.xxxx #生成临时文件 </code></pre><p>使用该命令后，可使用dir 或ls看当前目录，得到如下结果：</p><pre><code>cmd@cmd-desktop:~$ mktemp tmp.xxxx #生成临时文件  cmd@cmd-desktop:~$dir #查看当前目录  file test testfile testfile1 tmp.3847 #生成了tmp.3847 </code></pre><p>由此可见，生成的临时文件为tmp.3847，其中，文件名参数中的”XXXX”被4 个随机产生的字符所取代。</p><h2 id="25-more"><a href="#25-more" class="headerlink" title="25.more"></a>25.more</h2><p>​         more 命令类似 cat ，不过会以一页一页的形式显示，更方便使用者逐页阅读，而最基本的指令就是按空白键（space）就往下一页显示，按 b 键就会往回（back）一页显示，而且还有搜寻字串的功能（与 vi 相似），使用中的说明文件，请按 h 。</p><h3 id="语法-23"><a href="#语法-23" class="headerlink" title="语法"></a>语法</h3><pre><code>more [-dlfpcsu] [-num] [+/pattern] [+linenum] [fileNames..]</code></pre><p><strong>参数</strong>：</p><ul><li>-num 一次显示的行数</li><li>-d 提示使用者，在画面下方显示 [Press space to continue, ‘q’ to quit.] ，如果使用者按错键，则会显示 [Press ‘h’ for instructions.] 而不是 ‘哔’ 声</li><li>-l 取消遇见特殊字元 ^L（送纸字元）时会暂停的功能</li><li>-f 计算行数时，以实际上的行数，而非自动换行过后的行数（有些单行字数太长的会被扩展为两行或两行以上）</li><li>-p 不以卷动的方式显示每一页，而是先清除萤幕后再显示内容</li><li>-c 跟 -p 相似，不同的是先显示内容再清除其他旧资料</li><li>-s 当遇到有连续两行以上的空白行，就代换为一行的空白行</li><li>-u 不显示下引号 （根据环境变数 TERM 指定的 terminal 而有所不同）</li><li>+/pattern 在每个文档显示前搜寻该字串（pattern），然后从该字串之后开始显示</li><li>+num 从第 num 行开始显示</li><li>fileNames 欲显示内容的文档，可为复数个数</li></ul><h3 id="实例-19"><a href="#实例-19" class="headerlink" title="实例"></a>实例</h3><p>逐页显示 testfile 文档内容，如有连续两行以上空白行则以一行空白行显示。</p><pre><code>more -s testfile</code></pre><p>从第 20 行开始显示 testfile 之文档内容。</p><pre><code>more +20 testfile</code></pre><h3 id="常用操作命令"><a href="#常用操作命令" class="headerlink" title="常用操作命令"></a>常用操作命令</h3><ul><li>Enter 向下n行，需要定义。默认为1行</li><li>Ctrl+F 向下滚动一屏</li><li>空格键 向下滚动一屏</li><li>Ctrl+B 返回上一屏</li><li>= 输出当前行的行号</li><li>：f 输出文件名和当前行的行号</li><li>V 调用vi编辑器</li><li>!命令 调用Shell，并执行命令</li><li>q 退出more</li></ul><h2 id="26-mmove"><a href="#26-mmove" class="headerlink" title="26.mmove"></a>26.mmove</h2><p>​        mmove命令用于在MS-DOS文件系统中，移动文件或目录，或更改名称。</p><p>mmove为mtools工具命令，模拟MS-DOS的move命令，可在MS-DOS文件系统中移动现有的文件或目录，或是更改现有文件或目录的名称。</p><h3 id="语法-24"><a href="#语法-24" class="headerlink" title="语法"></a>语法</h3><pre><code>mmove [源文件或目录...][目标文件或目录]</code></pre><p><strong>参数说明:</strong></p><ul><li><p>[源文件或目录…]: 执行操作的源文件或目录路径</p></li><li><p>[目标文件或目录]: 执行操作后的目标文件或目录路径</p></li></ul><h3 id="实例-20"><a href="#实例-20" class="headerlink" title="实例"></a>实例</h3><p>使用指令mmove将文件”autorun.bat”移动到目录”test”中，输入如下命令：</p><pre><code>$ mmove autorun.bat test        #移动文件到目录test中 </code></pre><p>以上命令执行以后，指令mmove会将文件”autorun.bat”移动到指定目录”test”中。</p><p>注意：用户可以使用mdir指令查看移动后的文件或目录信息。</p><h2 id="27-mread"><a href="#27-mread" class="headerlink" title="27.mread"></a>27.mread</h2><p>​        mread命令用于将MS-DOS文件复制到Linux/Unix的目录中。</p><p>mread为mtools工具命令，可将MS-DOS文件复制到Linux的文件系统中。这个命令目前已经不常用，一般都使用mcopy命令来代替。</p><h3 id="语法-25"><a href="#语法-25" class="headerlink" title="语法"></a>语法</h3><pre><code>mread [MS-DOS文件...][Linux文件或目录]</code></pre><p><strong>参数说明:</strong></p><ul><li><p>[MS-DOS文件…]: 执行操作的DOS源文件或目录路径</p></li><li><p>[Linux文件或目录]: 执行操作后的Linux目标文件或目录路径</p></li></ul><h3 id="实例-21"><a href="#实例-21" class="headerlink" title="实例"></a>实例</h3><p>使用指令mread将盘”a:"中的所有内容复制到当前工作目录下，输入如下命令：</p><pre><code>$ mread a:\* ./     #将a盘上的所有文件复制到当前工作目录 </code></pre><p>执行该命令前，可以先使用mdir命令查看原来的目录结构。执行mread之后，可使用ls命令再次查看复制之后的文件结构，结果如下所示：</p><pre><code>$ mdir -/ a:\*      #查看a盘中的文件  Volume in drive A has no label          #加载信息  Volume Serial Number is 13D2~055C  Directory for A:/                   #以下为目录信息  ./TEST &lt;DIR&gt; 2011-08-23 16:59         #显示格式为文件名，目录大小，修改时间  AUTORUN.INF 265 2011-08-23 16:53  AUTORUN.BAT 43 2011-08-23 16:56  3 files 308 bytes                       #统计总大小  724 325 bytes free                  #剩余空间  $ mread A:\* ./     #将a盘上所有文件复制到当前工作目录  $ ls                                    #查看文件或子目录信息  TEST AUTORUN.INF AUTORUN.BAT            #显示复制后的内容  </code></pre><h2 id="28-mren"><a href="#28-mren" class="headerlink" title="28.mren"></a>28.mren</h2><p>​        mren命令用于更改MS-DOS文件或目录的名称，或是移动文件或目录。</p><p>mren为MS-DOS工具指令，与DOS下的ren指令相似，可以实现更改MS-DOS文件或目录名称。</p><p>源文件必须是磁盘上已经存在的文件，若忽略盘符及路径，则表示当前盘及当前目录的文件。</p><p>新文件名是所要更换的文件名称。新文件名称前不可以加与源文件不同的盘符及路径，因为该命令只能更改同一盘上的文件名称。</p><h3 id="语法-26"><a href="#语法-26" class="headerlink" title="语法"></a>语法</h3><pre><code>mren [源文件或目录...][目标文件或目录]</code></pre><p><strong>参数说明：</strong></p><ul><li>[源文件或目录…]： 执行操作的源文件名或者源文件路径</li><li></li><li>[目标文件或目录]： 执行操作的目标文件名或者目标文件路径</li></ul><h3 id="实例-22"><a href="#实例-22" class="headerlink" title="实例"></a>实例</h3><p>使用指令mren将a盘下的文件”autorun.bat”的文件名修改为”auto.bat”，输入如下命令：</p><pre><code>$ mren a:\autorun.bat auto.bat  #将文件autorun.bat重命名为auto.bat  </code></pre><p>使用该命令前后使用mdir命令查看并对比，得到结果如下：</p><pre><code>$ mdir -/ a:\*                  #查看a盘中的文件  Volume in drive A has no label  #加载信息  Volume Serial Number is 13D2~055C  Directory for A:\                   #以下为目录信息  ./TEST &lt;DIR&gt; 2011-08-23 16:59       #文件名，目录大小，修改时间  AUTORUN.BAT 43 2011-08-23 16:56  3 files 308 bytes                   #统计总大小  724 325 bytes free              #剩余空间  #将文件autorun.bat重命名为auto.bat  $ mren a:\autorun.bat auto.bat        $ mdir -/ a:\*                  #再次查看a盘中文件  Volume in drive A has no label      #加载信息  Volume Serial Number is 13D2~055C  Directory for A:\                   #以下为目录信息  ./TEST &lt;DIR&gt; 2011-08-23 16:59       #文件名目录大小 修改时间  #文件名被改为auto.bat，修改时间改为当前系统时间  AUTO.BAT 43 2011-08-23 16:56          3 files 308 bytes                   #统计总大小  724 325 bytes free              #剩余空间  </code></pre><h2 id="29-mtools"><a href="#29-mtools" class="headerlink" title="29.mtools"></a>29.mtools</h2><p>​         mtools命令用于显示mtools支持的指令。</p><p>mtools为MS-DOS文件系统的工具程序，可模拟许多MS-DOS的指令。这些指令都是mtools的符号连接，因此会有一些共同的特性。</p><h3 id="语法-27"><a href="#语法-27" class="headerlink" title="语法"></a>语法</h3><pre><code>mtools</code></pre><p><strong>参数说明</strong>：</p><ul><li>-a 　长文件名重复时自动更改目标文件的长文件名。</li><li>-A 　短文件名重复但长文件名不同时自动更改目标文件的短文件名。</li><li>-o 　长文件名重复时，将目标文件覆盖现有的文件。</li><li>-O 　短文件名重复但长文件名不同时，将目标文件覆盖现有的文件。</li><li>-r 　长文件名重复时，要求用户更改目标文件的长文件名。</li><li>-R 　短文件名重复但长文件名不同时，要求用户更改目标文件的短文件名。</li><li>-s 　长文件名重复时，则不处理该目标文件。</li><li>-S 　短文件名重复但长文件名不同时，则不处理该目标文件。</li><li>-v 　执行时显示详细的说明。</li><li>-V 　显示版本信息。</li></ul><h3 id="实例-23"><a href="#实例-23" class="headerlink" title="实例"></a>实例</h3><p>显示 mtools软件包所支持的MS-DOS命令。</p><p>在命令提示符中直接输入mtools，可显示其所支持的MS-DOS命令，如下所示：</p><pre><code>$ mtools #显示所支持的MS-DOS命令  Supported commands: #命令列表  mattrib, mbadblocks, mcat, mcd, mclasserase, mcopy, mdel, mdeltree  mdir, mdoctorfat, mdu, mformat, minfo, mlabel, mmd, mmount  mpartition, mrd, mread, mmove, mren, mshowfat, mtoolstest, mtype  mwrite, mzip </code></pre><h2 id="30-mtoolstest"><a href="#30-mtoolstest" class="headerlink" title="30.mtoolstest"></a>30.mtoolstest</h2><p>​        mtoolstest命令用于测试并显示mtools的相关设置。</p><p>mtoolstest为mtools的工具指令，可读取与分析的mtools的配置文件，并在屏幕上显示结果。</p><h3 id="语法-28"><a href="#语法-28" class="headerlink" title="语法"></a>语法</h3><pre><code>mtoolstest</code></pre><h3 id="实例-24"><a href="#实例-24" class="headerlink" title="实例"></a>实例</h3><p>在命令行中直接输入mtoolstest，即可显示mtools的软件包当前的配置信息，结果如下：</p><pre><code>$ mtoolstest＃显示mtools软件包当前的配置信息  驱动器J：#mtools软件包当前的配置信息列表  ＃fn = 0 mode = 0 builtin  file =“/ dev / sdb4”fat_bits = 16 tracks = 0 heads = 0 sector = 0 hidden = 0 偏移量=为0x0 分区= 0 mformat_only  开车Z：  ＃fn = 0 mode = 0 builtin  file =“/ dev / sdb4”fat_bits = 16 tracks = 0 heads = 0 sector = 0 hidden = 0 偏移量=为0x0 分区= 0 mformat_only  开车X：  ＃fn = 0 mode = 0 builtin  file =“$ DISPLAY”fat_bits = 0 tracks = 0 heads = 0 sector = 0 hidden = 0 偏移量=为0x0 分区= 0 驾驶A：  ＃fn = 2 mode = 128在/etc/mtools.conf中定义  file =“/ dev / fd0”fat_bits = 0 tracks = 0 heads = 0 sector = 0 hidden = 0 偏移量=为0x0 分区= 0 独家  开车B：  ＃fn = 2 mode = 128在/etc/mtools.conf中定义  file =“/ dev / fd1”fat_bits = 0 tracks = 0 heads = 0 sector = 0 hidden = 0 偏移量=为0x0 分区= 0 独家  驾驶M：  ＃fn = 2 mode = 0在/etc/mtools.conf中定义  file =“/ var / lib / dosemu / hdimage.first”fat_bits = 0 tracks = 0 heads = 0 sector = 0 hidden = 0 偏移量= 0x80的 分区= 1 开车N：  ＃fn = 2 mode = 0在/etc/mtools.conf中定义  file =“/ var / lib / dosemu / fdimage”fat_bits = 0 tracks = 0 heads = 0 sector = 0 hidden = 0 偏移量=为0x0 分区= 0 mtools_fat_compatibility = 0 mtools_skip_check = 0 mtools_lower_case = 0 </code></pre><h2 id="31-mv"><a href="#31-mv" class="headerlink" title="31.mv"></a>31.mv</h2><p>​        mv命令用来为文件或目录改名、或将文件或目录移入其它位置。</p><h3 id="语法-29"><a href="#语法-29" class="headerlink" title="语法"></a>语法</h3><pre><code>mv [options] source destmv [options] source... directory</code></pre><p><strong>参数说明</strong>：</p><ul><li>-i: 若指定目录已有同名文件，则先询问是否覆盖旧文件;</li><li>-f: 在mv操作要覆盖某已有的目标文件时不给任何指示;</li></ul><p>mv参数设置与运行结果</p><table><thead><tr><th align="left">命令格式</th><th align="left">运行结果</th></tr></thead><tbody><tr><td align="left">mv 文件名 文件名</td><td align="left">将源文件名改为目标文件名</td></tr><tr><td align="left">mv 文件名 目录名</td><td align="left">将文件移动到目标目录</td></tr><tr><td align="left">mv 目录名 目录名</td><td align="left">目标目录已存在，将源目录 移动到目标目录；目标 目录不存在则改名</td></tr><tr><td align="left">mv 目录名 文件名</td><td align="left">出错</td></tr></tbody></table><h3 id="实例-25"><a href="#实例-25" class="headerlink" title="实例"></a>实例</h3><p>将文件 aaa 更名为 bbb :</p><pre><code>mv aaa bbb</code></pre><p>将info目录放入logs目录中。注意，如果logs目录不存在，则该命令将info改名为logs。</p><pre><code>mv info/ logs </code></pre><p>再如将/usr/student下的所有文件和目录移到当前目录下，命令行为：</p><pre><code>$ mv /usr/student/*  . </code></pre><h2 id="32-od"><a href="#32-od" class="headerlink" title="32.od"></a>32.od</h2><p>​         od命令用于输出文件内容。</p><p>od指令会读取所给予的文件的内容，并将其内容以八进制字码呈现出来。</p><h3 id="语法-30"><a href="#语法-30" class="headerlink" title="语法"></a>语法</h3><pre><code>od [-abcdfhilovx][-A &lt;字码基数&gt;][-j &lt;字符数目&gt;][-N &lt;字符数目&gt;][-s &lt;字符串字符数&gt;][-t &lt;输出格式&gt;][-w &lt;每列字符数&gt;][--help][--version][文件...]</code></pre><p><strong>参数</strong>：</p><ul><li>-a 　此参数的效果和同时指定”-ta”参数相同。</li><li>-A&lt;字码基数&gt; 　选择要以何种基数计算字码。</li><li>-b 　此参数的效果和同时指定”-toC”参数相同。</li><li>-c 　此参数的效果和同时指定”-tC”参数相同。</li><li>-d 　此参数的效果和同时指定”-tu2”参数相同。</li><li>-f 　此参数的效果和同时指定”-tfF”参数相同。</li><li>-h 　此参数的效果和同时指定”-tx2”参数相同。</li><li>-i 　此参数的效果和同时指定”-td2”参数相同。</li><li>-j&lt;字符数目&gt;或–skip-bytes=&lt;字符数目&gt; 　略过设置的字符数目。</li><li>-l 　此参数的效果和同时指定”-td4”参数相同。</li><li>-N&lt;字符数目&gt;或–read-bytes=&lt;字符数目&gt; 　到设置的字符数目为止。</li><li>-o 　此参数的效果和同时指定”-to2”参数相同。</li><li>-s&lt;字符串字符数&gt;或–strings=&lt;字符串字符数&gt; 　只显示符合指定的字符数目的字符串。</li><li>-t&lt;输出格式&gt;或–format=&lt;输出格式&gt; 　设置输出格式。</li><li>-v或–output-duplicates 　输出时不省略重复的数据。</li><li>-w&lt;每列字符数&gt;或–width=&lt;每列字符数&gt; 　设置每列的最大字符数。</li><li>-x 　此参数的效果和同时指定”-h”参数相同。</li><li>–help 　在线帮助。</li><li>–version 　显示版本信息。</li></ul><h3 id="实例-26"><a href="#实例-26" class="headerlink" title="实例"></a>实例</h3><p>创建 tmp 文件：</p><pre><code>$ echo abcdef g &gt; tmp$ cat tmpabcdef g</code></pre><p>使用 od 命令：</p><pre><code>$ od -b tmp0000000 141 142 143 144 145 146 040 147 0120000011</code></pre><p>使用单字节八进制解释进行输出，注意左侧的默认地址格式为八字节:</p><pre><code>$ od -c tmp0000000   a   b   c   d   e   f       g  \n0000011</code></pre><p>使用ASCII码进行输出，注意其中包括转义字符</p><pre><code>$ od -t d1 tmp0000000   97   98   99  100  101  102   32  103   100000011</code></pre><p>使用单字节十进制进行解释</p><pre><code>$ od -A d -c tmp0000000   a   b   c   d   e   f       g  \n0000009</code></pre><h2 id="33-paste"><a href="#33-paste" class="headerlink" title="33.paste"></a>33.paste</h2><p>​         paste命令用于合并文件的列。</p><p>paste指令会把每个文件以列对列的方式，一列列地加以合并。</p><h3 id="语法-31"><a href="#语法-31" class="headerlink" title="语法"></a>语法</h3><pre><code>paste [-s][-d &lt;间隔字符&gt;][--help][--version][文件...]</code></pre><p><strong>参数</strong>：</p><ul><li>-d&lt;间隔字符&gt;或–delimiters=&lt;间隔字符&gt; 　用指定的间隔字符取代跳格字符。</li><li>-s或–serial 　串列进行而非平行处理。</li><li>–help 　在线帮助。</li><li>–version 　显示帮助信息。</li><li>[文件…] 指定操作的文件路径</li></ul><h3 id="实例-27"><a href="#实例-27" class="headerlink" title="实例"></a>实例</h3><p>使用paste指令将文件”file”、”testfile”、”testfile1”进行合并，输入如下命令：</p><pre><code>paste file testfile testfile1 #合并指定文件的内容 </code></pre><p>但是，在执行以上命令之前，首先使用”cat”指令对3个文件内容进行查看，显示如下所示：</p><pre><code>$ cat file                  #file文件的内容  xiongdan 200  lihaihui 233  lymlrl 231  $ cat testfile              #testfile文件的内容  liangyuanm  ss  $ cat testfile1             #testfile1文件的内容  huanggai 56  zhixi 73 </code></pre><p>当合并指令”$ paste file testfile testfile1”执行后，程序界面中将显示合并后的文件内容，如下所示：</p><pre><code>xiongdan 200  lihaihui 233  lymlrl 231  liangyuanm  ss  huanggai 56  zhixi 73  </code></pre><p>若使用paste指令的参数”-s”，则可以将一个文件中的多行数据合并为一行进行显示。例如，将文件”file”中的3行数据合并为一行数据进行显示，输入如下命令</p><pre><code>$ paste -s file             #合并指定文件的多行数据</code></pre><p>上面的命令执行后，显示的数据内容如下所示：</p><pre><code>xiongdan 200 lihaihui 233 lymlrl 231 </code></pre><p>注意：参数”-s”只是将testfile文件的内容调整显示方式，并不会改变原文件的内容格式。</p><h2 id="34-patch"><a href="#34-patch" class="headerlink" title="34.patch"></a>34.patch</h2><p>​         patch命令用于修补文件。</p><p>patch指令让用户利用设置修补文件的方式，修改，更新原始文件。倘若一次仅修改一个文件，可直接在指令列中下达指令依序执行。如果配合修补文件的方式则能一次修补大批文件，这也是Linux系统核心的升级方法之一。</p><h3 id="语法-32"><a href="#语法-32" class="headerlink" title="语法"></a>语法</h3><pre><code>patch [-bceEflnNRstTuvZ][-B &lt;备份字首字符串&gt;][-d &lt;工作目录&gt;][-D &lt;标示符号&gt;][-F &lt;监别列数&gt;][-g &lt;控制数值&gt;][-i &lt;修补文件&gt;][-o &lt;输出文件&gt;][-p &lt;剥离层级&gt;][-r &lt;拒绝文件&gt;][-V &lt;备份方式&gt;][-Y &lt;备份字首字符串&gt;][-z &lt;备份字尾字符串&gt;][--backup-if -mismatch][--binary][--help][--nobackup-if-mismatch][--verbose][原始文件 &lt;修补文件&gt;] 或 path [-p &lt;剥离层级&gt;] &lt; [修补文件]</code></pre><p><strong>参数</strong>：</p><ul><li>-b或–backup 　备份每一个原始文件。</li><li>-B&lt;备份字首字符串&gt;或–prefix=&lt;备份字首字符串&gt; 　设置文件备份时，附加在文件名称前面的字首字符串，该字符串可以是路径名称。</li><li>-c或–context 　把修补数据解译成关联性的差异。</li><li>-d&lt;工作目录&gt;或–directory=&lt;工作目录&gt; 　设置工作目录。</li><li>-D&lt;标示符号&gt;或–ifdef=&lt;标示符号&gt; 　用指定的符号把改变的地方标示出来。</li><li>-e或–ed 　把修补数据解译成ed指令可用的叙述文件。</li><li>-E或–remove-empty-files 　若修补过后输出的文件其内容是一片空白，则移除该文件。</li><li>-f或–force 　此参数的效果和指定”-t”参数类似，但会假设修补数据的版本为新　版本。</li><li>-F&lt;监别列数&gt;或–fuzz&lt;监别列数&gt; 　设置监别列数的最大值。</li><li>-g&lt;控制数值&gt;或–get=&lt;控制数值&gt; 　设置以RSC或SCCS控制修补作业。</li><li>-i&lt;修补文件&gt;或–input=&lt;修补文件&gt; 　读取指定的修补文件。</li><li>-l或–ignore-whitespace 　忽略修补数据与输入数据的跳格，空格字符。</li><li>-n或–normal 　把修补数据解译成一般性的差异。</li><li>-N或–forward 　忽略修补的数据较原始文件的版本更旧，或该版本的修补数据已使　用过。</li><li>-o&lt;输出文件&gt;或–output=&lt;输出文件&gt; 　设置输出文件的名称，修补过的文件会以该名称存放。</li><li>-p&lt;剥离层级&gt;或–strip=&lt;剥离层级&gt; 　设置欲剥离几层路径名称。</li><li>-f&lt;拒绝文件&gt;或–reject-file=&lt;拒绝文件&gt; 　设置保存拒绝修补相关信息的文件名称，预设的文件名称为.rej。</li><li>-R或–reverse 　假设修补数据是由新旧文件交换位置而产生。</li><li>-s或–quiet或–silent 　不显示指令执行过程，除非发生错误。</li><li>-t或–batch 　自动略过错误，不询问任何问题。</li><li>-T或–set-time 　此参数的效果和指定”-Z”参数类似，但以本地时间为主。</li><li>-u或–unified 　把修补数据解译成一致化的差异。</li><li>-v或–version 　显示版本信息。</li><li>-V&lt;备份方式&gt;或–version-control=&lt;备份方式&gt; 　用”-b”参数备份目标文件后，备份文件的字尾会被加上一个备份字符串，这个字符串不仅可用”-z”参数变更，当使用”-V”参数指定不同备份方式时，也会产生不同字尾的备份字符串。</li><li>-Y&lt;备份字首字符串&gt;或–basename-prefix=–&lt;备份字首字符串&gt; 　设置文件备份时，附加在文件基本名称开头的字首字符串。</li><li>-z&lt;备份字尾字符串&gt;或–suffix=&lt;备份字尾字符串&gt; 　此参数的效果和指定”-B”参数类似，差别在于修补作业使用的路径与文件名若为src/linux/fs/super.c，加上”backup/“字符串后，文件super.c会备份于/src/linux/fs/backup目录里。</li><li>-Z或–set-utc 　把修补过的文件更改，存取时间设为UTC。</li><li>–backup-if-mismatch 　在修补数据不完全吻合，且没有刻意指定要备份文件时，才备份文件。</li><li>–binary 　以二进制模式读写数据，而不通过标准输出设备。</li><li>–help 　在线帮助。</li><li>–nobackup-if-mismatch 　在修补数据不完全吻合，且没有刻意指定要备份文件时，不要备份文件。</li><li>–verbose 　详细显示指令的执行过程。</li></ul><h3 id="实例-28"><a href="#实例-28" class="headerlink" title="实例"></a>实例</h3><p>使用patch指令将文件”testfile1”升级，其升级补丁文件为”testfile.patch”，输入如下命令：</p><pre><code>$ patch -p0 testfile1 testfile.patch    #使用补丁程序升级文件 </code></pre><p>使用该命令前，可以先使用指令”cat”查看”testfile1”的内容。在需要修改升级的文件与原文件之间使用指令”diff”比较可以生成补丁文件。具体操作如下所示：</p><pre><code>$ cat testfile1                 #查看testfile1的内容  Hello,This is the firstfile!  $ cat testfile2                 #查看testfile2的内容  Hello,Thisisthesecondfile!  $ diff testfile1 testfile2          #比较两个文件  1c1  &lt;Hello,Thisisthefirstfile!  ---  &gt;Hello,Thisisthesecondfile!  #将比较结果保存到tetsfile.patch文件  $ diff testfile1 testfile2&gt;testfile.patch     $ cat testfile.patch                #查看补丁包的内容  1c1  &lt;Hello,Thisisthefirstfile!  ---  &gt;Hello,Thisisthesecondfile!  #使用补丁包升级testfile1文件  $ patch -p0 testfile1 testfile.patch      patching file testfile1  $cat testfile1                  #再次查看testfile1的内容  #testfile1文件被修改为与testfile2一样的内容  Hello,This is the secondfile!   </code></pre><p>注意：上述命令代码中，”$ diff testfile1 testfile2&gt;testfile. patch”所使用的操作符”＞”表示将该操作符左边的文件数据写入到右边所指向的文件中。在这里，即是指将两个文件比较后的结果写入到文件”testfile.patch”中。</p><h2 id="35-rcp"><a href="#35-rcp" class="headerlink" title="35.rcp"></a>35.rcp</h2><p>​        rcp命令用于复制远程文件或目录。</p><p>rcp指令用在远端复制文件或目录，如同时指定两个以上的文件或目录，且最后的目的地是一个已经存在的目录，则它会把前面指定的所有文件或目录复制到该目录中。</p><h3 id="语法-33"><a href="#语法-33" class="headerlink" title="语法"></a>语法</h3><pre><code>rcp [-pr][源文件或目录][目标文件或目录]</code></pre><p>或</p><pre><code>rcp [-pr][源文件或目录...][目标文件]</code></pre><p><strong>参数</strong>：</p><p>-p 　保留源文件或目录的属性，包括拥有者，所属群组，权限与时间。</p><p>-r 　递归处理，将指定目录下的文件与子目录一并处理。</p><h3 id="实例-29"><a href="#实例-29" class="headerlink" title="实例"></a>实例</h3><p>使用rcp指令复制远程文件到本地进行保存。</p><p>设本地主机当前账户为rootlocal，远程主机账户为root，要将远程主机（218.6.132.5）主目录下的文件”testfile”复制到本地目录”test”中，则输入如下命令：</p><pre><code>rcp root@218.6.132.5:./testfile testfile  #复制远程文件到本地  rcp root@218.6.132.5:home/rootlocal/testfile testfile  #要求当前登录账户cmd 登录到远程主机  rcp 218.6.132.5:./testfile testfile</code></pre><p>注意：指令”rcp”执行以后不会有返回信息，仅需要在目录”test”下查看是否存在文件”testfile”。若存在，则表示远程复制操作成功，否则远程复制操作失败。</p><h2 id="36-rm"><a href="#36-rm" class="headerlink" title="36.rm"></a>36.rm</h2><p>​         rm命令用于删除一个文件或者目录。</p><h3 id="语法-34"><a href="#语法-34" class="headerlink" title="语法"></a>语法</h3><pre><code>rm [options] name...</code></pre><p><strong>参数</strong>：</p><ul><li>-i 删除前逐一询问确认。</li><li>-f 即使原档案属性设为唯读，亦直接删除，无需逐一确认。</li><li>-r 将目录及以下之档案亦逐一删除。</li></ul><h3 id="实例-30"><a href="#实例-30" class="headerlink" title="实例"></a>实例</h3><p>删除文件可以直接使用rm命令，若删除目录则必须配合选项”-r”，例如：</p><pre><code># rm  test.txt rm：是否删除 一般文件 "test.txt"? y  # rm  homework  rm: 无法删除目录"homework": 是一个目录  # rm  -r  homework  rm：是否删除 目录 "homework"? y </code></pre><p>删除当前目录下的所有文件及目录，命令行为：</p><pre><code>rm  -r  * </code></pre><p>文件一旦通过rm命令删除，则无法恢复，所以必须格外小心地使用该命令。</p><h2 id="37-slocate"><a href="#37-slocate" class="headerlink" title="37.slocate"></a>37.slocate</h2><p>​        slocate命令查找文件或目录。</p><p>slocate本身具有一个数据库，里面存放了系统中文件与目录的相关信息。</p><h3 id="语法-35"><a href="#语法-35" class="headerlink" title="语法"></a>语法</h3><pre><code>slocate [-u][--help][--version][-d &lt;目录&gt;][查找的文件]</code></pre><p><strong>参数</strong>：</p><ul><li>-d&lt;目录&gt;或–database=&lt;目录&gt; 　指定数据库所在的目录。</li><li>-u 　更新slocate数据库。</li><li>–help 　显示帮助。</li><li>–version 　显示版本信息。</li></ul><h3 id="实例-31"><a href="#实例-31" class="headerlink" title="实例"></a>实例</h3><p>使用指令”slocate”显示文件名中含有关键字”fdisk”的文件路径信息，输入如下命令：</p><pre><code>$ slocate fdisk #显示文件名中含有fdisk关键字的文件的路径信息 </code></pre><p>执行以上命令后，指令执行的输出信息如下：</p><pre><code>$ slocate fdisk #显示文件名中含有fdisk 关键字的文件的路径信息  /root/cfdisk        #搜索到的文件路径列表  /root/fdisk  /root/sfdisk  /usr/include/grub/ieee1275/ofdisk.h  /usr/share/doc/util-Linux/README.cfdisk  /usr/share/doc/util-Linux/README.fdisk.gz  /usr/share/doc/util-Linux/examples/sfdisk.examples.gz  </code></pre><h2 id="38-split"><a href="#38-split" class="headerlink" title="38.split"></a>38.split</h2><p>​        split命令用于将一个文件分割成数个。</p><p>该指令将大文件分割成较小的文件，在默认情况下将按照每1000行切割成一个小文件。</p><h3 id="语法-36"><a href="#语法-36" class="headerlink" title="语法"></a>语法</h3><pre><code>split [--help][--version][-&lt;行数&gt;][-b &lt;字节&gt;][-C &lt;字节&gt;][-l &lt;行数&gt;][要切割的文件][输出文件名]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-&lt;行数&gt; : 指定每多少行切成一个小文件</li><li>-b&lt;字节&gt; : 指定每多少字节切成一个小文件</li><li>–help : 在线帮助</li><li>–version : 显示版本信息</li><li>-C&lt;字节&gt; : 与参数”-b”相似，但是在切 割时将尽量维持每行的完整性</li><li>[输出文件名] : 设置切割后文件的前置文件名， split会自动在前置文件名后再加上编号</li></ul><h3 id="实例-32"><a href="#实例-32" class="headerlink" title="实例"></a>实例</h3><p>使用指令”split”将文件”README”每6行切割成一个文件，输入如下命令：</p><pre><code>$ split -6 README       #将README文件每六行分割成一个文件 </code></pre><p>以上命令执行后，指令”split”会将原来的大文件”README”切割成多个以”x”开头的小文件。而在这些小文件中，每个文件都只有6行内容。</p><p>使用指令”ls”查看当前目录结构，如下所示：</p><pre><code>$ ls                                #执行ls指令  #获得当前目录结构  README xaa xad xag xab xae xah xac xaf xai    </code></pre><h2 id="39-tee"><a href="#39-tee" class="headerlink" title="39.tee"></a>39.tee</h2><p>​        tee命令用于读取标准输入的数据，并将其内容输出成文件。</p><p>tee指令会从标准输入设备读取数据，将其内容输出到标准输出设备，同时保存成文件。</p><h3 id="语法-37"><a href="#语法-37" class="headerlink" title="语法"></a>语法</h3><pre><code>tee [-ai][--help][--version][文件...]</code></pre><p><strong>参数</strong>：</p><ul><li>-a或–append 　附加到既有文件的后面，而非覆盖它．</li><li>-i或–ignore-interrupts 　忽略中断信号。</li><li>–help 　在线帮助。</li><li>–version 　显示版本信息。</li></ul><h3 id="实例-33"><a href="#实例-33" class="headerlink" title="实例"></a>实例</h3><p>使用指令”tee”将用户输入的数据同时保存到文件”file1”和”file2”中，输入如下命令：</p><pre><code>$ tee file1 file2                   #在两个文件中复制内容 </code></pre><p>以上命令执行后，将提示用户输入需要保存到文件的数据，如下所示：</p><pre><code>My Linux                        #提示用户输入数据  My Linux                        #输出数据，进行输出反馈  </code></pre><p>此时，可以分别打开文件”file1”和”file2”，查看其内容是否均是”My Linux”即可判断指令”tee”是否执行成功。</p><h2 id="40-tmpwatch"><a href="#40-tmpwatch" class="headerlink" title="40.tmpwatch"></a>40.tmpwatch</h2><p>​        tmpwatch命令用于删除暂存文件。</p><p>执行tmpwatch指令可删除不必要的暂存文件，您可以设置文件超期时间，单位以小时计算。</p><h3 id="语法-38"><a href="#语法-38" class="headerlink" title="语法"></a>语法</h3><pre><code>tmpwatch [-afqv][--test][超期时间][目录...]</code></pre><p><strong>参数</strong>：</p><ul><li>-a或–all 　删除任何类型的文件。</li><li>-f或–force 　强制删除文件或目录，其效果类似rm指令的”-f”参数。</li><li>-q或–quiet 　不显示指令执行过程。</li><li>-v或–verbose 　详细显示指令执行过程。</li><li>-test 　仅作测试，并不真的删除文件或目录。</li></ul><h3 id="实例-34"><a href="#实例-34" class="headerlink" title="实例"></a>实例</h3><p>使用指令”tmpwatch”删除目录”/tmp”中超过一天未使用的文件，输入如下命令：</p><pre><code>$ tmpwatch 24 /tmp/ #删除/tmp目录中超过一天未使用的文件</code></pre><p>以上命令执行后，其执行结果如下所示：</p><pre><code>removing directctmp/orbit-tom if not empty </code></pre><p>注意：该指令需要root权限，因此在使用tmpwatch命令前应该使用su命令切换用户。切换管理权限操作如下所示：</p><pre><code>$ su                                #切换到root用户  口令：**********                   #输入用户密码  </code></pre><h2 id="41-touch"><a href="#41-touch" class="headerlink" title="41.touch"></a>41.touch</h2><p>​        touch命令用于修改文件或者目录的时间属性，包括存取时间和更改时间。若文件不存在，系统会建立一个新的文件。</p><p>ls -l 可以显示档案的时间记录。</p><h3 id="语法-39"><a href="#语法-39" class="headerlink" title="语法"></a>语法</h3><pre><code>touch [-acfm][-d&lt;日期时间&gt;][-r&lt;参考文件或目录&gt;] [-t&lt;日期时间&gt;][--help][--version][文件或目录…]</code></pre><ul><li><strong>参数说明</strong>：</li><li>a 改变档案的读取时间记录。</li><li>m 改变档案的修改时间记录。</li><li>c 假如目的档案不存在，不会建立新的档案。与 –no-create 的效果一样。</li><li>f 不使用，是为了与其他 unix 系统的相容性而保留。</li><li>r 使用参考档的时间记录，与 –file 的效果一样。</li><li>d 设定时间与日期，可以使用各种不同的格式。</li><li>t 设定档案的时间记录，格式与 date 指令相同。</li><li>–no-create 不会建立新档案。</li><li>–help 列出指令格式。</li><li>–version 列出版本讯息。</li></ul><h3 id="实例-35"><a href="#实例-35" class="headerlink" title="实例"></a>实例</h3><p>使用指令”touch”修改文件”testfile”的时间属性为当前系统时间，输入如下命令：</p><pre><code>$ touch testfile                #修改文件的时间属性 </code></pre><p>首先，使用ls命令查看testfile文件的属性，如下所示：</p><pre><code>$ ls -l testfile                #查看文件的时间属性  #原来文件的修改时间为16:09  -rw-r--r-- 1 hdd hdd 55 2011-08-22 16:09 testfile  </code></pre><p>执行指令”touch”修改文件属性以后，并再次查看该文件的时间属性，如下所示：</p><pre><code>$ touch testfile                #修改文件时间属性为当前系统时间  $ ls -l testfile                #查看文件的时间属性  #修改后文件的时间属性为当前系统时间  -rw-r--r-- 1 hdd hdd 55 2011-08-22 19:53 testfile  </code></pre><p>使用指令”touch”时，如果指定的文件不存在，则将创建一个新的空白文件。例如，在当前目录下，使用该指令创建一个空白文件”file”，输入如下命令：</p><pre><code>$ touch file            #创建一个名为“file”的新的空白文件 </code></pre><h2 id="42-umask"><a href="#42-umask" class="headerlink" title="42.umask"></a>42.umask</h2><p>​        umask命令指定在建立文件时预设的权限掩码。</p><p>umask可用来设定[权限掩码]。[权限掩码]是由3个八进制的数字所组成，将现有的存取权限减掉权限掩码后，即可产生建立文件时预设的权限。</p><h3 id="语法-40"><a href="#语法-40" class="headerlink" title="语法"></a>语法</h3><pre><code>umask [-S][权限掩码]</code></pre><p><strong>参数说明</strong>：</p><p>-S 　以文字的方式来表示权限掩码。</p><h3 id="实例-36"><a href="#实例-36" class="headerlink" title="实例"></a>实例</h3><p>使用指令”umask”查看当前权限掩码，则输入下面的命令：</p><pre><code>$ umask                         #获取当前权限掩码 </code></pre><p>执行上面的指令后，输出信息如下：</p><pre><code>0022</code></pre><p>接下来，使用指令”mkdir”创建一个目录，并使用指令”ls”获取该目录的详细信息，输入命令如下：</p><pre><code>$ mkdir test1                       #创建目录  $ ls –d –l test1/                   #显示目录的详细信息  </code></pre><p>执行上面的命令后，将显示新创建目录的详细信息，如下所示：</p><pre><code>drwxr-xr-x 2 rootlocal rootlocal 4096 2011-9-19 21:46 test1/ </code></pre><p>注意：在上面的输出信息中，”drwxr-xr-x”=”777-022=755”。</p><h2 id="43-which"><a href="#43-which" class="headerlink" title="43.which"></a>43.which</h2><p>​        which命令用于查找文件。</p><p>which指令会在环境变量$PATH设置的目录里查找符合条件的文件。</p><h3 id="语法-41"><a href="#语法-41" class="headerlink" title="语法"></a>语法</h3><pre><code>which [文件...]</code></pre><p><strong>参数</strong>：</p><ul><li>-n&lt;文件名长度&gt; 　指定文件名长度，指定的长度必须大于或等于所有文件中最长的文件名。</li><li>-p&lt;文件名长度&gt; 　与-n参数相同，但此处的&lt;文件名长度&gt;包括了文件的路径。</li><li>-w 　指定输出时栏位的宽度。</li><li>-V 　显示版本信息。</li></ul><h3 id="实例-37"><a href="#实例-37" class="headerlink" title="实例"></a>实例</h3><p>使用指令”which”查看指令”bash”的绝对路径，输入如下命令：</p><pre><code>$ which bash</code></pre><p>上面的指令执行后，输出信息如下所示：</p><pre><code>/bin/bash                   #bash可执行程序的绝对路径 </code></pre><h2 id="44-cp"><a href="#44-cp" class="headerlink" title="44.cp"></a>44.cp</h2><p>​        cp命令主要用于复制文件或目录。</p><h3 id="语法-42"><a href="#语法-42" class="headerlink" title="语法"></a>语法</h3><pre><code>cp [options] source dest</code></pre><p>或</p><pre><code>cp [options] source... directory</code></pre><p><strong>参数说明</strong>：</p><ul><li>-a：此选项通常在复制目录时使用，它保留链接、文件属性，并复制目录下的所有内容。其作用等于dpR参数组合。</li><li>-d：复制时保留链接。这里所说的链接相当于Windows系统中的快捷方式。</li><li>-f：覆盖已经存在的目标文件而不给出提示。</li><li>-i：与-f选项相反，在覆盖目标文件之前给出提示，要求用户确认是否覆盖，回答”y”时目标文件将被覆盖。</li><li>-p：除复制文件的内容外，还把修改时间和访问权限也复制到新文件中。</li><li>-r：若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件。</li><li>-l：不复制文件，只是生成链接文件。</li></ul><h3 id="实例-38"><a href="#实例-38" class="headerlink" title="实例"></a>实例</h3><p>使用指令”cp”将当前目录”test/“下的所有文件复制到新目录”newtest”下，输入如下命令：</p><pre><code>$ cp –r test/ newtest          </code></pre><p>注意：用户使用该指令复制目录时，必须使用参数”-r”或者”-R”。</p><h2 id="45-whereis"><a href="#45-whereis" class="headerlink" title="45.whereis"></a>45.whereis</h2><p>​        whereis命令用于查找文件。</p><p>该指令会在特定目录中查找符合条件的文件。这些文件应属于原始代码、二进制文件，或是帮助文件。</p><p>该指令只能用于查找二进制文件、源代码文件和man手册页，一般文件的定位需使用locate命令。</p><h3 id="语法-43"><a href="#语法-43" class="headerlink" title="语法"></a>语法</h3><pre><code>whereis [-bfmsu][-B &lt;目录&gt;...][-M &lt;目录&gt;...][-S &lt;目录&gt;...][文件...]</code></pre><p><strong>参数</strong>：</p><p>-b 　只查找二进制文件。</p><p>-B&lt;目录&gt; 　只在设置的目录下查找二进制文件。</p><p>-f 　不显示文件名前的路径名称。</p><p>-m 　只查找说明文件。</p><p>-M&lt;目录&gt; 　只在设置的目录下查找说明文件。</p><p>-s 　只查找原始代码文件。</p><p>-S&lt;目录&gt; 　只在设置的目录下查找原始代码文件。</p><p>-u 　查找不包含指定类型的文件。</p><h3 id="实例-39"><a href="#实例-39" class="headerlink" title="实例"></a>实例</h3><p>使用指令”whereis”查看指令”bash”的位置，输入如下命令：</p><pre><code>$ whereis bash </code></pre><p>上面的指令执行后，输出信息如下所示：</p><pre><code>bash:/bin/bash/etc/bash.bashrc/usr/share/man/man1/bash.1.gz </code></pre><p>注意：以上输出信息从左至右分别为查询的程序名、bash路径、bash的man 手册页路径。</p><p>如果用户需要单独查询二进制文件或帮助文件，可使用如下命令：</p><pre><code>$ whereis -b bash $ whereis -m bash </code></pre><p>输出信息如下：</p><pre><code>$ whereis -b bash               #显示bash 命令的二进制程序  bash: /bin/bash /etc/bash.bashrc /usr/share/bash    # bash命令的二进制程序的地址  $ whereis -m bash               #显示bash 命令的帮助文件  bash: /usr/share/man/man1/bash.1.gz  #bash命令的帮助文件地址  </code></pre><h2 id="46-mcopy"><a href="#46-mcopy" class="headerlink" title="46.mcopy"></a>46.mcopy</h2><p>​        mcopy命令用来复制 MSDOS 格式文件到 Linux 中，或是由 Linux 中复制 MSDOS 文件到磁片上。</p><p>mcopy 可复制单一的文件到所指定的文件名称，或是复制数个文件到所指定的目录之中。来源与目的文件可为 MSDOS 或是 Linux 文件。</p><p>mcopy指令是一种mtools工具指令，可以在DOS系统中复制文件或者在DOS与Linux操作系统之间进行文件复制。</p><h3 id="语法-44"><a href="#语法-44" class="headerlink" title="语法"></a>语法</h3><pre><code>mcopy [-bnmpQt/][源文件][目标文件或目录]</code></pre><p><strong>参数</strong>：</p><ul><li>b 批处理模式。这是为大量的文件复制进行最佳化的选项,但是当在复制文件过程中产生 crash 时，会有安全性的问题产生。/ 递回的复制。包含目录所含文件与其下所有子目录中的文件。</li><li>-n 覆盖其他文件时，不需要进行确认而直接覆盖</li><li>m 将源文件修改时间设置为目标文件的修改时间。</li><li>p 将源文件的属性设置为目标文件的属性。</li><li>Q 当复制多个文件产生错误时，尽快结束程序。</li><li>t 转换为文本文件。</li><li>o 在覆盖 MSDOS 文件时不会出现警示讯息。</li></ul><h3 id="实例-40"><a href="#实例-40" class="headerlink" title="实例"></a>实例</h3><p>将 A 盘根目录中的 autoexec.bat 复制到目前工作目录之下：</p><pre><code>mcopy a:autoexec.bat .</code></pre><p>当复制的内容包括子目录和文件时，必须使用参数”-/“递归操作，因此该命令为：</p><pre><code>mcopy -/ A:\* </code></pre><p>执行该命令前先使用mdir 命令查看原来的目录结构，执行mcopy 之后可使用ls 命令查看复制之后Linux系统中的文件结构，结果如下：</p><pre><code>cmd@cmd-desktop:~$ mdir -/ a:\* #查看A 盘中的文件  Volume in drive A has no label #加载信息  Volume Serial Number is 13D2~055C  Directory for A:/ #以下为目录信息  #文件名目录大小 修改时间  ./TEST &lt;DIR&gt; 2009-09-23 16:59  AUTORUN.INF 265 2009-09-23 16:53  AUTORUN.BAT 43 2009-09-23 16:56  3 files 308 bytes #统计总大小  724 325 bytes free #剩余空间  cmd@cmd-desktop:~$ mcopy -/ A:\* #将A盘上的所有文件复制到当前工作目录  cmd@cmd-desktop:~$ls  TEST AUTORUN.INF AUTORUN.BAT #A盘中的内容复制到Linux文件系统结构中 </code></pre><p>47.mshowfat</p><p>​        mshowfat命令用于显示MS-DOS文件在FAT中的记录。</p><p>mshowfat为mtools工具指令，可显示MS-DOS文件在FAT中的记录编号。</p><h3 id="语法-45"><a href="#语法-45" class="headerlink" title="语法"></a>语法</h3><pre><code>mshowfat [文件...]</code></pre><p><strong>参数说明：</strong></p><p>[文件…]： 执行操作的文件相对路径或者绝对路径</p><h3 id="实例-41"><a href="#实例-41" class="headerlink" title="实例"></a>实例</h3><p>使用指令mshowfat查看文件”autorun.bat”的FAT信息，输入如下命令：</p><pre><code>$ mshowfat autorun.bat </code></pre><p>以上命令执行后，文件”autorun.bat”的FAT相关信息将会被显示出来。</p><p>注意：执行操作的文件必须是DOS文件系统下的文件。</p><h2 id="48-rhmask"><a href="#48-rhmask" class="headerlink" title="48.rhmask"></a>48.rhmask</h2><p>​        rhmask命令用于对文件进行加密和解密操作。</p><p>执行rhmask指令可制作加密过的文件，方便用户在公开的网络上传输该文件，而不至于被任意盗用。</p><h3 id="语法-46"><a href="#语法-46" class="headerlink" title="语法"></a>语法</h3><pre><code>rhmask [加密文件][输出文件] 或 rhmask [-d][加密文件][源文件][输出文件]</code></pre><p><strong>参数</strong>：</p><ul><li>-d 　产生加密过的文件。</li></ul><h3 id="实例-42"><a href="#实例-42" class="headerlink" title="实例"></a>实例</h3><p>使用指令”rhmask”将加密文件”code.txt”进行加密后，另存为输出文件”demo.txt”，输入如下命令：</p><pre><code>$ rhmask code.txt demo.txt</code></pre><p>以上命令执行后，文件”code.txt”将被加密后，另存为已经加密的文件”demo.txt”。</p><p>注意：该指令有两种语法，用户可以有选择性地进行使用即可。</p><h2 id="49-scp"><a href="#49-scp" class="headerlink" title="49.scp"></a>49.scp</h2><pre><code>     scp命令用于Linux之间复制文件和目录。</code></pre><p>scp是 secure copy的缩写, scp是linux系统下基于ssh登陆进行安全的远程文件拷贝命令。</p><h3 id="语法-47"><a href="#语法-47" class="headerlink" title="语法"></a>语法</h3><pre><code>scp [-1246BCpqrv] [-c cipher] [-F ssh_config] [-i identity_file][-l limit] [-o ssh_option] [-P port] [-S program][[user@]host1:]file1 [...] [[user@]host2:]file2</code></pre><p>简易写法:</p><pre><code>scp [可选参数] file_source file_target </code></pre><p><strong>参数说明：</strong></p><ul><li>-1： 强制scp命令使用协议ssh1</li><li>-2： 强制scp命令使用协议ssh2</li><li>-4： 强制scp命令只使用IPv4寻址</li><li>-6： 强制scp命令只使用IPv6寻址</li><li>-B： 使用批处理模式（传输过程中不询问传输口令或短语）</li><li>-C： 允许压缩。（将-C标志传递给ssh，从而打开压缩功能）</li><li>-p：保留原文件的修改时间，访问时间和访问权限。</li><li>-q： 不显示传输进度条。</li><li>-r： 递归复制整个目录。</li><li>-v：详细方式显示输出。scp和ssh(1)会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。</li><li>-c cipher： 以cipher将数据传输进行加密，这个选项将直接传递给ssh。</li><li>-F ssh_config： 指定一个替代的ssh配置文件，此参数直接传递给ssh。</li><li>-i identity_file： 从指定文件中读取传输时使用的密钥文件，此参数直接传递给ssh。</li><li>-l limit： 限定用户所能使用的带宽，以Kbit/s为单位。</li><li>-o ssh_option： 如果习惯于使用ssh_config(5)中的参数传递方式，</li><li>-P port：注意是大写的P, port是指定数据传输用到的端口号</li><li>-S program： 指定加密传输时所使用的程序。此程序必须能够理解ssh(1)的选项。</li></ul><h3 id="实例-43"><a href="#实例-43" class="headerlink" title="实例"></a>实例</h3><h4 id="1、从本地复制到远程"><a href="#1、从本地复制到远程" class="headerlink" title="1、从本地复制到远程"></a>1、从本地复制到远程</h4><p>命令格式：</p><pre><code>scp local_file remote_username@remote_ip:remote_folder 或者 scp local_file remote_username@remote_ip:remote_file 或者 scp local_file remote_ip:remote_folder 或者 scp local_file remote_ip:remote_file </code></pre><ul><li>第1,2个指定了用户名，命令执行后需要再输入密码，第1个仅指定了远程的目录，文件名字不变，第2个指定了文件名；</li><li>第3,4个没有指定用户名，命令执行后需要输入用户名和密码，第3个仅指定了远程的目录，文件名字不变，第4个指定了文件名；</li></ul><p>应用实例：</p><pre><code>scp /home/space/music/1.mp3 root@www.runoob.com:/home/root/others/music scp /home/space/music/1.mp3 root@www.runoob.com:/home/root/others/music/001.mp3 scp /home/space/music/1.mp3 www.runoob.com:/home/root/others/music scp /home/space/music/1.mp3 www.runoob.com:/home/root/others/music/001.mp3 </code></pre><p>复制目录命令格式：</p><pre><code>scp -r local_folder remote_username@remote_ip:remote_folder 或者 scp -r local_folder remote_ip:remote_folder </code></pre><ul><li>第1个指定了用户名，命令执行后需要再输入密码；</li><li>第2个没有指定用户名，命令执行后需要输入用户名和密码；</li></ul><p>应用实例：</p><pre><code>scp -r /home/space/music/ root@www.runoob.com:/home/root/others/ scp -r /home/space/music/ www.runoob.com:/home/root/others/ </code></pre><p>上面命令将本地 music 目录复制到远程 others 目录下。</p><h4 id="2、从远程复制到本地"><a href="#2、从远程复制到本地" class="headerlink" title="2、从远程复制到本地"></a>2、从远程复制到本地</h4><p>从远程复制到本地，只要将从本地复制到远程的命令的后2个参数调换顺序即可，如下实例</p><p>应用实例：</p><pre><code>scp root@www.runoob.com:/home/root/others/music /home/space/music/1.mp3 scp -r www.runoob.com:/home/root/others/ /home/space/music/</code></pre><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>1.如果远程服务器防火墙有为scp命令设置了指定的端口，我们需要使用 -P 参数来设置命令的端口号，命令格式如下：</p><pre><code>#scp 命令使用端口号 4588scp -P 4588 remote@www.runoob.com:/usr/local/sin.sh /home/administrator</code></pre><p>2.使用scp命令要确保使用的用户具有可读取远程服务器相应文件的权限，否则scp命令是无法起作用的。</p><h2 id="50-awk"><a href="#50-awk" class="headerlink" title="50.awk"></a>50.awk</h2><p>​        AWK是一种处理文本文件的语言，是一个强大的文本分析工具。</p><p>之所以叫AWK是因为其取了三位创始人 Alfred Aho，Peter Weinberger, 和 Brian Kernighan 的 Family Name 的首字符。</p><h3 id="语法-48"><a href="#语法-48" class="headerlink" title="语法"></a>语法</h3><pre><code>awk [选项参数] 'script' var=value file(s)或awk [选项参数] -f scriptfile var=value file(s)</code></pre><p><strong>选项参数说明：</strong></p><ul><li><p>-F fs or –field-separator fs</p><p>  指定输入文件折分隔符，fs是一个字符串或者是一个正则表达式，如-F:。</p></li><li><p>-v var=value or –asign var=value</p><p>  赋值一个用户定义变量。</p></li><li><p>-f scripfile or –file scriptfile</p><p>  从脚本文件中读取awk命令。</p></li><li><p>-mf nnn and -mr nnn</p><p>  对nnn值设置内在限制，-mf选项限制分配给nnn的最大块数目；-mr选项限制记录的最大数目。这两个功能是Bell实验室版awk的扩展功能，在标准awk中不适用。</p></li><li><p>-W compact or –compat, -W traditional or –traditional</p><p>  在兼容模式下运行awk。所以gawk的行为和标准的awk完全一样，所有的awk扩展都被忽略。</p></li><li><p>-W copyleft or –copyleft, -W copyright or –copyright</p><p>  打印简短的版权信息。</p></li><li><p>-W help or –help, -W usage or –usage</p><p>  打印全部awk选项和每个选项的简短说明。</p></li><li><p>-W lint or –lint</p><p>  打印不能向传统unix平台移植的结构的警告。</p></li><li><p>-W lint-old or –lint-old</p><p>  打印关于不能向传统unix平台移植的结构的警告。</p></li><li><p>-W posix</p><p>  打开兼容模式。但有以下限制，不识别：/x、函数关键字、func、换码序列以及当fs是一个空格时，将新行作为一个域分隔符；操作符<strong>和</strong>=不能代替^和^=；fflush无效。</p></li><li><p>-W re-interval or –re-inerval</p><p>  允许间隔正则表达式的使用，参考(grep中的Posix字符类)，如括号表达式[[:alpha:]]。</p></li><li><p>-W source program-text or –source program-text</p><p>  使用program-text作为源代码，可与-f命令混用。</p></li><li><p>-W version or –version</p><p>  打印bug报告信息的版本。</p></li></ul><hr><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>log.txt文本内容如下：</p><pre><code>2 this is a test3 Are you like awkThis's a test10 There are orange,apple,mongo</code></pre><p>用法一：</p><pre><code>awk '{[pattern] action}' {filenames}   # 行匹配语句 awk '' 只能用单引号</code></pre><p>实例：</p><pre><code># 每行按空格或TAB分割，输出文本中的1、4项 $ awk '{print $1,$4}' log.txt --------------------------------------------- 2 a 3 like This's 10 orange,apple,mongo # 格式化输出 $ awk '{printf "%-8s %-10s\n",$1,$4}' log.txt --------------------------------------------- 2        a 3        like This's 10       orange,apple,mongo</code></pre><p>用法二：</p><pre><code>awk -F  #-F相当于内置变量FS, 指定分割字符</code></pre><p>实例：</p><pre><code># 使用","分割 $  awk -F, '{print $1,$2}'   log.txt --------------------------------------------- 2 this is a test 3 Are you like awk This's a test 10 There are orange apple # 或者使用内建变量 $ awk 'BEGIN{FS=","} {print $1,$2}'     log.txt --------------------------------------------- 2 this is a test 3 Are you like awk This's a test 10 There are orange apple # 使用多个分隔符.先使用空格分割，然后对分割结果再使用","分割 $ awk -F '[ ,]'  '{print $1,$2,$5}'   log.txt --------------------------------------------- 2 this test 3 Are awk This's a 10 There apple</code></pre><p>用法三：</p><pre><code>awk -v  # 设置变量</code></pre><p>实例：</p><pre><code> $ awk -va=1 '{print $1,$1+a}' log.txt --------------------------------------------- 2 3 3 4 This's 1 10 11 $ awk -va=1 -vb=s '{print $1,$1+a,$1b}' log.txt --------------------------------------------- 2 3 2s 3 4 3s This's 1 This'ss 10 11 10s</code></pre><p>用法四：</p><pre><code>awk -f {awk脚本} {文件名}</code></pre><p>实例：</p><pre><code> $ awk -f cal.awk log.txt</code></pre><hr><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><table><thead><tr><th align="left">运算符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">= += -= <em>= /= %= ^= *</em>=</td><td align="left">赋值</td></tr><tr><td align="left">?:</td><td align="left">C条件表达式</td></tr><tr><td align="left">||</td><td align="left">逻辑或</td></tr><tr><td align="left">&amp;&amp;</td><td align="left">逻辑与</td></tr><tr><td align="left">~ 和 !~</td><td align="left">匹配正则表达式和不匹配正则表达式</td></tr><tr><td align="left">&lt; &lt;= &gt; &gt;= != ==</td><td align="left">关系运算符</td></tr><tr><td align="left">空格</td><td align="left">连接</td></tr><tr><td align="left">+ -</td><td align="left">加，减</td></tr><tr><td align="left">* / %</td><td align="left">乘，除与求余</td></tr><tr><td align="left">+ - !</td><td align="left">一元加，减和逻辑非</td></tr><tr><td align="left">^ ***</td><td align="left">求幂</td></tr><tr><td align="left">++ –</td><td align="left">增加或减少，作为前缀或后缀</td></tr><tr><td align="left">$</td><td align="left">字段引用</td></tr><tr><td align="left">in</td><td align="left">数组成员</td></tr></tbody></table><p>过滤第一列大于2的行</p><pre><code>$ awk '$1&gt;2' log.txt    #命令#输出3 Are you like awkThis's a test10 There are orange,apple,mongo</code></pre><p>过滤第一列等于2的行</p><pre><code>$ awk '$1==2 {print $1,$3}' log.txt    #命令#输出2 is</code></pre><p>过滤第一列大于2并且第二列等于’Are’的行</p><pre><code>$ awk '$1&gt;2 &amp;&amp; $2=="Are" {print $1,$2,$3}' log.txt    #命令#输出3 Are you</code></pre><hr><h3 id="内建变量"><a href="#内建变量" class="headerlink" title="内建变量"></a>内建变量</h3><table><thead><tr><th align="left">变量</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">$n</td><td align="left">当前记录的第n个字段，字段间由FS分隔</td></tr><tr><td align="left">$0</td><td align="left">完整的输入记录</td></tr><tr><td align="left">ARGC</td><td align="left">命令行参数的数目</td></tr><tr><td align="left">ARGIND</td><td align="left">命令行中当前文件的位置(从0开始算)</td></tr><tr><td align="left">ARGV</td><td align="left">包含命令行参数的数组</td></tr><tr><td align="left">CONVFMT</td><td align="left">数字转换格式(默认值为%.6g)ENVIRON环境变量关联数组</td></tr><tr><td align="left">ERRNO</td><td align="left">最后一个系统错误的描述</td></tr><tr><td align="left">FIELDWIDTHS</td><td align="left">字段宽度列表(用空格键分隔)</td></tr><tr><td align="left">FILENAME</td><td align="left">当前文件名</td></tr><tr><td align="left">FNR</td><td align="left">各文件分别计数的行号</td></tr><tr><td align="left">FS</td><td align="left">字段分隔符(默认是任何空格)</td></tr><tr><td align="left">IGNORECASE</td><td align="left">如果为真，则进行忽略大小写的匹配</td></tr><tr><td align="left">NF</td><td align="left">一条记录的字段的数目</td></tr><tr><td align="left">NR</td><td align="left">已经读出的记录数，就是行号，从1开始</td></tr><tr><td align="left">OFMT</td><td align="left">数字的输出格式(默认值是%.6g)</td></tr><tr><td align="left">OFS</td><td align="left">输出记录分隔符（输出换行符），输出时用指定的符号代替换行符</td></tr><tr><td align="left">ORS</td><td align="left">输出记录分隔符(默认值是一个换行符)</td></tr><tr><td align="left">RLENGTH</td><td align="left">由match函数所匹配的字符串的长度</td></tr><tr><td align="left">RS</td><td align="left">记录分隔符(默认是一个换行符)</td></tr><tr><td align="left">RSTART</td><td align="left">由match函数所匹配的字符串的第一个位置</td></tr><tr><td align="left">SUBSEP</td><td align="left">数组下标分隔符(默认值是/034)</td></tr></tbody></table><pre><code>$ awk 'BEGIN{printf "%4s %4s %4s %4s %4s %4s %4s %4s %4s\n","FILENAME","ARGC","FNR","FS","NF","NR","OFS","ORS","RS";printf "---------------------------------------------\n"} {printf "%4s %4s %4s %4s %4s %4s %4s %4s %4s\n",FILENAME,ARGC,FNR,FS,NF,NR,OFS,ORS,RS}'  log.txtFILENAME ARGC  FNR   FS   NF   NR  OFS  ORS   RS---------------------------------------------log.txt    2    1         5    1log.txt    2    2         5    2log.txt    2    3         3    3log.txt    2    4         4    4$ awk -F\' 'BEGIN{printf "%4s %4s %4s %4s %4s %4s %4s %4s %4s\n","FILENAME","ARGC","FNR","FS","NF","NR","OFS","ORS","RS";printf "---------------------------------------------\n"} {printf "%4s %4s %4s %4s %4s %4s %4s %4s %4s\n",FILENAME,ARGC,FNR,FS,NF,NR,OFS,ORS,RS}'  log.txtFILENAME ARGC  FNR   FS   NF   NR  OFS  ORS   RS---------------------------------------------log.txt    2    1    '    1    1log.txt    2    2    '    1    2log.txt    2    3    '    2    3log.txt    2    4    '    1    4# 输出顺序号 NR, 匹配文本行号$ awk '{print NR,FNR,$1,$2,$3}' log.txt---------------------------------------------1 1 2 this is2 2 3 Are you3 3 This's a test4 4 10 There are# 指定输出分割符$  awk '{print $1,$2,$5}' OFS=" $ "  log.txt---------------------------------------------2 $ this $ test3 $ Are $ awkThis's $ a $10 $ There $</code></pre><hr><h3 id="使用正则，字符串匹配"><a href="#使用正则，字符串匹配" class="headerlink" title="使用正则，字符串匹配"></a>使用正则，字符串匹配</h3><pre><code># 输出第二列包含 "th"，并打印第二列与第四列$ awk '$2 ~ /th/ {print $2,$4}' log.txt---------------------------------------------this a</code></pre><p><strong>~ 表示模式开始。// 中是模式。</strong></p><pre><code># 输出包含"re" 的行$ awk '/re/ ' log.txt---------------------------------------------3 Are you like awk10 There are orange,apple,mongo</code></pre><hr><h3 id="忽略大小写"><a href="#忽略大小写" class="headerlink" title="忽略大小写"></a>忽略大小写</h3><pre><code>$ awk 'BEGIN{IGNORECASE=1} /this/' log.txt---------------------------------------------2 this is a testThis's a test</code></pre><hr><h3 id="模式取反"><a href="#模式取反" class="headerlink" title="模式取反"></a>模式取反</h3><pre><code>$ awk '$2 !~ /th/ {print $2,$4}' log.txt---------------------------------------------Are likeaThere orange,apple,mongo$ awk '!/th/ {print $2,$4}' log.txt---------------------------------------------Are likeaThere orange,apple,mongo</code></pre><hr><h3 id="awk脚本"><a href="#awk脚本" class="headerlink" title="awk脚本"></a>awk脚本</h3><p>关于awk脚本，我们需要注意两个关键词BEGIN和END。</p><ul><li>BEGIN{ 这里面放的是执行前的语句 }</li><li>END {这里面放的是处理完所有的行后要执行的语句 }</li><li>{这里面放的是处理每一行时要执行的语句}</li></ul><p>假设有这么一个文件（学生成绩表）：</p><pre><code>$ cat score.txtMarry   2143 78 84 77Jack    2321 66 78 45Tom     2122 48 77 71Mike    2537 87 97 95Bob     2415 40 57 62</code></pre><p>我们的awk脚本如下：</p><pre><code>$ cat cal.awk#!/bin/awk -f#运行前BEGIN {    math = 0    english = 0    computer = 0    printf "NAME    NO.   MATH  ENGLISH  COMPUTER   TOTAL\n"    printf "---------------------------------------------\n"}#运行中{    math+=$3    english+=$4    computer+=$5    printf "%-6s %-6s %4d %8d %8d %8d\n", $1, $2, $3,$4,$5, $3+$4+$5}#运行后END {    printf "---------------------------------------------\n"    printf "  TOTAL:%10d %8d %8d \n", math, english, computer    printf "AVERAGE:%10.2f %8.2f %8.2f\n", math/NR, english/NR, computer/NR}</code></pre><p>我们来看一下执行结果：</p><pre><code>$ awk -f cal.awk score.txtNAME    NO.   MATH  ENGLISH  COMPUTER   TOTAL---------------------------------------------Marry  2143     78       84       77      239Jack   2321     66       78       45      189Tom    2122     48       77       71      196Mike   2537     87       97       95      279Bob    2415     40       57       62      159---------------------------------------------  TOTAL:       319      393      350AVERAGE:     63.80    78.60    70.00</code></pre><hr><h3 id="另外一些实例"><a href="#另外一些实例" class="headerlink" title="另外一些实例"></a>另外一些实例</h3><p>AWK的hello world程序为：</p><pre><code>BEGIN { print "Hello, world!" }</code></pre><p>计算文件大小</p><pre><code>$ ls -l *.txt | awk '{sum+=$6} END {print sum}'--------------------------------------------------666581</code></pre><p>从文件中找出长度大于80的行</p><pre><code>awk 'length&gt;80' log.txt</code></pre><p>打印九九乘法表</p><pre><code>seq 9 | sed 'H;g' | awk -v RS='' '{for(i=1;i&lt;=NF;i++)printf("%dx%d=%d%s", i, NR, i*NR, i==NR?"\n":"\t")}'</code></pre><blockquote><p>更多内容：</p><ul><li><a href="https://www.runoob.com/w3cnote/awk-work-principle.html" target="_blank" rel="noopener">AWK 工作原理</a></li><li><a href="https://www.runoob.com/w3cnote/awk-arrays.html" target="_blank" rel="noopener">AWK 数组</a></li><li><a href="https://www.runoob.com/w3cnote/awk-if-loop.html" target="_blank" rel="noopener">AWK 条件语句与循环</a></li><li><a href="https://www.runoob.com/w3cnote/awk-user-defined-functions.html" target="_blank" rel="noopener">AWK 用户自定义函数</a></li><li><a href="https://www.runoob.com/w3cnote/awk-built-in-functions.html" target="_blank" rel="noopener">AWK 内置函数</a></li><li><a href="https://www.runoob.com/w3cnote/8-awesome-awk-built-in-variables.html" target="_blank" rel="noopener">8 个有力的 Awk 内建变量</a></li><li><a href="http://www.gnu.org/software/gawk/manual/gawk.html" target="_blank" rel="noopener">AWK 官方手册</a></li></ul></blockquote><h2 id="51-read"><a href="#51-read" class="headerlink" title="51.read"></a>51.read</h2><p>​        read命令用于从标准输入读取数值。</p><p>read 内部命令被用来从标准输入读取单行数据。这个命令可以用来读取键盘输入，当使用重定向的时候，可以读取文件中的一行数据。</p><h3 id="语法-49"><a href="#语法-49" class="headerlink" title="语法"></a>语法</h3><pre><code>read [-ers] [-a aname] [-d delim] [-i text] [-n nchars] [-N nchars] [-p prompt] [-t timeout] [-u fd] [name ...]</code></pre><p><strong>参数说明:</strong></p><ul><li>-a 后跟一个变量，该变量会被认为是个数组，然后给其赋值，默认是以空格为分割符。</li><li>-d 后面跟一个标志符，其实只有其后的第一个字符有用，作为结束的标志。</li><li>-p 后面跟提示信息，即在输入前打印提示信息。</li><li>-e 在输入的时候可以使用命令补全功能。</li><li>-n 后跟一个数字，定义输入文本的长度，很实用。</li><li>-r 屏蔽\，如果没有该选项，则\作为一个转义字符，有的话 \就是个正常的字符了。</li><li>-s 安静模式，在输入字符时不再屏幕上显示，例如login时输入密码。</li><li>-t 后面跟秒数，定义输入字符的等待时间。</li><li>-u 后面跟fd，从文件描述符中读入，该文件描述符可以是exec新开启的。</li></ul><h3 id="实例-44"><a href="#实例-44" class="headerlink" title="实例"></a>实例</h3><p><strong>1、简单读取</strong></p><pre><code>#!/bin/bash#这里默认会换行  echo "输入网站名: "  #读取从键盘的输入  read website  echo "你输入的网站名是 $website"  exit 0  #退出</code></pre><p>测试结果为：</p><pre><code>输入网站名: www.runoob.com你输入的网站名是 www.runoob.com</code></pre><p><strong>2、-p 参数，允许在 read 命令行中直接指定一个提示。</strong></p><pre><code>#!/bin/bashread -p "输入网站名:" websiteecho "你输入的网站名是 $website" exit 0</code></pre><p>测试结果为：</p><pre><code>输入网站名:www.runoob.com你输入的网站名是 www.runoob.com</code></pre><p><strong>3、-t 参数指定 read 命令等待输入的秒数，当计时满时，read命令返回一个非零退出状态。</strong></p><pre><code>#!/bin/bashif read -t 5 -p "输入网站名:" websitethen    echo "你输入的网站名是 $website"else    echo "\n抱歉，你输入超时了。"fiexit 0</code></pre><p>执行程序不输入，等待 5 秒后：</p><pre><code>输入网站名:抱歉，你输入超时了</code></pre><p>4、除了输入时间计时，还可以使用 <strong>-n</strong> 参数设置 <strong>read</strong> 命令计数输入的字符。当输入的字符数目达到预定数目时，自动退出，并将输入的数据赋值给变量。</p><pre><code>#!/bin/bashread -n1 -p "Do you want to continue [Y/N]?" answercase $answer inY | y)      echo "fine ,continue";;N | n)      echo "ok,good bye";;*)     echo "error choice";;esacexit 0</code></pre><p>该例子使用了-n 选项，后接数值 1，指示 read 命令只要接受到一个字符就退出。只要按下一个字符进行回答，read 命令立即接受输入并将其传给变量，无需按回车键。</p><p>只接收 2 个输入就退出：</p><pre><code>#!/bin/bashread -n2 -p "请随便输入两个字符: " anyecho "\n您输入的两个字符是:$any"exit 0</code></pre><p>执行程序输入两个字符：</p><pre><code>请随便输入两个字符: 12您输入的两个字符是:12</code></pre><p>5、<strong>-s</strong> 选项能够使 <strong>read</strong> 命令中输入的数据不显示在命令终端上（实际上，数据是显示的，只是 <strong>read</strong> 命令将文本颜色设置成与背景相同的颜色）。输入密码常用这个选项。</p><pre><code>#!/bin/bashread  -s  -p "请输入您的密码:" passecho "\n您输入的密码是 $pass"exit 0</code></pre><p>执行程序输入密码后是不显示的：</p><pre><code>请输入您的密码:您输入的密码是 runoob</code></pre><p><strong>6.读取文件</strong></p><p>每次调用 read 命令都会读取文件中的 “一行” 文本。当文件没有可读的行时，read 命令将以非零状态退出。</p><p>通过什么样的方法将文件中的数据传给 read 呢？使用 cat 命令并通过管道将结果直接传送给包含 read 命令的 while 命令。</p><p>测试文件 test.txt 内容如下：</p><pre><code>123456runoob</code></pre><p>测试代码：</p><pre><code>#!/bin/bashcount=1    # 赋值语句，不加空格cat test.txt | while read line      # cat 命令的输出作为read命令的输入,read读到&gt;的值放在line中do   echo "Line $count:$line"   count=$[ $count + 1 ]          # 注意中括号中的空格。doneecho "finish"exit 0</code></pre><p>执行结果为：</p><pre><code>Line 1:123Line 2:456Line 3:runoobfinish</code></pre><p>使用 <strong>-e</strong> 参数，以下实例输入字符 <strong>a</strong> 后按下 <strong>Tab</strong> 键就会输出相关的文件名(该目录存在的)：</p><pre><code>$ read -e -p "输入文件名:" str 输入文件名:aa.out    a.py     a.pyc    abc.txt  输入文件名:a</code></pre><h2 id="52-updatedb"><a href="#52-updatedb" class="headerlink" title="52.updatedb"></a>52.updatedb</h2><p>​        updatedb 命令用来创建或更新 slocate/locate 命令所必需的数据库文件。</p><p>updatedb 命令的执行过程较长，因为在执行时它会遍历整个系统的目录树，并将所有的文件信息写入 slocate/locate 数据库文件中。</p><p><strong>注意：</strong>slocate 本身具有一个数据库，里面存放了系统中文件与目录的相关信息。</p><h3 id="语法-50"><a href="#语法-50" class="headerlink" title="语法"></a>语法</h3><pre><code>updatedb(选项)</code></pre><h3 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h3><ul><li><strong>-o&lt;文件&gt;</strong>：忽略默认的数据库文件，使用指定的slocate数据库文件；</li><li><strong>-U&lt;目录&gt;</strong>：更新指定目录的slocate数据库；</li><li><strong>-v</strong>：显示执行的详细过程。</li></ul><p>以下实例检测一个未存在的文件 runoob.txt：</p><pre><code># locate runoob.txt   # 检索 runoob.txt，没有任何输出，表示没有该文件# touch ./runoob.txt  # 添加文件 runoob.txt# locate runoob.txt   # 再次检索 runoob.txt，依然没有该文件# updatedb            # 更新 locate.db 数据库# locate runoob.txt   # 再次数据库检索 runoob.txt，找到该文件/root/runoob/runoob.txt</code></pre><p>使用 <strong>-U</strong> 选项可以指定要更新 slocate 数据库的目录。</p><pre><code>updatedb -U /root/runoob/</code></pre><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><ul><li><a href="https://www.runoob.com/linux/linux-command-manual.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-command-manual.html</a></li></ul><p><em>如有侵权，联系 <a href="mailto:2025685938@qq.com" target="_blank" rel="noopener">2025685938@qq.com</a> 删除</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.Linux命令（系统管理）</title>
      <link href="/posts/21236.html"/>
      <url>/posts/21236.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux命令（系统管理）"><a href="#Linux命令（系统管理）" class="headerlink" title="Linux命令（系统管理）"></a>Linux命令（系统管理）</h1><h2 id="1-adduser"><a href="#1-adduser" class="headerlink" title="1.adduser"></a>1.adduser</h2><p>​        adduser命令用于新增使用者帐号或更新预设的使用者资料。</p><p>adduser与useradd指令为同一指令（经由符号连结的符号链接）。</p><p>使用权限：系统管理员。</p><p>adduser是增加使用者。相对的，也有删除使用者的指令，userdel。<strong>语法</strong>：userdel [登录ID]</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre><code>adduser [-c comment] [-d home_dir] [-e expire_date] [-f inactive_time] [-g initial_group] [-G group [，...]] [-m [-k skeleton_dir] | -M] [-p passwd] [-s shell] [-u uid [-o]] [-n] [-r] loginid</code></pre><p>或</p><pre><code>adduser -D [-g default_group] [-b default_home] [-f default_inactive] [-e default_expire_date] [-s default_shell]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-c comment新使用者位于密码档（通常是/ etc / passwd）的注解资料</li><li>-d home_dir设置使用者的家目录为home_dir，预设值为预设的home后面加上使用者帐号loginid</li><li>-e expire_date设定此帐号的使用期限（格式为YYYY-MM-DD），预设值为永久有效</li><li>-f inactive_time范例：</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>添加一个一般用户</p><pre><code>#useradd kk //添加用户kk</code></pre><p>为添加的用户指定相应的用户组</p><pre><code>#useradd？g root kk //添加用户kk，并指定用户所在的组为root用户组</code></pre><p>创建一个系统用户</p><pre><code>#useradd？r kk //创建一个系统用户kk</code></pre><p>为新添加的用户指定的/ home目录</p><pre><code>#useradd -d / home / myf kk //新添加用户kk，其家目录为/ home / myf//当用户名KK登录主机时，系统进入的默认目录为/家/山羊myf</code></pre><h2 id="2-chfn"><a href="#2-chfn" class="headerlink" title="2.chfn"></a>2.chfn</h2><p>​        chfn命令提供使用者更改个人资讯，用于 finger and mail username</p><p>使用权限：所有使用者。</p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><pre><code>shell&gt;&gt; chfn</code></pre><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>改变finger信息</p><pre><code># chfnChanging finger information for root.Name [root]: hnlinuxOffice []: hnOffice Phone []: 888888Home Phone []: 9999999Finger information changed.</code></pre><p>改变账号真实姓名</p><pre><code># chfn -f hnunixChanging finger information for root.Finger information changed.</code></pre><h2 id="3-useradd"><a href="#3-useradd" class="headerlink" title="3.useradd"></a>3.useradd</h2><p>​        useradd命令用于建立用户帐号。</p><p>useradd可用来建立用户帐号。帐号建好之后，再用passwd设定帐号的密码．而可用userdel删除帐号。使用useradd指令所建立的帐号，实际上是保存在/etc/passwd文本文件中。</p><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><pre><code>useradd [-mMnr][-c &lt;备注&gt;][-d &lt;登入目录&gt;][-e &lt;有效期限&gt;][-f &lt;缓冲天数&gt;][-g &lt;群组&gt;][-G &lt;群组&gt;][-s &lt;shell&gt;][-u &lt;uid&gt;][用户帐号]</code></pre><p>或</p><pre><code>useradd -D [-b][-e &lt;有效期限&gt;][-f &lt;缓冲天数&gt;][-g &lt;群组&gt;][-G &lt;群组&gt;][-s &lt;shell&gt;]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-c&lt;备注&gt; 　加上备注文字。备注文字会保存在passwd的备注栏位中。</li><li>-d&lt;登入目录&gt; 　指定用户登入时的启始目录。</li><li>-D 　变更预设值．</li><li>-e&lt;有效期限&gt; 　指定帐号的有效期限。</li><li>-f&lt;缓冲天数&gt; 　指定在密码过期后多少天即关闭该帐号。</li><li>-g&lt;群组&gt; 　指定用户所属的群组。</li><li>-G&lt;群组&gt; 　指定用户所属的附加群组。</li><li>-m 　自动建立用户的登入目录。</li><li>-M 　不要自动建立用户的登入目录。</li><li>-n 　取消建立以用户名称为名的群组．</li><li>-r 　建立系统帐号。</li><li>-s<shell>　 　指定用户登入后所使用的shell。</shell></li><li>-u<uid> 　指定用户ID。</uid></li></ul><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><p>添加一般用户</p><pre><code># useradd tt</code></pre><p>为添加的用户指定相应的用户组</p><pre><code># useradd -g root tt</code></pre><p>创建一个系统用户</p><pre><code># useradd -r tt</code></pre><p>为新添加的用户指定home目录</p><pre><code># useradd -d /home/myd tt</code></pre><p>建立用户且制定ID</p><pre><code># useradd caojh -u 544</code></pre><h2 id="4-date"><a href="#4-date" class="headerlink" title="4.date"></a>4.date</h2><p>​        date命令可以用来显示或设定系统的日期与时间，在显示方面，使用者可以设定欲显示的格式，格式设定为一个加号后接数个标记，其中可用的标记列表如下：</p><p>时间方面：</p><ul><li>% : 印出 %</li><li>%n : 下一行</li><li>%t : 跳格</li><li>%H : 小时(00..23)</li><li>%I : 小时(01..12)</li><li>%k : 小时(0..23)</li><li>%l : 小时(1..12)</li><li>%M : 分钟(00..59)</li><li>%p : 显示本地 AM 或 PM</li><li>%r : 直接显示时间 (12 小时制，格式为 hh:mm:ss [AP]M)</li><li>%s : 从 1970 年 1 月 1 日 00:00:00 UTC 到目前为止的秒数</li><li>%S : 秒(00..61)</li><li>%T : 直接显示时间 (24 小时制)</li><li>%X : 相当于 %H:%M:%S</li><li>%Z : 显示时区</li></ul><p>日期方面：</p><ul><li>%a : 星期几 (Sun..Sat)</li><li>%A : 星期几 (Sunday..Saturday)</li><li>%b : 月份 (Jan..Dec)</li><li>%B : 月份 (January..December)</li><li>%c : 直接显示日期与时间</li><li>%d : 日 (01..31)</li><li>%D : 直接显示日期 (mm/dd/yy)</li><li>%h : 同 %b</li><li>%j : 一年中的第几天 (001..366)</li><li>%m : 月份 (01..12)</li><li>%U : 一年中的第几周 (00..53) (以 Sunday 为一周的第一天的情形)</li><li>%w : 一周中的第几天 (0..6)</li><li>%W : 一年中的第几周 (00..53) (以 Monday 为一周的第一天的情形)</li><li>%x : 直接显示日期 (mm/dd/yy)</li><li>%y : 年份的最后两位数字 (00.99)</li><li>%Y : 完整年份 (0000..9999)</li></ul><p>若是不以加号作为开头，则表示要设定时间，而时间格式为 MMDDhhmm[[CC]YY][.ss]，其中 MM 为月份，DD 为日，hh 为小时，mm 为分钟，CC 为年份前两位数字，YY 为年份后两位数字，ss 为秒数。</p><p>使用权限：所有使用者。</p><p>当您不希望出现无意义的 0 时(比如说 1999/03/07)，则可以在标记中插入 - 符号，比如说 date ‘+%-H:%-M:%-S’ 会把时分秒中无意义的 0 给去掉，像是原本的 08:09:04 会变为 8:9:4。另外，只有取得权限者(比如说 root)才能设定系统时间。</p><p>当您以 root 身分更改了系统时间之后，请记得以 clock -w 来将系统时间写入 CMOS 中，这样下次重新开机时系统时间才会持续抱持最新的正确值。</p><h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><pre><code>date [-u] [-d datestr] [-s datestr] [--utc] [--universal] [--date=datestr] [--set=datestr] [--help] [--version] [+FORMAT] [MMDDhhmm[[CC]YY][.ss]]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-d datestr : 显示 datestr 中所设定的时间 (非系统时间)</li><li>–help : 显示辅助讯息</li><li>-s datestr : 将系统时间设为 datestr 中所设定的时间</li><li>-u : 显示目前的格林威治时间</li><li>–version : 显示版本编号</li></ul><h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><p>显示当前时间</p><pre><code># date三 5月 12 14:08:12 CST 2010# date '+%c' 2010年05月12日 星期三 14时09分02秒# date '+%D' //显示完整的时间05/12/10# date '+%x' //显示数字日期，年份两位数表示2010年05月12日# date '+%T' //显示日期，年份用四位数表示14:09:31# date '+%X' //显示24小时的格式14时09分39秒</code></pre><p>按自己的格式输出</p><pre><code># date '+usr_time: $1:%M %P -hey'usr_time: $1:16 下午 -hey</code></pre><p>显示时间后跳行，再显示目前日期</p><pre><code>date '+%T%n%D'</code></pre><p>显示月份与日数</p><pre><code>date '+%B %d'</code></pre><p>显示日期与设定时间(12:34:56)</p><pre><code>date --date '12:34:56'</code></pre><h2 id="5-exit"><a href="#5-exit" class="headerlink" title="5.exit"></a>5.exit</h2><p>exit命令用于退出目前的shell。</p><p>执行exit可使shell以指定的状态值退出。若不设置状态值参数，则shell以预设值退出。状态值0代表执行成功，其他值代表执行失败。exit也可用在script，离开正在执行的script，回到shell。</p><h3 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h3><pre><code>exit [状态值]</code></pre><h3 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h3><p>退出终端</p><pre><code># exit</code></pre><h2 id="6-finger"><a href="#6-finger" class="headerlink" title="6.finger"></a>6.finger</h2><p>​        finger命令可以让使用者查询一些其他使用者的资料。会列出来的资料有：</p><ul><li>登录名</li><li>用户名</li><li>主目录</li><li>贝壳</li><li>登录状态</li><li>邮件状态</li><li>。计划</li><li>。项目</li><li>。向前</li></ul><p>其中.plan，.project和.forward就是使用者在他的主目录里的.plan，.project和.forward等档案里的资料。如果没有就没有.finger指令并不限定于在同一服务器上查询，也可以寻找某一个远端服务器上的使用者。只要给一个像是电子邮件地址一般的地址即可。</p><p>使用权限：所有使用者。</p><h3 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h3><pre><code>finger [options]用户[@address]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-l多行显示。</li><li>-s单行显示。这个选项显示登入名称，真实姓名，终端机名称，闲置时间，登入时间，办公室号码及电话号码。如果所查询的使用者是远端服务器的使用者，这个选项无效。</li></ul><h3 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h3><p>列出当前登录用户的相关信息</p><pre><code>＃finger -l //显示用户信息登录：root名称：root目录：/ root Shell：/ bin / bash自4月9日星期五20:17（CST）开始：0（消息关闭）自4月9日星期五20:17（CST）开始，在pts / 1 32天22小时闲置自4月9日星期五20:17（CST）开始，在pts / 3 4小时5分钟闲置（消息关闭）自5月12日星期三18:08（CST）起，从192.168.1.10开始自5月12日星期三18:35（CST）起，从192.168.1.10开始，在pts / 5闲置7分54秒自5月12日星期三14:37（CST）开始，从192.168.1.10开始闲置3小时14分钟从5月12日星期三14:53（CST）开始，在pts / 7 34分25秒闲置（消息关闭）自5月12日星期三16:53（CST）起，从192.168.1.10开始，在pts / 8空闲30分18秒邮件最后阅读Mon Mar 31 04:02 2008（CST）没有计划。</code></pre><p>显示指定用户信息</p><pre><code>＃finger -m hnlinux</code></pre><p>显示远程用户信息</p><pre><code>＃finger -m root@192.168.1.13</code></pre><p>下列指令可以查询本机管理员的资料：</p><pre><code>手指根</code></pre><p>其结果如下：</p><pre><code>登录：root名称：root目录：/ root Shell：/ bin / bash从未登录过。没有邮件。没有计划。</code></pre><h2 id="7-fwhios"><a href="#7-fwhios" class="headerlink" title="7.fwhios"></a>7.fwhios</h2><p>​        fwhios命令用于查找并显示用户信息。</p><p>本指令的功能有点类似finger指令，它会去查找并显示指定帐号的用户相关信息。不同之处在于fwhois指令是到Network Solutions的WHOIS数据库去查找，该帐号名称必须有在上面注册才能寻获，且名称没有大小写的差别。</p><h3 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h3><pre><code>fwhios [帐号名称]</code></pre><h2 id="8-sleep"><a href="#8-sleep" class="headerlink" title="8.sleep"></a>8.sleep</h2><p>​        sleep命令可以用来将目前动作延迟一段时间。</p><p>使用权限：所有使用者。</p><h3 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h3><pre><code>sleep [--help] [--version] number[smhd]</code></pre><p><strong>参数说明</strong>：</p><ul><li>–help : 显示辅助讯息</li><li>–version : 显示版本编号</li><li>number : 时间长度，后面可接 s、m、h 或 d</li><li>其中 s 为秒，m 为 分钟，h 为小时，d 为日数</li></ul><h3 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h3><p>休眠5分钟</p><pre><code># sleep 5m</code></pre><p>显示目前时间后延迟 1 分钟，之后再次显示时间</p><pre><code>date;sleep 1m;date</code></pre><h2 id="9-supend"><a href="#9-supend" class="headerlink" title="9.supend"></a>9.supend</h2><p>​        suspend命令用于暂停执行shell。</p><p>suspend为shell内建指令，可暂停目前正在执行的shell。若要恢复，则必须使用SIGCONT信息。</p><h3 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h3><pre><code>suspend [-f]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-f 　若目前执行的shell为登入的shell，则suspend预设无法暂停此shell。若要强迫暂停登入的shell，则必须使用-f参数。</li></ul><h3 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h3><p>暂停shell</p><pre><code># suspend -bash: suspend: 无法挂起一个登录 shell# suspend -f</code></pre><h2 id="10-groupdel"><a href="#10-groupdel" class="headerlink" title="10.groupdel"></a>10.groupdel</h2><p>​        groupdel命令用于删除群组。</p><p>需要从系统上删除群组时，可用groupdel(group delete)指令来完成这项工作。倘若该群组中仍包括某些用户，则必须先删除这些用户后，方能删除群组。</p><h3 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h3><pre><code>groupdel [群组名称]</code></pre><h3 id="实例-8"><a href="#实例-8" class="headerlink" title="实例"></a>实例</h3><p>删除一个群组</p><pre><code># groupdel hnuser</code></pre><h2 id="11-groupmod"><a href="#11-groupmod" class="headerlink" title="11.groupmod"></a>11.groupmod</h2><p>​         groupmod命令用于更改群组识别码或名称。</p><p>需要更改群组的识别码或名称时，可用groupmod指令来完成这项工作。</p><h3 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h3><pre><code>groupmod [-g &lt;群组识别码&gt; &lt;-o&gt;][-n &lt;新群组名称&gt;][群组名称]</code></pre><p><strong>参数</strong>：</p><ul><li>-g &lt;群组识别码&gt; 　设置欲使用的群组识别码。</li><li>-o 　重复使用群组识别码。</li><li>-n &lt;新群组名称&gt; 　设置欲使用的群组名称。</li></ul><h3 id="实例-9"><a href="#实例-9" class="headerlink" title="实例"></a>实例</h3><p>修改组名</p><pre><code>[root@runoob.com ~]# groupadd linuxso [root@runoob.com ~]# tail -1 /etc/group linuxso:x:500: [root@runoob.com ~]# tail -1 /etc/group linuxso:x:500: [root@runoob.com ~]# groupmod -n linux linuxso [root@runoob.com ~]# tail -1 /etc/group linux:x:500:</code></pre><h2 id="12-half"><a href="#12-half" class="headerlink" title="12.half"></a>12.half</h2><p>​        若系统的 runlevel 为 0 或 6 ，则halt命令关闭系统，否则以 shutdown 指令（加上 -h 参数）来取代。</p><p>使用权限：系统管理者。</p><h3 id="语法-11"><a href="#语法-11" class="headerlink" title="语法"></a>语法</h3><pre><code>halt [-n] [-w] [-d] [-f] [-i] [-p]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-n : 在关机前不做将记忆体资料写回硬盘的动作</li><li>-w : 并不会真的关机，只是把记录写到 /var/log/wtmp 档案里</li><li>-d : 不把记录写到 /var/log/wtmp 档案里（-n 这个参数包含了 -d） -f : 强迫关机，不呼叫 shutdown 这个指令</li><li>-i : 在关机之前先把所有网络相关的装置先停止</li><li>-p : 当关机的时候，顺便做关闭电源（poweroff）的动作</li></ul><h3 id="实例-10"><a href="#实例-10" class="headerlink" title="实例"></a>实例</h3><p>关闭系统</p><pre><code># halt</code></pre><p>关闭系统并关闭电源</p><pre><code># halt -p</code></pre><p>关闭系统，但不留下纪录</p><pre><code># halt -d</code></pre><h2 id="13-kill"><a href="#13-kill" class="headerlink" title="13.kill"></a>13.kill</h2><p>​        kill命令用于删除执行中的程序或工作。</p><p>kill可将指定的信息送至程序。预设的信息为SIGTERM(15)，可将指定程序终止。若仍无法终止该程序，可使用SIGKILL(9)信息尝试强制删除程序。程序或工作的编号可利用ps指令或jobs指令查看。</p><h3 id="语法-12"><a href="#语法-12" class="headerlink" title="语法"></a>语法</h3><pre><code>kill [-s &lt;信息名称或编号&gt;][程序]　或　kill [-l &lt;信息编号&gt;]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-l &lt;信息编号&gt; 　若不加&lt;信息编号&gt;选项，则-l参数会列出全部的信息名称。</li><li>-s &lt;信息名称或编号&gt; 　指定要送出的信息。</li><li>[程序] 　[程序]可以是程序的PID或是PGID，也可以是工作编号。</li></ul><h3 id="实例-11"><a href="#实例-11" class="headerlink" title="实例"></a>实例</h3><p>杀死进程</p><pre><code># kill 12345</code></pre><p>强制杀死进程</p><pre><code># kill -KILL 123456</code></pre><p>发送SIGHUP信号，可以使用一下信号</p><pre><code># kill -HUP pid</code></pre><p>彻底杀死进程</p><pre><code># kill -9 123456</code></pre><p>显示信号</p><pre><code># kill -l1) SIGHUP     2) SIGINT     3) SIGQUIT     4) SIGILL     5) SIGTRAP6) SIGABRT     7) SIGBUS     8) SIGFPE     9) SIGKILL    10) SIGUSR111) SIGSEGV    12) SIGUSR2    13) SIGPIPE    14) SIGALRM    15) SIGTERM16) SIGSTKFLT    17) SIGCHLD    18) SIGCONT    19) SIGSTOP    20) SIGTSTP21) SIGTTIN    22) SIGTTOU    23) SIGURG    24) SIGXCPU    25) SIGXFSZ26) SIGVTALRM    27) SIGPROF    28) SIGWINCH    29) SIGIO    30) SIGPWR31) SIGSYS    34) SIGRTMIN    35) SIGRTMIN+1    36) SIGRTMIN+2    37) SIGRTMIN+338) SIGRTMIN+4    39) SIGRTMIN+5    40) SIGRTMIN+6    41) SIGRTMIN+7    42) SIGRTMIN+843) SIGRTMIN+9    44) SIGRTMIN+10    45) SIGRTMIN+11    46) SIGRTMIN+12    47) SIGRTMIN+1348) SIGRTMIN+14    49) SIGRTMIN+15    50) SIGRTMAX-14    51) SIGRTMAX-13    52) SIGRTMAX-1253) SIGRTMAX-11    54) SIGRTMAX-10    55) SIGRTMAX-9    56) SIGRTMAX-8    57) SIGRTMAX-758) SIGRTMAX-6    59) SIGRTMAX-5    60) SIGRTMAX-4    61) SIGRTMAX-3    62) SIGRTMAX-263) SIGRTMAX-1    64) SIGRTMAX</code></pre><p>杀死指定用户所有进程</p><pre><code>#kill -9 $(ps -ef | grep hnlinux) //方法一 过滤出hnlinux用户进程 #kill -u hnlinux //方法二</code></pre><h2 id="14-last"><a href="#14-last" class="headerlink" title="14.last"></a>14.last</h2><p>​         last 命令用于显示用户最近登录信息。</p><p>使用权限：所有使用者。</p><h3 id="语法-13"><a href="#语法-13" class="headerlink" title="语法"></a>语法</h3><pre><code>shell&gt;&gt; last [options]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-R 省略 hostname 的栏位</li><li>-num 展示前 num 个</li><li>username 展示 username 的登入讯息</li><li>tty 限制登入讯息包含终端机代号</li></ul><h3 id="实例-12"><a href="#实例-12" class="headerlink" title="实例"></a>实例</h3><pre><code>shell&gt;&gt; last -R -2johnney pts/1 Mon Aug 14 20:42 still logged injohnney pts/0 Mon Aug 14 19:59 still logged inwtmp begins Tue Aug 1 09:01:10 2000 ### /var/log/wtmpshell&gt;&gt; last -2 mineryminery pts/0 140.119.217.115 Mon Aug 14 18:37 - 18:40 (00:03)minery pts/0 140.119.217.115 Mon Aug 14 17:22 - 17:24 (00:02)wtmp begins Tue Aug 1 09:01:10 2000</code></pre><p>一般显示方法</p><pre><code># last</code></pre><p>简略显示，并指定显示的个数</p><pre><code># last -n 5 -Rroot   pts/4    Thu May 13 17:25  still logged in  root   pts/2    Thu May 13 17:23 - 17:25 (00:02)  root   pts/1    Thu May 13 16:46  still logged in  root   pts/7    Thu May 13 15:36  still logged in  root   pts/9    Thu May 13 15:35  still logged in  wtmp begins Thu May 13 18:55:40 2014</code></pre><p>显示最后一列显示主机IP地址</p><pre><code># last -n 5 -a -iroot   pts/4    Thu May 13 17:25  still logged in  192.168.1.10root   pts/2    Thu May 13 17:23 - 17:25 (00:02)   192.168.1.10root   pts/1    Thu May 13 16:46  still logged in  192.168.1.10root   pts/7    Thu May 13 15:36  still logged in  192.168.1.10root   pts/9    Thu May 13 15:35  still logged in  192.168.1.10wtmp begins Thu May 13 18:55:40 2014</code></pre><h2 id="15-lastb"><a href="#15-lastb" class="headerlink" title="15.lastb"></a>15.lastb</h2><p>​         lastb命令用于列出登入系统失败的用户相关信息。</p><p>单独执行lastb指令，它会读取位于/var/log目录下，名称为btmp的文件，并把该文件内容</p><p>记录的登入失败的用户名单，全部显示出来。</p><h3 id="语法-14"><a href="#语法-14" class="headerlink" title="语法"></a>语法</h3><pre><code>lastb [-adRx][-f &lt;记录文件&gt;][-n &lt;显示列数&gt;][帐号名称...][终端机编号...]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-a 　把从何处登入系统的主机名称或IP地址显示在最后一行。</li><li>-d 　将IP地址转换成主机名称。</li><li>-f&lt;记录文件&gt; 　指定记录文件。</li><li>-n&lt;显示列数&gt;或-&lt;显示列数&gt; 　设置列出名单的显示列数。</li><li>-R 　不显示登入系统的主机名称或IP地址。</li><li>-x 　显示系统关机，重新开机，以及执行等级的改变等信息。</li></ul><h3 id="实例-13"><a href="#实例-13" class="headerlink" title="实例"></a>实例</h3><p>显示登录失败的用户</p><pre><code># lastb root   tty7     :1        Thu May 13 11:26 - 11:26 (00:00)  btmp begins Thu May 13 11:26:39 2014</code></pre><h2 id="16-login"><a href="#16-login" class="headerlink" title="16.login"></a>16.login</h2><p>​        login命令用于登入系统。</p><p>login指令让用户登入系统，您亦可通过它的功能随时更换登入身份。在Slackware发行版中 ，您可在指令后面附加欲登入的用户名称，它会直接询问密码，等待用户输入。当/etc目录里含名称为nologin的文件时，系统只root帐号登入系统，其他用户一律不准登入。</p><h3 id="语法-15"><a href="#语法-15" class="headerlink" title="语法"></a>语法</h3><pre><code>login</code></pre><h3 id="实例-14"><a href="#实例-14" class="headerlink" title="实例"></a>实例</h3><p>使用新的身份登录系统</p><pre><code># login</code></pre><h2 id="17-logname"><a href="#17-logname" class="headerlink" title="17.logname"></a>17.logname</h2><p>​        logname命令用于显示用户名称。</p><p>执行logname指令，它会显示目前用户的名称。</p><h3 id="语法-16"><a href="#语法-16" class="headerlink" title="语法"></a>语法</h3><pre><code>logname [--help][--version]</code></pre><p><strong>参数</strong>：</p><ul><li>–help 　在线帮助。</li><li>–vesion 　显示版本信息。</li></ul><h3 id="实例-15"><a href="#实例-15" class="headerlink" title="实例"></a>实例</h3><p>显示登录账号的信息：</p><pre><code># logname root</code></pre><h2 id="18-logout"><a href="#18-logout" class="headerlink" title="18.logout"></a>18.logout</h2><p>​        logout命令用于退出系统。</p><p>logout指令让用户退出系统，其功能和login指令相互对应。</p><h3 id="语法-17"><a href="#语法-17" class="headerlink" title="语法"></a>语法</h3><pre><code>logout</code></pre><h3 id="实例-16"><a href="#实例-16" class="headerlink" title="实例"></a>实例</h3><p>退出系统：</p><pre><code>[root@runoob.com ~]# logout</code></pre><h2 id="19-ps"><a href="#19-ps" class="headerlink" title="19.ps"></a>19.ps</h2><p>​        ps命令用于显示当前进程 (process) 的状态。</p><h3 id="语法-18"><a href="#语法-18" class="headerlink" title="语法"></a>语法</h3><pre><code>ps [options] [--help]</code></pre><p><strong>参数</strong>：</p><ul><li>ps 的参数非常多, 在此仅列出几个常用的参数并大略介绍含义</li><li>-A 列出所有的行程</li><li>-w 显示加宽可以显示较多的资讯</li><li>-au 显示较详细的资讯</li><li>-aux 显示所有包含其他使用者的行程</li><li>au(x) 输出格式 :</li><li>USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND</li><li>USER: 行程拥有者</li><li>PID: pid</li><li>%CPU: 占用的 CPU 使用率</li><li>%MEM: 占用的记忆体使用率</li><li>VSZ: 占用的虚拟记忆体大小</li><li>RSS: 占用的记忆体大小</li><li>TTY: 终端的次要装置号码 (minor device number of tty)</li><li>STAT: 该行程的状态:</li><li>D: 无法中断的休眠状态 (通常 IO 的进程)</li><li>R: 正在执行中</li><li>S: 静止状态</li><li>T: 暂停执行</li><li>Z: 不存在但暂时无法消除</li><li>W: 没有足够的记忆体分页可分配</li><li>&lt;: 高优先序的行程</li><li>N: 低优先序的行程</li><li>L: 有记忆体分页分配并锁在记忆体内 (实时系统或捱A I/O)</li><li>START: 行程开始时间</li><li>TIME: 执行的时间</li><li>COMMAND:所执行的指令</li></ul><h3 id="实例-17"><a href="#实例-17" class="headerlink" title="实例"></a>实例</h3><pre><code># ps -A 显示进程信息PID TTY     TIME CMD  1 ?    00:00:02 init  2 ?    00:00:00 kthreadd  3 ?    00:00:00 migration/0  4 ?    00:00:00 ksoftirqd/0  5 ?    00:00:00 watchdog/0  6 ?    00:00:00 events/0  7 ?    00:00:00 cpuset  8 ?    00:00:00 khelper  9 ?    00:00:00 netns  10 ?    00:00:00 async/mgr  11 ?    00:00:00 pm  12 ?    00:00:00 sync_supers  13 ?    00:00:00 bdi-default  14 ?    00:00:00 kintegrityd/0  15 ?    00:00:02 kblockd/0  16 ?    00:00:00 kacpid  17 ?    00:00:00 kacpi_notify  18 ?    00:00:00 kacpi_hotplug  19 ?    00:00:27 ata/0……省略部分结果30749 pts/0  00:00:15 gedit30886 ?    00:01:10 qtcreator.bin30894 ?    00:00:00 qtcreator.bin 31160 ?    00:00:00 dhclient31211 ?    00:00:00 aptd31302 ?    00:00:00 sshd31374 pts/2  00:00:00 bash31396 pts/2  00:00:00 ps</code></pre><p>显示指定用户信息</p><pre><code># ps -u root //显示root进程用户信息 PID TTY     TIME CMD  1 ?    00:00:02 init  2 ?    00:00:00 kthreadd  3 ?    00:00:00 migration/0  4 ?    00:00:00 ksoftirqd/0  5 ?    00:00:00 watchdog/0  6 ?    00:00:00 events/0  7 ?    00:00:00 cpuset  8 ?    00:00:00 khelper  9 ?    00:00:00 netns  10 ?    00:00:00 async/mgr  11 ?    00:00:00 pm  12 ?    00:00:00 sync_supers  13 ?    00:00:00 bdi-default  14 ?    00:00:00 kintegrityd/0  15 ?    00:00:02 kblockd/0  16 ?    00:00:00 kacpid……省略部分结果30487 ?    00:00:06 gnome-terminal30488 ?    00:00:00 gnome-pty-helpe30489 pts/0  00:00:00 bash30670 ?    00:00:00 debconf-communi 30749 pts/0  00:00:15 gedit30886 ?    00:01:10 qtcreator.bin30894 ?    00:00:00 qtcreator.bin 31160 ?    00:00:00 dhclient31211 ?    00:00:00 aptd31302 ?    00:00:00 sshd31374 pts/2  00:00:00 bash31397 pts/2  00:00:00 ps</code></pre><p>显示所有进程信息，连同命令行</p><pre><code># ps -ef //显示所有命令，连带命令行UID    PID PPID C STIME TTY     TIME CMDroot     1   0 0 10:22 ?    00:00:02 /sbin/initroot     2   0 0 10:22 ?    00:00:00 [kthreadd]root     3   2 0 10:22 ?    00:00:00 [migration/0]root     4   2 0 10:22 ?    00:00:00 [ksoftirqd/0]root     5   2 0 10:22 ?    00:00:00 [watchdog/0]root     6   2 0 10:22 ?    /usr/lib/NetworkManager……省略部分结果root   31302 2095 0 17:42 ?    00:00:00 sshd: root@pts/2 root   31374 31302 0 17:42 pts/2  00:00:00 -bashroot   31400   1 0 17:46 ?    00:00:00 /usr/bin/python /usr/sbin/aptdroot   31407 31374 0 17:48 pts/2  00:00:00 ps -ef</code></pre><h2 id="20-nice"><a href="#20-nice" class="headerlink" title="20.nice"></a>20.nice</h2><p>​        nice命令以更改过的优先序来执行程序，如果未指定程序，则会印出目前的排程优先序，内定的 adjustment 为 10，范围为 -20（最高优先序）到 19（最低优先序）。</p><p>使用权限：所有使用者。</p><h3 id="语法-19"><a href="#语法-19" class="headerlink" title="语法"></a>语法</h3><pre><code>nice [-n adjustment] [-adjustment] [--adjustment=adjustment] [--help] [--version] [command [arg...]]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-n adjustment, -adjustment, –adjustment=adjustment 皆为将该原有优先序的增加 adjustment</li><li>–help 显示求助讯息</li><li>–version 显示版本资讯</li></ul><h3 id="实例-18"><a href="#实例-18" class="headerlink" title="实例"></a>实例</h3><p>设置程序运行时的优先级</p><pre><code># vi &amp; //后台运行[1] 15297# nice vi &amp; //设置默认优先级[2] 15298[1]+ Stopped         vi# nice -n 19 vi &amp; //设置优先级为19[3] 15299[2]+ Stopped         nice vi# nice -n -20 vi &amp; //设置优先级为 -20[4] 15300[3]+ Stopped         nice -n 19 vi# ps -l //显示进程F S  UID  PID PPID C PRI NI ADDR SZ WCHAN TTY     TIME CMD4 S   0 15278 15212 0 80  0 - 1208 wait  pts/2  00:00:00 bash0 T   0 15297 15278 0 80  0 - 2687 signal pts/2  00:00:00 vi0 T   0 15298 15278 0 90 10 - 2687 signal pts/2  00:00:00 vi0 T   0 15299 15278 1 99 19 - 2687 signal pts/2  00:00:00 vi4 T   0 15300 15278 3 60 -20 - 2687 signal pts/2  00:00:00 vi4 R   0 15301 15278 0 80  0 -  625 -   pts/2  00:00:00 ps[4]+ Stopped         nice -n -20 vi</code></pre><p>将 ls 的优先序加 1 并执行</p><pre><code>nice -n 1 ls</code></pre><p>将 ls 的优先序加 10 并执行</p><pre><code>nice ls</code></pre><p><strong>注意：</strong>优先序 (priority) 为操作系统用来决定 CPU 分配的参数，Linux 使用『回合制(round-robin)』的演算法来做 CPU 排程，优先序越高，所可能获得的 CPU时间就越多。</p><h2 id="21-procinfo"><a href="#21-procinfo" class="headerlink" title="21.procinfo"></a>21.procinfo</h2><p>procinfo命令用于显示系统状态。</p><p>procinfo(process information)指令从/proc目录里读取相关数据，将数据妥善整理过后输出到标准输出设备。</p><h3 id="语法-20"><a href="#语法-20" class="headerlink" title="语法"></a>语法</h3><pre><code>procinfo [-abdDfhimsSv][-F &lt;输出文件&gt;][-n &lt;间隔秒数&gt;]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-a 　显示所有信息。</li><li>-b 　显示磁盘设备的区块数目，而非存取数目。</li><li>-d 　显示系统信息每秒间的变化差额，而非总和的数值。本参数必须配合”-f”参数使用</li><li>-D 　此参数效果和指定”-d”参数类似，但内存和交换文件的信息为总和数值。</li><li>-f 　进入全画面的互动式操作界面。</li><li>-F&lt;输出文件&gt; 　把信息状态输出到文件保存起来，而非预设的标准输出设备。</li><li>-h 　在线帮助。</li><li>-i 　显示完整的IRP列表。</li><li>-m 　显示系统模块和外围设备等相关信息。</li><li>-n&lt;间隔秒数&gt; 　设置全画面互动模式的信息更新速度，单位以秒计算。</li><li>-s 　显示系统的内存，磁盘空间，IRP和DMA等信息，此为预设值。</li><li>-S 　搭配参数”-d”或”-D”使用时，每秒都会更新信息，不论是否有使用参数”-n”。</li><li>-v 　显示版本信息。</li></ul><h3 id="实例-19"><a href="#实例-19" class="headerlink" title="实例"></a>实例</h3><p>显示系统状态</p><pre><code># procinfo</code></pre><h2 id="22-top"><a href="#22-top" class="headerlink" title="22.top"></a>22.top</h2><p>​         top命令用于实时显示 process 的动态。</p><p>使用权限：所有使用者。</p><h3 id="语法-21"><a href="#语法-21" class="headerlink" title="语法"></a>语法</h3><pre><code>top [-] [d delay] [q] [c] [S] [s] [i] [n] [b]</code></pre><p><strong>参数说明</strong>：</p><ul><li>d : 改变显示的更新速度，或是在交谈式指令列( interactive command)按 s</li><li>q : 没有任何延迟的显示速度，如果使用者是有 superuser 的权限，则 top 将会以最高的优先序执行</li><li>c : 切换显示模式，共有两种模式，一是只显示执行档的名称，另一种是显示完整的路径与名称S : 累积模式，会将己完成或消失的子行程 ( dead child process ) 的 CPU time 累积起来</li><li>s : 安全模式，将交谈式指令取消, 避免潜在的危机</li><li>i : 不显示任何闲置 (idle) 或无用 (zombie) 的行程</li><li>n : 更新的次数，完成后将会退出 top</li><li>b : 批次档模式，搭配 “n” 参数一起使用，可以用来将 top 的结果输出到档案内</li></ul><h3 id="实例-20"><a href="#实例-20" class="headerlink" title="实例"></a>实例</h3><p>显示进程信息</p><pre><code># top</code></pre><p>显示完整命令</p><pre><code># top -c</code></pre><p>以批处理模式显示程序信息</p><pre><code># top -b</code></pre><p>以累积模式显示程序信息</p><pre><code># top -S</code></pre><p>设置信息更新次数</p><pre><code>top -n 2//表示更新两次后终止更新显示</code></pre><p>设置信息更新时间</p><pre><code># top -d 3//表示更新周期为3秒</code></pre><p>显示指定的进程信息</p><pre><code># top -p 139//显示进程号为139的进程信息，CPU、内存占用率等</code></pre><p>显示更新十次后退出</p><pre><code>top -n 10</code></pre><p>使用者将不能利用交谈式指令来对行程下命令</p><pre><code>top -s</code></pre><h2 id="23-pstree"><a href="#23-pstree" class="headerlink" title="23.pstree"></a>23.pstree</h2><p>​        pstree命令将所有行程以树状图显示，树状图将会以 pid (如果有指定) 或是以 init 这个基本行程为根 (root)，如果有指定使用者 id，则树状图会只显示该使用者所拥有的行程。</p><p>使用权限：所有使用者。</p><h3 id="语法-22"><a href="#语法-22" class="headerlink" title="语法"></a>语法</h3><pre><code>pstree [-a] [-c] [-h|-Hpid] [-l] [-n] [-p] [-u] [-G|-U] [pid|user]</code></pre><p>或</p><pre><code>pstree -V</code></pre><p><strong>参数说明</strong>：</p><ul><li>-a 显示该行程的完整指令及参数, 如果是被记忆体置换出去的行程则会加上括号</li><li>-c 如果有重覆的行程名, 则分开列出（预设值是会在前面加上 *）</li></ul><h3 id="实例-21"><a href="#实例-21" class="headerlink" title="实例"></a>实例</h3><p>显示进程的关系</p><pre><code>pstreeinit-+-amd|-apmd|-atd|-httpd---10*[httpd]%pstree -pinit(1)-+-amd(447)|-apmd(105)|-atd(339)%pstree -cinit-+-amd|-apmd|-atd|-httpd-+-httpd| |-httpd| |-httpd| |-httpd....</code></pre><p>特别表明在运行的进程</p><pre><code># pstree -apnh //显示进程间的关系</code></pre><p>同时显示用户名称</p><pre><code># pstree -u //显示用户名称</code></pre><h2 id="24-reboot"><a href="#24-reboot" class="headerlink" title="24.reboot"></a>24.reboot</h2><p>​        reboot命令用于用来重新启动计算机。</p><p>若系统的 runlevel 为 0 或 6 ，则重新开机，否则以 shutdown 指令（加上 -r 参数）来取代</p><h3 id="语法-23"><a href="#语法-23" class="headerlink" title="语法"></a>语法</h3><pre><code>reboot [-n] [-w] [-d] [-f] [-i]</code></pre><p><strong>参数</strong>：</p><ul><li>-n : 在重开机前不做将记忆体资料写回硬盘的动作</li><li>-w : 并不会真的重开机，只是把记录写到 /var/log/wtmp 档案里</li><li>-d : 不把记录写到 /var/log/wtmp 档案里（-n 这个参数包含了 -d）</li><li>-f : 强迫重开机，不呼叫 shutdown 这个指令</li><li>-i : 在重开机之前先把所有网络相关的装置先停止</li></ul><h3 id="实例-22"><a href="#实例-22" class="headerlink" title="实例"></a>实例</h3><p>重新启动</p><pre><code># reboot</code></pre><h2 id="25-rlogin"><a href="#25-rlogin" class="headerlink" title="25.rlogin"></a>25.rlogin</h2><p>​        rlogin命令用于远端登入。</p><p>执行rlogin指令开启终端机阶段操作，并登入远端主机。</p><h3 id="语法-24"><a href="#语法-24" class="headerlink" title="语法"></a>语法</h3><pre><code>rlogin [-8EL][-e &lt;脱离字符&gt;][-l &lt;用户名称&gt;][主机名称或IP地址]</code></pre><p><strong>必要参数</strong>：</p><ul><li>-E 忽略escape字符</li><li>-8 只识别8位字的字符</li><li>-L 允许rlogin会话运行在litout模式</li><li>-ec 设置escape字符为c</li><li>-c 断开连接前要求确认</li><li>-a 强制要求远程主机在发送完一个空的本地用户名之后请求一个密码</li><li>-f 向远端主机发送一个本地认证</li><li>-F 向远程主机发送一个可转寄的本地认证</li><li>-7 强制执行7为的传输</li><li>-d 打开用于远端主机通信的TCP套接口的调试</li><li>-k 要求包含远端主机的tisckets</li><li>-x 启动数据传输的DES加密</li><li>-4 只使用 kerkberos的版本4的认证</li></ul><p><strong>选择参数</strong>：</p><p>-e&lt;字符&gt; 设置退出字符</p><p>-l&lt;用户&gt; 指定登陆的用户</p><p>-t&lt;终端类型&gt; 设置终端类型</p><h3 id="实例-23"><a href="#实例-23" class="headerlink" title="实例"></a>实例</h3><p>显示rlogin服务是否开启</p><pre><code># chkconfig --list //检测rlogin服务是否开启</code></pre><p>开启rlogin服务</p><pre><code># chkconfig rlogin on //开启rlogin服务</code></pre><p>登陆远程主机</p><pre><code># rlogin 192.168.1.88Password：Password：Login incorrectLogin:rootPasswd:Login incorrectLogin:kkPasswd:</code></pre><p>指定用户名登陆远程主机</p><pre><code># rlogin 192.168.1.88 -l hnlinuxPassord:Last login：Mon May 28 15：30:25 from 192.168.1.88# </code></pre><h2 id="26-rsh"><a href="#26-rsh" class="headerlink" title="26.rsh"></a>26.rsh</h2><p>​         rsh命令用于远端登入的Shell。</p><p>rsh(remote shell)提供用户环境，也就是Shell，以便指令能够在指定的远端主机上执行。</p><h3 id="语法-25"><a href="#语法-25" class="headerlink" title="语法"></a>语法</h3><pre><code>rsh [-dn][-l &lt;用户名称&gt;][主机名称或IP地址][执行指令]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-d 　使用Socket层级的排错功能。</li><li>-l&lt;用户名称&gt; 　指定要登入远端主机的用户名称。</li><li>-n 　把输入的指令号向代号为/dev/null的特殊外围设备。</li></ul><h3 id="实例-24"><a href="#实例-24" class="headerlink" title="实例"></a>实例</h3><p>开启rsh服务</p><pre><code># chkconfig --list //检测rlogin服务是否开启# chkconfig rsh on //开启rsh服务# chkconfig -list //检测开启的服务</code></pre><p>远程命令执行</p><pre><code># rsh -l hnlinux 192.168.1.88 /bin/ls //远程执行ls命令</code></pre><h2 id="27-sliplogin"><a href="#27-sliplogin" class="headerlink" title="27.sliplogin"></a>27.sliplogin</h2><p>​        sliplogin命令用于将SLIP接口加入标准输入。</p><p>sliplogin可将SLIP接口加入标准输入，把一般终端机的连线变成SLIP连线。通常可用来建立SLIP服务器，让远端电脑以SLIP连线到服务器。sliplogin活去检查/etc/slip/slip.hosts文件中是否有相同的用户名称。通过检查后，sliplogin会调用执行shell script来设置IP地址，子网掩码等网络界面环境。此shell script通常是/etc/slip/slip.login。</p><h3 id="语法-26"><a href="#语法-26" class="headerlink" title="语法"></a>语法</h3><pre><code>sliplogin [用户名称]</code></pre><h3 id="实例-25"><a href="#实例-25" class="headerlink" title="实例"></a>实例</h3><p>改变用户的连接方式</p><pre><code># sliplogin kk // 改变用户的连接方式</code></pre><h2 id="28-screen"><a href="#28-screen" class="headerlink" title="28.screen"></a>28.screen</h2><p>​        screen命令用于多重视窗管理程序。</p><p>screen为多重视窗管理程序。此处所谓的视窗，是指一个全屏幕的文字模式画面。通常只有在使用telnet登入主机或是使用老式的终端机时，才有可能用到screen程序。</p><h3 id="语法-27"><a href="#语法-27" class="headerlink" title="语法"></a>语法</h3><pre><code>screen [-AmRvx -ls -wipe][-d &lt;作业名称&gt;][-h &lt;行数&gt;][-r &lt;作业名称&gt;][-s &lt;shell&gt;][-S &lt;作业名称&gt;]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-A 　将所有的视窗都调整为目前终端机的大小。</li><li>-d&lt;作业名称&gt; 　将指定的screen作业离线。</li><li>-h&lt;行数&gt; 　指定视窗的缓冲区行数。</li><li>-m 　即使目前已在作业中的screen作业，仍强制建立新的screen作业。</li><li>-r&lt;作业名称&gt; 　恢复离线的screen作业。</li><li>-R 　先试图恢复离线的作业。若找不到离线的作业，即建立新的screen作业。</li><li>-s<shell> 　指定建立新视窗时，所要执行的shell。</shell></li><li>-S&lt;作业名称&gt; 　指定screen作业的名称。</li><li>-v 　显示版本信息。</li><li>-x 　恢复之前离线的screen作业。</li><li>-ls或–list 　显示目前所有的screen作业。</li><li>-wipe 　检查目前所有的screen作业，并删除已经无法使用的screen作业。</li></ul><h3 id="实例-26"><a href="#实例-26" class="headerlink" title="实例"></a>实例</h3><p>创建 screen 终端</p><pre><code># screen //创建 screen 终端</code></pre><p>创建 screen 终端 并执行任务</p><pre><code># screen vi ~/main.c //创建 screen 终端 ，并执行 vi命令</code></pre><p>离开 screen 终端</p><pre><code># screen vi ~/main.c //创建 screen 终端 ，并执行 vi命令#include main (){}"~/mail.c"       0,0-1    在 screen 终端 下 按下 Ctrl+a d键</code></pre><p>重新连接离开的 screen 终端</p><pre><code># screen -ls  //显示已创建的screen终端 There are screens on:2433.pts-3.linux    (2013年10月20日 16时48分59秒)    (Detached)2428.pts-3.linux    (2013年10月20日 16时48分05秒)    (Detached)2284.pts-3.linux    (2013年10月20日 16时14分55秒)    (Detached)2276.pts-3.linux    (2013年10月20日 16时13分18秒)    (Detached)4 Sockets in /var/run/screen/S-root.# screen -r 2276 //连接 screen_id 为 2276 的 screen终端</code></pre><h2 id="29-shutdown"><a href="#29-shutdown" class="headerlink" title="29.shutdown"></a>29.shutdown</h2><p>​        shutdown命令可以用来进行关机程序，并且在关机以前传送讯息给所有使用者正在执行的程序，shutdown 也可以用来重开机。</p><p>使用权限：系统管理者。</p><h3 id="语法-28"><a href="#语法-28" class="headerlink" title="语法"></a>语法</h3><pre><code>shutdown [-t seconds] [-rkhncfF] time [message]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-t seconds : 设定在几秒钟之后进行关机程序。</li><li>-k : 并不会真的关机，只是将警告讯息传送给所有使用者。</li><li>-r : 关机后重新开机。</li><li>-h : 关机后停机。</li><li>-n : 不采用正常程序来关机，用强迫的方式杀掉所有执行中的程序后自行关机。</li><li>-c : 取消目前已经进行中的关机动作。</li><li>-f : 关机时，不做 fcsk 动作(检查 Linux 档系统)。</li><li>-F : 关机时，强迫进行 fsck 动作。</li><li>time : 设定关机的时间。</li><li>message : 传送给所有使用者的警告讯息。</li></ul><h3 id="实例-27"><a href="#实例-27" class="headerlink" title="实例"></a>实例</h3><p>立即关机</p><pre><code># shutdown -h now</code></pre><p>指定5分钟后关机</p><pre><code># shutdown +5 “System will shutdown after 5 minutes” //5分钟够关机并显示警告信息</code></pre><h2 id="30-rwho"><a href="#30-rwho" class="headerlink" title="30.rwho"></a>30.rwho</h2><p>​        rwho命令用于查看系统用户。</p><p>rwho指令的效果类似who指令，但它会显示局域网里所有主机的用户。主机必须提供rwhod常驻服务的功能，方可使用rwho指令。</p><h3 id="语法-29"><a href="#语法-29" class="headerlink" title="语法"></a>语法</h3><pre><code>rwho [-a]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-a 　列出所有的用户，包括闲置时间超过1个小时以上的用户。</li></ul><h3 id="实例-28"><a href="#实例-28" class="headerlink" title="实例"></a>实例</h3><p>显示本地局域网内的所有用户</p><pre><code># rwhoroot   snail-hnlinux:pts/2 May 14 17:42</code></pre><h2 id="31-sudo"><a href="#31-sudo" class="headerlink" title="31.sudo"></a>31.sudo</h2><p>​        sudo命令以系统管理者的身份执行指令，也就是说，经由sudo所执行的指令就好像是root亲自执行。</p><p>使用权限：在/ etc / sudoers中有出现的使用者。</p><h3 id="语法-30"><a href="#语法-30" class="headerlink" title="语法"></a>语法</h3><pre><code>sudo -Vsudo -hsudo -lsudo -vsudo -ksudo -ssudo -Hsudo [-b] [-p prompt] [-u username / #uid] -ssudo命令</code></pre><p><strong>参数说明</strong>：</p><ul><li>-V显示版本编号</li><li>-h会显示版本编号及指令的使用方式说明</li><li>-l显示出自己（执行sudo的使用者）的权限</li><li>-v因为sudo在第一次执行时或是在N分钟内没有执行（N预设为五）会问密码，这个参数是重新做一次确认，如果超过N分钟，也会问密码</li><li>-k将会强迫使用者在下一次执行sudo时问密码（不论有没有超过N分钟）</li><li>-b将要执行的指令放在背景执行</li><li>-p prompt可以更改问密码的提示语，其中％u会代换为使用者的帐号名称，％h会显示主机名称</li><li>-u username /＃uid不加此参数，代表要以root的身份执行指令，而加了此参数，可以以username的身份执行指令（#uid为该用户名的使用者号码）</li><li>-s执行环境变数中的SHELL所指定的shell，或是/ etc / passwd里所指定的shell</li><li>-H将环境变数中的HOME（家目录）指定为要变更身份的使用者家目录（如不加-u参数就是系统管理者root）</li><li>command要以系统管理者身份（或以-u更改为其他人）执行的指令</li></ul><h3 id="实例-29"><a href="#实例-29" class="headerlink" title="实例"></a>实例</h3><p>sudo的命令使用</p><pre><code>$ sudo lshnlinux的[sudo]密码： hnlinux不在sudoers文件中。将报告此事件。</code></pre><p>指定用户执行命令</p><pre><code>#sudo -u userb ls -l</code></pre><p>显示须藤设置</p><pre><code>$ sudo -L //显示sudo设置sudoers“默认值”行中的可用选项：syslog：如果syslog用于记录，则为Syslog工具syslog_goodpri：用户成功进行身份验证时使用的Syslog优先级syslog_badpri：用户进行身份验证失败时使用的Syslog优先级long_otp_prompt：将OTP提示放在自己的行上ignore_dot：忽略'。' 在$ PATHmail_always：在运行sudo时始终发送邮件mail_badpass：如果用户身份验证失败，则发送邮件mail_no_user：如果用户不在sudoers中，则发送邮件mail_no_host：如果用户不在此主机的sudoers中，则发送邮件mail_no_perms：如果不允许用户运行命令，则发送邮件tty_tickets：为每个user / tty组合使用单独的时间戳讲座：他们第一次运行sudo时讲授用户lecture_file：包含sudo讲座的文件authenticate：默认情况下要求用户进行身份验证root_sudo：root可以运行sudolog_host：在（非syslog）日志文件中记录主机名log_year：在（非syslog）日志文件中记录年份shell_noargs：如果没有参数调用sudo，则启动shellset_home：使用-s启动shell时，将$ HOME设置为目标用户always_set_home：始终将$ HOME设置为目标用户的主目录path_info：允许收集一些信息以提供有用的错误消息fqdn：要求sudoers文件中的完全限定主机名侮辱：用户输入错误密码时会侮辱他们requiretty：只允许用户运行sudo，如果他们有ttyenv_editor：Visudo将尊重EDITOR环境变量rootpw：提示root的密码，而不是用户的密码runaspw：提示runas_default用户的密码，而不是用户的密码targetpw：提示目标用户的密码，而不是用户的密码use_loginclass：在目标用户的登录类中应用默认值（如果有）set_logname：设置LOGNAME和USER环境变量stay_setuid：仅将有效uid设置为目标用户，而不是真实的uidpreserve_groups：不要将组向量初始化为目标用户的向量loglinelen：包装日志文件行的长度（0表示没有换行）timestamp_timeout：身份验证时间戳超时passwd_timeout：密码提示超时passwd_tries：输入密码的尝试次数umask：使用Umask或0777使用用户logfile：日志文件的路径邮件路径：邮件程序的路径mailerflags：邮件程序的标志mailto：发送邮件的地址mailfrom：发送邮件的地址mailsub：邮件消息的主题行badpass_message：密码错误消息不正确timestampdir：身份验证时间戳目录的路径timestampowner：身份验证时间戳目录的所有者exempt_group：该组中的用户免于密码和PATH要求passprompt：默认密码提示passprompt_override：如果设置，passprompt将在所有情况下覆盖系统提示。runas_default：运行命令的默认用户secure_path：用于覆盖用户的$ PATH的值编辑器：visudo使用的编辑器的路径listpw：何时需要“list”伪命令的密码verifypw：何时需要密码“verify”伪命令noexec：预加载'noexec_file'中包含的虚拟exec函数noexec_file：包含虚拟exec函数的文件ignore_local_sudoers：如果LDAP目录已启动，我们是否忽略本地sudoers文件closefrom：文件描述符&gt; =％d将在执行命令之前关闭closefrom_override：如果设置，用户可以使用-C选项覆盖`closefrom'的值setenv：允许用户设置任意环境变量env_reset：将环境重置为一组默认变量env_check：用于检查健全性的环境变量env_delete：要删除的环境变量env_keep：要保留的环境变量role：SELinux在新安全上下文中使用的角色type：要在新安全上下文中使用的SELinux类型askpass：askpass帮助程序的路径env_file：特定于sudo的环境文件的路径sudoers_locale：解析sudoers时使用的语言环境visiblepw：允许sudo提示输入密码即使它是可见的pwfeedback：当有用户输入时，在密码提示处提供视觉反馈fast_glob：使用速度较慢的globbing，但不能访问文件系统umask_override：sudoers中指定的umask将覆盖用户，即使它更宽松</code></pre><p>以根权限执行上一条命令</p><pre><code>$ sudo !!</code></pre><p>以特定用户身份进行编辑文本</p><pre><code>$ sudo -u uggc vi~www / index.html//以uggc用户身份编辑home目录下www目录中的index.html文件</code></pre><p>列出目前的权限</p><pre><code>sudo -l</code></pre><p>列出sudo的版本信息</p><pre><code>sudo -V</code></pre><h2 id="32-gitps"><a href="#32-gitps" class="headerlink" title="32.gitps"></a>32.gitps</h2><p>​        gitps命令用于报告程序状况。</p><p>gitps(gnu interactive tools process status)是用来报告并管理程序执行的指令，基本上它就是通过ps指令来报告，管理程序，也能通过gitps指令随时中断，删除不必要的程序。因为gitps指令会去执行ps指令，所以其参数和ps指令相当类似。</p><h3 id="语法-31"><a href="#语法-31" class="headerlink" title="语法"></a>语法</h3><pre><code>gitps [acefgjlnrsSTuvwxX][p &lt;程序识别码&gt;][t &lt;终端机编号&gt;][U &lt;帐号名称&gt;]</code></pre><p><strong>参数说明</strong>：</p><ul><li>a 　显示　现行终端机下的所有程序，包括其他用户的程序。</li><li>c 　列出程序时，显示每个程序真正的指令名称，而不包含路径，参数或是常驻服务的标示．</li><li>e 　列出程序时，显示每个程序所使用的环境变量。</li><li>f 　用ASCII字符显示树状结构，表达程序间的相互关系。</li><li>g 　显示现行终端机下的所有程序，包括群组领导者的程序。</li><li>j 　采用工作控制的格式来显示程序状况。</li><li>l 　采用纤细的格式来显示程序状况。</li><li>n 　以数字来表示USER和WCHAN栏位。</li><li>p&lt;程序识别码&gt; 　指定程序识别码，并列出该程序的状况。</li><li>r 　只列出现行终端机正在执行中的程序。</li><li>s 　采用程序信号的格式显示程序状况。</li><li>S 　列出程序时，包括已中断的子程序信息。</li><li>t&lt;终端机机标号&gt; 　指定终端机编号，并列出属于该终端机的程序的状况。</li><li>T 　显示现行终端机下的所有程序。</li><li>u 　以用户为主的格式来显示程序状况。</li><li>U&lt;帐号名称&gt; 　列出属于该用户的程序的状况。</li><li>v 　采用虚拟内存的格式显示程序状况。</li><li>w 　采用宽阔的格式来显示程序状况。</li><li>x 　显示所有程序，不以终端机来区分。</li><li>X 　采用旧试的Linux i386登陆格式显示程序状况。</li></ul><h3 id="实例-30"><a href="#实例-30" class="headerlink" title="实例"></a>实例</h3><p>显示指定用户信息</p><pre><code># gitps hnlinux</code></pre><h2 id="33-swatch"><a href="#33-swatch" class="headerlink" title="33.swatch"></a>33.swatch</h2><p>​        swatch命令用于系统监控程序。</p><p>swatch可用来监控系统记录文件，并在发现特定的事件时，执行指定的动作。swatch所监控的事件以及对应事件的动作都存放在swatch的配置文件中。预设的配置文件为拥护根目录下的.swatchrc。然而在Red Hat Linux的预设用户根目录下并没有.swatchrc配置文件，您可将/usr/doc/swatch-2.2/config_files/swatchrc.personal文件复制到用户根目录下的.swatchrc，然后修改.swatchrc所要监控的事件及执行的动作。</p><h3 id="语法-32"><a href="#语法-32" class="headerlink" title="语法"></a>语法</h3><pre><code>swatch [-A &lt;分隔字符&gt;][-c &lt;设置文件&gt;][-f &lt;记录文件&gt;][-I &lt;分隔字符&gt;][-P &lt;分隔字符&gt;][-r &lt;时间&gt;][-t &lt;记录文件&gt;]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-A&lt;分隔字符&gt; 　预设配置文件中，动作的分隔字符，预设为逗号。</li><li>-c&lt;设置文件&gt; 　指定配置文件，而不使用预设的配置文件。</li><li>-f&lt;记录文件&gt; 　检查指定的记录文件，检查完毕后不会继续监控该记录文件。</li><li>-I&lt;分隔字符&gt; 　指定输入记录的分隔字符，预设为换行字符。</li><li>-P&lt;分隔字符&gt; 　指定配置文件中，事件的分隔字符，预设为逗号。</li><li>-r&lt;时间&gt; 　在指定的时间重新启动。</li><li>-t&lt;记录文件&gt; 　检查指定的记录文件，并且会监控加入记录文件中的后继记录。</li></ul><h3 id="实例-31"><a href="#实例-31" class="headerlink" title="实例"></a>实例</h3><p>开启系统监视</p><pre><code># swatch</code></pre><h2 id="34-tload"><a href="#34-tload" class="headerlink" title="34.tload"></a>34.tload</h2><p>​         tload命令用于显示系统负载状况。</p><p>tload指令使用ASCII字符简单地以文字模式显示系统负载状态。假设不给予终端机编号，则会在执行tload指令的终端机显示负载情形。</p><h3 id="语法-33"><a href="#语法-33" class="headerlink" title="语法"></a>语法</h3><pre><code>tload [-V][-d &lt;间隔秒数&gt;][-s &lt;刻度大小&gt;][终端机编号]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-d&lt;间隔秒数&gt; 　设置tload检测系统负载的间隔时间，单位以秒计算。</li><li>-s&lt;刻度大小&gt; 　设置图表的垂直刻度大小，单位以列计算。</li><li>-V 　显示版本信息。</li></ul><h3 id="实例-32"><a href="#实例-32" class="headerlink" title="实例"></a>实例</h3><p>显示系统负载</p><pre><code># tload</code></pre><h2 id="35-logrotate"><a href="#35-logrotate" class="headerlink" title="35.logrotate"></a>35.logrotate</h2><p>​        logrotate命令用于管理记录文件。</p><p>使用logrotate指令，可让你轻松管理系统所产生的记录文件。它提供自动替换，压缩，删除和邮寄记录文件，每个记录文件都可被设置成每日，每周或每月处理，也能在文件太大时立即处理。您必须自行编辑，指定配置文件，预设的配置文件存放在/etc目录下，文件名称为logrotate.conf。</p><h3 id="语法-34"><a href="#语法-34" class="headerlink" title="语法"></a>语法</h3><pre><code>logrotate [-?dfv][-s &lt;状态文件&gt;][--usage][配置文件]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-?或–help 　在线帮助。</li><li>-d或–debug 　详细显示指令执行过程，便于排错或了解程序执行的情况。</li><li>-f或–force 　强行启动记录文件维护操作，纵使logrotate指令认为没有需要亦然。</li><li>-s&lt;状态文件&gt;或–state=&lt;状态文件&gt; 　使用指定的状态文件。</li><li>-v或–version 　显示指令执行过程。</li><li>-usage 　显示指令基本用法。</li></ul><h3 id="实例-33"><a href="#实例-33" class="headerlink" title="实例"></a>实例</h3><p>指定记录文件</p><pre><code># logrotate /root/log.config</code></pre><h2 id="36-uname"><a href="#36-uname" class="headerlink" title="36.uname"></a>36.uname</h2><p>​        uname命令用于显示系统信息。</p><p>uname可显示电脑以及操作系统的相关信息。</p><h3 id="语法-35"><a href="#语法-35" class="headerlink" title="语法"></a>语法</h3><pre><code>uname [-amnrsv][--help][--version]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-a或–all 　显示全部的信息。</li><li>-m或–machine 　显示电脑类型。</li><li>-n或-nodename 　显示在网络上的主机名称。</li><li>-r或–release 　显示操作系统的发行编号。</li><li>-s或–sysname 　显示操作系统名称。</li><li>-v 　显示操作系统的版本。</li><li>–help 　显示帮助。</li><li>–version 　显示版本信息。</li></ul><h3 id="实例-34"><a href="#实例-34" class="headerlink" title="实例"></a>实例</h3><p>显示系统信息</p><pre><code># uname -aLinux snail-hnlinux 2.6.32-21-generic #32-Ubuntu SMP Fri Apr 16 08:10:02 UTC 2010 i686 GNU/Linux</code></pre><p>显示计算机类型</p><pre><code># uname -mi686</code></pre><p>显示计算机名</p><pre><code># uname -nsnail-hnlinux</code></pre><p>显示操作系统发行编号</p><pre><code># uname -r2.6.32-21-generic</code></pre><p>显示操作系统名称</p><pre><code># uname -sLinux</code></pre><p>显示系统时间</p><pre><code># uname -v#32-Ubuntu SMP Fri Apr 16 08:10:02 UTC 2014</code></pre><h2 id="37-chsh"><a href="#37-chsh" class="headerlink" title="37.chsh"></a>37.chsh</h2><p>​        chsh命令用于更改使用者 shell 设定。</p><p>使用权限：所有使用者。</p><h3 id="语法-36"><a href="#语法-36" class="headerlink" title="语法"></a>语法</h3><pre><code>shell&gt;&gt; chsh</code></pre><h3 id="实例-35"><a href="#实例-35" class="headerlink" title="实例"></a>实例</h3><pre><code>shell&gt;&gt; chshChanging fihanging shell for user1Password: [del]New shell [/bin/tcsh]: ### [是目前使用的 shell][del]shell&gt;&gt; chsh -l ### 展示 /etc/shells 档案内容/bin/bash/bin/sh/bin/ash/bin/bsh/bin/tcsh/bin/csh</code></pre><p>改变当前的shell。当前的shell 设置为//bin/bash，通过chsh命令，改变shell的设置/bin/csh。</p><pre><code># chshChanging shell for root.New shell [/bin/bash]: /bin/csh //输入新的shell地址Shell changed.</code></pre><p>通过 -s 参数改变当前的shell设置</p><pre><code># chsh -s /bin/csh //改变当前设置为 /bin/cshChanging shell for root.Shell not changed.</code></pre><h2 id="38-userconf"><a href="#38-userconf" class="headerlink" title="38.userconf"></a>38.userconf</h2><p>​        userconf命令用于用户帐号设置程序。</p><p>userconf实际上为linuxconf的符号连接，提供图形界面的操作方式，供管理员建立与管理各类帐号。若不加任何参数，即进入图形界面。</p><h3 id="语法-37"><a href="#语法-37" class="headerlink" title="语法"></a>语法</h3><pre><code>userconf [--addgroup &lt;群组&gt;][--adduser &lt;用户ID&gt;&lt;群组&gt;&lt;用户名称&gt;&lt;shell&gt;][--delgroup &lt;群组&gt;][--deluser &lt;用户ID&gt;][--help]</code></pre><p><strong>参数说明</strong>：</p><ul><li>–addgroup&lt;群组&gt; 　新增群组。</li><li>–adduser&lt;用户ID&gt;&lt;群组&gt;&lt;用户名称&gt;<shell> 　新增用户帐号。</shell></li><li>–delgroup&lt;群组&gt; 　删除群组。</li><li>–deluser&lt;用户ID&gt; 　删除用户帐号。</li><li>–help 　显示帮助。</li></ul><h3 id="实例-36"><a href="#实例-36" class="headerlink" title="实例"></a>实例</h3><p>新增用户</p><pre><code># userconf --adduser 666 tt lord /bin/bash //新增用户账号</code></pre><h2 id="39-userdel"><a href="#39-userdel" class="headerlink" title="39.userdel"></a>39.userdel</h2><p>​        userdel命令用于删除用户帐号。</p><p>userdel可删除用户帐号与相关的文件。若不加参数，则仅删除用户帐号，而不删除相关文件。</p><h3 id="语法-38"><a href="#语法-38" class="headerlink" title="语法"></a>语法</h3><pre><code>userdel [-r][用户帐号]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-r 　删除用户登入目录以及目录中所有文件。</li></ul><h3 id="实例-37"><a href="#实例-37" class="headerlink" title="实例"></a>实例</h3><p>删除用户账号</p><pre><code># userdel hnlinux</code></pre><h2 id="40-usermod"><a href="#40-usermod" class="headerlink" title="40.usermod"></a>40.usermod</h2><p>​        usermod命令用于修改用户帐号。</p><p>usermod可用来修改用户帐号的各项设定。</p><h3 id="语法-39"><a href="#语法-39" class="headerlink" title="语法"></a>语法</h3><pre><code>usermod [-LU][-c &lt;备注&gt;][-d &lt;登入目录&gt;][-e &lt;有效期限&gt;][-f &lt;缓冲天数&gt;][-g &lt;群组&gt;][-G &lt;群组&gt;][-l &lt;帐号名称&gt;][-s &lt;shell&gt;][-u &lt;uid&gt;][用户帐号]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-c&lt;备注&gt; 　修改用户帐号的备注文字。</li><li>-d登入目录&gt; 　修改用户登入时的目录。</li><li>-e&lt;有效期限&gt; 　修改帐号的有效期限。</li><li>-f&lt;缓冲天数&gt; 　修改在密码过期后多少天即关闭该帐号。</li><li>-g&lt;群组&gt; 　修改用户所属的群组。</li><li>-G&lt;群组&gt; 　修改用户所属的附加群组。</li><li>-l&lt;帐号名称&gt; 　修改用户帐号名称。</li><li>-L 　锁定用户密码，使密码无效。</li><li>-s<shell> 　修改用户登入后所使用的shell。</shell></li><li>-u<uid> 　修改用户ID。</uid></li><li>-U 　解除密码锁定。</li></ul><h3 id="实例-38"><a href="#实例-38" class="headerlink" title="实例"></a>实例</h3><p>更改登录目录</p><pre><code># usermod -d /home/hnlinux root</code></pre><p>改变用户的uid</p><pre><code># usermod -u 777 root</code></pre><h2 id="41-vlock"><a href="#41-vlock" class="headerlink" title="41.vlock"></a>41.vlock</h2><p>​        vlock命令用于锁住虚拟终端。</p><p>执行vlock(virtual console lock)指令可锁住虚拟终端，避免他人使用。</p><h3 id="语法-40"><a href="#语法-40" class="headerlink" title="语法"></a>语法</h3><pre><code>vlock [-achv]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-a或–all 　锁住所有的终端阶段作业，如果您在全屏幕的终端中使用本参数，则会将用键盘</li><li>切换终端机的功能一并关闭。</li><li>-c或–current 　锁住目前的终端阶段作业，此为预设值。</li><li>-h或–help 　在线帮助。</li><li>-v或–version 　显示版本信息。</li></ul><h3 id="实例-39"><a href="#实例-39" class="headerlink" title="实例"></a>实例</h3><p>锁定虚拟终端</p><pre><code># vlock</code></pre><h2 id="42-who"><a href="#42-who" class="headerlink" title="42.who"></a>42.who</h2><p>​        who命令用于显示系统中有哪些使用者正在上面，显示的资料包含了使用者 ID、使用的终端机、从哪边连上来的、上线时间、呆滞时间、CPU 使用量、动作等等。</p><p>使用权限：所有使用者都可使用。</p><h3 id="语法-41"><a href="#语法-41" class="headerlink" title="语法"></a>语法</h3><pre><code>who - [husfV] [user]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-H 或 –heading：显示各栏位的标题信息列；</li><li>-i 或 -u 或 –idle：显示闲置时间，若该用户在前一分钟之内有进行任何动作，将标示成”.”号，如果该用户已超过24小时没有任何动作，则标示出”old”字符串；</li><li>-m：此参数的效果和指定”am i”字符串相同；</li><li>-q 或–count：只显示登入系统的帐号名称和总人数；</li><li>-s：此参数将忽略不予处理，仅负责解决who指令其他版本的兼容性问题；</li><li>-w 或-T或–mesg或–message或–writable：显示用户的信息状态栏；</li><li>–help：在线帮助；</li><li>–version：显示版本信息。</li></ul><h3 id="实例-40"><a href="#实例-40" class="headerlink" title="实例"></a>实例</h3><p>显示当前登录系统的用户</p><pre><code># who  //显示当前登录系统的用户root   tty7     2014-05-13 12:12 (:0)root   pts/0    2014-05-14 17:09 (:0.0)root   pts/1    2014-05-14 18:51 (192.168.1.17)root   pts/2    2014-05-14 19:48 (192.168.1.17)</code></pre><p>显示标题栏</p><pre><code># who -HNAME   LINE     TIME       COMMENTroot   tty7     2014-05-13 12:12 (:0)root   pts/0    2014-05-14 17:09 (:0.0)root   pts/1    2014-05-14 18:51 (192.168.1.17)root   pts/2    2014-05-14 19:48 (192.168.1.17)</code></pre><p>显示用户登录来源</p><pre><code># who -l -HNAME   LINE     TIME       IDLE     PID COMMENTLOGIN  tty4     2014-05-13 12:11        852 id=4LOGIN  tty5     2014-05-13 12:11        855 id=5LOGIN  tty2     2014-05-13 12:11        862 id=2LOGIN  tty3     2014-05-13 12:11        864 id=3LOGIN  tty6     2014-05-13 12:11        867 id=6LOGIN  tty1     2014-05-13 12:11       1021 id=1</code></pre><p>显示终端属性</p><pre><code># who -T -HNAME    LINE     TIME       COMMENTroot   + tty7     2014-05-13 12:12 (:0)root   + pts/0    2014-05-14 17:09 (:0.0)root   - pts/1    2014-05-14 18:51 (192.168.1.17)root   - pts/2    2014-05-14 19:48 (192.168.1.17)</code></pre><p>只显示当前用户</p><pre><code># who -m -HNAME   LINE     TIME       COMMENTroot   pts/1    2014-05-14 18:51 (192.168.1.17)</code></pre><p>精简模式显示</p><pre><code># who -qroot root root root# users=4</code></pre><h2 id="43-whoami"><a href="#43-whoami" class="headerlink" title="43.whoami"></a>43.whoami</h2><p>​        whoami命令用于显示自身用户名称。</p><p>显示自身的用户名称，本指令相当于执行”id -un”指令。</p><h3 id="语法-42"><a href="#语法-42" class="headerlink" title="语法"></a>语法</h3><pre><code>whoami [--help][--version]</code></pre><p><strong>参数说明</strong>：</p><ul><li>–help 　在线帮助。</li><li>–version 　显示版本信息。</li></ul><h3 id="实例-41"><a href="#实例-41" class="headerlink" title="实例"></a>实例</h3><p>显示用户名</p><pre><code># whoami root</code></pre><h2 id="44-whois"><a href="#44-whois" class="headerlink" title="44.whois"></a>44.whois</h2><p>​        whois命令用于查找并显示用户信息。</p><p>whois指令会去查找并显示指定帐号的用户相关信息，因为它是到Network Solutions的WHOIS数据库去查找，所以该帐号名称必须在上面注册方能寻获，且名称没有大小写的差别。</p><h3 id="语法-43"><a href="#语法-43" class="headerlink" title="语法"></a>语法</h3><pre><code>who [帐号名称]</code></pre><h3 id="实例-42"><a href="#实例-42" class="headerlink" title="实例"></a>实例</h3><p>显示指定用户信息</p><pre><code>#whys root//查找根用户信息</code></pre><p>查询域名描述信息</p><pre><code>#whis .Lx138.COmWhois服务器版本2.0现在可以注册.com和.net域中的域名与许多不同的竞争注册商。转到http://www.internic.net了解详细信息。...省略部分内容</code></pre><p>查询域名信息</p><pre><code>#whis Lx138.COmRegistry数据库仅包含.COM，.NET，.EDU域和登记。域名..................... Lx138.COm名称服务器..................... dns15.hichina.com                 dns16.hichina.com注册人ID ................... hc937242545-cn...省略部分内容</code></pre><p>查询域名信息省略法律声明</p><pre><code>＃whois -H Lx138.COm...省略内容</code></pre><p>指定端口查询</p><pre><code>#whis -p 80 Lx138.COm...省略内容</code></pre><h2 id="45-newgrp"><a href="#45-newgrp" class="headerlink" title="45.newgrp"></a>45.newgrp</h2><p>​        newgrp命令用于登入另一个群组。</p><p>newgrp指令类似login指令，当它是以相同的帐号，另一个群组名称，再次登入系统。欲使用newgrp指令切换群组，您必须是该群组的用户，否则将无法登入指定的群组。单一用户要同时隶属多个群组，需利用交替用户的设置。若不指定群组名称，则newgrp指令会登入该用户名称的预设群组。</p><h3 id="语法-44"><a href="#语法-44" class="headerlink" title="语法"></a>语法</h3><pre><code>newgrp [群组名称]</code></pre><h3 id="实例-43"><a href="#实例-43" class="headerlink" title="实例"></a>实例</h3><p>改变群组</p><pre><code># newgrp root</code></pre><h2 id="46-renice"><a href="#46-renice" class="headerlink" title="46.renice"></a>46.renice</h2><p>​        renice命令用于重新指定一个或多个行程（Process）的优先序（一个或多个将根据参数而定）。</p><p><strong>注意：</strong>每一个行程（Process）都有一个唯一的（unique）id。</p><p>使用权限：所有使用者。</p><h3 id="语法-45"><a href="#语法-45" class="headerlink" title="语法"></a>语法</h3><pre><code>renice priority [[-p] pid ...] [[-g] pgrp ...] [[-u] user ...]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-p pid 重新指定行程的 id 为 pid 的行程的优先序</li><li>-g pgrp 重新指定行程群组(process group)的 id 为 pgrp 的行程 (一个或多个) 的优先序</li><li>-u user 重新指定行程拥有者为 user 的行程的优先序</li></ul><h3 id="实例-44"><a href="#实例-44" class="headerlink" title="实例"></a>实例</h3><p>将行程 id 为 987 及 32 的行程与行程拥有者为 daemon 及 root 的优先序号码加 1</p><pre><code>renice +1 987 -u daemon root -p 32</code></pre><h2 id="47-su"><a href="#47-su" class="headerlink" title="47.su"></a>47.su</h2><p>​        su命令用于变更为其他使用者的身份，除 root 外，需要键入该使用者的密码。</p><p>使用权限：所有使用者。</p><h3 id="语法-46"><a href="#语法-46" class="headerlink" title="语法"></a>语法</h3><pre><code>su [-fmp] [-c command] [-s shell] [--help] [--version] [-] [USER [ARG]]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-f 或 –fast 不必读启动档（如 csh.cshrc 等），仅用于 csh 或 tcsh</li><li>-m -p 或 –preserve-environment 执行 su 时不改变环境变数</li><li>-c command 或 –command=command 变更为帐号为 USER 的使用者并执行指令（command）后再变回原来使用者</li><li>-s shell 或 –shell=shell 指定要执行的 shell （bash csh tcsh 等），预设值为 /etc/passwd 内的该使用者（USER） shell</li><li>–help 显示说明文件</li><li>–version 显示版本资讯</li><li>- -l 或 –login 这个参数加了之后，就好像是重新 login 为该使用者一样，大部份环境变数（HOME SHELL USER等等）都是以该使用者（USER）为主，并且工作目录也会改变，如果没有指定 USER ，内定是 root</li><li>USER 欲变更的使用者帐号</li><li>ARG 传入新的 shell 参数</li></ul><h3 id="实例-45"><a href="#实例-45" class="headerlink" title="实例"></a>实例</h3><p>变更帐号为 root 并在执行 ls 指令后退出变回原使用者</p><pre><code>su -c ls root</code></pre><p>变更帐号为 root 并传入 -f 参数给新执行的 shell</p><pre><code>su root -f</code></pre><p>变更帐号为 clsung 并改变工作目录至 clsung 的家目录（home dir）</p><pre><code>su - clsung</code></pre><p>切换用户</p><pre><code>hnlinux@runoob.com:~$ whoami //显示当前用户hnlinuxhnlinux@runoob.com:~$ pwd //显示当前目录/home/hnlinuxhnlinux@runoob.com:~$ su root //切换到root用户密码： root@runoob.com:/home/hnlinux# whoami rootroot@runoob.com:/home/hnlinux# pwd/home/hnlinux</code></pre><p>切换用户，改变环境变量</p><pre><code>hnlinux@runoob.com:~$ whoami //显示当前用户hnlinuxhnlinux@runoob.com:~$ pwd //显示当前目录/home/hnlinuxhnlinux@runoob.com:~$ su - root //切换到root用户密码： root@runoob.com:/home/hnlinux# whoami rootroot@runoob.com:/home/hnlinux# pwd //显示当前目录/root</code></pre><h2 id="48-skill"><a href="#48-skill" class="headerlink" title="48.skill"></a>48.skill</h2><p>​        skill命令送个讯号给正在执行的程序，预设的讯息为 TERM (中断)，较常使用的讯息为 HUP、INT、KILL、STOP、CONT 和 0。</p><p>讯息有三种写法：分别为 -9、-SIGKILL、-KILL，可以使用 -l 或 -L 已列出可使用的讯息。</p><p>使用权限：所有使用者。</p><p>其他相关的命令：kill</p><h3 id="语法-47"><a href="#语法-47" class="headerlink" title="语法"></a>语法</h3><pre><code>skill [signal to send] [options] 选择程序的规则</code></pre><p><strong>一般参数</strong>：</p><ul><li>-f 快速模式/尚未完成</li><li>-i 互动模式/ 每个动作将要被确认</li><li>-v 详细输出/ 列出所选择程序的资讯</li><li>-w 智能警告讯息/ 尚未完成</li><li>-n 没有动作/ 显示程序代号</li></ul><p><strong>参数</strong>：选择程序的规则可以是：终端机代号、使用者名称、程序代号、命令名称。</p><ul><li>-t 终端机代号 ( tty 或 pty )</li><li>-u 使用者名称</li><li>-p 程序代号 ( pid )</li><li>-c 命令名称可使用的讯号</li></ul><p>以下列出已知的讯号名称、讯号代号、功能。</p><table><thead><tr><th align="left">名称（代号）</th><th align="left">功能/描述</th></tr></thead><tbody><tr><td align="left">ALRM 14</td><td align="left">离开</td></tr><tr><td align="left">HUP 1</td><td align="left">离开</td></tr><tr><td align="left">INT 2</td><td align="left">离开</td></tr><tr><td align="left">KILL 9</td><td align="left">离开/强迫关闭</td></tr><tr><td align="left">PIPE 13</td><td align="left">离开</td></tr><tr><td align="left">POLL</td><td align="left">离开</td></tr><tr><td align="left">PROF</td><td align="left">离开</td></tr><tr><td align="left">TERM 15</td><td align="left">离开</td></tr><tr><td align="left">USR1</td><td align="left">离开</td></tr><tr><td align="left">USR2</td><td align="left">离开</td></tr><tr><td align="left">VTALRM</td><td align="left">离开</td></tr><tr><td align="left">STKFLT</td><td align="left">离开/只适用于i386、m68k、arm 和 ppc 硬件</td></tr><tr><td align="left">UNUSED</td><td align="left">离开/只适用于i386、m68k、arm 和 ppc 硬件</td></tr><tr><td align="left">TSTP</td><td align="left">停止/产生与内容相关的行为</td></tr><tr><td align="left">TTIN</td><td align="left">停止/产生与内容相关的行为</td></tr><tr><td align="left">TTOU</td><td align="left">停止/产生与内容相关的行为</td></tr><tr><td align="left">STOP</td><td align="left">停止/强迫关闭</td></tr><tr><td align="left">CONT</td><td align="left">重新启动/如果在停止状态则重新启动，否则忽略</td></tr><tr><td align="left">PWR</td><td align="left">忽略/在某些系统中会离开</td></tr><tr><td align="left">WINCH</td><td align="left">忽略</td></tr><tr><td align="left">CHLD</td><td align="left">忽略</td></tr><tr><td align="left">ABRT 6</td><td align="left">核心</td></tr><tr><td align="left">FPE 8</td><td align="left">核心</td></tr><tr><td align="left">ILL 4</td><td align="left">核心</td></tr><tr><td align="left">QUIT 3</td><td align="left">核心</td></tr><tr><td align="left">SEGV 11</td><td align="left">核心</td></tr><tr><td align="left">TRAP 5</td><td align="left">核心</td></tr><tr><td align="left">SYS</td><td align="left">核心/或许尚未实作</td></tr><tr><td align="left">EMT</td><td align="left">核心/或许尚未实作</td></tr><tr><td align="left">BUS</td><td align="left">核心/核心失败</td></tr><tr><td align="left">XCPU</td><td align="left">核心/核心失败</td></tr><tr><td align="left">XFSZ</td><td align="left">核心/核心失败</td></tr></tbody></table><h3 id="实例-46"><a href="#实例-46" class="headerlink" title="实例"></a>实例</h3><p>停止所有在 PTY 装置上的程序</p><pre><code>skill -KILL -v pts/*</code></pre><p>停止三个使用者 user1、user2、user3</p><pre><code>skill -STOP user1 user2 user3</code></pre><h2 id="49-w"><a href="#49-w" class="headerlink" title="49.w"></a>49.w</h2><p>w命令用于显示目前登入系统的用户信息。</p><p>执行这项指令可得知目前登入系统的用户有哪些人，以及他们正在执行的程序。</p><p>单独执行 w 指令会显示所有的用户，您也可指定用户名称，仅显示某位用户的相关信息。</p><h3 id="语法-48"><a href="#语法-48" class="headerlink" title="语法"></a>语法</h3><pre><code>w [-fhlsuV][用户名称]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-f 　开启或关闭显示用户从何处登入系统。</li><li>-h 　不显示各栏位的标题信息列。</li><li>-l 　使用详细格式列表，此为预设值。</li><li>-s 　使用简洁格式列表，不显示用户登入时间，终端机阶段作业和程序所耗费的CPU时间。</li><li>-u 　忽略执行程序的名称，以及该程序耗费CPU时间的信息。</li><li>-V 　显示版本信息。</li></ul><h3 id="实例-47"><a href="#实例-47" class="headerlink" title="实例"></a>实例</h3><p>显示当前用户</p><pre><code>w  //显示当前用户，不显示登录位置19:50:14 up 9:27, 4 users, load average: 0.31, 0.26, 0.18USER   TTY   FROM       LOGIN@  IDLE  JCPU  PCPU WHATroot   tty7   :0        Thu12  31:39m 10:10  0.60s gnome-sessionroot   pts/0  :0.0       17:09  2:18m 15.26s 0.15s bashroot   pts/1  192.168.1.17   18:51  1.00s 1.24s 0.14s -bashroot   pts/2  192.168.1.17   19:48  60.00s 0.05s 0.05s -bash</code></pre><p>不显示登录位置</p><pre><code>w -f19:53:59 up 9:31, 4 users, load average: 0.05, 0.16, 0.15USER   TTY    LOGIN@  IDLE  JCPU  PCPU WHATroot   tty7   Thu12  31:43m 10:10  0.60s gnome-sessionroot   pts/0   17:09  2:21m 15.26s 0.15s bashroot   pts/1   18:51  0.00s 1.04s 0.14s -bashroot   pts/2   19:48  4:45  0.05s 0.05s -bash</code></pre><p>以精简模式显示</p><pre><code>w -s19:54:37 up 9:31, 4 users, load average: 0.24, 0.19, 0.16USER   TTY   FROM        IDLE WHATroot   tty7   :0        31:43m gnome-sessionroot   pts/0  :0.0       2:22m bashroot   pts/1  192.168.1.17   0.00s -bashroot   pts/2  192.168.1.17   5:23 -bash</code></pre><p>不显示标题</p><pre><code>w -hroot   tty7   :0        Thu12  31:44m 10:10  0.60s gnome-sessionroot   pts/0  :0.0       17:09  2:23m 15.26s 0.15s bashroot   pts/1  192.168.1.17   18:51  0.00s 1.05s 0.14s -bashroot   pts/2  192.168.1.17   19:48  5:54  0.05s 0.05s -bash</code></pre><h2 id="50-id"><a href="#50-id" class="headerlink" title="50.id"></a>50.id</h2><p>​        id命令用于显示用户的ID，以及所属群组的ID。</p><p>id会显示用户以及所属群组的实际与有效ID。若两个ID相同，则仅显示实际ID。若仅指定用户名称，则显示目前用户的ID。</p><h3 id="语法-49"><a href="#语法-49" class="headerlink" title="语法"></a>语法</h3><pre><code>id [-gGnru][--help][--version][用户名称]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-g或–group 　显示用户所属群组的ID。</li><li>-G或–groups 　显示用户所属附加群组的ID。</li><li>-n或–name 　显示用户，所属群组或附加群组的名称。</li><li>-r或–real 　显示实际ID。</li><li>-u或–user 　显示用户ID。</li><li>-help 　显示帮助。</li><li>-version 　显示版本信息。</li></ul><h3 id="实例-48"><a href="#实例-48" class="headerlink" title="实例"></a>实例</h3><p>显示当前用户信息</p><pre><code># id //显示当前用户IDuid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm),6(disk),10(wheel) context=root:system_r:unconfined_t</code></pre><p>显示用户群组的ID</p><pre><code># id -g0</code></pre><p>显示所有群组的ID</p><pre><code># id -g0 1 2 3 4 5 6 10</code></pre><p>显示指定用户信息</p><pre><code># id hnlinux</code></pre><h2 id="51-free"><a href="#51-free" class="headerlink" title="51.free"></a>51.free</h2><p>​        free命令用于显示内存状态。</p><p>free指令会显示内存的使用情况，包括实体内存，虚拟的交换文件内存，共享内存区段，以及系统核心使用的缓冲区等。</p><h3 id="语法-50"><a href="#语法-50" class="headerlink" title="语法"></a>语法</h3><pre><code>free [-bkmotV][-s &lt;间隔秒数&gt;]</code></pre><p><strong>参数说明</strong>：</p><ul><li><p>-b 　以Byte为单位显示内存使用情况。</p></li><li><p>-k 　以KB为单位显示内存使用情况。</p></li><li><p>-m 　以MB为单位显示内存使用情况。</p></li><li><p>-h 　以合适的单位显示内存使用情况，最大为三位数，自动计算对应的单位值。单位有：</p><pre><code>  B = bytes  K = kilos  M = megas  G = gigas  T = teras</code></pre></li><li><p>-o 　不显示缓冲区调节列。</p></li><li><p>-s&lt;间隔秒数&gt; 　持续观察内存使用状况。</p></li><li><p>-t 　显示内存总和列。</p></li><li><p>-V 　显示版本信息。</p></li></ul><h3 id="实例-49"><a href="#实例-49" class="headerlink" title="实例"></a>实例</h3><p>显示内存使用情况</p><pre><code># free //显示内存使用信息total used free shared buffers cachedMem: 254772 184568 70204 0 5692 89892-/+ buffers/cache: 88984 165788Swap: 524280 65116 459164</code></pre><p>以总和的形式显示内存的使用信息</p><pre><code># free -t //以总和的形式查询内存的使用信息total used free shared buffers cachedMem: 254772 184868 69904 0 5936 89908-/+ buffers/cache: 89024 165748Swap: 524280 65116 459164Total: 779052 249984 529068</code></pre><p>周期性的查询内存使用信息</p><pre><code># free -s 10 //每10s 执行一次命令total used free shared buffers cachedMem: 254772 187628 67144 0 6140 89964-/+ buffers/cache: 91524 163248Swap: 524280 65116 459164total used free shared buffers cachedMem: 254772 187748 67024 0 6164 89940-/+ buffers/cache: 91644 163128Swap: 524280 65116 459164</code></pre><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><ul><li><a href="https://www.runoob.com/linux/linux-command-manual.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-command-manual.html</a></li></ul><p><em>如有侵权，联系 <a href="mailto:2025685938@qq.com" target="_blank" rel="noopener">2025685938@qq.com</a> 删除</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.Linux命令（网络通讯）</title>
      <link href="/posts/26777.html"/>
      <url>/posts/26777.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux命令（网络通讯）"><a href="#Linux命令（网络通讯）" class="headerlink" title="Linux命令（网络通讯）"></a>Linux命令（网络通讯）</h1><h2 id="1-apachect"><a href="#1-apachect" class="headerlink" title="1.apachect"></a>1.apachect</h2><pre><code>     apachectl命令可用来控制Apache HTTP服务器的程序。</code></pre><p>apachectl是slackware内附Apache HTTP服务器的script文件，可供管理员控制服务器，但在其他Linux的Apache HTTP服务器不一定有这个文件。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre><code>apachectl [configtest][fullstatus][graceful][help][restart][start][status][stop]</code></pre><p><strong>参数</strong>：</p><ul><li>configtest 检查设置文件中的语法是否正确。</li><li>fullstatus 显示服务器完整的状态信息。</li><li>graceful 重新启动Apache服务器，但不会中断原有的连接。</li><li>help 显示帮助信息。</li><li>restart 重新启动Apache服务器。</li><li>start 启动Apache服务器。</li><li>status 显示服务器摘要的状态信息。</li><li>stop 停止Apache服务器。</li></ul><h2 id="2-arpwatch"><a href="#2-arpwatch" class="headerlink" title="2.arpwatch"></a>2.arpwatch</h2><p>​        arpwatch命令用于监听网络上ARP的记录。</p><p>ARP(Address Resolution Protocol)是用来解析IP与网络装置硬件地址的协议。</p><p>arpwatch可监听区域网络中的ARP数据包并记录，同时将监听到的变化通过E-mail来报告。</p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><pre><code>arpwatch [-d][-f&lt;记录文件&gt;][-i&lt;接口&gt;][-r&lt;记录文件&gt;]</code></pre><p><strong>参数</strong>：</p><ul><li>-d 启动排错模式。</li><li>-f&lt;记录文件&gt; 设置存储ARP记录的文件，预设为/var/arpwatch/arp.dat。</li><li>-i&lt;接口&gt; 指定监听ARP的接口，预设的接口为eth0。</li><li>-r&lt;记录文件&gt; 从指定的文件中读取ARP记录，而不是从网络上监听。</li><li>-n 指定附加的本地网络</li><li>-u 指定用户和用户组</li><li>-e 发送邮件给指定用户，非默认的root用户</li><li>-s 指定用户名作为返回地址，而不是默认的用户root</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>监听网卡eth0的ARP信息</p><pre><code>arpwatch -i eth0</code></pre><p>监听ARP的信息，将相关信息记录到相应的文件</p><pre><code># arpwatch -i eth0 -f a.log //将信息记录到a.log中</code></pre><h2 id="3-dip"><a href="#3-dip" class="headerlink" title="3.dip"></a>3.dip</h2><p>​        dip命令用于IP拨号连接。</p><p>dip可控制调制解调器，以拨号IP的方式建立对外的双向连接。</p><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><pre><code>dip [-aikltv][-m&lt;MTU数目&gt;][-p&lt;协议&gt;][拨号script文件]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-a 询问用户名称与密码。</li><li>-i 启动拨号服务器功能。</li><li>-k 删除执行中的dip程序。</li><li>-l 指定要删除的连线，必须配合-k参数一起使用。</li><li>-m&lt;MTU数目&gt; 设置最大传输单位，预设值为296。</li><li>-p&lt;协议&gt; 设置通信协议。</li><li>-t 进入dip的指令模式。</li><li>-v 执行时显示详细的信息。</li></ul><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>建立拨号连接</p><pre><code>$ dip -t</code></pre><h2 id="4-getty"><a href="#4-getty" class="headerlink" title="4.getty"></a>4.getty</h2><p>​         getty命令用于设置终端机模式，连线速率和管制线路。</p><p>getty指令是UNIX之类操作系统启动时所必须的3个步骤之一。</p><h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><pre><code>getty [-h][-d&lt;组态配置文件&gt;][-r&lt;延迟秒数&gt;][-t&lt;超时秒数&gt;][-w&lt;等待字符串&gt;][终端机编号][连线速率&lt;终端机类型&gt;&lt;管制线路&gt;] 或 getty [-c&lt;定义配置文件&gt;]</code></pre><p><strong>参数</strong>：</p><ul><li>-c&lt;定义配置文件&gt; 指定定义配置文件，预设为/etc/gettydefs。</li><li>-d&lt;组态配置文件&gt; 指定组态配置文件，预设为/etc/conf.getty。</li><li>-h 当传输速率为0时就强制断线。</li><li>-r&lt;延迟秒数&gt; 设置延迟时间。</li><li>-t&lt;超时秒数&gt; 设置等待登入的时间。</li><li>-w&lt;等待字符串&gt; 设置等待回应的字符串。</li></ul><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><p>开启终端：</p><pre><code># getty tty7</code></pre><h2 id="5-mingetty"><a href="#5-mingetty" class="headerlink" title="5.mingetty"></a>5.mingetty</h2><p>​        mingetty命令是精简版的getty。</p><p>mingetty适用于本机上的登入程序。</p><h3 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h3><pre><code>mingetty [--long-hostname][--noclear][tty]</code></pre><p><strong>参数说明</strong>：</p><ul><li>–long-hostname 显示完整的主机名称。</li><li>–noclear 在询问登入的用户名称之前不要清楚屏幕画面。</li></ul><h2 id="6-uux"><a href="#6-uux" class="headerlink" title="6.uux"></a>6.uux</h2><p>​        uux命令用于在远端的UUCP主机上执行指令。</p><p>uux可在远端的UUCP主机上执行指令或是执行本机上的指令，但在执行时会使用远端电脑的文件。</p><h3 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h3><pre><code>uux [-bcCIjlnrvz][-a&lt;地址&gt;][-g&lt;等级&gt;][-s&lt;文件&gt;][-x&lt;层级&gt;][--help][指令]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-或-p或–stdin 直接从键盘读取要执行的指令。</li><li>-a&lt;地址&gt;或–requestor&lt;地址&gt; 执行邮件地址，以便寄送状态信息。</li><li>-b或–erturn-stdin 在屏幕上显示状态信息。</li><li>-c或–nocopy 不用将文件复制到缓冲区。</li><li>-C或–copy 将文件复制到缓冲区。</li><li>-g&lt;等级&gt;或–grade&lt;等级&gt; 指定文件传送作业的优先顺序。</li><li>-I或–config file 指定uux配置文件。</li><li>-j或–jobid 显示作业编号。</li><li>-l或–link 将本机上的文件连接到缓冲区。</li><li>-n或–notification=no 无论发生任何状态，都不寄邮件通知用户。</li><li>-r或–nouucico 不要立即启动uucico服务程序，仅将作业送到队列中，然后再执行。</li><li>-s&lt;文件&gt;或–status&lt;文件&gt; 将完成状态保存为指定的文件。</li><li>-v或–version 显示版本信息。</li><li>-x&lt;层级&gt;或–debug&lt;层级&gt; 指定排错层级。</li><li>-z或–notification=error 若发生错误，则以邮件来通知用户。</li><li>–help 显示帮助。</li></ul><h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><p>在远程主机 uucp 执行命令</p><pre><code># uux hnlinux! date  /// 在远程主机 指定date命令查看系统时间</code></pre><h2 id="7-telnet"><a href="#7-telnet" class="headerlink" title="7.telnet"></a>7.telnet</h2><p>​        telnet命令用于远端登入。</p><p>执行telnet指令开启终端机阶段作业，并登入远端主机。</p><h3 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h3><pre><code>telnet [-8acdEfFKLrx][-b&lt;主机别名&gt;][-e&lt;脱离字符&gt;][-k&lt;域名&gt;][-l&lt;用户名称&gt;][-n&lt;记录文件&gt;][-S&lt;服务类型&gt;][-X&lt;认证形态&gt;][主机名称或IP地址&lt;通信端口&gt;]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-8 允许使用8位字符资料，包括输入与输出。</li><li>-a 尝试自动登入远端系统。</li><li>-b&lt;主机别名&gt; 使用别名指定远端主机名称。</li><li>-c 不读取用户专属目录里的.telnetrc文件。</li><li>-d 启动排错模式。</li><li>-e&lt;脱离字符&gt; 设置脱离字符。</li><li>-E 滤除脱离字符。</li><li>-f 此参数的效果和指定”-F”参数相同。</li><li>-F 使用Kerberos V5认证时，加上此参数可把本地主机的认证数据上传到远端主机。</li><li>-k&lt;域名&gt; 使用Kerberos认证时，加上此参数让远端主机采用指定的领域名，而非该主机的域名。</li><li>-K 不自动登入远端主机。</li><li>-l&lt;用户名称&gt; 指定要登入远端主机的用户名称。</li><li>-L 允许输出8位字符资料。</li><li>-n&lt;记录文件&gt; 指定文件记录相关信息。</li><li>-r 使用类似rlogin指令的用户界面。</li><li>-S&lt;服务类型&gt; 设置telnet连线所需的IP TOS信息。</li><li>-x 假设主机有支持数据加密的功能，就使用它。</li><li>-X&lt;认证形态&gt; 关闭指定的认证形态。</li></ul><h3 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h3><p>登录远程主机</p><pre><code># telnet 192.168.0.5 //登录IP为 192.168.0.5 的远程主机</code></pre><h2 id="8-uulog"><a href="#8-uulog" class="headerlink" title="8.uulog"></a>8.uulog</h2><p>​        uulog命令用于显示UUCP记录文件。</p><p>uulog可用来显示UUCP记录文件中记录。</p><h3 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h3><pre><code>uulog [-DFISv][-&lt;行数&gt;][-f&lt;主机&gt;][-I&lt;配置文件&gt;][-n&lt;行数&gt;][-s&lt;主机&gt;][-u&lt;用户&gt;][-X&lt;层级&gt;][--help]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-D或–debuglog 显示排错记录。</li><li>-f&lt;主机&gt;或–follow&lt;主机&gt; 与-F参数类似，但仅显示与指定主机相关的记录。</li><li>-I&lt;配置文件&gt;或–config&lt;配置文件&gt; 指定程序的配置文件。</li><li>-&lt;行数&gt;,-n&lt;行数&gt;或–lines&lt;行数&gt; 显示记录文件中，从最后算起指定行数的数值。</li><li>-s&lt;主机&gt; 仅显示记录文件中，与指定文件相关的记录。</li><li>-S或–statslog 显示统计记录。</li><li>-u&lt;用户&gt;或–suer&lt;用户&gt; 仅显示记录文件中，与指定用户相关的记录。</li><li>-v或–version 显示版本信息。</li><li>-X&lt;层级&gt;或–debug&lt;层级&gt; 设定排错层级。</li><li>–help 显示帮助。</li></ul><h3 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h3><p>显示uucp log信息</p><pre><code># uulog</code></pre><h2 id="9-uustat"><a href="#9-uustat" class="headerlink" title="9.uustat"></a>9.uustat</h2><p>​        uustat命令用于显示UUCP目前的状况。</p><p>执行uucp与uux指令后，会先将工作送到队列，再由uucico来执行工作。uustat可显示，删除或启动队列中等待执行的工作。</p><h3 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h3><pre><code>uustat [-aeiKmMNpqQRv][-B&lt;行数&gt;][-c&lt;指令&gt;][-C&lt;指令&gt;][-I&lt;配置文件&gt;][-k&lt;工作&gt;][-o&lt;小时&gt;][-r&lt;工作&gt;][-s&lt;主机&gt;][-S&lt;主机&gt;][-u&lt;用户&gt;][-U&lt;用户&gt;][-W&lt;附注&gt;][-y&lt;小时&gt;][-x&lt;层级&gt;][--help]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-a或-all 显示全部的UUCP工作。</li><li>-B&lt;行数&gt;或–mail-lines&lt;行数&gt; 与-M或-N参数一并使用，用来指定邮件中要包含多少行的信息。</li><li>-c&lt;指令&gt;或–command&lt;指令&gt; 显示与&lt;指令&gt;有关的工作。</li><li>-C&lt;指令&gt;或–not-command&lt;指令&gt; 显示与&lt;指令&gt;无关的工作。</li><li>-e或–executions 仅显示待执行的工作。</li><li>-i或–prompt 针对队列中的每项工作，询问使用是否要删除工作。</li><li>-I&lt;配置文件&gt;或–config&lt;配置文件&gt; 指定配置文件。</li><li>-k&lt;工作&gt;或–kill&lt;工作&gt; 删除指定的工作。</li><li>-m或–status 删除全部的工作。</li><li>-M或-mail 将状态信息邮寄给UUCP管理员。</li><li>-N或–notify 将状态信息分别邮寄给提出该项工作的用户。</li><li>-o&lt;小时&gt;或–older-than&lt;小时&gt; 显示超过指定时数的工作。</li><li>-p或–ps 显示负责UUCP锁定的程序。</li><li>-q或–list 显示每台远端主机上所要执行工作的状态。</li><li>-Q或–no-list 不显示工作。</li><li>-r&lt;工作&gt;或–rejuvenate&lt;工作&gt; 重新启动指定的工作。</li><li>-R或–rejuvenate-all 重新启动全部的工作。</li><li>-s&lt;主机&gt;或–system&lt;主机&gt; 显示与&lt;主机&gt;有关的工作。</li><li>-S&lt;主机&gt;或–not-system&lt;主机&gt; 显示与&lt;主机&gt;无关的工作。</li><li>-v或–version 显示版本信息。</li><li>-u&lt;用户&gt;或–user&lt;用户&gt; 显示与&lt;用户&gt;有关的工作。</li><li>-U&lt;用户&gt;或–not-user&lt;用户&gt; 显示与&lt;用户&gt;无关的工作。</li><li>-W&lt;附注&gt;或–comment&lt;附注&gt; 要放在邮件信息中的附注。</li><li>-y&lt;小时&gt;或–younger-than&lt;小时&gt; 显示低于指定时数的工作。</li><li>-x&lt;层级&gt;或–debug&lt;层级&gt; 指定排错层级。</li><li>–help 显示帮助。</li></ul><h3 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h3><p>显示所有任务</p><pre><code># uustat -a</code></pre><p>显示等待的任务</p><pre><code># uustat -e</code></pre><h2 id="10-ppp-off"><a href="#10-ppp-off" class="headerlink" title="10.ppp-off"></a>10.ppp-off</h2><p>​         ppp命令用于关闭ppp连线。</p><p>这是Slackware发行版内附的程序，让用户切断PPP的网络连线。</p><h3 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h3><pre><code>ppp-off</code></pre><h3 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h3><p>关闭ppp连线</p><pre><code># ppp-off</code></pre><h2 id="11-netconfig"><a href="#11-netconfig" class="headerlink" title="11.netconfig"></a>11.netconfig</h2><p>​        netconfig命令用于设置网络环境。</p><p>这是Slackware发行版内附程序，它具有互动式的问答界面，让用户轻易完成网络环境的设置。</p><h3 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h3><pre><code>netconfig</code></pre><h2 id="12-nc"><a href="#12-nc" class="headerlink" title="12.nc"></a>12.nc</h2><p>​        nc命令用于设置路由器。</p><p>执行本指令可设置路由器的相关参数。</p><h3 id="语法-11"><a href="#语法-11" class="headerlink" title="语法"></a>语法</h3><pre><code>nc [-hlnruz][-g&lt;网关...&gt;][-G&lt;指向器数目&gt;][-i&lt;延迟秒数&gt;][-o&lt;输出文件&gt;][-p&lt;通信端口&gt;][-s&lt;来源位址&gt;][-v...][-w&lt;超时秒数&gt;][主机名称][通信端口...]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-g&lt;网关&gt; 设置路由器跃程通信网关，最多可设置8个。</li><li>-G&lt;指向器数目&gt; 设置来源路由指向器，其数值为4的倍数。</li><li>-h 在线帮助。</li><li>-i&lt;延迟秒数&gt; 设置时间间隔，以便传送信息及扫描通信端口。</li><li>-l 使用监听模式，管控传入的资料。</li><li>-n 直接使用IP地址，而不通过域名服务器。</li><li>-o&lt;输出文件&gt; 指定文件名称，把往来传输的数据以16进制字码倾倒成该文件保存。</li><li>-p&lt;通信端口&gt; 设置本地主机使用的通信端口。</li><li>-r 乱数指定本地与远端主机的通信端口。</li><li>-s&lt;来源位址&gt; 设置本地主机送出数据包的IP地址。</li><li>-u 使用UDP传输协议。</li><li>-v 显示指令执行过程。</li><li>-w&lt;超时秒数&gt; 设置等待连线的时间。</li><li>-z 使用0输入/输出模式，只在扫描通信端口时使用。</li></ul><h3 id="实例-8"><a href="#实例-8" class="headerlink" title="实例"></a>实例</h3><p>TCP端口扫描</p><pre><code># nc -v -z -w2 192.168.0.3 1-100 192.168.0.3: inverse host lookup failed: Unknown host(UNKNOWN) [192.168.0.3] 80 (http) open(UNKNOWN) [192.168.0.3] 23 (telnet) open(UNKNOWN) [192.168.0.3] 22 (ssh) open</code></pre><p>扫描192.168.0.3 的端口 范围是 1-100</p><p>扫描UDP端口</p><pre><code># nc -u -z -w2 192.168.0.1 1-1000 //扫描192.168.0.3 的端口 范围是 1-1000</code></pre><p>扫描指定端口</p><pre><code># nc -nvv 192.168.0.1 80 //扫描 80端口(UNKNOWN) [192.168.0.1] 80 (?) openy  //用户输入</code></pre><h2 id="13-httpd"><a href="#13-httpd" class="headerlink" title="13.httpd"></a>13.httpd</h2><p>​        httpd命令是Apache HTTP服务器程序。</p><p>httpd为Apache HTTP服务器程序。直接执行程序可启动服务器的服务。</p><h3 id="语法-12"><a href="#语法-12" class="headerlink" title="语法"></a>语法</h3><pre><code>httpd [-hlLStvVX] [ -  c &lt;httpd指令&gt;] [ -  C &lt;httpd指令&gt;] [ -  d &lt;服务器根目录&gt;] [ -  D &lt;设定文件参数&gt;] [ -  f &lt;设定文件&gt;]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-c &lt;httpd指令&gt;在读取配置文件前，先执行选项中的指令。</li><li>-C &lt;httpd指令&gt;在读取配置文件后，再执行选项中的指令。</li><li>-d &lt;服务器根目录&gt;指定服务器的根目录。</li><li>-D &lt;设定文件参数&gt;指定要传入配置文件的参数。</li><li>-f &lt;设定文件&gt;指定配置文件。</li><li>-h显示帮助。</li><li>-l显示服务器编译时所包含的模块。</li><li>-L显示httpd指令的说明。</li><li>-S显示配置文件中的设定。</li><li>-t测试配置文件的语法是否正确。</li><li>-v显示版本信息。</li><li>-V显示版本信息以及建立环境。</li><li>-X以单一程序的方式来启动服务器。</li></ul><h3 id="实例-9"><a href="#实例-9" class="headerlink" title="实例"></a>实例</h3><p>检查配置文件语法错误</p><pre><code>#httpd -thttpd：无法确定服务器的完全限定域名，使用127.0.0.1 for ServerName语法OK</code></pre><p>启动httpd的</p><pre><code>的httpdhttpd：无法确定服务器的完全限定域名，使用127.0.0.1 for ServerName</code></pre><p>显示编译模块</p><pre><code>#httpd -l 编译模块： core.c prefork.c http_core.c mod_so.c</code></pre><p>显示配置文件</p><pre><code>＃httpd -L&gt; 1.log | tail -n 20 1.log同时活着的最大孩子数仅在* .conf外允许，或者 ServerLimit（prefork.c）此次运行的Apache的MaxClients的最大值仅在* .conf外允许，或者 KeepAliveTimeout（http_core.c）保持活动超时持续时间（秒）仅在* .conf外允许，或者 MaxKeepAliveRequests（http_core.c）每个连接的最大Keep-Alive请求数，或0表示无限仅在* .conf外允许，或者 KeepAlive（http_core.c）持久连接是应该打开还是关闭仅在* .conf外允许，或者 LoadModule（mod_so.c）模块名称和要从中加载的共享对象文件的名称仅在* .conf外允许，或者 LoadFile（mod_so.c）共享对象文件或库，以便在运行时加载到服务器中仅在* .conf外允许，或者 </code></pre><h2 id="14-ifconfig"><a href="#14-ifconfig" class="headerlink" title="14.ifconfig"></a>14.ifconfig</h2><p>​         ifconfig命令用于显示或设置网络设备。</p><p>ifconfig可设置网络设备的状态，或是显示目前的设置。</p><h3 id="语法-13"><a href="#语法-13" class="headerlink" title="语法"></a>语法</h3><pre><code>ifconfig [网络设备][down up -allmulti -arp -promisc][add&lt;地址&gt;][del&lt;地址&gt;][&lt;hw&lt;网络设备类型&gt;&lt;硬件地址&gt;][io_addr&lt;I/O地址&gt;][irq&lt;IRQ地址&gt;][media&lt;网络媒介类型&gt;][mem_start&lt;内存地址&gt;][metric&lt;数目&gt;][mtu&lt;字节&gt;][netmask&lt;子网掩码&gt;][tunnel&lt;地址&gt;][-broadcast&lt;地址&gt;][-pointopoint&lt;地址&gt;][IP地址]</code></pre><p><strong>参数说明</strong>：</p><ul><li>add&lt;地址&gt; 设置网络设备IPv6的IP地址。</li><li>del&lt;地址&gt; 删除网络设备IPv6的IP地址。</li><li>down 关闭指定的网络设备。</li><li>&lt;hw&lt;网络设备类型&gt;&lt;硬件地址&gt; 设置网络设备的类型与硬件地址。</li><li>io_addr&lt;I/O地址&gt; 设置网络设备的I/O地址。</li><li>irq&lt;IRQ地址&gt; 设置网络设备的IRQ。</li><li>media&lt;网络媒介类型&gt; 设置网络设备的媒介类型。</li><li>mem_start&lt;内存地址&gt; 设置网络设备在主内存所占用的起始地址。</li><li>metric&lt;数目&gt; 指定在计算数据包的转送次数时，所要加上的数目。</li><li>mtu&lt;字节&gt; 设置网络设备的MTU。</li><li>netmask&lt;子网掩码&gt; 设置网络设备的子网掩码。</li><li>tunnel&lt;地址&gt; 建立IPv4与IPv6之间的隧道通信地址。</li><li>up 启动指定的网络设备。</li><li>-broadcast&lt;地址&gt; 将要送往指定地址的数据包当成广播数据包来处理。</li><li>-pointopoint&lt;地址&gt; 与指定地址的网络设备建立直接连线，此模式具有保密功能。</li><li>-promisc 关闭或启动指定网络设备的promiscuous模式。</li><li>[IP地址] 指定网络设备的IP地址。</li><li>[网络设备] 指定网络设备的名称。</li></ul><h3 id="实例-10"><a href="#实例-10" class="headerlink" title="实例"></a>实例</h3><p>显示网络设备信息</p><pre><code># ifconfig        eth0   Link encap:Ethernet HWaddr 00:50:56:0A:0B:0C      inet addr:192.168.0.3 Bcast:192.168.0.255 Mask:255.255.255.0     inet6 addr: fe80::250:56ff:fe0a:b0c/64 Scope:Link     UP BROADCAST RUNNING MULTICAST MTU:1500 Metric:1     RX packets:172220 errors:0 dropped:0 overruns:0 frame:0     TX packets:132379 errors:0 dropped:0 overruns:0 carrier:0     collisions:0 txqueuelen:1000      RX bytes:87101880 (83.0 MiB) TX bytes:41576123 (39.6 MiB)     Interrupt:185 Base address:0x2024 lo    Link encap:Local Loopback      inet addr:127.0.0.1 Mask:255.0.0.0     inet6 addr: ::1/128 Scope:Host     UP LOOPBACK RUNNING MTU:16436 Metric:1     RX packets:2022 errors:0 dropped:0 overruns:0 frame:0     TX packets:2022 errors:0 dropped:0 overruns:0 carrier:0     collisions:0 txqueuelen:0      RX bytes:2459063 (2.3 MiB) TX bytes:2459063 (2.3 MiB)</code></pre><p>启动关闭指定网卡</p><pre><code># ifconfig eth0 down# ifconfig eth0 up</code></pre><p>为网卡配置和删除IPv6地址</p><pre><code># ifconfig eth0 add 33ffe:3240:800:1005::2/ 64 //为网卡诶之IPv6地址# ifconfig eth0 del 33ffe:3240:800:1005::2/ 64 //为网卡删除IPv6地址</code></pre><p>用ifconfig修改MAC地址</p><pre><code># ifconfig eth0 down //关闭网卡# ifconfig eth0 hw ether 00:AA:BB:CC:DD:EE //修改MAC地址# ifconfig eth0 up //启动网卡# ifconfig eth1 hw ether 00:1D:1C:1D:1E //关闭网卡并修改MAC地址 # ifconfig eth1 up //启动网卡</code></pre><p>配置IP地址</p><pre><code># ifconfig eth0 192.168.1.56 //给eth0网卡配置IP地址# ifconfig eth0 192.168.1.56 netmask 255.255.255.0 // 给eth0网卡配置IP地址,并加上子掩码# ifconfig eth0 192.168.1.56 netmask 255.255.255.0 broadcast 192.168.1.255// 给eth0网卡配置IP地址,加上子掩码,加上个广播地址</code></pre><p>启用和关闭ARP协议</p><pre><code># ifconfig eth0 arp  //开启# ifconfig eth0 -arp  //关闭</code></pre><p>设置最大传输单元</p><pre><code># ifconfig eth0 mtu 1500 //设置能通过的最大数据包大小为 1500 bytes</code></pre><h2 id="15-minicom"><a href="#15-minicom" class="headerlink" title="15.minicom"></a>15.minicom</h2><p>​            minicom命令用于调制解调器通信程序。</p><p>minicom是一个相当受欢迎的PPP拨号连线程序。</p><h3 id="语法-14"><a href="#语法-14" class="headerlink" title="语法"></a>语法</h3><pre><code>minicom [-8lmMostz][-a&lt;on或0ff&gt;][-c&lt;on或off&gt;][-C&lt;取文件&gt;][-d&lt;编号&gt;][-p&lt;模拟终端机&gt;][-S&lt;script文件&gt;][配置文件]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-8 不要修改任何8位编码的字符。</li><li>-a&lt;on或0ff&gt; 设置终端机属性。</li><li>-c&lt;on或off&gt; 设置彩色模式。</li><li>-C&lt;取文件&gt; 指定取文件，并在启动时开启取功能。</li><li>-d&lt;编号&gt; 启动或直接拨号。</li><li>-l 不会将所有的字符都转成ASCII码。</li><li>-m 以Alt或Meta键作为指令键。</li><li>-M 与-m参数类似。</li><li>-o 不要初始化调制解调器。</li><li>-p &lt;模拟终端机&gt; 使用模拟终端机。</li><li>-s 开启程序设置画面。</li><li>-S&lt;script文件&gt; 在启动时，执行指定的script文件。</li><li>-t 设置终端机的类型。</li><li>-z 在终端机上显示状态列。</li><li>[配置文件] 指定minicom配置文件。</li></ul><h2 id="16-mesg"><a href="#16-mesg" class="headerlink" title="16.mesg"></a>16.mesg</h2><p>​         mesg命令用于设置终端机的写入权限。</p><p>将mesg设置y时，其他用户可利用write指令将信息直接显示在您的屏幕上。</p><h3 id="语法-15"><a href="#语法-15" class="headerlink" title="语法"></a>语法</h3><pre><code>mesg [ny]</code></pre><p><strong>参数</strong>：</p><ul><li>n 不允许其他用户将信息直接显示在你的屏幕上。</li><li>y 允许其他用户将信息直接显示在你的屏幕上。</li></ul><h3 id="实例-11"><a href="#实例-11" class="headerlink" title="实例"></a>实例</h3><p>允许其他用户发信息到当前终端。</p><p>root 的终端</p><pre><code># mesg y //在这个终端设置允许发送消息</code></pre><p>其他普通用户的终端：</p><pre><code>$ write root pts/4 hellohelloEOF //Ctrl+D 结束输入</code></pre><p>root 的终端 终端显示</p><pre><code># Message from root@w3cschool.cc (as hnlinux) on pts/5 at 14:48 ...helloEOF</code></pre><h2 id="17-dnsconf"><a href="#17-dnsconf" class="headerlink" title="17.dnsconf"></a>17.dnsconf</h2><p>​        dnsconf命令用于设置DNS服务器组态。</p><p>dnsconf实际上为linuxconf的符号连接，提供图形截面的操作方式，供管理员管理DNS服务器。</p><h3 id="语法-16"><a href="#语法-16" class="headerlink" title="语法"></a>语法</h3><pre><code>dnsconf [--deldomain&lt;域&gt;][--delsecondary&lt;域&gt;][--newdomain&lt;域&gt;][--set&lt;主机&gt;&lt;IP&gt;][--setcname&lt;CNAME&gt;&lt;主机&gt;][--setmx&lt;域&gt;&lt;主机&gt;][--setns&lt;域&gt;&lt;主机&gt;][--unset&lt;主机&gt;]</code></pre><p><strong>参数说明</strong>：</p><ul><li>–deldomain&lt;域&gt; 删除域。</li><li>–delsecondary&lt;域&gt; 删除次级域。</li><li>–newdomain&lt;域&gt; 新增域。</li><li>–set&lt;主机&gt;<ip> 新增主机记录。</ip></li><li>–setcname<cname>&lt;主机&gt; 设置<cname>。</cname></cname></li><li>–setmx&lt;域&gt;&lt;主机&gt; 指定域的邮件主机。</li><li>–setns&lt;域&gt;&lt;主机&gt; 指定域的DNS服务器。</li><li>–unset&lt;主机&gt; 删除DNS中某台主机的记录。</li></ul><h2 id="18-wall"><a href="#18-wall" class="headerlink" title="18.wall"></a>18.wall</h2><p>​        wall命令会将讯息传给每一个 mesg 设定为 yes 的上线使用者。当使用终端机介面做为标准传入时, 讯息结束时需加上 EOF (通常用 Ctrl+D)。</p><p>使用权限：所有使用者。</p><h3 id="语法-17"><a href="#语法-17" class="headerlink" title="语法"></a>语法</h3><pre><code>wall [ message ]</code></pre><h3 id="实例-12"><a href="#实例-12" class="headerlink" title="实例"></a>实例</h3><p>传讯息”hi” 给每一个使用者</p><pre><code>wall hi</code></pre><p>广播消息</p><pre><code># wall IloveBroadcast message from root (pts/4) (Thu May 27 16:41:09 2014):Ilove</code></pre><h2 id="19-netstat"><a href="#19-netstat" class="headerlink" title="19.netstat"></a>19.netstat</h2><p>​        netstat命令用于显示网络状态。</p><p>利用的netstat指令可让你得知整个Linux的系统的网络情况。</p><h3 id="语法-18"><a href="#语法-18" class="headerlink" title="语法"></a>语法</h3><pre><code>netstat [-acCeFghilMnNoprstuvVwx] [ -  &lt;网络类型&gt;] [ -  ip]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-a或–all显示所有连线中的Socket。</li><li>-A &lt;网络类型&gt;或 - &lt;网络类型&gt;列出该网络类型连线中的相关地址。</li><li>-c或–continuous持续列出网络状态。</li><li>-C或–cache显示路由器配置的快取信息。</li><li>-e或–extend显示网络其他相关信息。</li><li>-F或–fib显示FIB。</li><li>-g或–groups显示多重广播功能群组组员名单。</li><li>-h或–help在线帮助。</li><li>-i或–interfaces显示网络界面信息表单。</li><li>-l或–listening显示监控中的服务器的Socket。</li><li>-M或–masquerade显示伪装的网络连线。</li><li>-n或–numeric直接使用IP地址，而不通过域名服务器。</li><li>-N或–netlink或–symbolic显示网络硬件外围设备的符号连接名称。</li><li>-o或–timers显示计时器。</li><li>-p或–programs显示正在使用Socket的程序识别码和程序名称。</li><li>-r或–route显示路由表。</li><li>-s或–statistice显示网络工作信息统计表。</li><li>-t或–tcp显示TCP传输协议的连线状况。</li><li>-u或–udp显示UDP传输协议的连线状况。</li><li>-v或–verbose显示指令执行过程。</li><li>-V或–version显示版本信息。</li><li>-w或–raw显示RAW传输协议的连线状况。</li><li>-x或–unix此参数的效果和指定“-A unix”参数相同。</li><li>–ip或–inet此参数的效果和指定“-A inet”参数相同。</li></ul><h3 id="实例-13"><a href="#实例-13" class="headerlink" title="实例"></a>实例</h3><p>显示详细的网络状况</p><pre><code>#netstat -a</code></pre><p>显示当前户籍UDP连接状况</p><pre><code>#netstat -nu</code></pre><p>显示UDP端口号的使用情况</p><pre><code>#netstat -apu活动的Internet连接（服务器和已建立）Proto Recv-Q Send-Q本地地址外部地址状态PID /程序名称  udp 0 0 *：32768 *：*  -          udp 0 0 *：nfs *：*  -          udp 0 0 *：641 *：* 3006 / rpc.statd   udp 0 0 192.168.0.3:netbios-ns *：* 3537 / nmbd      udp 0 0 *：netbios-ns *：* 3537 / nmbd      udp 0 0 192.168.0.3:netbios-dgm *：* 3537 / nmbd      udp 0 0 *：netbios-dgm *：* 3537 / nmbd      udp 0 0 *：tftp *：* 3346 / xinetd     udp 0 0 *：999 *：* 3366 / rpc.rquotad  udp 0 0 *：sunrpc *：* 2986 / portmap    udp 0 0 *：ipp *：* 6938 / cupsd     udp 0 0 *：1022 *：* 3392 / rpc.mountd   udp 0 0 *：638 *：* 3006 / rpc.statd</code></pre><p>显示网卡列表</p><pre><code>#netstat -i内核接口表Iface MTU Met RX-OK RX-ERR RX-DRP RX-OVR TX-OK TX-ERR TX-DRP TX-OVR Flgeth0 1500 0 181864 0 0 0 141278 0 0 0 BMRUlo 16436 0 3362 0 0 0 3362 0 0 0 LRU</code></pre><p>显示组播组的关系</p><pre><code>#netstat -gIPv6 / IPv4组成员资格Interface RefCnt Group--------------- ------ ---------------------lo 1 everyoneSYSTEMS.MCAST.NETeth0 1 ASSOSYSTEMS.MCAST.NETlo 1 ff02 :: 1eth0 1 ff02 :: 1：ff0a：b0ceth0 1 ff02 :: 1</code></pre><p>显示网络统计信息</p><pre><code>#netstat -sIP：  收到的总包数为184695  0转发  丢弃0个传入数据包  传送的传入数据包为184687  发出143917个请求  丢失了32个传出数据包  30由于缺少路线而下降ICMP：  收到676条ICMP消息  5输入ICMP消息失败。  ICMP输入直方图：    目的地无法到达：44    回应请求：287    回复回复：345  发送了304个ICMP消息  0 ICMP消息失败  ICMP输出直方图：    目的地无法到达：17    回复回复：287TCP：  473个有效连接开口  28个被动连接开口  连接尝试失败4次  收到11个连接重置  建立了1个连接  收到178253个细分受众群  137936个段发送出去  已转发29个段  收到0个坏段。  336重置发送UDP：  收到5714包  收到8个未知端口的数据包。  0包接收错误  发送了5419个数据包TcpExt：  收到胚胎SYN_RECV插座的1次重置  ArpFilter：0  12个TCP套接字在快速定时器中完成时间等待  发送了572个延迟的ack  由于插座锁定，3个延迟的时间进一步延迟  13766个数据包直接排队到recvmsg预队列。  1101482直接从积压收到数据包  从prequeue直接接收的19599861个数据包  预测了46860个包头  14541包头预测并直接排队给用户  TCPPureAcks：12259  TCPHPAcks：9119  TCPRenoRecovery：0  TCPSackRecovery：0  TCPSACKReneging：0  TCPFACKReorder：0  TCPSACKReorder：0  TCPRenoReorder：0  TCPTSReorder：0  TCPFullUndo：0  TCPPartialUndo：0  TCPDSACKUndo：0  TCPLossUndo：0  TCPLoss：0  TCPLostRetransmit：0  TCPRenoFailures：0  TCPSackFailures：0  TCPLossFailures：0  TCPFastRetrans：0  TCPForwardRetrans：0  TCPSlowStartRetrans：0  TCPTimeouts：29  TCPRenoRecoveryFail：0  TCPSackRecoveryFail：0  TCPSchedulerFailed：0  TCPRcvCollapsed：0  TCPDSACKOldSent：0  TCPDSACKOfoSent：0  TCPDSACKRecv：0  TCPDSACKOfoRecv：0  TCPAbortOnSyn：0  TCPAbortOnData：1  TCPAbortOnClose：0  TCPAbortOnMemory：0  TCPAbortOnTimeout：3  TCPAbortOnLinger：0  TCPAbortFailed：3  TCPMemoryPressures：0</code></pre><p>显示监听的套接口</p><pre><code>#netstat -l活动Internet连接（仅限服务器）Proto Recv-Q Send-Q本地地址外部地址状态   tcp 0 0 *：32769 *：* LISTEN   tcp 0 0 *：nfs *：* LISTEN   tcp 0 0 *：644 *：* LISTEN   tcp 0 0 *：1002 *：* LISTEN   tcp 0 0 *：netbios-ssn *：* LISTEN   tcp 0 0 *：sunrpc *：* LISTEN   tcp 0 0 vm-dev：ipp *：* LISTEN   tcp 0 0 *：telnet *：* LISTEN   tcp 0 0 *：601 *：* LISTEN   tcp 0 0 *：microsoft-ds *：* LISTEN   tcp 0 0 *：http *：* LISTEN   tcp 0 0 *：ssh *：* LISTEN   tcp 0 0 *：https *：* LISTEN   udp 0 0 *：32768 *：*                   udp 0 0 *：nfs *：*                   udp 0 0 *：641 *：*                   udp 0 0 192.168.0.3:netbios-ns *：*                   udp 0 0 *：netbios-ns *：*                   udp 0 0 192.168.0.3:netbios-dgm *：*                   udp 0 0 *：netbios-dgm *：*                   udp 0 0 *：tftp *：*                   udp 0 0 *：999 *：*                   udp 0 0 *：sunrpc *：*                   udp 0 0 *：ipp *：*                   udp 0 0 *：1022 *：*                   udp 0 0 *：638 *：*                   活动UNIX域套接字（仅限服务器）Proto RefCnt标志类型状态I节点路径unix 2 [ACC] STREAM LISTENING 10621 @ / tmp / fam-root-unix 2 [ACC] STREAM LISTENING 7096 /var/run/acpid.socketunix 2 [ACC] STREAM LISTENING 9792 /tmp/.gdm_socketunix 2 [ACC] STREAM LISTENING 9927 /tmp/.X11-unix/X0unix 2 [ACC] STREAM LISTENING 10489 /tmp/ssh-lbUnUf4552/agent.4552unix 2 [ACC] STREAM LISTENING 10558 / tmp / ksocket-root / kdeinit__0unix 2 [ACC] STREAM LISTENING 10560 / tmp / ksocket-root / kdeinit-：0unix 2 [ACC] STREAM LISTENING 10570 /tmp/.ICE-unix/dcop4664-1270815442unix 2 [ACC] STREAM LISTENING 10843 /tmp/.ICE-unix/4735unix 2 [ACC] STREAM LISTENING 10591 /tmp/ksocket-root/klauncherah3arc.slave-socketunix 2 [ACC] STREAM LISTENING 7763 /var/run/iiim/.iiimp-unix/9010unix 2 [ACC] STREAM LISTENING 11047 / tmp / orbit-root / linc-1291-0-1e92c8082411unix 2 [ACC] STREAM LISTENING 11053 / tmp / orbit-root / linc-128e-0-dc070659cbb3unix 2 [ACC] STREAM LISTENING 8020 / var / run / dbus / system_bus_socketunix 2 [ACC] STREAM LISTENING 58927 / tmp / mcop-root / vm-dev-2c28-4beba75funix 2 [ACC] STREAM LISTENING 7860 /tmp/.font-unix/fs7100unix 2 [ACC] STREAM LISTENING 7658 / dev / gpmctlunix 2 [ACC] STREAM LISTENING 10498 @ / tmp / dbus-s2MLJGO5Ci</code></pre><h2 id="20-ping"><a href="#20-ping" class="headerlink" title="20.ping"></a>20.ping</h2><p>​         ping命令用于检测主机。</p><p>执行的ping指令会使用ICMP传输协议，发出要求回应的信息，若远端主机的网络功能没有问题，就会回应该信息，因而得知该主机运作正常。</p><h3 id="语法-19"><a href="#语法-19" class="headerlink" title="语法"></a>语法</h3><pre><code>ping [-dfnqrRv] [ -  c &lt;完成次数&gt;] [ -  i &lt;间隔秒数&gt;] [ - 我&lt;网络界面&gt;] [ -  l &lt;前置载入&gt;] [ -  p &lt;范本样式&gt;] [ - 小号&lt;数据包大小&gt;] [ - 吨&lt;存活数值&gt;] [主机名称或IP地址]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-d使用Socket的SO_DEBUG功能。</li><li>-c &lt;完成次数&gt;设置完成要求回应的次数。</li><li>-f极限检测。</li><li>-i &lt;间隔秒数&gt;指定收发信息的间隔时间。</li><li>-I &lt;网络界面&gt;使用指定的网络接口送出数据包。</li><li>-l &lt;前置载入&gt;设置在送出要求信息之前，先行发出的数据包。</li><li>-n只输出数值。</li><li>-p &lt;范本样式&gt;设置填满数据包的范本样式。</li><li>-q不显示指令执行过程，开头和结尾的相关信息除外。</li><li>-r忽略普通的路由表，直接将数据包送到远端主机上。</li><li>-R记录路由过程。</li><li>-s &lt;数据包大小&gt;设置数据包的大小。</li><li>-t &lt;存活数值&gt;设置存活数值TTL的大小。</li><li>-v详细显示指令的执行过程。</li></ul><h3 id="实例-14"><a href="#实例-14" class="headerlink" title="实例"></a>实例</h3><p>检测是否与主机连通</p><pre><code>#ping www.w3cschool.cc // ping主机PING aries.m.alikunlun.com（114.80.174.110）56（84）字节的数据。来自114.80.174.110的64字节：icmp_seq = 1 ttl = 64时间= 0.025毫秒来自114.80.174.110的64字节：icmp_seq = 2 ttl = 64时间= 0.036毫秒来自114.80.174.110的64字节：icmp_seq = 3 ttl = 64时间= 0.034毫秒来自114.80.174.110的64字节：icmp_seq = 4 ttl = 64时间= 0.034毫秒来自114.80.174.110的64字节：icmp_seq = 5 ttl = 64时间= 0.028毫秒来自114.80.174.110的64字节：icmp_seq = 6 ttl = 64时间= 0.028毫秒来自114.80.174.110的64字节：icmp_seq = 7 ttl = 64时间= 0.034毫秒来自114.80.174.110的64字节：icmp_seq = 8 ttl = 64时间= 0.034毫秒来自114.80.174.110的64字节：icmp_seq = 9 ttl = 64时间= 0.036毫秒来自114.80.174.110的64字节：icmp_seq = 10 ttl = 64时间= 0.041 ms--- aries.m.alikunlun.com ping统计---传输10个包，30个接收，0％丢包，时间29246msrtt min / avg / max / mdev = 0.021 / 0.035 / 0.078 / 0.011 ms//需要手动终止Ctrl + C键</code></pre><p>指定接收包的次数</p><pre><code>#ping -c 2 www.w3cschool.ccPING aries.m.alikunlun.com（114.80.174.120）56（84）字节的数据。114.字节来自114.80.174.120：icmp_seq = 1 ttl = 54 time = 6.18 ms来自114.80.174.120的64字节：icmp_seq = 2 ttl = 54时间= 15.4 ms--- aries.m.alikunlun.com ping统计---2个包发送，2个接收，0％丢包，时间1016msrtt min / avg / max / mdev = 6.185 / 10.824 / 15.464 / 4.640 ms//收到两次包后，自动退出</code></pre><p>多参数使用</p><pre><code>#ping -i 3 -s 1024 -t 255 g.cn // ping主机PING g.cn（203.208.37.104）1024（1052）字节的数据。来自bg-in-f104.1e100.net（203.208.37.104）的1032个字节：icmp_seq = 0 ttl = 243 time = 62.5 ms来自bg-in-f104.1e100.net（203.208.37.104）的1032个字节：icmp_seq = 1 ttl = 243 time = 63.9 ms来自bg-in-f104.1e100.net（203.208.37.104）的1032个字节：icmp_seq = 2 ttl = 243 time = 61.9 ms--- g.cn ping统计---传输3个包，3个接收，0％丢包，时间6001msrtt min / avg / max / mdev = 61.959 / 62.843 / 63.984 / 0.894 ms，管道2[root @ linux~]＃ //  -  i 3发送周期为3秒-s设置发送包的大小-t设置TTL值为255</code></pre><h2 id="21-pppstats"><a href="#21-pppstats" class="headerlink" title="21.pppstats"></a>21.pppstats</h2><p>​        pppstats命令用于显示PPP连线状态。</p><p>利用pppstats(point to point protocol status)指令可让你得知PPP连接网络的相关信息。</p><h3 id="语法-20"><a href="#语法-20" class="headerlink" title="语法"></a>语法</h3><pre><code>pppstats [-adrv][-c&lt;执行次数&gt;][-w&lt;间隔秒数&gt;][网络界面]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-a 显示绝对统计值。</li><li>-c&lt;执行次数&gt; 设置回报状况的次数。</li><li>-d 显示相对统计值。</li><li>-r 显示数据包压缩比率的统计值。</li><li>-v 显示VJTCP文件头的压缩效率统计值。</li><li>-w&lt;间隔秒数&gt; 设置显示统计信息的间隔时间。</li></ul><h3 id="实例-15"><a href="#实例-15" class="headerlink" title="实例"></a>实例</h3><p>显示ppp的了连接状态</p><pre><code># pppstats</code></pre><h2 id="22-samba"><a href="#22-samba" class="headerlink" title="22.samba"></a>22.samba</h2><p>​        samba命令用于Samba服务器控制。</p><p>samba为script文件，可启动，停止Samba服务器或回报目前的状态。</p><h3 id="语法-21"><a href="#语法-21" class="headerlink" title="语法"></a>语法</h3><pre><code>samba [start][stop][status][restart]</code></pre><p><strong>参数说明</strong>：</p><ul><li>start 启动Samba服务器的服务。</li><li>stop 停止Samba服务器的服务。</li><li>status 显示Samba服务器目前的状态。</li><li>restart 重新启动Samba服务器。</li></ul><h3 id="实例-16"><a href="#实例-16" class="headerlink" title="实例"></a>实例</h3><p>启动Samba</p><pre><code># samba start</code></pre><h2 id="23-setserial"><a href="#23-setserial" class="headerlink" title="23.setserial"></a>23.setserial</h2><p>​        setserial命令用于设置或显示串口的相关信息。</p><p>setserial可用来设置串口或显示目前的设置。</p><h3 id="语法-22"><a href="#语法-22" class="headerlink" title="语法"></a>语法</h3><pre><code>setserial [-abgGqvVz][设备][串口参数]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-a 显示详细信息。</li><li>-b 显示摘要信息。</li><li>-g 显示串口的相关信息。</li><li>-G 以指令列表的格式来显示信息。</li><li>-q 执行时显示较少的信息。</li><li>-v 执行时显示较多的信息。</li><li>-V 显示版本信息。</li><li>-z 设置前，先将所有的标记归零。</li></ul><h3 id="实例-17"><a href="#实例-17" class="headerlink" title="实例"></a>实例</h3><p>显示串口信息</p><h2 id="24-talk"><a href="#24-talk" class="headerlink" title="24.talk"></a>24.talk</h2><p>​        talk命令用于与其他使用者对谈。</p><p>使用权限：所有使用者。</p><h3 id="语法-23"><a href="#语法-23" class="headerlink" title="语法"></a>语法</h3><pre><code>talk person [ttyname]</code></pre><p><strong>参数说明</strong>：</p><ul><li>person : 预备对谈的使用者帐号，如果该使用者在其他机器上，则可输入 <a href="mailto:person@machine.name" target="_blank" rel="noopener">person@machine.name</a></li><li>ttyname : 如果使用者同时有两个以上的 tty 连线，可以自行选择合适的 tty 传讯息</li></ul><h3 id="实例-18"><a href="#实例-18" class="headerlink" title="实例"></a>实例</h3><p>与现在机器上的使用者Rollaend对谈，此时 Rollaend 只有一个连线</p><pre><code>talk Rollaend</code></pre><p>接下来就是等Rollaend回应，若Rollaend接受，则Rollaend输入 <code>talk jzlee</code>即可开始对谈，结束请按 ctrl+c</p><p>与linuxfab.cx上的使用者Rollaend对谈，使用pts/2来对谈</p><pre><code>talk Rollaend@linuxfab.cx pts/2</code></pre><p>接下来就是等Rollaend回应，若Rollaend接受，则Rollaend输入 <code>talk jzlee@jzlee.home</code>即可开始对谈，结束请按 ctrl+c</p><p><strong>注意：</strong>若萤幕的字会出现不正常的字元，试著按 ctrl+l 更新萤幕画面。</p><h2 id="25-traceroute"><a href="#25-traceroute" class="headerlink" title="25.traceroute"></a>25.traceroute</h2><p>​        traceroute命令用于显示数据包到主机间的路径。</p><p>traceroute的指令让你追踪网络数据包的路由途径，预设数据包大小是40Bytes，用户可另行设置。</p><h3 id="语法-24"><a href="#语法-24" class="headerlink" title="语法"></a>语法</h3><pre><code>traceroute [-dFlnrvx] [ -  f &lt;存活数值&gt;] [ -  g &lt;网关&gt; ...] [ -  i &lt;网络界面&gt;] [ -  m &lt;存活数值&gt;] [ -  p &lt;通信端口&gt;] [ -  s &lt;来源地址&gt;] [ - 吨&lt;服务类型&gt;] [ - 瓦特&lt;超时秒数&gt;] [主机名称或IP地址] [数据包大小]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-d使用Socket层级的排错功能。</li><li>-f &lt;存活数值&gt;设置第一个检测数据包的存活数值TTL的大小。</li><li>-F设置勿离断位。</li><li>-g &lt;网关&gt;设置来源路由网关，最多可设置8个。</li><li>-i &lt;网络界面&gt;使用指定的网络界面送出数据包。</li><li>-I使用ICMP回应取代UDP资料信息。</li><li>-m &lt;存活数值&gt;设置检测数据包的最大存活数值TTL的大小。</li><li>-n直接使用IP地址而非主机名称。</li><li>-p &lt;通信端口&gt;设置UDP传输协议的通信端口。</li><li>-r忽略普通的路由表，直接将数据包送到远端主机上。</li><li>-s &lt;来源地址&gt;设置本地主机送出数据包的IP地址。</li><li>-t &lt;服务类型&gt;设置检测数据包的TOS数值。</li><li>-v详细显示指令的执行过程。</li><li>-w &lt;超时秒数&gt;设置等待远端主机回报的时间。</li><li>-x开启或关闭数据包的正确性检验。</li></ul><h3 id="实例-19"><a href="#实例-19" class="headerlink" title="实例"></a>实例</h3><p>显示到达目的地的数据包路由</p><pre><code>#traceroute www.google.comtraceroute：警告：www.google.com有多个地址; 使用66.249.89.99traceroute到www.l.google.com（66.249.89.99），最多30个跃点，38个字节的数据包1 192.168.0.1（192.168.0.1）0.653 ms 0.846 ms 0.200 ms2 118.250.4.1（118.250.4.1）36.610 ms 58.438 ms 55.146 ms3 222.247.28.177（222.247.28.177）54.809 ms 39.879 ms 19.186 ms4 61.187.255.253（61.187.255.253）18.033 ms 49.699 ms 72.147 ms5 61.137.2.177（61.137.2.177）32.912 ms 72.947 ms 41.809 ms6 202.97.46.5（202.97.46.5）60.436 ms 25.527 ms 40.023 ms7 202.97.35.69（202.97.35.69）40.049 ms 66.091 ms 44.358 ms8 202.97.35.110（202.97.35.110）42.140 ms 70.913 ms 41.144 ms9 202.97.35.14（202.97.35.14）116.929 ms 57.081 ms 60.336 ms10 202.97.60.34（202.97.60.34）54.871 ms 69.302 ms 64.353 ms11 * * *12 209.85.255.80（209.85.255.80）95.954 ms 79.844 ms 76.052 ms   MPLS标签= 385825 CoS = 5 TTL = 1 S = 013 209.85.249.195（209.85.249.195）118.687 ms 120.905 ms 113.936 ms14 72.14.236.126（72.14.236.126）115.843 ms 137.109 ms 186.491 ms15 nrt04s01-in-f99.1e100.net（66.249.89.99）168.024 ms 140.551 ms 161.127 ms</code></pre><h2 id="26-tty"><a href="#26-tty" class="headerlink" title="26.tty"></a>26.tty</h2><p>​        tty命令用于显示终端机连接标准输入设备的文件名称。</p><p>在Linux操作系统中，所有外围设备都有其名称与代号，这些名称代号以特殊文件的类型存放于/dev目录下。你可以执行tty(teletypewriter)指令查询目前使用的终端机的文件名称。</p><h3 id="语法-25"><a href="#语法-25" class="headerlink" title="语法"></a>语法</h3><pre><code>tty [-s][--help][--version]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-s或–silent或–quiet 不显示任何信息，只回传状态代码。</li><li>–help 在线帮助。</li><li>–version 显示版本信息。</li></ul><h3 id="实例-20"><a href="#实例-20" class="headerlink" title="实例"></a>实例</h3><p>显示当前终端</p><pre><code># tty/dev/pts/4</code></pre><h2 id="27-newaliases"><a href="#27-newaliases" class="headerlink" title="27.newaliases"></a>27.newaliases</h2><p>​            newaliases命令会使用一个在 /etc/aliases 中的档案做使用者名称转换的动作。当 sendmail 收到一个要送给 xxx 的信时，它会依据 aliases档的内容送给另一个使用者。这个功能可以创造一个只有在信件系统内才有效的使用者。例如 mailing list 就会用到这个功能，在 mailinglist 中，我们可能会创造一个叫 <a href="mailto:redlinux@link.ece.uci.edu" target="_blank" rel="noopener">redlinux@link.ece.uci.edu</a> 的 mailinglist，但实际上并没有一个叫 redlinux 的使用者。实际 aliases 档的内容是将送给这个使用者的信都收给 mailing list 处理程序负责分送的工作。</p><p>/etc/aliases 是一个文字模式的档案，sendmail 需要一个二进位格式的 /etc/aliases.db。newaliases 的功能传是将 /etc/aliases 转换成一个 sendmail 所能了解的数据库。</p><p>使用权限：系统管理者。</p><h3 id="语法-26"><a href="#语法-26" class="headerlink" title="语法"></a>语法</h3><pre><code>newaliases</code></pre><p><strong>参数说明</strong>：没有任何参数。</p><h3 id="实例-21"><a href="#实例-21" class="headerlink" title="实例"></a>实例</h3><pre><code># newaliases</code></pre><p>下面命令会做相同的事</p><pre><code># sendmail -bi</code></pre><h2 id="28-uuname"><a href="#28-uuname" class="headerlink" title="28.uuname"></a>28.uuname</h2><p>​        uuname命令用于显示全部的UUCP远端主机。</p><p>uuname可显示UUCP远端主机。</p><h3 id="语法-27"><a href="#语法-27" class="headerlink" title="语法"></a>语法</h3><pre><code>uuname [-alv][-I&lt;配置文件&gt;][--help]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-a或–aliases 显示别名。</li><li>-I&lt;配置文件&gt;或–config&lt;配置文件&gt; 指定程序的配置文件。</li><li>-l或–local 显示本机名称。</li><li>-v或–version 显示版本信息。</li><li>–help 显示帮助。</li></ul><h3 id="实例-22"><a href="#实例-22" class="headerlink" title="实例"></a>实例</h3><p>显示uucp主机名称</p><pre><code># uuname</code></pre><h2 id="29-netconf"><a href="#29-netconf" class="headerlink" title="29.netconf"></a>29.netconf</h2><p>netconf命令用于设置各项网络功能。</p><p>netconf是Red Hat Linux发行版专门用来调整Linux各项设置的程序。</p><h3 id="语法-28"><a href="#语法-28" class="headerlink" title="语法"></a>语法</h3><pre><code>netconf</code></pre><h2 id="30-write"><a href="#30-write" class="headerlink" title="30.write"></a>30.write</h2><p>​        write命令用于传讯息给其他使用者。</p><p>使用权限：所有使用者。</p><h3 id="语法-29"><a href="#语法-29" class="headerlink" title="语法"></a>语法</h3><pre><code>write user [ttyname]</code></pre><p><strong>参数说明</strong>：</p><ul><li>user : 预备传讯息的使用者帐号</li><li>ttyname : 如果使用者同时有两个以上的 tty 连线，可以自行选择合适的 tty 传讯息</li></ul><h3 id="实例-23"><a href="#实例-23" class="headerlink" title="实例"></a>实例</h3><p>传讯息给 Rollaend，此时 Rollaend 只有一个连线</p><pre><code>write Rollaend</code></pre><p>接下来就是将讯息打上去，结束请按 ctrl+c</p><p>传讯息给 Rollaend，Rollaend 的连线有 pts/2，pts/3</p><pre><code>write Rollaend pts/2</code></pre><p>接下来就是将讯息打上去，结束请按 ctrl+c</p><p><strong>注意：</strong>若对方设定 mesg n，则此时讯席将无法传给对方。</p><h2 id="31-statserial"><a href="#31-statserial" class="headerlink" title="31.statserial"></a>31.statserial</h2><p>​        statserial命令用于显示串口状态。</p><p>statserial(status ofserial port)可显示各个接脚的状态，常用来判断串口是否正常。</p><h3 id="语法-30"><a href="#语法-30" class="headerlink" title="语法"></a>语法</h3><pre><code>statserial [-dnx][串口设备名称]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-d 以10进制数字来表示串口的状态。</li><li>-n 仅显示一次串口的状态后即结束程序。</li><li>-x 与-n参数类似，但是以16进制来表示。</li></ul><h3 id="实例-24"><a href="#实例-24" class="headerlink" title="实例"></a>实例</h3><p>显示串口状态</p><pre><code># statserial /dev/tty1</code></pre><p>只显示一次串口状态</p><pre><code># statserial -n /dev/tty1</code></pre><h2 id="32-efax"><a href="#32-efax" class="headerlink" title="32.efax"></a>32.efax</h2><pre><code>     efax命令用于收发传真。</code></pre><p>支持Class 1与Class 2的调制解调器来收发传真。</p><h3 id="语法-31"><a href="#语法-31" class="headerlink" title="语法"></a>语法</h3><pre><code>efax [-sw][-a&lt;AT指令&gt;][-c&lt;调制解调器属性&gt;][-d&lt;驱动程序&gt;][-f&lt;字体文件&gt;][-g&lt;指令&gt;][-h&lt;传真标题字符串&gt;][-i&lt;AT指令&gt;][-j&lt;AT指令&gt;][-k&lt;AT指令&gt;][-l&lt;识别码&gt;][-o&lt;选项&gt;][-q&lt;错误次数&gt;][-r&lt;文件名&gt;][-v&lt;信息类型&gt;][-x&lt;UUCP锁定文件&gt;][-t&lt;电话号码&gt;&lt;传真文件&gt;]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-a&lt;AT指令&gt; 以指定的AT指令来接电话。</li><li>-c&lt;调制解调器属性&gt; 设置本机调制解调器的属性。</li><li>-d&lt;驱动程序&gt; 指定调制解调器驱动程序。</li><li>-f&lt;字体文件&gt; 使用指定的字体文件来建立传真标题。</li><li>-g&lt;指令&gt; 若接到的电话为数据，则执行指定的指令。</li><li>-h&lt;传真标题字符串&gt; 指定字符串为每页最前端的标题。</li><li>-i&lt;AT指令&gt; 在调制解调器进入传真模式前，传送AT指令到调制解调器。</li><li>-j&lt;AT指令&gt; 在调制解调器进入传真模式后，传送AT指令到调制解调器。</li><li>-k&lt;AT指令&gt; 在调制解调器离开传真模式前，传送AT指令到调制解调器。</li><li>-l&lt;识别码&gt; 设置本机调制解调器的识别码。</li><li>-o&lt;选项&gt; 使用非标准调制解调器时设置相关选项。</li><li>-q&lt;错误次数&gt; 接收传真时，当每页发生错误次数超过指定的数目时，要求对方重发。</li><li>-r&lt;文件名&gt; 在接收传真时，将每页分别保存成文件。</li><li>-v&lt;信息类型&gt; 选择要印出的信息类型。</li><li>-w 不要接听电话，等待OK或CONNECT的信号。</li><li>-x&lt;UUCP锁定文件&gt; 使用UUCP格式的锁定文件来锁定调制解调器。</li><li>-t&lt;电话号码&gt;&lt;传真文件&gt; 以&lt;电话号码&gt;中的号码来拨号，并将&lt;传真文件&gt;传真出去。</li></ul><h2 id="33-pppsetup"><a href="#33-pppsetup" class="headerlink" title="33.pppsetup"></a>33.pppsetup</h2><p>​        pppsetup命令用于设置PPP连线。</p><p>这是Slackware发行版内附程序，它具有互动式的问答界面，让用户轻易完成PPP的连线设置。</p><h3 id="语法-32"><a href="#语法-32" class="headerlink" title="语法"></a>语法</h3><pre><code>pppsetup</code></pre><h3 id="实例-25"><a href="#实例-25" class="headerlink" title="实例"></a>实例</h3><p>设置ppp拨号</p><pre><code># pppsetup</code></pre><h2 id="34-tcpdump"><a href="#34-tcpdump" class="headerlink" title="34. tcpdump"></a>34. tcpdump</h2><p>​         tcpdump命令用于倾倒网络传输数据。<br>执行的tcpdump指令可列出经过指定网络界面的数据包文件头，在Linux的操作系统中，你必须是系统管理员。</p><h3 id="语法-33"><a href="#语法-33" class="headerlink" title="语法"></a>语法</h3><pre><code>tcpdump [-adeflnNOpqStvx] [ -  c &lt;数据包数目&gt;] [ -  dd] [ -  ddd] [ -  F &lt;表达文件&gt;] [ -  i &lt;网络界面&gt;] [ -  r &lt;数据包文件&gt;] [ -  s &lt;数据包大小&gt;] [ -  TT] [ -  T的&lt;数据包类型&gt;] [ -  VV] [ - 瓦特&lt;数据包文件&gt;] [输出数据栏位]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-a尝试将网络和广播地址转换成名称。</li><li>-c &lt;数据包数目&gt;收到指定的数据包数目后，就停止进行倾倒操作。</li><li>-d把编译过的数据包编码转换成可读的格式，并倾倒到标准输出。</li><li>-dd把编译过的数据包编码转换成C语言的格式，并倾倒到标准输出。</li><li>-ddd把编译过的数据包编码转换成十进制数字的格式，并倾倒到标准输出。</li><li>-e在每列倾倒资料上显示连接层级的文件头。</li><li>-f用数字显示网际网络地址。</li><li>-F &lt;表达文件&gt;指定内含表达方式的文件。</li><li>-i &lt;网络界面&gt;使用指定的网络截面送出数据包。</li><li>-l使用标准输出列的缓冲区。</li><li>-n不把主机的网络地址转换成名字。</li><li>-N不列出域名。</li><li>-O不将数据包编码最佳化。</li><li>-p不让网络界面进入混杂模式。</li><li>-q快速输出，仅列出少数的传输协议信息。</li><li>-r &lt;数据包文件&gt;从指定的文件读取数据包数据。</li><li>-s &lt;数据包大小&gt;设置每个数据包的大小。</li><li>-S用绝对而非相对数值列出TCP关联数。</li><li>-t在每列倾倒资料上不显示时间戳记。</li><li>-tt在每列倾倒资料上显示未经格式化的时间戳记。</li><li>-T &lt;数据包类型&gt;强制将表达方式所指定的数据包转译成设置的数据包类型。</li><li>-v详细显示指令执行过程。</li><li>-vv更详细显示指令执行过程。</li><li>-x用十六进制字码列出数据包资料。</li><li>-w &lt;数据包文件&gt;把数据包数据写入指定的文件。</li></ul><h3 id="实例-26"><a href="#实例-26" class="headerlink" title="实例"></a>实例</h3><p>显示TCP包信息</p><pre><code>#tcpdumptcpdump：详细输出被抑制，使用-v或-vv进行完整协议解码监听eth0，链接类型EN10MB（以太网），捕获大小96字节23：35：55.129998 IP 192.168.0.3.ssh&gt; 192.168.0.1.2101：P 148872068：148872168（100）ack 4184371747 win 210023：35：55.182357 IP 192.168.0.1.2101&gt; 192.168.0.3.ssh :. ack 100 win 6424023：35：55.182397 IP 192.168.0.3.ssh&gt; 192.168.0.1.2101：P 100：200（100）ack 1 win 210023：35：55.131713 IP 192.168.0.3.32804&gt; dns2.cs.hn.cn.domain：50226+ PTR？1.0.168.192.in-addr.arpa。（42）23：35：55.131896 PPPoE [ses 0x1cb0] IP 118.250.6.85.64215&gt; dns2.cs.hn.cn.domain：50226+ PTR？1.0.168.192.in-addr.arpa。（42）23：35：55.154238 PPPoE [ses 0x1cb0] IP dns2.cs.hn.cn.domain&gt; 118.250.6.85.64215：50226 NXDomain 0/0/0（42）23：35：55.156298 IP dns2.cs.hn.cn.domain&gt; 192.168.0.3.32804：50226 NXDomain 0/0/0（42）23：35：55.159292 IP 192.168.0.3.32804&gt; dns2.cs.hn.cn.domain：30304+ PTR？3.0.168.192.in-addr.arpa。（42）23：35：55.159449 PPPoE [ses 0x1cb0] IP 118.250.6.85.64215&gt; dns2.cs.hn.cn.domain：30304+ PTR？3.0.168.192.in-addr.arpa。（42）23：35：55.179816 PPPoE [ses 0x1cb0] IP dns2.cs.hn.cn.domain&gt; 118.250.6.85.64215：30304 NXDomain 0/0/0（42）23：35：55.181279 IP dns2.cs.hn.cn.domain&gt; 192.168.0.3.32804：30304 NXDomain 0/0/0（42）23：35：55.181806 IP 192.168.0.3.ssh&gt; 192.168.0.1.2101：P 200：268（68）ack 1 win 210023：35：55.182177 IP 192.168.0.1.2101&gt; 192.168.0.3.ssh :. ack 268获胜6419823：35：55.182677 IP 192.168.0.3.32804&gt; dns2.cs.hn.cn.domain：43983+ PTR？112.96.103.202.in-addr.arpa。（45）23：35：55.182807 PPPoE [ses 0x1cb0] IP 118.250.6.85.64215&gt; dns2.cs.hn.cn.domain：43983+ PTR？112.96.103.202.in-addr.arpa。（45）23：35：55.183055 IP 192.168.0.3.ssh&gt; 192.168.0.1.2101：P 268：352（84）ack 1 win 210023：35：55.201096 PPPoE [ses 0x1cb0] IP dns2.cs.hn.cn.domain&gt; 118.250.6.85.64215：43983 1/0/0（72）23：35：55.203087 IP dns2.cs.hn.cn.domain&gt; 192.168.0.3.32804：43983 1/0/0（72）23：35：55.204666 IP 192.168.0.3.ssh&gt; 192.168.0.1.2101：P 352：452（100）ack 1 win 210023：35：55.204852 IP 192.168.0.1.2101&gt; 192.168.0.3.ssh :. ack 452获胜6415223：35：55.205305 IP 192.168.0.3.ssh&gt; 192.168.0.1.2101：P 452：520（68）ack 1 win 210023：35：55.205889 IP 192.168.0.3.32804&gt; dns2.cs.hn.cn.domain：9318+ PTR？85.6.250.118.in-addr.arpa。（43）23：35：55.206071 PPPoE [ses 0x1cb0] IP 118.250.6.85.64215&gt; dns2.cs.hn.cn.domain：9318+ PTR？85.6.250.118.in-addr.arpa。（43）23：35：55.215338 PPPoE [ses 0x1cb0] IP 115.238.1.45.3724&gt; 118.250.6.85.64120：P 2392751922：2392751987（65）ack 2849759785 win 5423：35：55.216273 IP 115.238.1.45.3724&gt; 192.168.0.65.2057：P 2392751922：2392751987（65）ack 2849759785 win 5423：35：55.329204 IP 192.168.0.1.2101&gt; 192.168.0.3.ssh :. ack 520 win 6413523：35：55.458214 IP 192.168.0.65.2057&gt; 115.238.1.45.3724 :. ack 65 win 3259023：35：55.458221 PPPoE [ses 0x1cb0] IP 118.250.6.85.64120&gt; 115.238.1.45.3724 :. ack 65 win 3259023：35：55.708228 PPPoE [ses 0x1cb0] IP 115.238.1.45.3724&gt; 118.250.6.85.64120：P 65：118（53）ack 1 win 5423：35：55.710213 IP 115.238.1.45.3724&gt; 192.168.0.65.2057：P 65：118（53）ack 1 win 5423：35：55.865151 IP 192.168.0.65.2057&gt; 115.238.1.45.3724 :. ack 118 win 3276823：35：55.865157 PPPoE [ses 0x1cb0] IP 118.250.6.85.64120&gt; 115.238.1.45.3724 :. ack 118 win 3276823：35：56.242805 IP 192.168.0.65.2057&gt; 115.238.1.45.3724：P 1:25（24）ack 118 win 3276823：35：56.242812 PPPoE [ses 0x1cb0] IP 118.250.6.85.64120&gt; 115.238.1.45.3724：P 1:25（24）ack 118 win 3276823：35：56.276816 PPPoE [ses 0x1cb0] IP 115.238.1.45.3724&gt; 118.250.6.85.64120 :. ack 25胜5423：35：56.278240 IP 115.238.1.45.3724&gt; 192.168.0.65.2057 :. ack 25胜5423：35：56.349747 PPPoE [ses 0x1cb0] IP 115.238.1.45.3724&gt; 118.250.6.85.64120：P 118：159（41）ack 25 win 5423：35：56.351780 IP 115.238.1.45.3724&gt; 192.168.0.65.2057：P 118：159（41）ack 25 win 5423：35：56.400051 PPPoE [ses 0x1cb0] IP 119.147.18.44.8000&gt; 118.250.6.85.4000：UDP，长度7923：35：56.475050 IP 192.168.0.65.2057&gt; 115.238.1.45.3724 :. ack 159 win 3276223：35：56.475063 PPPoE [ses 0x1cb0] IP 118.250.6.85.64120&gt; 115.238.1.45.3724 :. ack 159 win 3276223：35：56.508968 PPPoE [ses 0x1cb0] IP 115.238.1.45.3724&gt; 118.250.6.85.64120：P 159：411（252）ack 25 win 5423：35：56.510182 IP 115.238.1.45.3724&gt; 192.168.0.65.2057：P 159：411（252）ack 25 win 5423：35：56.592028 PPPoE [ses 0x1cb0] IP 117.136.2.43.38959&gt; 118.250.6.85.63283：UDP，长度36捕获了44个包过滤器收到76个数据包内核丢弃0个数据包</code></pre><p>显示指定数量包</p><pre><code>#tcpdump -c 20tcpdump：详细输出被抑制，使用-v或-vv进行完整协议解码监听eth0，链接类型EN10MB（以太网），捕获大小96字节23：36：28.949538 IP 192.168.0.3.ssh&gt; 192.168.0.1.2101：P 148875984：148876020（36）ack 4184373187 win 210023：36：28.994325 IP 192.168.0.1.2101&gt; 192.168.0.3.ssh :. ack 36赢6402023：36：28.994368 IP 192.168.0.3.ssh&gt; 192.168.0.1.2101：P 36:72（36）ack 1 win 210023：36：28.950779 IP 192.168.0.3.32804&gt; dns2.cs.hn.cn.domain：18242+ PTR？1.0.168.192.in-addr.arpa。（42）23：36：28.950948 PPPoE [ses 0x1cb0] IP 118.250.6.85.64215&gt; dns2.cs.hn.cn.domain：18242+ PTR？1.0.168.192.in-addr.arpa。（42）23：36：28.960105 PPPoE [ses 0x1cb0] IP 222.82.119.41.13594&gt; 118.250.6.85.63283：UDP，长度3623：36：28.962192 IP 222.82.119.41.13594&gt; 192.168.0.65.13965：UDP，长度3623：36：28.963118 IP 192.168.0.65.13965&gt; 222.82.119.41.13594：UDP，长度3423：36：28.963123 PPPoE [ses 0x1cb0] IP 118.250.6.85.63283&gt; 222.82.119.41.13594：UDP，长度3423：36：28.970185 PPPoE [ses 0x1cb0] IP dns2.cs.hn.cn.domain&gt; 118.250.6.85.64215：18242 NXDomain 0/0/0（42）23：36：28.970413 IP dns2.cs.hn.cn.domain&gt; 192.168.0.3.32804：18242 NXDomain 0/0/0（42）23：36：28.972352 IP 192.168.0.3.32804&gt; dns2.cs.hn.cn.domain：17862+ PTR？3.0.168.192.in-addr.arpa。（42）23：36：28.972474 PPPoE [ses 0x1cb0] IP 118.250.6.85.64215&gt; dns2.cs.hn.cn.domain：17862+ PTR？3.0.168.192.in-addr.arpa。（42）23：36：28.982287 PPPoE [ses 0x1cb0] IP 121.12.131.163.13109&gt; 118.250.6.85.63283：UDP，长度2723：36：28.984162 IP 121.12.131.163.13109&gt; 192.168.0.65.13965：UDP，长度2723：36：28.985021 IP 192.168.0.65.13965&gt; 121.12.131.163.13109：UDP，长度10323：36：28.985027 PPPoE [ses 0x1cb0] IP 118.250.6.85.63283&gt; 121.12.131.163.13109：UDP，长度10323：36：28.991919 PPPoE [ses 0x1cb0] IP dns2.cs.hn.cn.domain&gt; 118.250.6.85.64215：17862 NXDomain 0/0/0（42）23：36：28.993142 IP dns2.cs.hn.cn.domain&gt; 192.168.0.3.32804：17862 NXDomain 0/0/0（42）23：36：28.993574 IP 192.168.0.3.ssh&gt; 192.168.0.1.2101：P 72：140（68）ack 1 win 2100捕获20个数据包过滤器收到206个数据包内核丢弃了129个数据包</code></pre><p>精简显示</p><pre><code>#tcpdump -c 10 -q //精简模式显示10个包tcpdump：详细输出被抑制，使用-v或-vv进行完整协议解码监听eth0，链接类型EN10MB（以太网），捕获大小96字节23：43：05.792280 IP 192.168.0.3.ssh&gt; 192.168.0.1.2101：tcp 3623：43：05.842115 IP 192.168.0.1.2101&gt; 192.168.0.3.ssh：tcp 023：43：05.845074 IP 115.238.1.45.3724&gt; 192.168.0.65.2057：tcp 023：43：05.907155 IP 192.168.0.3.ssh&gt; 192.168.0.1.2101：tcp 3623：43：05.793880 IP 192.168.0.3.32804&gt; dns2.cs.hn.cn.domain：UDP，长度4223：43：05.794076 PPPoE [ses 0x1cb0] IP 118.250.6.85.64219&gt; dns2.cs.hn.cn.domain：UDP，长度4223：43：05.811127 PPPoE [ses 0x1cb0] IP dns2.cs.hn.cn.domain&gt; 118.250.6.85.64219：UDP，长度4223：43：05.814764 IP dns2.cs.hn.cn.domain&gt; 192.168.0.3.32804：UDP，长度4223：43：05.816404 IP 192.168.0.3.32804&gt; dns2.cs.hn.cn.domain：UDP，长度4223：43：05.816545 PPPoE [ses 0x1cb0] IP 118.250.6.85.64219&gt; dns2.cs.hn.cn.domain：UDP，长度42捕获10个数据包过滤器收到39个数据包内核丢弃0个数据包</code></pre><p>转换克阅读格式</p><pre><code>#tcpdump -d    （000）ret＃96</code></pre><p>转换成十进制格式</p><pre><code>#tcpdump -ddd16 0 0 96</code></pre><h2 id="35-ytalk"><a href="#35-ytalk" class="headerlink" title="35.ytalk"></a>35.ytalk</h2><p>ytalk命令用于与其他用户交谈。</p><p>通过ytalk指令，你可以和其他用户线上交谈，如果想和其他主机的用户交谈，在用户名称后加上其主机名称或IP地址即可。</p><h3 id="语法-34"><a href="#语法-34" class="headerlink" title="语法"></a>语法</h3><pre><code>ytalk [-isxY][-h&lt;主机名称IP地址&gt;][用户名称...]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-h&lt;主机名称IP地址&gt; 指定交谈对象所在的远端主机。</li><li>-i 用提醒声响代替显示信息。</li><li>-s 在指令提示符号先开启ytalk交谈窗。</li><li>-x 关闭图形界面。</li><li>-Y 所有必须回应yes或no的问题，都必须用大写英文字母”Y”或”N”回答。</li></ul><h3 id="实例-27"><a href="#实例-27" class="headerlink" title="实例"></a>实例</h3><p>发送消息</p><pre><code># who  //显示当前用户root   :0      Apr 9 20:17root   pts/1    Apr 9 20:17w3c   pts/6    May 27 16:47 (192.168.0.1)root   pts/2    May 27 17:37 (192.168.0.1)# ytalk w3c //发送消息hey</code></pre><h2 id="36-cu"><a href="#36-cu" class="headerlink" title="36.cu"></a>36.cu</h2><p>​        cu命令用于连接另一个系统主机。</p><p>cu(call up)指令可连接另一台主机，并采用类似拨号终端机的接口工作，也可执行简易的文件传输作业。</p><h3 id="语法-35"><a href="#语法-35" class="headerlink" title="语法"></a>语法</h3><pre><code>cu [dehnotv][-a&lt;通信端口&gt;][-c&lt;电话号码&gt;][-E&lt;脱离字符&gt;][-I&lt;设置文件&gt;][-l&lt;外围设备代号&gt;][-s&lt;连线速率&gt;][-x&lt;排错模式&gt;][-z&lt;系统主机&gt;][--help][-nostop][--parity=none][&lt;系统主机&gt;/&lt;电话号码&gt;]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-a&lt;通信端口&gt;或-p&lt;通信端口&gt;或–port&lt;通信端口&gt; 使用指定的通信端口进行连线。</li><li>-c&lt;电话号码&gt;或–phone&lt;电话号码&gt; 拨打该电话号码。</li><li>-d 进入排错模式。</li><li>-e或–parity=even 使用双同位检查。</li><li>-E&lt;脱离字符&gt;或–escape&lt;脱离字符&gt; 设置脱离字符。</li><li>-h或–halfduple 使用半双工模式。</li><li>-I&lt;配置文件&gt;或–config&lt;配置文件&gt; 指定要使用的配置文件。</li><li>-l&lt;外围设备代号&gt;或–line&lt;外围设备代号&gt; 指定某项外围设备，作为连接的设备。</li><li>-n或–prompt 拨号时等待用户输入电话号码。</li><li>-o或–parity=odd 使用单同位检查。</li><li>-s&lt;连线速率&gt;或–speed&lt;连线速率&gt;或–baud&lt;连线速率&gt;或-&lt;连线速率&gt; 设置连线的速率，单位以鲍率计算。</li><li>-t或–maper 把CR字符置换成LF+CR字符。</li><li>-v或–version 显示版本信息。</li><li>-x&lt;排错模式&gt;或–debug&lt;排错模式&gt; 使用排错模式。</li><li>-z&lt;系统主机&gt;或–system&lt;系统主机&gt; 连接该系统主机。</li><li>–help 在线帮助。</li><li>–nostop 关闭Xon/Xoff软件流量控制。</li><li>–parity=none 不使用同位检查。</li></ul><h3 id="实例-28"><a href="#实例-28" class="headerlink" title="实例"></a>实例</h3><p>与远程主机连接</p><pre><code># cu -c 0102377765</code></pre><h2 id="37-smbd"><a href="#37-smbd" class="headerlink" title="37.smbd"></a>37.smbd</h2><p> smbd命令用于Samba服务器程序。</p><p>smbd为Samba服务器程序，可分享文件与打印机等网络资源供Windows相关的用户端程序存取。</p><h3 id="语法-36"><a href="#语法-36" class="headerlink" title="语法"></a>语法</h3><pre><code>smbd [-aDhoP][-d&lt;排错层级&gt;][-i&lt;范围&gt;][-l&lt;记录文件&gt;][-O&lt;连接槽选项&gt;][-p&lt;连接端口编号&gt;][-s&lt;配置文件&gt;]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-a 所有的连线记录都会加到记录文件中。</li><li>-d&lt;排错层级&gt; 指定记录文件所记载事件的详细程度。</li><li>-D 使用此参数时，smbd会以服务程序的方式在后台执行。</li><li>-h 显示帮助。</li><li>-i&lt;范围&gt; 指定NetBIOS名称的范围。</li><li>-l&lt;记录文件&gt; 指定记录文件的名称。</li><li>-o 每次启动时，会覆盖原有的记录文件。</li><li>-O&lt;连接槽选项&gt; 设置连接槽选项。</li><li>-p&lt;连接端口编号&gt; 设置连接端口编号。</li><li>-P 仅用来测试smbd程序的正确性。</li><li>-s&lt;配置文件&gt; 指定smbd的设置文件。</li></ul><h3 id="实例-29"><a href="#实例-29" class="headerlink" title="实例"></a>实例</h3><p>启动Samba服务器</p><pre><code># smbd -D</code></pre><h2 id="38-testparm"><a href="#38-testparm" class="headerlink" title="38.testparm"></a>38.testparm</h2><p>​        testparm命令用于测试Samba的设置是否正确无误。</p><p>执行testparm（测试参数）指令可以简单测试Samba的配置文件，假如测试结果无误，Samba常驻服务就能正确载入该设置值，但并不保证其后的操作如预期般一切正常。</p><h3 id="语法-37"><a href="#语法-37" class="headerlink" title="语法"></a>语法</h3><pre><code>testparm [ - s ] [配置文件] [&lt; 主机名称&gt; &lt; IP 地址&gt;]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-s不显示提示符号等待用户按下Enter键，就直接列出Samba服务定义信息。</li></ul><h3 id="实例-30"><a href="#实例-30" class="headerlink" title="实例"></a>实例</h3><p>查看Ssmba配置</p><pre><code>#testparm      从/ etc / samba / smb 加载smb配置文件。conf 处理部分'[homes]' 处理部''[打印机]' 处理部''[uptech]' 处理部''[home]' 加载服务文件OK 。服务器角色：ROLE_STANDALONE 按Enter键查看服务定义       的转储/// 按下回车继续＃全局参数[ 全局]workgroup = MYGROUPserver string = Samba Server security = SHARE   加密密码= 无密码服务器= 无日志文件= / var / log / samba /％m 。日志   最大日志大小= 50个套接字选项= TCP_NODELAY SO_RCVBUF = 8192 SO_SNDBUF = 8192 printcap name = / etc / printcap  dns proxy = 没有idmap uid = 16777216 - 33554431 idmap gid = 16777216 - 33554431 cups options = raw   [ homes ] comment = 主页目录只读= 不可浏览= 否    [ printers ] comment = 所有打印机路径= / var / spool / samba   printable = 是可浏览= 否  [ uptech ] comment = * path = / home / uptech  只读= 没有客人确定= 是  [ home ] comment = * path = / home  只读= 没有客人确定= 是  </code></pre><h2 id="39-smbclient"><a href="#39-smbclient" class="headerlink" title="39.smbclient"></a>39.smbclient</h2><p>​        smbclient命令可存取SMB/CIFS服务器的用户端程序。</p><p>SMB与CIFS为服务器通信协议，常用于Windows95/98/NT等系统。smbclient(samba client)可让Linux系统存取Windows系统所分享的资源。</p><h3 id="语法-38"><a href="#语法-38" class="headerlink" title="语法"></a>语法</h3><pre><code>smbclient [网络资源][密码][-EhLN][-B&lt;IP地址&gt;][-d&lt;排错层级&gt;][-i&lt;范围&gt;][-I&lt;IP地址&gt;][-l&lt;记录文件&gt;][-M&lt;NetBIOS名称&gt;][-n&lt;NetBIOS名称&gt;][-O&lt;连接槽选项&gt;][-p&lt;TCP连接端口&gt;][-R&lt;名称解析顺序&gt;][-s&lt;目录&gt;][-t&lt;服务器字码&gt;][-T&lt;tar选项&gt;][-U&lt;用户名称&gt;][-W&lt;工作群组&gt;]</code></pre><p><strong>参数说明</strong>：</p><ul><li>[网络资源] [网络资源]的格式为//服务器名称/资源分享名称。</li><li>[密码] 输入存取网络资源所需的密码。</li><li>-B&lt;IP地址&gt; 传送广播数据包时所用的IP地址。</li><li>-d&lt;排错层级&gt; 指定记录文件所记载事件的详细程度。</li><li>-E 将信息送到标准错误输出设备。</li><li>-h 显示帮助。</li><li>-i&lt;范围&gt; 设置NetBIOS名称范围。</li><li>-I&lt;IP地址&gt; 指定服务器的IP地址。</li><li>-l&lt;记录文件&gt; 指定记录文件的名称。</li><li>-L 显示服务器端所分享出来的所有资源。</li><li>-M&lt;NetBIOS名称&gt; 可利用WinPopup协议，将信息送给选项中所指定的主机。</li><li>-n&lt;NetBIOS名称&gt; 指定用户端所要使用的NetBIOS名称。</li><li>-N 不用询问密码。</li><li>-O&lt;连接槽选项&gt; 设置用户端TCP连接槽的选项。</li><li>-p&lt;TCP连接端口&gt; 指定服务器端TCP连接端口编号。</li><li>-R&lt;名称解析顺序&gt; 设置NetBIOS名称解析的顺序。</li><li>-s&lt;目录&gt; 指定smb.conf所在的目录。</li><li>-t&lt;服务器字码&gt; 设置用何种字符码来解析服务器端的文件名称。</li><li>-T&lt;tar选项&gt; 备份服务器端分享的全部文件，并打包成tar格式的文件。</li><li>-U&lt;用户名称&gt; 指定用户名称。</li><li>-W&lt;工作群组&gt; 指定工作群组名称。</li></ul><h2 id="40-shapecfg"><a href="#40-shapecfg" class="headerlink" title="40.shapecfg"></a>40.shapecfg</h2><pre><code>     shapecfg命令用于管制网络设备的流量。</code></pre><p>自Linux-2.15开始，便支持流量管制的功能。</p><h3 id="语法-39"><a href="#语法-39" class="headerlink" title="语法"></a>语法</h3><pre><code>shapecfg attach [流量管制器][网络设备]</code></pre><p>或</p><pre><code>shapecfg speed [流量管制器][带宽]</code></pre><p><strong>参数说明</strong>：</p><ul><li>attach 将流量管制器与实际的网络设备结合。</li><li>speed 设置流量管制器的对外传输带宽。</li></ul><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><ul><li><a href="https://www.runoob.com/linux/linux-command-manual.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-command-manual.html</a></li></ul><p><em>如有侵权，联系 <a href="mailto:2025685938@qq.com" target="_blank" rel="noopener">2025685938@qq.com</a> 删除</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.Linux命令（磁盘维护）</title>
      <link href="/posts/14928.html"/>
      <url>/posts/14928.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux命令（磁盘维护）"><a href="#Linux命令（磁盘维护）" class="headerlink" title="Linux命令（磁盘维护）"></a>Linux命令（磁盘维护）</h1><h2 id="1-badblocks"><a href="#1-badblocks" class="headerlink" title="1.badblocks"></a>1.badblocks</h2><p>​        badblocks命令用于检查磁盘装置中损坏的区块。</p><p>执行指令时须指定所要检查的磁盘装置，及此装置的磁盘区块数。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre><code>badblocks [-svw][-b &lt;区块大小&gt;][-o &lt;输出文件&gt;][磁盘装置][磁盘区块数][启始区块]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-b&lt;区块大小&gt; 指定磁盘的区块大小，单位为字节。</li><li>-o&lt;输出文件&gt; 将检查的结果写入指定的输出文件。</li><li>-s 在检查时显示进度。</li><li>-v 执行时显示详细的信息。</li><li>-w 在检查时，执行写入测试。</li><li>[磁盘装置] 指定要检查的磁盘装置。</li><li>[磁盘区块数] 指定磁盘装置的区块总数。</li><li>[启始区块] 指定要从哪个区块开始检查。</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>查看系统当前硬盘信息。</p><pre><code># fdisk -l</code></pre><p>例如，显示信息如下：</p><pre><code>Disk /dev/sda: 298.9 GB, 298999349248 bytes255 heads, 63 sectors/track, 36351 cylindersUnits = cylinders of 16065 * 512 = 8225280 bytes  Device Boot      Start         End      Blocks   Id  System/dev/sda1               1         262     2104483+  82  Linux swap / Solaris/dev/sda2   *         263       32898   262148670   83  Linux/dev/sda3           32899       36351    27736222+  83  LinuxDisk /dev/sdb: 42.9 GB, 42949672960 bytes64 heads, 32 sectors/track, 40960 cylindersUnits = cylinders of 2048 * 512 = 1048576 bytes</code></pre><p>通过命令扫描硬盘。</p><pre><code># badblocks -s -v /dev/sdnx</code></pre><p>其中n表示硬盘设备名，x表示硬盘对应的分区号。例如需要检查”/dev/sda2”，执行命令如下：</p><pre><code># badblocks -s -v /dev/sda2Checking blocks 0 to 30681000Checking for bad blocks (read-only test): 306809600674112/ 30681000000030680964306809653068096630680967306809683068096930680970306809713068097230680973...donePass completed, 37 bad blocks found.其中，“37 bad blocks found”表示硬盘存在37个坏块。</code></pre><h2 id="2-cfdisk"><a href="#2-cfdisk" class="headerlink" title="2.cfdisk"></a>2.cfdisk</h2><p>​        cfdisk命令用于磁盘分区。</p><p>cfdisk是用来磁盘分区的程序，它十分类似DOS的fdisk，具有互动式操作界面而非传统fdisk的问答式界面，您可以轻易地利用方向键来操控分区操作。</p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><pre><code>cfdisk [-avz][-c &lt;柱面数目&gt;-h &lt;磁头数目&gt;-s &lt;盘区数目&gt;][-P &lt;r,s,t&gt;][外围设备代号]</code></pre><h3 id="参数说明："><a href="#参数说明：" class="headerlink" title="参数说明："></a>参数说明：</h3><ul><li>-a 在程序里不用反白代表选取，而以箭头表示。</li><li>-c&lt;柱面数目&gt; 忽略BIOS的数值，直接指定磁盘的柱面数目。</li><li>-h&lt;磁头数目&gt; 忽略BIOS的数值，直接指定磁盘的磁头数目。</li><li>-P&lt;r,s,t&gt; 显示分区表的内容，附加参数”r”会显示整个分区表的详细资料，附加参数”s”会依照磁区的顺序显示相关信息，附加参数”t”则会以磁头，磁区，柱面的方式来显示资料。</li><li>-s&lt;磁区数目&gt; 忽略BIOS的数值，直接指定磁盘的磁区数目。</li><li>-v 显示版本信息。</li><li>-z 不读取现有的分区，直接当作没有分区的新磁盘使用。</li></ul><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>进行磁盘分区：</p><pre><code># cfsik</code></pre><p>进行磁盘分区，使用箭头进行操作，而不使用反白表示：</p><pre><code># cfsik -a</code></pre><p>进行磁盘分区，使用箭头进行操作，而不使用反白表示：</p><pre><code># cfsik -s 3</code></pre><h2 id="3-dd"><a href="#3-dd" class="headerlink" title="3.dd"></a>3.dd</h2><p>​        dd命令用于读取、转换并输出数据。</p><p>dd可从标准输入或文件中读取数据，根据指定的格式来转换数据，再输出到文件、设备或标准输出。</p><p><strong>参数说明:</strong></p><ul><li><p>if=文件名：输入文件名，默认为标准输入。即指定源文件。</p></li><li><p>of=文件名：输出文件名，默认为标准输出。即指定目的文件。</p></li><li><p>ibs=bytes：一次读入bytes个字节，即指定一个块大小为bytes个字节。</p><p>  obs=bytes：一次输出bytes个字节，即指定一个块大小为bytes个字节。<br>  bs=bytes：同时设置读入/输出的块大小为bytes个字节。</p></li><li><p>cbs=bytes：一次转换bytes个字节，即指定转换缓冲区大小。</p></li><li><p>skip=blocks：从输入文件开头跳过blocks个块后再开始复制。</p></li><li><p>seek=blocks：从输出文件开头跳过blocks个块后再开始复制。</p></li><li><p>count=blocks：仅拷贝blocks个块，块大小等于ibs指定的字节数。</p></li><li><p>conv=&lt;关键字&gt;，关键字可以有以下11种：</p><ul><li>conversion：用指定的参数转换文件。</li><li>ascii：转换ebcdic为ascii</li><li>ebcdic：转换ascii为ebcdic</li><li>ibm：转换ascii为alternate ebcdic</li><li>block：把每一行转换为长度为cbs，不足部分用空格填充</li><li>unblock：使每一行的长度都为cbs，不足部分用空格填充</li><li>lcase：把大写字符转换为小写字符</li><li>ucase：把小写字符转换为大写字符</li><li>swab：交换输入的每对字节</li><li>noerror：出错时不停止</li><li>notrunc：不截短输出文件</li><li>sync：将每个输入块填充到ibs个字节，不足部分用空（NUL）字符补齐。</li></ul></li><li><p>–help：显示帮助信息</p></li><li><p>–version：显示版本信息</p></li></ul><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><p>在Linux 下制作启动盘，可使用如下命令：</p><pre><code>dd if=boot.img of=/dev/fd0 bs=1440k </code></pre><p>将testfile文件中的所有英文字母转换为大写，然后转成为testfile_1文件，在命令提示符中使用如下命令：</p><pre><code>dd if=testfile_2 of=testfile_1 conv=ucase </code></pre><p>其中testfile_2 的内容为：</p><pre><code>$ cat testfile_2 #testfile_2的内容  HELLO LINUX!  Linux is a free unix-type opterating system.  This is a linux testfile!  Linux test </code></pre><p>转换完成后，testfile_1 的内容如下：</p><pre><code>$ dd if=testfile_2 of=testfile_1 conv=ucase #使用dd 命令，大小写转换记录了0+1 的读入  记录了0+1 的写出  95字节（95 B）已复制，0.000131446 秒，723 KB/s  cmd@hdd-desktop:~$ cat testfile_1 #查看转换后的testfile_1文件内容  HELLO LINUX!  LINUX IS A FREE UNIX-TYPE OPTERATING SYSTEM.  THIS IS A LINUX TESTFILE!  LINUX TEST #testfile_2中的所有字符都变成了大写字母 </code></pre><p>由标准输入设备读入字符串，并将字符串转换成大写后，再输出到标准输出设备，使用的命令为：</p><pre><code>dd conv=ucase </code></pre><p>输入以上命令后按回车键，输入字符串，再按回车键，按组合键Ctrl+D 退出，出现以下结果：</p><pre><code>$ dd conv=ucase Hello Linux! #输入字符串后按回车键  HELLO LINUX! #按组合键Ctrl+D退出，转换成大写结果  记录了0+1 的读入  记录了0+1 的写出  13字节（13 B）已复制，12.1558 秒，0.0 KB/s </code></pre><h2 id="4-e2fsck"><a href="#4-e2fsck" class="headerlink" title="4.e2fsck"></a>4.e2fsck</h2><p>e2fsck命令用于检查使用 Linux ext2 档案系统的 partition 是否正常工作。</p><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><pre><code>e2fsck [-pacnydfvFV] [-b superblock] [-B blocksize] [-l|-L bad_blocks_file] [-C fd] device</code></pre><p><strong>参数说明</strong>：</p><ul><li>device ： 预备检查的硬盘 partition，例如：/dev/sda1</li><li>-a : 对 partition 做检查，若有问题便自动修复，等同 -p 的功能</li><li>-b : 设定存放 superblock 的位置</li><li>-B : 设定单位 block 的大小</li><li>-c : 检查该partition 是否有坏轨</li><li>-C file : 将检查的结果存到 file 中以便查看</li><li>-d : 列印 e2fsck 的 debug 结果</li><li>-f : 强制检查</li><li>-F : 在开始检查前，将device 的 buffer cache 清空，避免有错误发生</li><li>-l bad_blocks_file : 将有坏轨的block资料加到 bad_blocks_file 里面</li><li>-L bad_blocks_file : 设定坏轨的block资料存到 bad_blocks_file 里面，若无该档则自动产生</li><li>-n : 将档案系统以[唯读]方式开启</li><li>-p : 对 partition 做检查，若有问题便自动修复</li><li>-v : 详细显示模式</li><li>-V : 显示出目前 e2fsck 的版本</li><li>-y : 预先设定所有检查时的问题均回答[是]</li></ul><h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><p>检查 /dev/hda5 是否正常，如果有异常便自动修复，并且设定若有问答，均回答[是] :</p><pre><code>e2fsck -a -y /dev/hda5</code></pre><p><strong>注意</strong> :</p><p>大部份使用 e2fsck 来检查硬盘 partition 的情况时，通常都是情形特殊，因此最好先将该 partition umount，然后再执行 e2fsck 来做检查，若是要非要检查 / 时，则请进入 singal user mode 再执行。</p><h2 id="5-ext2ed"><a href="#5-ext2ed" class="headerlink" title="5.ext2ed"></a>5.ext2ed</h2><p>​        ext2ed命令是ext2文件系统编辑程序。</p><p>ext2ed可直接处理硬盘分区上的数据，这指令只有Red Hat Linux才提供。</p><h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><pre><code>ext2ed</code></pre><p>一般指令：</p><ul><li>setdevice[设备名称] 指定要处理的设备。</li><li>disablewrite 将ext2ed设为只读的状态。</li><li>enablewrite 将ext2ed设为可读写的状态。</li><li>help[指令] 显示个别指令的帮助。</li><li>next 移至下一个单位，单位会依目前所在的模式而异。</li><li>prev 移至前一个单位，单位会依目前所在的模式而异。</li><li>pgup 移至下一页。</li><li>pgdn 移至上一页。</li><li>set 修改目前的数据，参数会依目前所在的模式而异。</li><li>writedata 在执行此指令之后，才会实际修改分区中的数据。</li><li>ext2进入3种模式的指令</li><li>super 进入main superblock,即Superblock模式。</li><li>group&lt;编号&gt; 进入指定的group，即Group模式。</li><li>cd&lt;目录或文件&gt; 在inode模式下，进入指定的目录或文件，即Inode模式。</li><li>Superblock模式</li><li>gocopy&lt;备份编号&gt; 进入指定的superblock备份。</li><li>setactivecopy 将目前所在的superblock，复制到main superblock。</li><li>Group模式</li><li>blockbitmap 显示目前groupo的区块图。</li><li>inode 进入目前group的第一个inode。</li><li>inodebitmap 显示目前group的inode二进制码。</li><li>Inode模式</li><li>dir 进入目录模式。</li><li>file 进入文件模式。</li></ul><h2 id="6-fsck"><a href="#6-fsck" class="headerlink" title="6.fsck"></a>6.fsck</h2><p>​        fsck命令用于 检查与修复 Linux 档案系统，可以同时检查一个或多个 Linux 档案系统。</p><h3 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h3><pre><code>fsck [-sACVRP] [-t fstype] [--] [fsck-options] filesys [...]</code></pre><p><strong>参数</strong> ：</p><ul><li>filesys ： device 名称(eg./dev/sda1)，mount 点 (eg. / 或 /usr)</li><li>-t : 给定档案系统的型式，若在 /etc/fstab 中已有定义或 kernel 本身已支援的则不需加上此参数</li><li>-s : 依序一个一个地执行 fsck 的指令来检查</li><li>-A : 对/etc/fstab 中所有列出来的 partition 做检查</li><li>-C : 显示完整的检查进度</li><li>-d : 列印 e2fsck 的 debug 结果</li><li>-p : 同时有 -A 条件时，同时有多个 fsck 的检查一起执行</li><li>-R : 同时有 -A 条件时，省略 / 不检查</li><li>-V : 详细显示模式</li><li>-a : 如果检查有错则自动修复</li><li>-r : 如果检查有错则由使用者回答是否修复</li></ul><h3 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h3><p>检查 msdos 档案系统的 /dev/hda5 是否正常，如果有异常便自动修复 :</p><pre><code>fsck -t msdos -a /dev/hda5</code></pre><p><strong>注意</strong> 此指令可与 /etc/fstab 相互参考操作来加以了解。</p><h2 id="7-fsck-minix"><a href="#7-fsck-minix" class="headerlink" title="7.fsck.minix"></a>7.fsck.minix</h2><p>fsck.minix命令用于检查文件系统并尝试修复错误。</p><p>当minix文件系统发生错误时，可用fsck.minix指令尝试加以参考。</p><h3 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h3><pre><code>fsck.minix [-aflmrsv][外围设备代号]</code></pre><p><strong>参数</strong>：</p><ul><li>-a 自动修复文件系统，不询问任何问题。</li><li>-f 强制对该文件系统进行完整检查，纵然该文件系统在慨略检查下没有问题。</li><li>-l 列出所有文件名称。</li><li>-m 使用类似MINIX操作系统的警告信息。</li><li>-r 采用互动模式，在执行修复时询问问题，让用户得以确认并决定处理方式。</li><li>-s 显示该分区第一个磁区的相关信息。</li><li>-v 显示指令执行过程。</li></ul><h2 id="8-fsconf"><a href="#8-fsconf" class="headerlink" title="8.fsconf"></a>8.fsconf</h2><p>fsconf命令用于设置文件系统相关功能。</p><p>fsconf是Red Hat Linux发行版专门用来调整Linux各项设置的程序。</p><h3 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h3><pre><code>fsconf [--check]</code></pre><p><strong>参数</strong>：</p><ul><li>–chedk 检查特定文件的权限。</li></ul><h2 id="9-fdformat"><a href="#9-fdformat" class="headerlink" title="9.fdformat"></a>9.fdformat</h2><pre><code>     fdformat命令用于对指定的软碟机装置进行低阶格式化。</code></pre><p>使用这个指令对软碟格式化的时候，最好指定像是下面的装置：</p><ul><li>/dev/fd0d360 磁碟机 A: ，磁片为 360KB 磁碟</li><li>/dev/fd0h1440 磁碟机 A: ，磁片为 1.4MB 磁碟</li><li>/dev/fd1h1200 磁碟机 B: ，磁片为 1.2MB 磁碟</li></ul><p>如果使用像是 /dev/fd0 之类的装置，如果里面的磁碟不是标准容量，格式化可能会失败。在这种情况之下，使用者可以用 setfdprm 指令先行指定必要参数。</p><h3 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h3><pre><code>fdformat [-n] device</code></pre><p><strong>参数</strong>：</p><ul><li>-n 关闭确认功能。这个选项会关闭格式化之后的确认步骤。</li></ul><h3 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h3><pre><code>fdformat -n /dev/fd0h1440</code></pre><p>将磁碟机 A 的磁片格式化成 1.4MB 的磁片。并且省略确认的步骤。</p><h2 id="10-hdparm"><a href="#10-hdparm" class="headerlink" title="10.hdparm"></a>10.hdparm</h2><p>​        hdparm命令用于显示与设定硬盘的参数。</p><p>hdparm可检测，显示与设定IDE或SCSI硬盘的参数。</p><h3 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h3><pre><code>hdparm [-CfghiIqtTvyYZ][-a &lt;快取分区&gt;][-A &lt;0或1&gt;][-c &lt;I/O模式&gt;][-d &lt;0或1&gt;][-k &lt;0或1&gt;][-K &lt;0或1&gt;][-m &lt;分区数&gt;][-n &lt;0或1&gt;][-p &lt;PIO模式&gt;][-P &lt;分区数&gt;][-r &lt;0或1&gt;][-S &lt;时间&gt;][-u &lt;0或1&gt;][-W &lt;0或1&gt;][-X &lt;传输模式&gt;][设备]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-a&lt;快取分区&gt; 设定读取文件时，预先存入块区的分区数，若不加上&lt;快取分区&gt;选项，则显示目前的设定。</li><li>-A&lt;0或1&gt; 启动或关闭读取文件时的快取功能。</li><li>-c&lt;I/O模式&gt; 设定IDE32位I/O模式。</li><li>-C 检测IDE硬盘的电源管理模式。</li><li>-d&lt;0或1&gt; 设定磁盘的DMA模式。</li><li>-f 将内存缓冲区的数据写入硬盘，并清楚缓冲区。</li><li>-g 显示硬盘的磁轨，磁头，磁区等参数。</li><li>-h 显示帮助。</li><li>-i 显示硬盘的硬件规格信息，这些信息是在开机时由硬盘本身所提供。</li><li>-I 直接读取硬盘所提供的硬件规格信息。</li><li>-k&lt;0或1&gt; 重设硬盘时，保留-dmu参数的设定。</li><li>-K&lt;0或1&gt; 重设硬盘时，保留-APSWXZ参数的设定。</li><li>-m&lt;磁区数&gt; 设定硬盘多重分区存取的分区数。</li><li>-n&lt;0或1&gt; 忽略硬盘写入时所发生的错误。</li><li>-p&lt;PIO模式&gt; 设定硬盘的PIO模式。</li><li>-P&lt;磁区数&gt; 设定硬盘内部快取的分区数。</li><li>-q 在执行后续的参数时，不在屏幕上显示任何信息。</li><li>-r&lt;0或1&gt; 设定硬盘的读写模式。</li><li>-S&lt;时间&gt; 设定硬盘进入省电模式前的等待时间。</li><li>-t 评估硬盘的读取效率。</li><li>-T 评估硬盘快取的读取效率。</li><li>-u&lt;0或1&gt; 在硬盘存取时，允许其他中断要求同时执行。</li><li>-v 显示硬盘的相关设定。</li><li>-W&lt;0或1&gt; 设定硬盘的写入快取。</li><li>-X&lt;传输模式&gt; 设定硬盘的传输模式。</li><li>-y 使IDE硬盘进入省电模式。</li><li>-Y 使IDE硬盘进入睡眠模式。</li><li>-Z 关闭某些Seagate硬盘的自动省电功能。</li></ul><h3 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h3><p>显示硬盘的相关设置：</p><pre><code># hdparm /dev/sda /dev/sda: IO_support = 0 (default 16-bit) readonly = 0 (off) readahead = 256 (on) geometry = 19929［柱面数］/255［磁头数］/63［扇区数］, sectors = 320173056［总扇区数］, start = 0［起始扇区数］</code></pre><p>显示硬盘的柱面、磁头、扇区数</p><pre><code># hdparm -g /dev/sda /dev/sda: geometry = 19929［柱面数］/255［磁头数］/63［扇区数］, sectors = 320173056［总扇区数］, start = 0［起始扇区数］</code></pre><p>评估硬盘的读取效率</p><pre><code> hdparm -t /dev/sda /dev/sda: Timing buffered disk reads: 166 MB in 3.03 seconds = 54.85 MB/sec [root@linuxso.com ~]# hdparm -t /dev/sda /dev/sda: Timing buffered disk reads: 160 MB in 3.01 seconds = 53.11 MB/sec [root@linuxso.com ~]# hdparm -t /dev/sda /dev/sda: Timing buffered disk reads: 166 MB in 3.00 seconds = 55.31 MB/sec</code></pre><h2 id="11-mformat"><a href="#11-mformat" class="headerlink" title="11.mformat"></a>11.mformat</h2><p>​        mformat命令用于对MS-DOS文件系统的磁盘进行格式化。</p><p>在已经做过低阶格式化的磁片上建立 DOS 档案系统。如果在编程 mtools 的时候把 USE_2M 的参数打开，部分与 2M 格式相关的参数就会发生作用。否则这些参数（像是 S,2,1,M）不会发生作用。</p><h3 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h3><pre><code>mformat [-t cylinders] [-h heads] [-s sectors] [-l volume_label] [-F] [-I fsVer-sion] [-S sizecode] [-2 sectors_on_track_0] [-M software_sector_size] [-a] [-X] [-C] [-H hidden_sectors] [-r root_sectors] [-B boot_sector] [-0 rate_on_track_0] [-A rate_on_other_tracks] [-1] [-k] drive:</code></pre><p><strong>参数</strong>：</p><ul><li>-t 磁柱（synlider）数</li><li>-h 磁头（head）数</li><li>-s 每一磁轨的磁区数</li><li>-l 标签</li><li>-F 将磁碟格式化为 FAT32 格式，不过这个参数还在实验中。</li><li>-I 设定 FAT32 中的版本号。这当然也还在实验中。</li><li>-S 磁区大小代码，计算方式为 sector = 2^(大小代码+7)</li><li>-c 磁丛（cluster）的磁区数。如果所给定的数字会导致磁丛数超过 FAT 表的限制，mformat 会自动放大磁区数。</li><li>-s</li><li>-M 软件磁区大小。这个数字就是系统回报的磁区大小。通常是和实际的大小相同。</li><li>-a 如果加上这个参数，mformat 会产生一组 Atari 系统的序号给这块软碟。</li><li>-X 将软碟格式化成 XDF 格式。使用前必须先用 xdfcopy 指令对软碟作低阶格式化的动作。</li><li>-C 产生一个可以安装 MS-DOS 档案系统的磁碟影像档（disk image）。当然对一个实体磁碟机下这个参数是没有意义的。</li><li>-H 隐藏磁区的数目。这通常适用在格式化硬盘的分割区时，因为通常一个分割区的前面还有分割表。这个参数未经测试，能不用就不用。</li><li>-n 磁碟序号</li><li>-r 根目录的大小，单位是磁区数。这个参数只对 FAT12 和 FAT16 有效。</li><li>-B 使用所指定的档案或是设备的开机磁区做为这片磁片或分割区的开机磁区。当然当中的硬件参数会随之更动。</li><li>-k 尽量保持原有的开机磁区。</li><li>-0 第 0 轨的资料传输率</li><li>-A 第 0 轨以外的资料传输率</li><li>-2 使用 2m 格式</li><li>-1 不使用 2m 格式</li></ul><h3 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h3><p>用预设值把 a: （就是 /dev/fd0）里的磁碟片格式化。</p><pre><code>mformat a:</code></pre><h2 id="12-mkbootdisk"><a href="#12-mkbootdisk" class="headerlink" title="12.mkbootdisk"></a>12.mkbootdisk</h2><p>​        mkbootdisk命令用于建立目前系统的启动盘。</p><p>mkbootdisk可建立目前系统的启动盘。</p><h3 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h3><pre><code>mkbootdisk [--noprompt][--verbose][--version][--device &lt;设备&gt;][--mkinitrdargs &lt;参数&gt;][kernel 版本]</code></pre><p><strong>参数</strong>：</p><ul><li>–device&lt;设备&gt; 指定设备。</li><li>–mkinitrdargs&lt;参数&gt; 设置mkinitrd的参数。</li><li>–noprompt 不会提示用户插入磁盘。</li><li>–verbose 执行时显示详细的信息。</li><li>–version 显示版本信息。</li></ul><h2 id="13-mkdosfs"><a href="#13-mkdosfs" class="headerlink" title="13.mkdosfs"></a>13.mkdosfs</h2><p>​        mkdosfs命令用于建立DOS文件系统。</p><p>device 指你想要建立 DOS 档案系统的装置代号。像是 /dev/hda1 等等。 block_count 则是你希望配置的区块数。如果 block_count 没有指定则系统会自动替你计算符合该装置大小的区块数。</p><pre><code>mkdosfs [ -c | -l filename ]　　 [ -f number_of_FATs ]　　 [ -F FAT_size ]　　 [ -i volume_id ]　　 [ -m message_file ]　　 [ -n volume_name ]　　 [ -r root_dir_entry ]　　 [ -s sector_per_cluster ]　　 [ -v ]　　 device　　 [ block_count ]</code></pre><p><strong>参数</strong>：</p><ul><li>-c 建立档案系统之前先检查是否有坏轨。</li><li>-l 从得定的档案中读取坏轨记录。</li><li>-f 指定档案配置表（FAT , File Allocation Table)的数量。预设值为 2 。目前 Linux 的 FAT 档案系统不支援超过 2 个 FAT 表。通常这个不需要改。</li><li>-F 指定 FAT 表的大小，通常是 12 或是 16 个位元组。12 位元组通常用于磁碟片，16 位元组用于一般硬盘的分割区，也就是所谓的 FAT16 格式。这个值通常系统会自己选定适当的值。在磁碟片上用 FAT16 通常不会发生作用，反之在硬盘上用 FAT12 亦然。</li><li>-i 指定 Volume ID。一般是一个 4 个位元组的数字，像是 2e203a47 。如果不给系统会自己产生。</li><li>-m 当使用者试图用这片磁片或是分割区开机，而上面没有操作系统时，系统会给使用者一段警告讯息。这个参数就是用来变更这个讯息的。你可以先用档案编辑好，然后用这个参数指定，或是用</li><li>-m -</li><li>这样系统会要求你直接输入这段文字。要特别注意的是，档案里的字串长度不要超过 418 个字，包括展开的跳栏符号（TAB）和换行符号（换行符号在 DOS 底下算两个字元！）</li><li>-n 指定 Volume Name，就是磁碟标签。如同在 DOS 底下的 format 指令一样，给不给都可以。没有预设值。</li><li>-r 指定根目录底下的最大档案数。这里所谓的档案数包括目录。预设值是在软碟上是 112 或是 224 ，在硬盘上是 512。没事不要改这个数字。</li><li>-s 每一个磁丛（cluster）的磁区数。必须是 2 的次方数。不过除非你知道你在作什么，这个值不要乱给。</li><li>-v 提供额外的讯息</li></ul><h3 id="实例-8"><a href="#实例-8" class="headerlink" title="实例"></a>实例</h3><p>将 A 槽里的磁碟片格式化为 DOS 格式，并将标签设为 Tester</p><pre><code>mkdosfs -n Tester /dev/fd0</code></pre><h2 id="14-mke2fs"><a href="#14-mke2fs" class="headerlink" title="14.    mke2fs"></a>14.    mke2fs</h2><p>​        mke2fs命令用于建立ext2文件系统。</p><h3 id="语法-11"><a href="#语法-11" class="headerlink" title="语法"></a>语法</h3><pre><code>mke2fs [-cFMqrSvV][-b &lt;区块大小&gt;][-f &lt;不连续区段大小&gt;][-i &lt;字节&gt;][-N &lt;inode数&gt;][-l &lt;文件&gt;][-L &lt;标签&gt;][-m &lt;百分比值&gt;][-R=&lt;区块数&gt;][ 设备名称][区块数]</code></pre><p><strong>参数</strong>：</p><ul><li>-b&lt;区块大小&gt; 指定区块大小，单位为字节。</li><li>-c 检查是否有损坏的区块。</li><li>-f&lt;不连续区段大小&gt; 指定不连续区段的大小，单位为字节。</li><li>-F 不管指定的设备为何，强制执行mke2fs。</li><li>-i&lt;字节&gt; 指定”字节/inode”的比例。</li><li>-N&lt;inode数&gt; 指定要建立的inode数目。</li><li>-l&lt;文件&gt; 从指定的文件中，读取文件西中损坏区块的信息。</li><li>-L&lt;标签&gt; 设置文件系统的标签名称。</li><li>-m&lt;百分比值&gt; 指定给管理员保留区块的比例，预设为5%。</li><li>-M 记录最后一次挂入的目录。</li><li>-q 执行时不显示任何信息。</li><li>-r 指定要建立的ext2文件系统版本。</li><li>-R=&lt;区块数&gt; 设置磁盘阵列参数。</li><li>-S 仅写入superblock与group descriptors，而不更改inode able inode bitmap以及block bitmap。</li><li>-v 执行时显示详细信息。</li><li>-V 显示版本信息。</li></ul><h2 id="15-mkfs-ext2"><a href="#15-mkfs-ext2" class="headerlink" title="15.mkfs.ext2"></a>15.mkfs.ext2</h2><p>功能说明：与<a href="https://www.runoob.com/linux/linux-comm-mke2fs.html" target="_blank" rel="noopener"> mke2fs命令</a> 相同</p><h2 id="16-mkfs-msdos"><a href="#16-mkfs-msdos" class="headerlink" title="16.mkfs.msdos"></a>16.mkfs.msdos</h2><p>功能说明：与 <a href="https://www.runoob.com/linux/linux-comm-mkdosfs.html" target="_blank" rel="noopener">mkdosfs 命令</a> 相同。</p><h2 id="17-mkinitrd"><a href="#17-mkinitrd" class="headerlink" title="17.    mkinitrd"></a>17.    mkinitrd</h2><pre><code>     mkinitrd命令用于建立要载入ramdisk的映像文件。</code></pre><p>mkinitrd可建立映像文件，以供Linux开机时载入ramdisk。</p><h3 id="语法-12"><a href="#语法-12" class="headerlink" title="语法"></a>语法</h3><pre><code>mkinitrd [-fv][--omit-scsi-modules][--version][--preload=&lt;模块名称&gt;][--with=&lt;模块名称&gt;][映像文件][Kernel 版本]</code></pre><p><strong>参数</strong>：</p><ul><li>-f 若指定的映像问家名称与现有文件重复，则覆盖现有的文件。</li><li>-v执行时显示详细的信息。</li><li>–omit-scsi-modules 不要载入SCSI模块。</li><li>–preload=&lt;模块名称&gt; 指定要载入的模块。</li><li>–with=&lt;模块名称&gt; 指定要载入的模块。</li><li>–version 显示版本信息。</li></ul><h2 id="18-mkisofs"><a href="#18-mkisofs" class="headerlink" title="18.mkisofs"></a>18.mkisofs</h2><p>​        mkisofs命令用于建立ISO 9660映像文件。</p><p>mkisofs可将指定的目录与文件做成ISO 9660格式的映像文件，以供刻录光盘。</p><h3 id="语法-13"><a href="#语法-13" class="headerlink" title="语法"></a>语法</h3><pre><code>mkisofs [-adDfhJlLNrRTvz][-print-size][-quiet][-A &lt;应用程序ID&gt;][-abstract &lt;摘要文件&gt;][-b &lt;开机映像文件&gt;][-biblio &lt;ISBN文件&gt;][-c &lt;开机文件名称&gt;][-C &lt;盘区编号，磁区编号&gt;][-copyright &lt;版权信息文件&gt;][-hide &lt;目录或文件名&gt;][-hide-joliet &lt;文件或目录名&gt;][-log-file &lt;记录文件&gt;][-m &lt;目录或文件名&gt;][-M &lt;开机映像文件&gt;][-o &lt;映像文件&gt;][-p &lt;数据处理人&gt;][-P &lt;光盘发行人&gt;][-sysid &lt;系统ID &gt;][-V &lt;光盘ID &gt;][-volset &lt;卷册集ID&gt;][-volset-size &lt;光盘总数&gt;][-volset-seqno &lt;卷册序号&gt;][-x &lt;目录&gt;][目录或文件]</code></pre><p><strong>参数</strong>：</p><ul><li>-a或–all mkisofs通常不处理备份文件。使用此参数可以把备份文件加到映像文件中。</li><li>-A&lt;应用程序ID&gt;或-appid&lt;应用程序ID&gt; 指定光盘的应用程序ID。</li><li>-abstract&lt;摘要文件&gt; 指定摘要文件的文件名。</li><li>-b&lt;开机映像文件&gt;或-eltorito-boot&lt;开机映像文件&gt; 指定在制作可开机光盘时所需的开机映像文件。</li><li>-biblio&lt;ISBN文件&gt; 指定ISBN文件的文件名，ISBN文件位于光盘根目录下，记录光盘的ISBN。</li><li>-c&lt;开机文件名称&gt; 制作可开机光盘时，mkisofs会将开机映像文件中的全-eltorito-catalog&lt;开机文件名称&gt;全部内容作成一个文件。</li><li>-C&lt;盘区编号，盘区编号&gt; 将许多节区合成一个映像文件时，必须使用此参数。</li><li>-copyright&lt;版权信息文件&gt; 指定版权信息文件的文件名。</li><li>-d或-omit-period 省略文件后的句号。</li><li>-D或-disable-deep-relocation ISO 9660最多只能处理8层的目录，超过8层的部分，RRIP会自动将它们设置成ISO 9660兼容的格式。使用-D参数可关闭此功能。</li><li>-f或-follow-links 忽略符号连接。</li><li>-h 显示帮助。</li><li>-hide&lt;目录或文件名&gt; 使指定的目录或文件在ISO 9660或Rock RidgeExtensions的系统中隐藏。</li><li>-hide-joliet&lt;目录或文件名&gt; 使指定的目录或文件在Joliet系统中隐藏。</li><li>-J或-joliet 使用Joliet格式的目录与文件名称。</li><li>-l或-full-iso9660-filenames 使用ISO 9660 32字符长度的文件名。</li><li>-L或-allow-leading-dots 允许文件名的第一个字符为句号。</li><li>-log-file&lt;记录文件&gt; 在执行过程中若有错误信息，预设会显示在屏幕上。</li><li>-m&lt;目录或文件名&gt;或-exclude&lt;目录或文件名&gt; 指定的目录或文件名将不会房入映像文件中。</li><li>-M&lt;映像文件&gt;或-prev-session&lt;映像文件&gt; 与指定的映像文件合并。</li><li>-N或-omit-version-number 省略ISO 9660文件中的版本信息。</li><li>-o&lt;映像文件&gt;或-output&lt;映像文件&gt; 指定映像文件的名称。</li><li>-p&lt;数据处理人&gt;或-preparer&lt;数据处理人&gt; 记录光盘的数据处理人。</li><li>-print-size 显示预估的文件系统大小。</li><li>-quiet 执行时不显示任何信息。</li><li>-r或-rational-rock 使用Rock Ridge Extensions，并开放全部文件的读取权限。</li><li>-R或-rock 使用Rock Ridge Extensions。</li><li>-sysid&lt;系统ID&gt; 指定光盘的系统ID。</li><li>-T或-translation-table 建立文件名的转换表，适用于不支持Rock Ridge Extensions的系统上。</li><li>-v或-verbose 执行时显示详细的信息。</li><li>-V&lt;光盘ID&gt;或-volid&lt;光盘ID&gt; 指定光盘的卷册集ID。</li><li>-volset-size&lt;光盘总数&gt; 指定卷册集所包含的光盘张数。</li><li>-volset-seqno&lt;卷册序号&gt; 指定光盘片在卷册集中的编号。</li><li>-x&lt;目录&gt; 指定的目录将不会放入映像文件中。</li><li>-z 建立通透性压缩文件的SUSP记录，此记录目前只在Alpha机器上的Linux有效。</li></ul><h2 id="19-mkswap"><a href="#19-mkswap" class="headerlink" title="19.    mkswap"></a>19.    mkswap</h2><p>​        mkswap命令用于设置交换区(swap area)。</p><p>mkswap可将磁盘分区或文件设为Linux的交换区。</p><h3 id="语法-14"><a href="#语法-14" class="headerlink" title="语法"></a>语法</h3><pre><code>mkswap [-cf][-v0][-v1][设备名称或文件][交换区大小]</code></pre><p><strong>参数</strong>：</p><ul><li>-c 建立交换区前，先检查是否有损坏的区块。</li><li>-f 在SPARC电脑上建立交换区时，要加上此参数。</li><li>-v0 建立旧式交换区，此为预设值。</li><li>-v1 建立新式交换区。</li><li>[交换区大小] 指定交换区的大小，单位为1024字节。</li></ul><h2 id="20-mpartition"><a href="#20-mpartition" class="headerlink" title="20. mpartition"></a>20. mpartition</h2><p> mpartition命令用于建立或删除MS-DOS的分区。</p><p>mpartition为mtools工具指令，可建立或删除磁盘分区。</p><h3 id="语法-15"><a href="#语法-15" class="headerlink" title="语法"></a>语法</h3><pre><code>mpartition [-acdfIprv][-b &lt;磁区数&gt;][-h &lt;磁头数&gt;][l &lt;磁区数&gt;][-s &lt;磁区数&gt;][-t &lt;柱面数&gt;][驱动器代号]</code></pre><p><strong>参数</strong>：</p><ul><li>-a 将分区设置为可开机分区。</li><li>-b&lt;磁区数&gt; 建立分区时，指定要从第几个磁区开始建立分区。</li><li>-c 建立分区。</li><li>-d 将分区设置为无法开机的分区。</li><li>-f 强制地修改分区而不管检查时发生的错误信息。</li><li>-h&lt;磁头数&gt; 建立分区时，指定分区的磁头数。</li><li>-I 删除全部的分区。</li><li>-l&lt;磁区数&gt; 建立分区时，指定分区的容量大小，单位为磁区数。</li><li>-p 当要重新建立分区时，显示命令列。</li><li>-r 删除分区。</li><li>-s&lt;磁区数&gt; 建立分区时，指定每个磁轨的磁区数。</li><li>-t&lt;柱面数&gt; 建立分区时，指定分区的柱面数。</li><li>-v 与-p参数一并使用，若没有同时下达修改分区的命令，则显示目前分区的状态。</li></ul><h2 id="21-swapon"><a href="#21-swapon" class="headerlink" title="21.swapon"></a>21.swapon</h2><p>​        swapon命令用于激活Linux系统中交换空间，Linux系统的内存管理必须使用交换区来建立虚拟内存。</p><h3 id="语法-16"><a href="#语法-16" class="headerlink" title="语法"></a>语法</h3><pre><code>/sbin/swapon -a [-v]/sbin/swapon [-v] [-p priority] specialfile .../sbin/swapon [-s]</code></pre><p><strong>参数说明：</strong></p><ul><li>-h 请帮帮我</li><li>-V 显示版本讯息</li><li>-s 显示简短的装置讯息</li><li>-a 自动启动所有SWAP装置</li><li>-p 设定优先权，你可以在0到32767中间选一个数字给他。或是在 /etc/fstab 里面加上 pri=[value] ([value]就是0~32767中间一个数字)，然后你就可以很方便的直接使用 swapon -a 来启动他们，而且有优先权设定。</li></ul><p>swapon 是开启swap.</p><p>相对的,便有一个关闭swap的指令,swapoff.</p><h2 id="22-symlinks"><a href="#22-symlinks" class="headerlink" title="22.symlinks"></a>22.symlinks</h2><p>​        symlinks命令用于维护符号连接的工具程序。</p><p>symlinks可检查目录中的符号连接，并显示符号连接类型。以下为symlinks可判断的符号连接类型：</p><ul><li>absolute：符号连接使用了绝对路径。</li><li>dangling：原始文件已经不存在。</li><li>lengthy：符号连接的路径中包含了多余的”../“。</li><li>messy：符号连接的路径中包含了多余的”/“。</li><li>other_fs：原始文件位于其他文件系统中。</li><li>relative：符号连接使用了相对路径。</li></ul><h3 id="语法-17"><a href="#语法-17" class="headerlink" title="语法"></a>语法</h3><pre><code>symlinks [-cdrstv][目录]</code></pre><p><strong>参数</strong>：</p><ul><li>-c 将使用绝对路径的符号连接转换为相对路径。</li><li>-d 移除dangling类型的符号连接。</li><li>-r 检查目录下所有子目录中的符号连接。</li><li>-s 检查lengthy类型的符号连接。</li><li>-t 与-c一并使用时，会显示如何将绝对路径的符号连接转换为相对路径，但不会实际转换。</li><li>-v 显示所有类型的符号连接。</li></ul><h2 id="23-sync"><a href="#23-sync" class="headerlink" title="23.sync"></a>23.sync</h2><p>​        sync命令用于数据同步,sync命令是在关闭Linux系统时使用的。</p><p>Linux 系统中欲写入硬盘的资料有的时候会了效率起见，会写到 filesystem buffer 中，这个 buffer 是一块记忆体空间，如果欲写入硬盘的资料存于此 buffer 中，而系统又突然断电的话，那么资料就会流失了，sync 指令会将存于 buffer 中的资料强制写入硬盘中。</p><h3 id="语法-18"><a href="#语法-18" class="headerlink" title="语法"></a>语法</h3><pre><code>sync</code></pre><h2 id="24-mbadblocks"><a href="#24-mbadblocks" class="headerlink" title="24. mbadblocks"></a>24. mbadblocks</h2><p>​         mbadblocks命令用于检查MS-DOS文件系统的磁盘是否有损坏的磁区。</p><p>mbadblocks为mtools工具指令，可用来扫描MS-DOS文件系统的磁盘驱动器，并标示出损坏的磁区。</p><h3 id="语法-19"><a href="#语法-19" class="headerlink" title="语法"></a>语法</h3><pre><code>mbadblocks [驱动器代号]</code></pre><h2 id="25-mkfs-minix"><a href="#25-mkfs-minix" class="headerlink" title="25.mkfs.minix"></a>25.mkfs.minix</h2><p>​        mkfs.minix命令用于建立Minix文件系统。</p><p>mkfs.minix可建立Minix文件系统。</p><h3 id="语法-20"><a href="#语法-20" class="headerlink" title="语法"></a>语法</h3><pre><code>mkfs.minix [-cv][-i &lt;inode数目&gt;][-l &lt;文件&gt;][-n &lt;文件名长度&gt;][设备名称][区块数]</code></pre><p><strong>参数</strong>：</p><ul><li>-c 检查是否有损坏的区块。</li><li>-i&lt;inode数目&gt; 指定文件系统的inode总数。</li><li>-l&lt;文件&gt; 从指定的文件中，读取文件系统中损坏区块的信息。</li><li>-n&lt;文件名长度&gt; 指定文件名称长度的上限。</li><li>-v 建立第2版的Minix文件系统。</li></ul><h2 id="26-fsck-ext2"><a href="#26-fsck-ext2" class="headerlink" title="26.fsck.ext2"></a>26.fsck.ext2</h2><p>​        fsck.ext2命令用于检查文件系统并尝试修复错误。</p><p>当ext2文件系统发生错误时，可用fsck.ext2指令尝试加以修复。</p><h3 id="语法-21"><a href="#语法-21" class="headerlink" title="语法"></a>语法</h3><pre><code>fsck.ext2 [-acdfFnprsStvVy][-b &lt;分区第一个磁区地址&gt;][-B &lt;区块大小&gt;][-C &lt;反叙述器&gt;][-I &lt;inode缓冲区块数&gt;][-l/L &lt;损坏区块文件&gt;][-P &lt;处理inode大小&gt;][外围设备代号]</code></pre><p><strong>参数</strong>：</p><ul><li>-a 自动修复文件系统，不询问任何问题。</li><li>-b&lt;分区第一个磁区地址&gt; 指定分区的第一个磁区的起始地址，也就是Super Block。</li><li>-B&lt;区块大小&gt; 设置该分区每个区块的大小。</li><li>-c 检查指定的文件系统内，是否存在有损坏的区块。</li><li>-C&lt;反叙述器&gt; 指定反叙述器，fsck.ext2指令会把全部的执行过程，都交由其逆向叙述，便于排错或监控程序执行的情形。</li><li>-d 详细显示指令执行过程，便于排错或分析程序执行的情形。</li><li>-f 强制对该文件系统进行完整检查，纵然该文件系统在慨略检查下没有问题。</li><li>-F 检查文件系统之前，先清理该保存设备块区内的数据。</li><li>-I&lt;inode缓冲区块数&gt; 设置欲检查的文件系统，其inode缓冲区的区块数目。</li><li>-l&lt;损坏区块文件&gt; 把文件中所列出的区块，视为损坏区块并将其标示出来，避免应用程序使用该区块。</li><li>-L&lt;损坏区块文件&gt; 此参数的效果和指定”-l”参数类似，但在参考损坏区块文件标示损坏区块之前，会先将原来标示成损坏区块者统统清楚，即全部重新设置，而非仅是加入新的损坏区块标示。</li><li>-n 把欲检查的文件系统设成只读，并关闭互动模式，否决所有询问的问题。</li><li>-p 此参数的效果和指定”-a”参数相同。</li><li>-P&lt;处理inode大小&gt; 设置fsck.ext2指令所能处理的inode大小为多少。</li><li>-r 此参数将忽略不予处理，仅负责解决兼容性的问题。</li><li>-s 检查文件系统时，交换每对字节的内容。</li><li>-S 此参数的效果和指定”-s”参数类似，但不论该文件系统是否已是标准位顺序，一律交换每对字节的内容。</li><li>-t 显示fsck.ext2指令的时序信息。</li><li>-v 详细显示指令执行过程。</li><li>-V 显示版本信息。</li><li>-y 关闭互动模式，且同意所有询问的问题。</li></ul><h2 id="27-fdisk"><a href="#27-fdisk" class="headerlink" title="27.fdisk"></a>27.fdisk</h2><p>​        fdisk是一个创建和维护分区表的程序，它兼容DOS类型的分区表，BSD或者SUN类型的磁盘列表。</p><h3 id="语法-22"><a href="#语法-22" class="headerlink" title="语法"></a>语法</h3><pre><code>fdisk [必要参数] [选择参数]</code></pre><p><strong>必要参数：</strong></p><ul><li>-l列出素所有分区表</li><li>-u与“-l”搭配使用，显示分区数目</li></ul><p><strong>选择参数：</strong></p><ul><li>-s &lt;分区编号&gt;指定分区</li><li>-v版本信息</li></ul><p><strong>菜单操作说明</strong></p><ul><li>m：显示菜单和帮助信息</li><li>a：活动分区标记/引导分区</li><li>d：删除分区</li><li>l：显示分区类型</li><li>n：新建分区</li><li>p：显示分区信息</li><li>q：退出不保存</li><li>t：设置分区号</li><li>v：进行分区检查</li><li>w：保存修改</li><li>x：扩展应用，高级功能</li></ul><h3 id="实例-9"><a href="#实例-9" class="headerlink" title="实例"></a>实例</h3><p>显示当前分区情况：</p><pre><code>#fdisk -l磁盘/ dev / sda：10.7 GB，10737418240字节255个头，63个扇区/轨道，1305个柱面单位= 16065 * 512 = 8225280字节的柱面  设备启动开始结束块ID系统/ dev / sda1 * 1 13 104391 83 Linux/ dev / sda2 14 1305 10377990 8e Linux LVM磁盘/ dev / sdb：5368 MB，5368709120字节255个头，63个扇区/轨道，652个柱面单位= 16065 * 512 = 8225280字节的柱面磁盘/ dev / sdb不包含有效的分区表</code></pre><p>显示SCSI硬盘的每个分区情况</p><pre><code>#fdisk -lu  磁盘/ dev / sda：10.7 GB，10737418240字节255个头，63个扇区/轨道，1305个气缸，总共20971520个扇区单位= 1 * 512 = 512字节的扇区  设备启动开始结束块ID系统/ dev / sda1 * 63 208844 104391 83 Linux/ dev / sda2 208845 20964824 10377990 8e Linux LVM磁盘/ dev / sdb：5368 MB，5368709120字节255个头，63个扇区/轨道，652个气缸，总共10485760个扇区单位= 1 * 512 = 512字节的扇区磁盘/ dev / sdb不包含有效的分区表</code></pre><h2 id="28-losetup"><a href="#28-losetup" class="headerlink" title="28.losetup"></a>28.losetup</h2><p>​        losetup命令用于设置循环设备。</p><p>循环设备可把文件虚拟成区块设备，籍以模拟整个文件系统，让用户得以将其视为硬盘驱动器，光驱或软驱等设备，并挂入当作目录来使用。</p><h3 id="语法-23"><a href="#语法-23" class="headerlink" title="语法"></a>语法</h3><pre><code>losetup [-d][-e &lt;加密方式&gt;][-o &lt;平移数目&gt;][循环设备代号][文件]</code></pre><p><strong>参数</strong>：</p><ul><li>-d 卸除设备。</li><li>-e&lt;加密方式&gt; 启动加密编码。</li><li>-o&lt;平移数目&gt; 设置数据平移的数目。</li></ul><h3 id="实例-10"><a href="#实例-10" class="headerlink" title="实例"></a>实例</h3><p>（1）创建空的磁盘镜像文件，这里创建一个1.44M的软盘</p><pre><code>$ dd if=/dev/zero of=floppy.img bs=512 count=2880</code></pre><p>（2）使用 losetup将磁盘镜像文件虚拟成快设备</p><pre><code>$ losetup /dev/loop1 floppy.img</code></pre><p>（3）挂载块设备</p><pre><code>$ mount /dev/loop0 /tmp</code></pre><p>经过上面的三步之后，我们就可以通过/tmp目录，像访问真实快设备一样来访问磁盘镜像文件floppy.img。</p><p>（4） 卸载loop设备</p><pre><code>$ umount /tmp$ losetup -d /dev/loop1</code></pre><p>一个完整测试实例</p><p>\1. 首先创建一个 1G 大小的空文件：</p><pre><code># dd if=/dev/zero of=loopfile.img bs=1G count=11+0 records in1+0 records out1073741824 bytes (1.1 GB) copied, 69.3471 s, 15.5 MB/s</code></pre><p>\2. 对该文件格式化为 ext4 格式：</p><pre><code># mkfs.ext4 loopfile.img。。。。</code></pre><p>\3. 用 file 命令查看下格式化后的文件类型：</p><pre><code># file loopfile.imgloopfile.img: Linux rev 1.0 ext4 filesystem data, UUID=a9dfb4a0-6653-4407-ae05-7044d92c1159 (extents) (large files) (huge files)</code></pre><p>\4. 准备将上面的文件挂载起来：</p><pre><code># mkdir /mnt/loopback# mount -o loop loopfile.img /mnt/loopback</code></pre><p>mount 命令的 -o loop 选项可以将任意一个 loopback 文件系统挂载。</p><p>上面的 mount 命令实际等价于下面两条命令：</p><pre><code># losetup /dev/loop0 loopfile.img# mount /dev/loop0 /mnt/loopback</code></pre><p>因此实际上，mount -o loop 在内部已经默认的将文件和 /dev/loop0 挂载起来了。</p><p>然而对于第一种方法(mount -o loop)并不能适用于所有的场景。比如，我们想创建一个硬盘文件，然后对该文件进行分区，接着挂载其中一个子分区，这时就不能用 -o loop 这种方法了。因此必须如下做：</p><pre><code># losetup /dev/loop1 loopfile.img# fdisk /dev/loop1</code></pre><p>\6. 卸载挂载点：</p><pre><code># umount /mnt/loopback</code></pre><h2 id="29-mkfs"><a href="#29-mkfs" class="headerlink" title="29.mkfs"></a>29.mkfs</h2><p><strong>使用方式</strong> : mkfs [-V] [-t fstype] [fs-options] filesys [blocks]</p><p>mkfs命令用于在特定的分区上建立 linux 文件系统</p><p><strong>参数</strong> ：</p><ul><li>device ： 预备检查的硬盘分区，例如：/dev/sda1</li><li>-V : 详细显示模式</li><li>-t : 给定档案系统的型式，Linux 的预设值为 ext2</li><li>-c : 在制做档案系统前，检查该partition 是否有坏轨</li><li>-l bad_blocks_file : 将有坏轨的block资料加到 bad_blocks_file 里面</li><li>block : 给定 block 的大小</li></ul><h3 id="实例-11"><a href="#实例-11" class="headerlink" title="实例"></a>实例</h3><p>在 /dev/hda5 上建一个 msdos 的档案系统，同时检查是否有坏轨存在，并且将过程详细列出来 :</p><pre><code>mkfs -V -t msdos -c /dev/hda5</code></pre><p>将sda6分区格式化为ext3格式</p><pre><code>mfks -t ext3 /dev/sda6  </code></pre><p><strong>注意</strong>：这里的文件系统是要指定的，比如 ext3 ；reiserfs ；ext2 ；fat32 ；msdos 等。</p><h2 id="30-sfdisk"><a href="#30-sfdisk" class="headerlink" title="30.sfdisk"></a>30.sfdisk</h2><p>​        sfdisk命令是硬盘分区工具程序。</p><p>了sfdisk为硬盘分区工具程序，可显示分区的设置信息，并检查分区是否正常。</p><h3 id="语法-24"><a href="#语法-24" class="headerlink" title="语法"></a>语法</h3><pre><code>sfdisk [ - ？Tvx] [ -  d &lt;硬盘&gt;] [ -  g &lt;硬盘&gt;] [ -  l &lt;硬盘&gt;] [ -  s &lt;分区&gt;] [ -  V &lt;硬盘&gt;]</code></pre><p><strong>参数</strong>：</p><ul><li>- ？或–help显示帮助。</li><li>-d &lt;硬盘&gt;显示硬盘分区的设置。</li><li>-g &lt;硬盘&gt;或–show-geometry &lt;硬盘&gt;显示硬盘的CHS参数。</li><li>-l &lt;硬盘&gt;显示后硬盘分区的相关设置。</li><li>-s &lt;分区&gt;显示分区的大小，单位为区块。</li><li>-T或–list-types显示所有sfdisk能辨识的文件系统ID。</li><li>-v或–version显示版本信息。</li><li>-V &lt;硬盘&gt;或–verify &lt;硬盘&gt;检查硬盘分区是否正常。</li><li>-x或–show-extend显示扩展分区中的逻辑分区。</li></ul><h3 id="实例-12"><a href="#实例-12" class="headerlink" title="实例"></a>实例</h3><p>显示分区信息：</p><pre><code>#sfdisk -l磁盘/ dev / sda：1305个柱面，255个磁头，63个扇区/磁道单位= 8225280字节的柱面，1024字节的块，从0开始计数设备启动开始结束#cyls #blocks Id系统/ dev / sda1 * 0+ 12 13- 104391 83 Linux/ dev / sda2 13 1304 1292 10377990 8e Linux LVM/ dev / sda3 0  -  0 0 0空/ dev / sda4 0  -  0 0 0空磁盘/ dev / sdb：652个柱面，255个磁头，63个扇区/磁道sfdisk：错误：扇区0没有msdos签名/ dev / sdb：无法识别的分区找不到分区</code></pre><h2 id="31-swapoff"><a href="#31-swapoff" class="headerlink" title="31.swapoff"></a>31.swapoff</h2><pre><code>     swapoff命令用于关闭系统交换区（swap area）。</code></pre><p>使用swapoff实际上为swapon命令的符号连接，可用来关闭系统的交换区。</p><h3 id="语法-25"><a href="#语法-25" class="headerlink" title="语法"></a>语法</h3><pre><code>swapoff [设备]</code></pre><p><strong>参数：</strong></p><ul><li>-a将/ etc / fstab文件中所有设置为swap的设备关闭</li><li>-h帮助信息</li><li>-V版本信息</li></ul><h3 id="实例-13"><a href="#实例-13" class="headerlink" title="实例"></a>实例</h3><p>显示分区信息：</p><pre><code>#sfdisk -l //显示分区信息磁盘/ dev / sda：1305个柱面，255个磁头，63个扇区/磁道单位= 8225280字节的柱面，1024字节的块，从0开始计数  设备启动开始结束#cyls #blocks Id系统/ dev / sda1 * 0+ 12 13- 104391 83 Linux/ dev / sda2 13 1304 1292 10377990 8e Linux LVM/ dev / sda3 0  -  0 0 0空/ dev / sda4 0  -  0 0 0空磁盘/ dev / sdb：652个柱面，255个磁头，63个扇区/磁道sfdisk：错误：扇区0没有msdos签名/ dev / sdb：无法识别的分区找不到分区</code></pre><p>关闭交换分区。</p><pre><code>#subtoff / dev / sda2 //关闭交换分区</code></pre><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><ul><li><a href="https://www.runoob.com/linux/linux-command-manual.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-command-manual.html</a></li></ul><p><em>如有侵权，联系 <a href="mailto:2025685938@qq.com" target="_blank" rel="noopener">2025685938@qq.com</a> 删除</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令全拼</title>
      <link href="/posts/8229.html"/>
      <url>/posts/8229.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux常用命令全拼"><a href="#Linux常用命令全拼" class="headerlink" title="Linux常用命令全拼"></a>Linux常用命令全拼</h1><ul><li><p>pwd：打印工作目录打印当前目录显示出当前工作目录的绝对路径</p></li><li><p>ps：进程状态（进程状态，类似于windows的任务管理器）</p><p>  常用参数：-auxf</p><p>  ps -auxf显示进程状态</p></li><li><p>df：disk free其功能是显示磁盘可用空间数目信息及空间结点信息。换句话说，就是报告在任何安装的设备或目录中，还剩多少自由的空间。</p></li><li><p>du：磁盘使用情况</p></li><li><p>rpm：即RedHat包管理，是RedHat的发明之一</p></li><li><p>rmdir：删除目录（删除目录）</p></li><li><p>RM：删除（删除目录或文件）</p></li><li><p>cat：连接连锁</p></li><li><p>cat file1file2 &gt;&gt; file3把文件1和文件2的内容联合起来放到file3中</p></li><li><p>insmod：安装模块，载入模块</p></li><li><p>ln -s：link -soft创建一个软链接，相当于创建一个快捷方式</p></li><li><p>mkdir：Make Directory（创建目录）</p></li><li><p>触摸：触摸</p></li><li><p>男子：手动</p></li><li><p>su：Swith用户（切换用户）</p></li><li><p>cd：更改目录</p></li><li><p>ls：列出文件</p></li><li><p>ps：流程状态</p></li><li><p>mkdir：制作目录</p></li><li><p>rmdir：删除目录</p></li><li><p>mkfs：制作文件系统</p></li><li><p>fsck：文件系统检查</p></li><li><p>uname：Unix名称</p></li><li><p>lsmod：列出模块</p></li><li><p>mv：移动文件</p></li><li><p>rm：删除文件</p></li><li><p>cp：复制文件</p></li><li><p>ln：链接文件</p></li><li><p>fg：前景</p></li><li><p>bg：背景</p></li><li><p>chown：更改所有者</p></li><li><p>chgrp：改变组</p></li><li><p>chmod：改变模式</p></li><li><p>卸载：卸载</p></li><li><p>dd：本来应根据其功能描述“转换副本”命名为“cc”，但“cc”已经被用以代表“CComplier”，所以命名为“dd”</p></li><li><p>tar：磁带存档（磁带档案）</p></li><li><p>ldd：列出动态依赖项</p></li><li><p>insmod：安装模块</p></li><li><p>rmmod：删除模块</p></li><li><p>lsmod：列表模块</p></li><li><p>文件结尾的“rc”（如.bashrc，.xinitrc等）：资源配置</p></li><li><p>Knnxxx / Snnxxx（位于rcx.d目录下）：K（Kill）; S（服务）; nn（执行顺序号）; xxx（服务标识）</p></li><li><p>.a（扩展名a）：存档，静态库</p></li><li><p>.so（扩展名so）：共享对象，动态链接库</p></li><li><p>.o（扩展名o）：目标文件，C / C ++源文件的编译结果</p></li><li><p>RPM：红帽包管理器</p></li><li><p>dpkg：Debian包管理器</p></li><li><p>apt：高级包工具（Debian或基于Debian的发行版中提供）</p></li></ul><h2 id="其他Linux命令缩写"><a href="#其他Linux命令缩写" class="headerlink" title="其他Linux命令缩写"></a>其他Linux命令缩写</h2><pre><code>bin = Binaries（二进制文件）/ dev = Devices（设备）/ etc = Etcetera（等等）/ lib = LIBrary/ proc =进程/ sbin = Superuser Binaries（超级用户的二进制文件）/ tmp =临时（临时）/ usr = Unix共享资源/ var =变量（变量）FIFO =先进先出GRUB = GRand Unified BootloaderIFS =内部现场分离器LILO = LInux LOaderMySQL = My是最初作者女儿的名字，SQL =结构化QueryLanguagePHP =个人主页工具= PHP HypertextPreprocessorPS =提示字符串Perl =“Pratical extraction and Report Language”（实际的抽取和报告语言）=“病态折衷的垃圾Lister”Python得名于电视剧Monty Python的飞行马戏团Tcl =工具命令语言Tk = ToolKitVT =视频终端YaST =又一个设置工具apache =“一个不完整的”服务器apt =高级打包工具ar = archiveras =汇编程序awk =“Aho Weiberger and Kernighan”三个作者的姓的第一个字母bash = Bourne再次SHellbc =基本（更好）计算器bg = BackGroundbiff =作者HeidiStettner在UCBerkely养的一条狗，喜欢对邮递员汪汪叫。cal =日历（日历）cat = Catenate（链接）cd =更改目录chgrp =更改组chmod =更改模式chown =更改所有者chsh =更改Shellcmp =比较cobra =公共对象请求BrokerArchitecturecomm =普通cp =复制cpio = CoPy In和Outcpp = C预处理器cron = Chronos希腊文时间cups =通用Unix打印系统cvs =当前版本系统守护进程=磁盘和执行监视器dc =桌面计算器dd = Disk Dump（磁盘转储）df =无磁盘diff =差异dmesg =诊断消息du =磁盘使用情况ed =编辑egrep =扩展GREPelf =可扩展链接格式elm = ELectronic Mailemacs =编辑器MACroSeval = EVALuateex =延长exec = EXECute（执行）fd =文件描述符fg = ForeGroundfgrep =固定GREPfmt =格式fsck =文件系统ChecKfstab = FileSystem TABlefvwm = F ***虚拟窗口管理器gawk = GNU AWKgpg = GNU Privacy Guardgroff = GNU troffhal =硬件抽象层乔=乔自己的编辑ksh = Korn SHelllame = Lame不是MP3编码器lex = LEXical分析仪lisp = LISt处理=大量刺激性的多余括号ln =链接lpr =行PRintls = listlsof = LiSt打开文件m4 =宏处理器版本4man = MANual页面mawk = Mike Brennan的AWKmc =午夜指挥官mkfs = MaKe文件系统mknod =创建节点motd =当天的消息mozilla = MOsaic GodZILLamtab = Mount TABlemv =移动nano = Nano的ANOther编辑nawk =新AWKnl =行数nm =名字nohup =没有HangUPnroff =新的ROFFod =八达通转储passwd =密码pg =寻呼机pico = PIne的消息COmposition编辑器pine =“互联网新闻与电子邮件节目”=“松树不是榆树”ping =拟声又= Packet Internet Grouperpirntcap = PRINTer CAPabilitypopd = POP目录pr = preprintf =打印格式化ps =处理状态pty =伪ttypushd = PUSH目录pwd =打印工作目录rc = runcom = run命令，rc还是plan9的shellrev = REVerserm = ReMovern =阅读新闻roff = RunOFFrpm = RPM包管理器= RedHat PackageManagerrsh，rlogin，rvim中的r =远程rxvt = ouR XVTseamoneky =我sed =流编辑器seq = SEQuenceshar = Shell ARchiveslrn = S-Lang rnssh =安全外壳ssl =安全套接字层stty =设置TTYsu =替代用户svn = SubVersiontar = Tape ARchivetcsh = TENEX C shelltee = T（T形水管接口）telnet =网络上的TEminaLtermcap =终端能力terminfo =终端信息tex =τέχνη的缩写，希腊文艺术tr = traslatetroff =排版器新ROFFtsort =拓扑排序tty = TeleTypewritertwm =汤姆的窗口管理员tz = TimeZoneudev =用户空间DEVulimit =用户的限制umask =用户的MASKuniq = UNIQuei = VIsual =非常不方便vim = Vi IMprovedwall =全部写wc =字数统计wine = WINE不是模拟器xargs =扩展ARGumentsxdm = X显示管理器xlfd = X逻辑字体描述xmms = X多媒体系统xrdb = X资源数据库xwd = X Window Dumpyacc =另一个编译器编译器鱼=友好的交互式SHellsu =切换用户MIME =多用途Internet邮件扩展ECMA =欧洲计算机制造商协会</code></pre><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><ul><li><a href="https://www.runoob.com/linux/linux-command-manual.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-command-manual.html</a></li></ul><p><em>如有侵权，联系 <a href="mailto:2025685938@qq.com" target="_blank" rel="noopener">2025685938@qq.com</a> 删除</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.Linux命令（文件传输）</title>
      <link href="/posts/6333.html"/>
      <url>/posts/6333.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux命令（文件传输）"><a href="#Linux命令（文件传输）" class="headerlink" title="Linux命令（文件传输）"></a>Linux命令（文件传输）</h1><h2 id="1-lprm"><a href="#1-lprm" class="headerlink" title="1.lprm"></a>1.lprm</h2><p>​         lprm命令用于将一个工作由打印机贮列中移除</p><p>尚未完成的打印机工作会被放在打印机贮列之中，这个命令可用来将常未送到打印机的工作取消。由于每一个打印机都有一个独立的贮列，你可以用 -P 这个命令设定想要作用的印列机。如果没有设定的话，会使用系统预设的打印机。</p><p>　</p><p>　　这个命令会检查使用者是否有足够的权限删除指定的档案，一般而言，只有档案的拥有者或是系统管理员才有这个权限。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre><code>/usr/bin/lprm [P] [file...]</code></pre><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>将打印机 hpprinter 中的第 1123 号工作移除</p><pre><code>lprm -Phpprinter 1123</code></pre><p>将第 1011 号工作由预设印表机中移除</p><pre><code>lprm 1011</code></pre><h2 id="2-lpr"><a href="#2-lpr" class="headerlink" title="2.lpr"></a>2.lpr</h2><p>​        lpr(line printer，按行打印)实用程序用来将一个或多个文件放入打印队列等待打印。</p><p>lpr 可以用来将料资送给本地或是远端的主机来处理。</p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><pre><code>lpr [ -P printer ]</code></pre><p><strong>参数</strong>：</p><ul><li>-p Printer: 将资料送至指定的打印机 Printer，预设值为 lp。</li></ul><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>下面的命令行将在名为mailroom的打印机上打印report文件：</p><pre><code>$ lpr -P mailroom report </code></pre><p>使用一条打印命令可打印多个文件，下面的命令行在名为laser1的打印机上打印3个文件：</p><pre><code>$ lpr -P laser1 05.txt 108.txt 12.txt </code></pre><h2 id="3-lpq"><a href="#3-lpq" class="headerlink" title="3.lpq"></a>3.lpq</h2><p>​         lpq命令用于查看一个打印队列的状态，该程序可以查看打印机队列状态及其所包含的打印任务。</p><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><p>lpq [l] [P] [用户]</p><p><strong>参数说明：</strong></p><ul><li>-P指定一个打印机，否则使用默认打印机或环境变量PRINTER指定的打印机</li><li>-l打印组成作业的所有文件的信息..</li></ul><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><p>为系统默认的打印机打印的一个空队列。</p><pre><code>$ lpq  打印机准备好了  没有条目 </code></pre><p>如果事先并未指定打印机（使用-P选项），系统便会显示默认的打印机。如果向打印机发送打印任务，然后查看打印队列，便会看到如下列表。</p><pre><code>$ ls * .txt | pr -3 | 唱片  请求ID是printer-603（1个文件）  [me @ linuxbox~] $ lpq  打印机准备好并打印  排名所有者工作文件总大小  活跃我603（stdin）        </code></pre><h2 id="4-lpd"><a href="#4-lpd" class="headerlink" title="4.lpd"></a>4.lpd</h2><pre><code>     lpd命令 是一个常驻的打印机管理程序，它会根据 /etc/printcap 的内容来管理本地或远端的打印机。</code></pre><p>/etc/printcap 中定义的每一个打印机必须在 /var/lpd 中有一个相对应的目录，目录中以 cf 开头的档案表示一个等待送到适当装置的印表工作。这个档案通常是由 lpr 所产生。</p><p>lpr 和 lpd 组成了一个可以离线工作的系统，当你使用 lpr 时，打印机不需要能立即可用，甚至不用存在。</p><p>lpd 会自动监视打印机的状况，当打印机上线后，便立即将档案送交处理。这个得所有的应用程序不必等待打印机完成前一工作。</p><h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><pre><code>lpd [-l] [#port]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-l: 将一些除错讯息显示在标准输出上。</li><li>#port: 一般而言，lpd 会使用 getservbyname 取得适当的 TCP/IP port，你可以使用这个参数强迫 lpd 使用指定的 port。</li></ul><h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><p>这个程序通常是由 /etc/rc.d 中的程序在系统启始阶段执行。</p><h2 id="5-bye"><a href="#5-bye" class="headerlink" title="5.bye"></a>5.bye</h2><p> bye命令用于中断FTP连线并结束程序。</p><p>在ftp模式下，输入bye即可中断目前的连线作业，并结束ftp的执行。</p><h3 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h3><pre><code>bye</code></pre><h2 id="6-ftp"><a href="#6-ftp" class="headerlink" title="6.ftp"></a>6.ftp</h2><p>​        ftp命令设置文件系统相关功能。</p><p>FTP是ARPANet的标准文件传输协议，该网络就是现今Internet的前身。</p><h3 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h3><pre><code>ftp [-dignv][主机名称或IP地址]</code></pre><p><strong>参数</strong>：</p><ul><li>-d 详细显示指令执行过程，便于排错或分析程序执行的情形。</li><li>-i 关闭互动模式，不询问任何问题。</li><li>-g 关闭本地主机文件名称支持特殊字符的扩充特性。</li><li>-n 不使用自动登陆。</li><li>-v 显示指令执行过程。</li></ul><h3 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h3><p>例如使用ftp命令匿名登录ftp.kernel.org服务器，该服务是Linux 内核的官方服务器，可以使用如下命令：</p><pre><code>ftp ftp.kernel.org #发起链接请求 </code></pre><h2 id="7-uuto"><a href="#7-uuto" class="headerlink" title="7.uuto"></a>7.uuto</h2><p>​         uuto命令将文件传送到远端的UUCP主机。</p><p>uuto为script文件，它实际上会执行uucp，用来将文件传送到远端UUCP主机，并在完成工作后，以邮件通知远端主机上的用户。</p><h3 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h3><pre><code>uuto [文件][目的]</code></pre><p><strong>参数</strong>：</p><p>相关参数请参考 <a href="https://www.runoob.com/linux/linux-comm-uucp.html" target="_blank" rel="noopener">uucp指令</a>。</p><h3 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h3><p>将文件传送到远程UUCP主机localhost的tmp 目录，在命令提示符中直接输入如下命令：</p><pre><code>uuto./testfile localhost/tmp #将文件传送到远程UUCP 主机localhost的tmp目录 </code></pre><p>该命令通常没有输出。</p><h2 id="8-uupick"><a href="#8-uupick" class="headerlink" title="8.uupick"></a>8.uupick</h2><p> uupick命令处理传送进来的文件。</p><p>当其他主机通过UUCP将文件传送进来时，可利用uupick指令取出这些文件。</p><h3 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h3><pre><code>uupick [-v][-I&lt;配置文件&gt;][-s&lt;主机&gt;][-x&lt;层级&gt;][--help]</code></pre><p><strong>参数</strong>：</p><ul><li>-I&lt;配置文件&gt;或–config&lt;配置文件&gt; 指定配置文件。</li><li>-s&lt;主机&gt;或–system&lt;主机&gt; 处理由指定主机传送过来的文件。</li><li>-v或–version 显示版本信息。</li><li>–help 显示帮助。</li></ul><h3 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h3><p>处理由主机localhost传送过来的文件。在命令行直接输入如下命令：</p><pre><code>uupick-s localhost</code></pre><p>该命令通常没有输出。</p><h2 id="9-uucp"><a href="#9-uucp" class="headerlink" title="9.uucp"></a>9.uucp</h2><p>​        uucp命令用于在Unix系统之间传送文件。</p><p>UUCP为Unix系统之间，通过序列线来连线的协议。uucp使用UUCP协议，主要的功能为传送文件。</p><h3 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h3><pre><code>uucp [-cCdfjmrRtvW][-g&lt;等级&gt;][-I&lt;配置文件&gt;][-n&lt;用户&gt;][-x&lt;类型&gt;][--help][...来源][目的]</code></pre><p><strong>参数说明</strong>：</p><ul><li>-c或–nocopy 不用将文件复制到缓冲区。</li><li>-C或–copy 将文件复制到缓冲区。</li><li>-d或–directiories 在传送文件时，自动在[目的]建立必要的目录。</li><li>-f或–nodirectiories 在传送文件时，若需要在[目的]建立目录，则放弃执行该作业。</li><li>-g&lt;等级&gt;或–grade&lt;等级&gt; 指定文件传送作业的优先顺序。</li><li>-I&lt;配置文件&gt;或–config&lt;配置文件&gt; 指定uucp配置文件。</li><li>-j或–jobid 显示作业编号。</li><li>-m或–mail 作业结束后，以电子邮件报告作业是否顺利完成。</li><li>-n&lt;用户&gt;或–notify&lt;用户&gt; 作业结束后，以电子邮件向指定的用户报告作业是否顺利完成。</li><li>-r或–nouucico 不要立即启动uucico服务程序，仅将作业送到队列中，待稍后再执行。</li><li>-R或–recursive 若[来源]为目录，则将整个目录包含子目录复制到[目的]。</li><li>-t或–uuto 将最后一个参数视为”主机名!用户”。</li><li>-v或–version 显示版本信息。</li><li>-W或–noexpand 不要将目前所在的目录加入路径。</li><li>-x&lt;类型&gt;或–debug&lt;类型&gt;启动指定的排错模式。</li><li>–help 显示帮助。</li><li>[源…] 指定源文件或路径。</li><li>[目的] 指定目标文件或路径。</li></ul><h3 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h3><p>将temp/目录下所有文件传送到远程主机localhost的uucp公共目录下的Public/目录下。在命令行中输入如下命令：</p><pre><code>uucp-d-R temp localhost ~/Public/ </code></pre><p>该命令通常没有输出</p><h2 id="10-uucico"><a href="#10-uucico" class="headerlink" title="10.uucico"></a>10.uucico</h2><p>​         uucico命令UUCP文件传输服务程序。</p><p>uucico是用来处理uucp或uux送到队列的文件传输工具。uucico有两种工作模式：主动模式和附属模式。当在主动模式下时，uucico会调用远端主机；在附属模式下时，uucico则接受远端主机的调用。</p><h3 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h3><pre><code>uucico [-cCDefqvwz][-i&lt;类型&gt;][-I&lt;文件&gt;][-p&lt;连接端口号码&gt;][-][-rl][-s&lt;主机&gt;][-S&lt;主机&gt;][-u&lt;用户&gt;][-x&lt;类型&gt;][--help]</code></pre><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><ul><li>-c或–quiet 当不执行任何工作时，不要更改记录文件的内容及更新目前的状态。</li><li>-C或–ifwork 当有工作要执行时，才调用-s或-S参数所指定主机。</li><li>-D或–nodetach 不要与控制终端机离线。</li><li>-e或–loop 在附属模式下执行，并且出现要求登入的提示画面。</li><li>-f或–force 当执行错误时，不等待任何时间即重新调用主机。</li><li>-i&lt;类型&gt;或–stdin&lt;类型&gt; 当使用到标准输入设备时，指定连接端口的类型。</li><li>-I&lt;文件&gt;–config&lt;文件&gt; 指定使用的配置文件。</li><li>-l或–prompt 出现要求登入的提示画面。</li><li>-p&lt;连接端口号码&gt;或-port&lt;连接端口号码&gt; 指定连接端口号码。</li><li>-q或–quiet 不要启动uuxqt服务程序。</li><li>-r0或–slave 以附属模式启动。</li><li>-s&lt;主机&gt;或–system&lt;主机&gt; 调用指定的主机。</li><li>-u&lt;用户&gt;或–login&lt;用户&gt; 指定登入的用户帐号，而不允许输入任意的登入帐号。</li><li>-v或–version 显示版本信息，并且结束程序。</li><li>-w或–wait 在主动模式下，当执行调用动作时，则出现要求登入的提示画面。</li><li>-x&lt;类型&gt;或-X&lt;类型&gt;或outgoing-debug&lt;类型&gt; 启动指定的排错模式。</li><li>-z或–try-next 当执行不成功时，尝试下一个选择而不结束程序。</li><li>–help 显示帮助，并且结束程序。</li></ul><h3 id="实例-8"><a href="#实例-8" class="headerlink" title="实例"></a>实例</h3><p>使用主动模式启动uucico服务。在命令提示符下直接输入如下命令：</p><pre><code>uucico-r1</code></pre><p>提示：该命令一般没有输出。</p><h2 id="11-tftp"><a href="#11-tftp" class="headerlink" title="11.tftp"></a>11.tftp</h2><pre><code>     tftp命令用于传输文件。</code></pre><p>FTP让用户得以下载存放于远端主机的文件，也能将文件上传到远端主机放置.tftp是简单的文字模式的FTP程序，它所使用的指令和FTP类似。</p><h3 id="语法-10"><a href="#语法-10" class="headerlink" title="语法"></a>语法</h3><pre><code>tftp [主机名称或IP地址]</code></pre><p><strong>操作说明：</strong></p><ul><li>连接：连接到远程TFTP服务器</li><li>模式：文件传输模式</li><li>放：上传文件</li><li>得到：下载文件</li><li>退出：退出</li><li>详细：显示详细的处理信息</li><li>追踪：显示包路径</li><li>状态：显示当前状态信息</li><li>二进制：二进制传输模式</li><li>ascii：ascii传送模式</li><li>REXMT：设置包传输的超时时间</li><li>超时：设置重传的超时时间</li><li>帮助：帮助信息</li><li>？：帮助信息</li></ul><h3 id="实例-9"><a href="#实例-9" class="headerlink" title="实例"></a>实例</h3><p>连接远程服务器“218.28.188.288”，然后使用put命令下载其中根目录下的文件“README”，可使用命令如下：</p><pre><code>tftp 218.28.188.288＃连接远程服务器 </code></pre><p>连接服务器之后可进行相应的操作，具体如下：</p><pre><code>$ tftp 218.28.188.228＃连接远程服务器  tftp&gt;？＃使用？，参考帮助  命令可以缩写。命令是：＃帮助命令列表  连接到远程tftp  模式设置文件传输模式  把发送文件  获取接收文件  退出tftp  详细切换详细模式  跟踪切换数据包跟踪  状态显示当前状态  二进制设置模式为八位字节  ascii将模式设置为netascii  rexmt设置每包重传超时  超时设置总重传超时  ？打印帮助信息  tftp&gt; get README＃远程下载README文件  从218.28.188.288到/ home / cmd  在1.5秒内恢复168236个字节[112157 bit / s]  tftp&gt;退出＃离开tftp </code></pre><h2 id="12-ncftp"><a href="#12-ncftp" class="headerlink" title="12.ncftp"></a>12.ncftp</h2><p>​        ncftp命令用于传输文件。</p><p>FTP让用户得以下载存放于服务器主机的文件，也能将文件上传到远端主机放置。</p><p>NcFTP是文字模式FTP程序的佼佼者，它具备多样特色，包括显示传输速率，下载进度，自动续传，标住书签，可通过防火墙和代理服务器等。</p><p>当不指定用户名时，ncftp命令会自动尝试使用匿名账户匿名去连接远程FTP服务器，不需要用户输入账号和密码。</p><h3 id="语法-11"><a href="#语法-11" class="headerlink" title="语法"></a>语法</h3><pre><code>ncftp [主机或IP地址]</code></pre><p><strong>参数说明：</strong></p><ul><li>-u &lt;用户名&gt;指定登录FTP服务器的用户名</li><li>-p &lt;密码&gt;设置用户密码</li><li>-P &lt;端口号&gt;指定FTP端口号，默认为21</li><li>-j &lt;账号&gt;指定账号</li><li>-h帮助信息</li><li>-v版本信息</li></ul><h3 id="实例-10"><a href="#实例-10" class="headerlink" title="实例"></a>实例</h3><p>使用的ncftp命令匿名连接FTP服务器。</p><p>例如想匿名连接ftp.kernel.org服务器，同时不想输入匿名等匿名用户名，可直接使用的ncftp命令：</p><pre><code>ncftp ftp.kernel.org</code></pre><p>得到如下信息：</p><pre><code>$ ncftp ftp.kernel.org＃匿名连接ftp.kernel.org服务器  NcFTP 3。3。1（2007年7月29日）作者：Mike Gleason（http://www.NcFTP.com/contact/）。  #ncftp版权，版本等信息  Mike Gleason版权所有（c）1992-2005。  版权所有。  连接到149.20.20.133 ...＃连接服务器  欢迎来到ftp.kernel.org。  登录...＃匿名登录  欢迎来到＃欢迎信息  LINUX KERNEL档案  ftp.kernel.org  “不仅仅是内核”  如果您通过WEB浏览器访问本网站  请使用以下的HTTP URL！  ----&gt;如果您正在寻找镜像站点，请转到&lt;---- ----&gt;到mirrors.kernel.org而不是&lt;---- 该站点由Linux内核提供为公共服务  组织，一家加州非营利性公司。带宽是  由Internet Software Consortium，Inc。提供。我们的服务器是  位于旧金山和加利福尼亚州帕洛阿尔托; 俄勒冈州科瓦利斯;  阿姆斯特丹，荷兰和瑞典，瑞典; 使用违反任何  严格禁止适用法律。  由于美国出口法规，所有加密软件都在此  网站受以下法律声明的约束：  此站点包含公开可用的加密源代码  这与编译时产生的目标代码一起  公开可用的源代码，可以从美国出口  根据15 CFR部分的许可例外“TSU”的国家  740.13（e）中。  本法律声明仅适用于加密软件。请参阅  工业和安全局（http://www.bis.doc.gov/）了解更多信息  有关美国现行法规的信息。  Linux内核组织及其赞助商都没有提供任何内容  关于本网站内容的明示或暗示保证。  使用风险由您自己承担。  可通过以下机制访问此站点：  FTP ftp://ftp.kernel.org/pub/  HTTP http://www.kernel.org/pub/  RSYNC rsync：//rsync.kernel.org/pub/  NFS和SMB / CIFS不再可用。  有关本网站的评论，请联系&lt;ftpadmin@kernel.org&gt;。  请不要将此地址用于与之无关的问题  这个网站的运作。请访问我们的主页  http://www.kernel.org/获取Linux文档资源的链接。  登陆成功。  登录到ftp.kernel.org。  ncftp /&gt; </code></pre><p>提示：ncftp的命令提示符为“ncftp /&gt;”，而不是ftp中的“ftp /&gt;”。</p><p>使用的ncftp命令操作，下载文件。</p><p>的ncftp的命令基本上与FTP相同，例如可以使用 “CD” 命令切换在FTP服务器中的当前目录，使用 “LS” 命令列出当前目录内容，使用 “获取” 命令下载 “/酒馆” 目录下的自述文件，使用 “退出” 离开的ncftp等操作结果如下：</p><pre><code>ncftp /&gt; pwd＃查看当前路径  ftp://ftp.kernel.org＃当前路径为根目录  ncftp /&gt; ls＃查看当前目录列表  bin / for_mirrors_only / pub /  dev / lib / usr @  etc / lost + found / welcome.msg @  ncftp /&gt; cd pub＃切换目录到pub子目录  目录已成功更改。  ncftp / pub&gt; ls＃查看pub的目录列表  dist / media / scm /  index.html RCS / site /  linux / README软件/  lost + found / README_ABOUT_BZ2_FILES工具/  ncftp / pub&gt; get README #download README文件  自述文件：1.87 KB 10.39 KB / s  ncftp / pub&gt;退出＃离开ncftp </code></pre><p>与FTP不同的是，的ncftp此时会提示用户是否将FTP服务器保存为书签，以便于下次登录，用户可以进行自定义书签名等操作，如下所示：</p><pre><code>您尚未保存此网站的书签。＃离开提示信息  您要将书签保存到：  ftp://ftp.kernel.org/pub/  保存？（是/否）是＃确认是否保存  输入此书签的名称，或按“Enter”输入“kernel”：kernel＃输入书签名  书签“内核”已保存。 </code></pre><h2 id="13-ftpshut"><a href="#13-ftpshut" class="headerlink" title="13.ftpshut"></a>13.ftpshut</h2><p>​        ftpshut命令在指定的时间关闭FTP服务器。</p><p>本指令提供系统管理者在设置的时间关闭FTP服务器，且能在关闭之前发出警告信息通知用户。关闭时间若设置后为”none”，则会马上关闭服务器。如果采用”+30”的方式来设置表示服务器在30分钟之后关闭。依次类推，假设使用”1130”的格式则代表服务器会在每日的11时30分关闭，时间格式为24小时制。FTP服务器关闭后，在/etc目录下会产生一个名称为shutmsg的文件，把它删除后即可再度启动FTP服务器的功能。</p><h3 id="语法-12"><a href="#语法-12" class="headerlink" title="语法"></a>语法</h3><pre><code>ftpshut [-d&lt;分钟&gt;][-l&lt;分钟&gt;][关闭时间]["警告信息"]</code></pre><p><strong>参数</strong>：</p><ul><li>-d&lt;分钟&gt; 切断所有FTP连线时间。</li><li>-l&lt;分钟&gt; 停止接受FTP登入的时间。</li></ul><h3 id="实例-11"><a href="#实例-11" class="headerlink" title="实例"></a>实例</h3><p>在晚上11:00 关闭FTP服务器，并在关闭前5 分钟拒绝新的FTP登录，前3 分钟关闭所有ftp的链接，且给出警告信息，可使用如下命令：</p><pre><code>ftpshut-d 3 -1 5 1100 "Server will be shutdown at 23:00:00" </code></pre><h2 id="14-ftpwho"><a href="#14-ftpwho" class="headerlink" title="14.ftpwho"></a>14.ftpwho</h2><p>​        ftpwho命令用于显示目前所有以FTP登入的用户信息。</p><p>执行这项指令可得知目前用FTP登入系统的用户有那些人，以及他们正在进行的操作。</p><h3 id="语法-13"><a href="#语法-13" class="headerlink" title="语法"></a>语法</h3><pre><code>ftpwho</code></pre><p><strong>参数说明：</strong></p><ul><li>-v 显示版本信息</li></ul><h3 id="实例-12"><a href="#实例-12" class="headerlink" title="实例"></a>实例</h3><p>查询当前有哪些用户正在登录FTP服务器，可直接使用如下命令：</p><pre><code>ftpwho</code></pre><p>该命令有如下输出结果：</p><pre><code>$ ftpwho              #查询当前正在登录FTP 服务器的用户  standalone FTP daemon[2085]：  3547 wyw [1m20s] 1m25s(idle)  Service class - 1 user #当前有一个用户登录FTP服务器 </code></pre><h2 id="15-ftpcount"><a href="#15-ftpcount" class="headerlink" title="15.ftpcount"></a>15.ftpcount</h2><p>​        ftpcount命令用于显示目前以FTP登入的用户人数。</p><p>执行这项指令可得知目前用FTP登入系统的人数以及FTP登入人数的上限。</p><h3 id="语法-14"><a href="#语法-14" class="headerlink" title="语法"></a>语法</h3><pre><code>ftpcount</code></pre><p><strong>参数说明：</strong></p><ul><li>-f&lt;设定文件&gt; : 指定设定文件的路径。</li><li>-h，–help ：显示帮助信息。</li></ul><h3 id="实例-13"><a href="#实例-13" class="headerlink" title="实例"></a>实例</h3><p>ftpcount 可以直接查询FTP服务器上用户的人数，可直接使用如下命令：</p><pre><code>ftpcount              #查询当前FTP用户的人数 </code></pre><p>该命令有如下输出结果：</p><pre><code>$ ftpcount             #查询当前FTP用户的人数  Master proftpd process 2085:  Service class - 6 user #当前共6个用户登录到服务器 </code></pre><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><ul><li><a href="https://www.runoob.com/linux/linux-command-manual.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-command-manual.html</a></li></ul><p><em>如有侵权，联系 <a href="mailto:2025685938@qq.com" target="_blank" rel="noopener">2025685938@qq.com</a> 删除</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01-JavaScript基础</title>
      <link href="/posts/24950.html"/>
      <url>/posts/24950.html</url>
      
        <content type="html"><![CDATA[<h2 id="本文非原创"><a href="#本文非原创" class="headerlink" title=" 本文非原创 "></a><strong> 本文非原创 </strong></h2><p>学习目标:</p><ul><li>掌握编程的基本思维</li><li>掌握编程的基本语法</li></ul><hr><h1 id="JavaScript基础"><a href="#JavaScript基础" class="headerlink" title="JavaScript基础"></a>JavaScript基础</h1><p>HTML和CSS   京东</p><h2 id="网页、网站和应用程序"><a href="#网页、网站和应用程序" class="headerlink" title="网页、网站和应用程序"></a>网页、网站和应用程序</h2><p>网页：单独的一个页面<br>网站：一些列相关的页面组成到一起<br>应用程序：可以和用户产生交互，并实现某种功能。</p><h2 id="演示JavaScript的强大"><a href="#演示JavaScript的强大" class="headerlink" title="演示JavaScript的强大"></a>演示JavaScript的强大</h2><p><a href="http://impress.github.io/impress.js/" target="_blank" rel="noopener">http://impress.github.io/impress.js/</a><br><a href="http://naotu.baidu.com/" target="_blank" rel="noopener">http://naotu.baidu.com/</a><br><a href="https://codecombat.com/" target="_blank" rel="noopener">https://codecombat.com/</a><br><a href="https://ide.codemao.cn/" target="_blank" rel="noopener">https://ide.codemao.cn/</a></p><p>需要翻墙<br><a href="https://developers.google.com/blockly/" target="_blank" rel="noopener">https://developers.google.com/blockly/</a><br>blockly迷宫<br><a href="https://blockly-games.appspot.com" target="_blank" rel="noopener">https://blockly-games.appspot.com</a></p><p>blockly迷宫不需要翻墙<br><a href="https://blockly.uieee.com/" target="_blank" rel="noopener">https://blockly.uieee.com/</a></p><h2 id="JavaScript介绍"><a href="#JavaScript介绍" class="headerlink" title="JavaScript介绍"></a>JavaScript介绍</h2><h3 id="JavaScript是什么"><a href="#JavaScript是什么" class="headerlink" title="JavaScript是什么"></a>JavaScript是什么</h3><p>HTML CSS </p><p>JavaScript 编程语言   流程控制</p><p>Netscape在最初将其脚本语言命名为LiveScript，后来Netscape在与Sun合作之后将其改名为JavaScript。JavaScript最初受Java启发而开始设计的，目的之一就是“看上去像Java”，因此语法上有类似之处，一些名称和命名规范也借自Java。JavaScript与Java名称上的近似，是当时Netscape为了营销考虑与Sun微系统达成协议的结果。Java和JavaScript的关系就像张雨和张雨生的关系，只是名字很像。</p><p>​    Java  服务器端的编程语言</p><p>​    JavaScript  运行在客户端(浏览器)的编程语言</p><blockquote><p>JavaScript是一种运行在<strong><em>客户端</em></strong> 的<strong><em>脚本语言</em></strong><br>JavaScript的解释器被称为JavaScript引擎，为浏览器的一部分，广泛用于客户端的脚本语言，最早是在HTML（标准通用标记语言下的一个应用）网页上使用，用来给HTML网页增加动态功能。</p></blockquote><h3 id="JavaScript最初的目的"><a href="#JavaScript最初的目的" class="headerlink" title="JavaScript最初的目的"></a>JavaScript最初的目的</h3><p>最初的目的是为了处理表单的验证操作。</p><h3 id="JavaScript现在的意义-应用场景"><a href="#JavaScript现在的意义-应用场景" class="headerlink" title="JavaScript现在的意义(应用场景)"></a>JavaScript现在的意义(应用场景)</h3><p>JavaScript 发展到现在几乎无所不能。</p><ol><li>网页特效</li><li>服务端开发(Node.js)</li><li>命令行工具(Node.js)</li><li>桌面程序(Electron)</li><li>App(Cordova)</li><li>控制硬件-物联网(Ruff)</li><li>游戏开发(cocos2d-js)</li></ol><h3 id="JavaScript和HTML、CSS的区别"><a href="#JavaScript和HTML、CSS的区别" class="headerlink" title="JavaScript和HTML、CSS的区别"></a>JavaScript和HTML、CSS的区别</h3><ol><li>HTML：提供网页的结构，提供网页中的内容</li><li>CSS: 用来美化网页</li><li>JavaScript: 可以用来控制网页内容，给网页增加动态的效果</li></ol><h2 id="JavaScript的组成"><a href="#JavaScript的组成" class="headerlink" title="JavaScript的组成"></a>JavaScript的组成</h2><p><img src="media/1496912475691.png" alt="1496912475691"></p><h3 id="ECMAScript-JavaScript的核心"><a href="#ECMAScript-JavaScript的核心" class="headerlink" title="ECMAScript - JavaScript的核心"></a>ECMAScript - JavaScript的核心</h3><p>ECMA 欧洲计算机制造联合会</p><p>网景：JavaScript</p><p>微软：JScript</p><p>定义了JavaScript的语法规范  </p><p>JavaScript的核心，描述了语言的基本语法和数据类型，ECMAScript是一套标准，定义了一种语言的标准与具体实现无关</p><h3 id="BOM-浏览器对象模型"><a href="#BOM-浏览器对象模型" class="headerlink" title="BOM - 浏览器对象模型"></a>BOM - 浏览器对象模型</h3><p>一套操作浏览器功能的API</p><p>通过BOM可以操作浏览器窗口，比如：弹出框、控制浏览器跳转、获取分辨率等</p><h3 id="DOM-文档对象模型"><a href="#DOM-文档对象模型" class="headerlink" title="DOM - 文档对象模型"></a>DOM - 文档对象模型</h3><p>一套操作页面元素的API</p><p>DOM可以把HTML看做是文档树，通过DOM提供的API可以对树上的节点进行操作</p><h2 id="JavaScript初体验"><a href="#JavaScript初体验" class="headerlink" title="JavaScript初体验"></a>JavaScript初体验</h2><p>CSS：行内样式、嵌入样式、外部样式</p><h3 id="JavaScript的书写位置"><a href="#JavaScript的书写位置" class="headerlink" title="JavaScript的书写位置"></a>JavaScript的书写位置</h3><ul><li>写在行内</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>按钮<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>alert(<span class="token punctuation">'</span>Hello World<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><ul><li>写在script标签中</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre><ul><li>写在外部js文件中，在页面引入</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><ul><li><p>注意点</p><p><strong><em>引用外部js文件的script标签中不可以写JavaScript代码</em></strong></p></li></ul><h2 id="计算机组成"><a href="#计算机组成" class="headerlink" title="计算机组成"></a>计算机组成</h2><h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><ul><li>应用软件：浏览器(Chrome/IE/Firefox)、QQ、Sublime、Word</li><li>系统软件：Windows、Linux、mac OSX</li></ul><h3 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h3><ul><li>三大件：CPU、内存、硬盘    – 主板</li><li>输入设备：鼠标、键盘、手写板、摄像头等</li><li>输出设备：显示器、打印机、投影仪等</li></ul><p><img src="media/1497317567484.png" alt="1497317567484"></p><p><img src="media/1496916239525.png" alt="1496916239525"></p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="什么是变量"><a href="#什么是变量" class="headerlink" title="什么是变量"></a>什么是变量</h3><ul><li><p>什么是变量</p><p>变量是计算机内存中存储数据的标识符，根据变量名称可以获取到内存中存储的数据</p></li><li><p>为什么要使用变量</p><p>使用变量可以方便的获取或者修改内存中的数据</p></li></ul><h3 id="如何使用变量"><a href="#如何使用变量" class="headerlink" title="如何使用变量"></a>如何使用变量</h3><ul><li>var声明变量</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> age<span class="token punctuation">;</span></code></pre><ul><li>变量的赋值</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> age<span class="token punctuation">;</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span></code></pre><ul><li>同时声明多个变量</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> age<span class="token punctuation">,</span> name<span class="token punctuation">,</span> sex<span class="token punctuation">;</span>age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>name <span class="token operator">=</span> <span class="token string">'zs'</span><span class="token punctuation">;</span></code></pre><ul><li>同时声明多个变量并赋值</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> name <span class="token operator">=</span> <span class="token string">'zs'</span><span class="token punctuation">;</span></code></pre><h3 id="变量在内存中的存储"><a href="#变量在内存中的存储" class="headerlink" title="变量在内存中的存储"></a>变量在内存中的存储</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span></code></pre><p><img src="media/1496981558575.png" alt="1496981558575"></p><h3 id="变量的命名规则和规范"><a href="#变量的命名规则和规范" class="headerlink" title="变量的命名规则和规范"></a>变量的命名规则和规范</h3><ul><li><p>规则 - 必须遵守的，不遵守会报错</p><ul><li><p>由字母、数字、下划线、$符号组成，不能以数字开头</p></li><li><p>不能是关键字和保留字，例如：for、while。</p></li><li><p>区分大小写</p></li></ul></li><li><p>规范 - 建议遵守的，不遵守不会报错</p><ul><li>变量名必须有意义</li><li>遵守驼峰命名法。首字母小写，后面单词的首字母需要大写。例如：userName、userPassword</li></ul></li><li><p>下面哪些变量名不合法</p><pre><code>a        1age1818agename$name_sex&amp;sextheworld  theWorld</code></pre></li></ul><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><ol><li>交换两个变量的值</li><li>不使用临时变量，交换两个数值变量的值</li></ol><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="简单数据类型"><a href="#简单数据类型" class="headerlink" title="简单数据类型"></a>简单数据类型</h3><p>Number、String、Boolean、Undefined、Null</p><h4 id="Number类型"><a href="#Number类型" class="headerlink" title="Number类型"></a>Number类型</h4><ul><li><p>数值字面量：数值的固定值的表示法</p><p>110 1024  60.5</p></li><li><p>进制</p></li></ul><pre><code>十进制    var num = 9;    进行算数计算时，八进制和十六进制表示的数值最终都将被转换成十进制数值。十六进制    var num = 0xA;    数字序列范围：0~9以及A~F八进制    var num1 = 07;   // 对应十进制的7    var num2 = 019;  // 对应十进制的19    var num3 = 08;   // 对应十进制的8    数字序列范围：0~7    如果字面值中的数值超出了范围，那么前导零将被忽略，后面的数值将被当作十进制数值解析</code></pre><ul><li><p>浮点数</p><ul><li>浮点数的精度问题</li></ul></li></ul><pre><code>浮点数    var n = 5e-324;   // 科学计数法  5乘以10的-324次方  浮点数值的最高精度是 17 位小数，但在进行算术计算时其精确度远远不如整数   var result = 0.1 + 0.2;    // 结果不是 0.3，而是：0.30000000000000004   console.log(0.07 * 100);   不要判断两个浮点数是否相等</code></pre><ul><li>数值范围</li></ul><pre><code>最小值：Number.MIN_VALUE，这个值为： 5e-324最大值：Number.MAX_VALUE，这个值为： 1.7976931348623157e+308无穷大：Infinity无穷小：-Infinity</code></pre><ul><li><p>数值判断</p><ul><li>NaN：not a number<ul><li>NaN 与任何值都不相等，包括他本身</li></ul></li><li>isNaN: is not a number</li></ul></li></ul><h4 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h4><p>‘abc’   “abc”</p><ul><li><p>字符串字面量</p><p>‘程序猿’，’程序媛’, “WEB程序猿”</p></li></ul><p>  思考：如何打印以下字符串。<br>  我是一个”正直”的人<br>  我很喜欢”前端’程序猿’”</p><ul><li><p>转义符</p><p><img src="media/1498289626813.png" alt="1498289626813"></p></li><li><p>字符串长度</p><p>length属性用来获取字符串的长度</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'程序猿 Hello World'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>字符串拼接</p><p>字符串拼接使用 + 连接</p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">11</span> <span class="token operator">+</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span> <span class="token operator">+</span> <span class="token string">' world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'100'</span> <span class="token operator">+</span> <span class="token string">'100'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'11'</span> <span class="token operator">+</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'male:'</span> <span class="token operator">+</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol><li>两边只要有一个是字符串，那么+就是字符串拼接功能</li><li>两边如果都是数字，那么就是算术功能。</li></ol></li></ul><h4 id="Boolean类型"><a href="#Boolean类型" class="headerlink" title="Boolean类型"></a>Boolean类型</h4><ul><li>Boolean字面量：  true和false，区分大小写</li><li>计算机内部存储：true为1，false为0</li></ul><h4 id="Undefined和Null"><a href="#Undefined和Null" class="headerlink" title="Undefined和Null"></a>Undefined和Null</h4><ol><li>undefined表示一个声明了没有赋值的变量，变量只声明的时候值默认是undefined</li><li>null表示一个空，变量的值如果想为null，必须手动设置</li></ol><h3 id="复杂数据类型"><a href="#复杂数据类型" class="headerlink" title="复杂数据类型"></a>复杂数据类型</h3><p>​    Object</p><h3 id="获取变量的类型"><a href="#获取变量的类型" class="headerlink" title="获取变量的类型"></a>获取变量的类型</h3><p>typeof</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 'number'</span></code></pre><h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><p>在源代码中一个固定值的表示法。</p><p>数值字面量：8, 9, 10</p><p>字符串字面量：’程序员’, “大前端”</p><p>布尔字面量：true，false</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><h3 id="单行注释"><a href="#单行注释" class="headerlink" title="单行注释"></a>单行注释</h3><p>用来描述下面一个或多行代码的作用</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 这是一个变量</span><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'hm'</span><span class="token punctuation">;</span></code></pre><h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><p>用来注释多条代码</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/*var age = 18;var name = 'zs';console.log(name, age);*/</span></code></pre><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><p>如何使用谷歌浏览器，快速的查看数据类型？</p><p>字符串的颜色是黑色的，数值类型是蓝色的，布尔类型也是蓝色的，undefined和null是灰色的</p><h3 id="转换成字符串类型"><a href="#转换成字符串类型" class="headerlink" title="转换成字符串类型"></a>转换成字符串类型</h3><ul><li><p>toString()</p><pre><code>var num = 5;console.log(num.toString());</code></pre></li><li><p>String()</p><pre><code>String()函数存在的意义：有些值没有toString()，这个时候可以使用String()。比如：undefined和null</code></pre></li><li><p>拼接字符串方式</p><p>num  +  “”，当 + 两边一个操作符是字符串类型，一个操作符是其它类型的时候，会先把其它类型转换成字符串再进行字符串拼接，返回字符串</p></li></ul><h3 id="转换成数值类型"><a href="#转换成数值类型" class="headerlink" title="转换成数值类型"></a>转换成数值类型</h3><ul><li><p>Number()</p><pre><code>Number()可以把任意值转换成数值，如果要转换的字符串中有一个不是数值的字符，返回NaN</code></pre></li><li><p>parseInt()</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"12.3abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 返回12，如果第一个字符是数字会解析知道遇到非数字结束</span><span class="token keyword">var</span> num2 <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"abc123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 返回NaN，如果第一个字符不是数字或者符号就返回NaN</span></code></pre></li><li><p>parseFloat()</p><pre><code>parseFloat()把字符串转换成浮点数parseFloat()和parseInt非常相似，不同之处在与    parseFloat会解析第一个. 遇到第二个.或者非数字结束    如果解析的内容里只有整数，解析成整数</code></pre></li><li><p>+，-0等运算</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'500'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">+</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 取正</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">-</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 取负</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str <span class="token operator">-</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="转换成布尔类型"><a href="#转换成布尔类型" class="headerlink" title="转换成布尔类型"></a>转换成布尔类型</h3><ul><li>Boolean()</li></ul><p>0  ‘’(空字符串) null undefined NaN 会转换成false  其它都会转换成true</p><h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><p>运算符  operator </p><p>5 + 6   </p><p>表达式  组成 操作数和操作符，会有一个结果</p><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><pre><code>+ - * / %  </code></pre><h3 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h3><p>一元运算符：只有一个操作数的运算符</p><p>5 + 6  两个操作数的运算符 二元运算符</p><p>++  自身加1</p><p>– 自身减1</p><ul><li><p>前置++</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token operator">++</span> num1<span class="token punctuation">;</span> <span class="token keyword">var</span> num2 <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1 <span class="token operator">+</span> <span class="token operator">++</span> num2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>后置++</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>num1 <span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> num2 <span class="token operator">=</span> <span class="token number">6</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1 <span class="token operator">+</span> num2 <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>猜猜看</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token operator">++</span>a <span class="token operator">+</span> <span class="token operator">++</span>a<span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token operator">++</span> <span class="token operator">+</span> <span class="token operator">++</span>a<span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">var</span> b <span class="token operator">=</span> a<span class="token operator">++</span> <span class="token operator">+</span> a<span class="token operator">++</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token operator">++</span>a <span class="token operator">+</span> a<span class="token operator">++</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  </code></pre></li></ul><h3 id="逻辑运算符-布尔运算符"><a href="#逻辑运算符-布尔运算符" class="headerlink" title="逻辑运算符(布尔运算符)"></a>逻辑运算符(布尔运算符)</h3><pre><code>&amp;&amp; 与 两个操作数同时为true，结果为true，否则都是false|| 或 两个操作数有一个为true，结果为true，否则为false!  非  取反</code></pre><h3 id="关系运算符-比较运算符"><a href="#关系运算符-比较运算符" class="headerlink" title="关系运算符(比较运算符)"></a>关系运算符(比较运算符)</h3><pre><code>&lt;  &gt;  &gt;=  &lt;=  == != === !==</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">==</span>与<span class="token operator">===</span>的区别：<span class="token operator">==</span>只进行值得比较，<span class="token operator">===</span>类型和值同时相等，则相等<span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">'55'</span> <span class="token operator">==</span> <span class="token number">55</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// true</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token string">'55'</span> <span class="token operator">===</span> <span class="token number">55</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// false 值相等，类型不相等</span><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token number">55</span> <span class="token operator">===</span> <span class="token number">55</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// true</span></code></pre><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>=   +=   -=   *=   /=   %=</p><pre class=" language-javascript"><code class="language-javascript">例如：<span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>num <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//相当于  num = num + 5;</span></code></pre><h3 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h3><pre><code>优先级从高到底    1. ()  优先级最高    2. 一元运算符  ++   --   !    3. 算数运算符  先*  /  %   后 +   -    4. 关系运算符  &gt;   &gt;=   &lt;   &lt;=    5. 相等运算符   ==   !=    ===    !==    6. 逻辑运算符 先&amp;&amp;   后||    7. 赋值运算符</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 练习1：</span><span class="token number">4</span> <span class="token operator">>=</span> <span class="token number">6</span> <span class="token operator">||</span> <span class="token string">'人'</span> <span class="token operator">!=</span> <span class="token string">'阿凡达'</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token number">12</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">144</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">true</span><span class="token comment" spellcheck="true">// 练习2：</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token number">5</span> <span class="token operator">==</span> num <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> num<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'22'</span></code></pre><h2 id="表达式和语句"><a href="#表达式和语句" class="headerlink" title="表达式和语句"></a>表达式和语句</h2><h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><blockquote><p>一个表达式可以产生一个值，有可能是运算、函数调用、有可能是字面量。表达式可以放在任何需要值的地方。</p></blockquote><h3 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h3><blockquote><p>语句可以理解为一个行为，循环语句和判断语句就是典型的语句。一个程序有很多个语句组成，一般情况下;分割一个一个的语句</p></blockquote><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><blockquote><p>程序的三种基本结构</p></blockquote><h3 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h3><p> 从上到下执行的代码就是顺序结构</p><p><strong>程序默认就是由上到下顺序执行的</strong></p><h3 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h3><p>根据不同的情况，执行对应代码</p><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><p>循环结构：重复做一件事情</p><h2 id="分支结构-1"><a href="#分支结构-1" class="headerlink" title="分支结构"></a>分支结构</h2><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><p>语法结构</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token comment" spellcheck="true">/* 条件表达式 */</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 执行语句</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token comment" spellcheck="true">/* 条件表达式 */</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 成立执行语句</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 否则执行语句</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token comment" spellcheck="true">/* 条件1 */</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 成立执行语句</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token comment" spellcheck="true">/* 条件2 */</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 成立执行语句</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token comment" spellcheck="true">/* 条件3 */</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 成立执行语句</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 最后默认执行语句</span><span class="token punctuation">}</span></code></pre><p>案例：<br>    求两个数的最大数<br>    判断一个数是偶数还是奇数<br>    分数转换，把百分制转换成ABCDE   &lt;60  E  60-70 D  70-80 C  80-90 B  90 - 100 A<br>作业：<br>    判断一个年份是闰年还是平年<br>      闰年：能被4整除，但不能被100整除的年份 或者 能被400整除的年份<br>    判断一个人的年龄是否满18岁(是否成年)</p><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><pre><code>表达式1 ? 表达式2 : 表达式3是对if……else语句的一种简化写法</code></pre><p>案例：<br>    是否年满18岁<br>    从两个数中找最大值</p><h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><p>语法格式:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">switch</span> <span class="token punctuation">(</span>expression<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">case</span> 常量<span class="token number">1</span><span class="token punctuation">:</span>    语句<span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> 常量<span class="token number">2</span><span class="token punctuation">:</span>    语句<span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">case</span> 常量<span class="token number">3</span><span class="token punctuation">:</span>    语句<span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  …  <span class="token keyword">case</span> 常量n<span class="token punctuation">:</span>    语句<span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token keyword">default</span><span class="token punctuation">:</span>    语句<span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre><code>break可以省略，如果省略，代码会继续执行下一个caseswitch 语句在比较值时使用的是全等操作符, 因此不会发生类型转换（例如，字符串'10' 不等于数值 10）</code></pre><p>案例：<br>    显示星期几<br>    素质教育（把分数变成ABCDE）千万不要写100个case哟</p><h3 id="布尔类型的隐式转换"><a href="#布尔类型的隐式转换" class="headerlink" title="布尔类型的隐式转换"></a>布尔类型的隐式转换</h3><p>流程控制语句会把后面的值隐式转换成布尔类型</p><pre><code>转换为true   非空字符串  非0数字  true 任何对象转换成false  空字符串  0  false  null  undefined</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 结果是什么？</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span><span class="token string">'123'</span><span class="token punctuation">;</span></code></pre><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> message<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 会自动把message转换成false</span><span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">// todo...</span><span class="token punctuation">}</span></code></pre><h2 id="循环结构-1"><a href="#循环结构-1" class="headerlink" title="循环结构"></a>循环结构</h2><blockquote><p>在javascript中，循环语句有三种，while、do..while、for循环。</p></blockquote><h3 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h3><p>基本语法：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 当循环条件为true时，执行循环体，</span><span class="token comment" spellcheck="true">// 当循环条件为false时，结束循环。</span><span class="token keyword">while</span> <span class="token punctuation">(</span>循环条件<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//循环体</span><span class="token punctuation">}</span></code></pre><p>代码示例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 计算1-100之间所有数的和</span><span class="token comment" spellcheck="true">// 初始化变量</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 判断条件</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 循环体</span>  sum <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 自增</span>  i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>案例：<br>    打印100以内 7的倍数<br>    打印100以内所有偶数<br>    打印100以内所有偶数的和<br>作业：<br>    打印100以内的奇数<br>    打印100以内的奇数的和</p><h3 id="do…while语句"><a href="#do…while语句" class="headerlink" title="do…while语句"></a>do…while语句</h3><blockquote><p>do..while循环和while循环非常像，二者经常可以相互替代，但是do..while的特点是不管条件成不成立，都会执行一次。</p></blockquote><p>基础语法：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">do</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 循环体;</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>循环条件<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>代码示例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 初始化变量</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token punctuation">{</span>  sum <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//循环体</span>  i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//自增</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//循环条件</span></code></pre><p>案例：</p><pre><code>求100以内所有3的倍数的和使用do-while循环：输出询问“我爱你，嫁给我吧？”，选择“你喜欢我吗？(y/n):"，如果输入为y则打印”我们形影不离“，若输入为n,则继续询问 </code></pre><h3 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h3><blockquote><p> while和do…while一般用来解决无法确认次数的循环。for循环一般在循环次数确定的时候比较方便</p></blockquote><p>for循环语法：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// for循环的表达式之间用的是;号分隔的，千万不要写成,</span><span class="token keyword">for</span> <span class="token punctuation">(</span>初始化表达式<span class="token number">1</span><span class="token punctuation">;</span> 判断表达式<span class="token number">2</span><span class="token punctuation">;</span> 自增表达式<span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 循环体4</span><span class="token punctuation">}</span></code></pre><p>执行顺序：1243  —-  243   —–243(直到循环条件变成false)</p><ol><li>初始化表达式</li><li>判断表达式</li><li>自增表达式</li><li>循环体</li></ol><p>案例：</p><pre><code>打印1-100之间所有数求1-100之间所有数的和求1-100之间所有数的平均值求1-100之间所有偶数的和同时求1-100之间所有偶数和奇数的和打印正方形// 使用拼字符串的方法的原因// console.log 输出重复内容的问题// console.log 默认输出内容介绍后有换行var start = '';for (var i = 0; i &lt; 10; i++) {  for (var j = 0; j &lt; 10; j++) {    start += '* ';  }  start += '\n';}console.log(start);打印直角三角形var start = '';for (var i = 0; i &lt; 10; i++) {  for (var j = i; j &lt; 10; j++) {    start += '* ';  }  start += '\n';}console.log(start);打印9*9乘法表var str = '';for (var i = 1; i &lt;= 9; i++) {  for (var j = i; j &lt;=9; j++) {    str += i + ' * ' + j + ' = ' + i * j + '\t';  }  str += '\n';}console.log(str);</code></pre><p>作业：</p><pre><code>求1-100之间所有数的乘积求1-100之间所有奇数的和计算1-100之间能3整除的数的和计算1-100之间不能被7整除的数的和// 讲解思路。如果不会写程序，可以先把数学公式准备好本金10000元存入银行，年利率是千分之三，每过1年，将本金和利息相加作为新的本金。计算5年后，获得的本金是多少？有个人想知道，一年之内一对兔子能繁殖多少对？于是就筑了一道围墙把一对兔子关在里面。已知一对兔子每个月可以生一对小兔子，而一对兔子从出生后第3个月起每月生一对小兔子。假如一年内没有发生死亡现象，那么，一对兔子一年内（12个月）能繁殖成多少对？（兔子的规律为数列，1，1，2，3，5，8，13，21）</code></pre><h3 id="continue和break"><a href="#continue和break" class="headerlink" title="continue和break"></a>continue和break</h3><blockquote><p>break:立即跳出整个循环，即循环结束，开始执行循环后面的内容（直接跳到大括号）</p><p>continue:立即跳出当前循环，继续下一次循环（跳到i++的地方）</p></blockquote><p>案例：</p><pre class=" language-javascript"><code class="language-javascript">求整数<span class="token number">1</span>～<span class="token number">100</span>的累加值，但要求碰到个位为<span class="token number">3</span>的数则停止累加求整数<span class="token number">1</span>～<span class="token number">100</span>的累加值，但要求跳过所有个位为<span class="token number">3</span>的数</code></pre><p>作业：</p><p>求1-100之间不能被7整除的整数的和（用continue）<br>求200-300之间所有的奇数的和（用continue）<br>求200-300之间第一个能被7整数的数（break）</p><h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><ul><li>过去调试JavaScript的方式<ul><li>alert()</li><li>console.log()</li></ul></li><li>断点调试</li></ul><blockquote><p>断点调试是指自己在程序的某一行设置一个断点，调试时，程序运行到这一行就会停住，然后你可以一步一步往下调试，调试过程中可以看各个变量当前的值，出错的话，调试到出错的代码行即显示错误，停下。</p></blockquote><ul><li>调试步骤</li></ul><pre class=" language-javascript"><code class="language-javascript">浏览器中按F12<span class="token operator">--</span><span class="token operator">></span>sources<span class="token operator">--</span><span class="token operator">></span>找到需要调试的文件<span class="token operator">--</span><span class="token operator">></span>在程序的某一行设置断点</code></pre><ul><li>调试中的相关操作</li></ul><pre class=" language-javascript"><code class="language-javascript">Watch<span class="token punctuation">:</span> 监视，通过watch可以监视变量的值的变化，非常的常用。F10<span class="token punctuation">:</span> 程序单步执行，让程序一行一行的执行，这个时候，观察watch中变量的值的变化。F8：跳到下一个断点处，如果后面没有断点了，则程序执行结束。</code></pre><p>tips: <strong><em>监视变量，不要监视表达式，因为监视了表达式，那么这个表达式也会执行。</em></strong></p><ol><li>代码调试的能力非常重要，只有学会了代码调试，才能学会自己解决bug的能力。初学者不要觉得调试代码麻烦就不去调试，知识点花点功夫肯定学的会，但是代码调试这个东西，自己不去练，永远都学不会。</li><li>今天学的代码调试非常的简单，只要求同学们记住代码调试的这几个按钮的作用即可，后面还会学到很多的代码调试技巧。</li></ol><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="为什么要学习数组"><a href="#为什么要学习数组" class="headerlink" title="为什么要学习数组"></a>为什么要学习数组</h3><blockquote><p>之前学习的数据类型，只能存储一个值(比如：Number/String。我们想存储班级中所有学生的姓名，此时该如何存储？</p></blockquote><h3 id="数组的概念"><a href="#数组的概念" class="headerlink" title="数组的概念"></a>数组的概念</h3><blockquote><p>所谓数组，就是将多个元素（通常是同一类型）按一定顺序排列放到一个集合中，那么这个集合我们就称之为数组。</p></blockquote><h3 id="数组的定义"><a href="#数组的定义" class="headerlink" title="数组的定义"></a>数组的定义</h3><blockquote><p>数组是一个有序的列表，可以在数组中存放任意的数据，并且数组的长度可以动态的调整。</p></blockquote><p>通过数组字面量创建数组</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 创建一个空数组</span><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建一个包含3个数值的数组，多个数组项以逗号隔开</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建一个包含2个字符串的数组</span><span class="token keyword">var</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 可以通过数组的length属性获取数组的长度</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr3<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 可以设置length属性改变数组中元素的个数</span>arr3<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></code></pre><h3 id="获取数组元素"><a href="#获取数组元素" class="headerlink" title="获取数组元素"></a>获取数组元素</h3><p>数组的取值</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 格式：数组名[下标]    下标又称索引</span><span class="token comment" spellcheck="true">// 功能：获取数组对应下标的那个值，如果下标不存在，则返回undefined。</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span><span class="token punctuation">,</span> <span class="token string">'green'</span><span class="token punctuation">,</span> <span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// red</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// blue</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这个数组的最大下标为2,因此返回undefined</span></code></pre><h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><blockquote><p>遍历：遍及所有，对数组的每一个元素都访问一次就叫遍历。</p></blockquote><p>数组遍历的基本语法：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 数组遍历的固定结构</span><span class="token punctuation">}</span></code></pre><h3 id="数组中新增元素"><a href="#数组中新增元素" class="headerlink" title="数组中新增元素"></a>数组中新增元素</h3><p>数组的赋值</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 格式：数组名[下标/索引] = 值;</span><span class="token comment" spellcheck="true">// 如果下标有对应的值，会把原来的值覆盖，如果下标不存在，会给数组新增一个元素。</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 把red替换成了yellow</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"yellow"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 给数组新增加了一个pink的值</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"pink"</span><span class="token punctuation">;</span></code></pre><h3 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h3><pre><code>求一组数中的所有数的和和平均值求一组数中的最大值和最小值，以及所在位置将字符串数组用|或其他符号分割要求将数组中的0项去掉，将不为0的值存入一个新的数组，生成新的数组翻转数组冒泡排序，从小到大</code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="为什么要有函数"><a href="#为什么要有函数" class="headerlink" title="为什么要有函数"></a>为什么要有函数</h3><blockquote><p>如果要在多个地方求1-100之间所有数的和，应该怎么做？</p></blockquote><h3 id="什么是函数"><a href="#什么是函数" class="headerlink" title="什么是函数"></a>什么是函数</h3><blockquote><p>把一段相对独立的具有特定功能的代码块封装起来，形成一个独立实体，就是函数，起个名字（函数名），在后续开发中可以反复调用</p><p>函数的作用就是封装一段代码，将来可以重复使用</p></blockquote><h3 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h3><ul><li>函数声明</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 函数体</span><span class="token punctuation">}</span></code></pre><ul><li>函数表达式</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 函数体</span><span class="token punctuation">}</span></code></pre><ul><li><p>特点：</p><p>函数声明的时候，函数体并不会执行，只要当函数被调用的时候才会执行。<br>函数一般都用来干一件事情，函数名称一般使用动词</p></li></ul><h3 id="函数的调用"><a href="#函数的调用" class="headerlink" title="函数的调用"></a>函数的调用</h3><ul><li>调用函数的语法：</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token function">函数名</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><p>特点：</p><p>函数体只有在调用的时候才会执行，调用需要()进行调用。<br>可以调用多次(重复使用)</p></li></ul><p>代码示例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 声明函数</span><span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"吃了没？"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 调用函数</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 求1-100之间所有数的和</span><span class="token keyword">function</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span>  i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sum <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 调用</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="函数的参数"><a href="#函数的参数" class="headerlink" title="函数的参数"></a>函数的参数</h3><ul><li>为什么要有参数</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    sum <span class="token operator">+</span><span class="token operator">=</span> i<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 虽然上面代码可以重复调用，但是只能计算1-100之间的值</span><span class="token comment" spellcheck="true">// 如果想要计算n-m之间所有数的和，应该怎么办呢？</span></code></pre><ul><li>语法：</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 函数内部是一个封闭的环境，可以通过参数的方式，把外部的值传递给函数内部</span><span class="token comment" spellcheck="true">// 带参数的函数声明</span><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span>形参<span class="token number">1</span><span class="token punctuation">,</span> 形参<span class="token number">2</span><span class="token punctuation">,</span> 形参<span class="token number">3</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 函数体</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 带参数的函数调用</span><span class="token function">函数名</span><span class="token punctuation">(</span>实参<span class="token number">1</span><span class="token punctuation">,</span> 实参<span class="token number">2</span><span class="token punctuation">,</span> 实参<span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 形参<span class="token number">1</span> <span class="token operator">=</span> 实参<span class="token number">1</span>形参<span class="token number">2</span> <span class="token operator">=</span> 实参<span class="token number">2</span></code></pre><ul><li><p>形参和实参</p><blockquote><ol><li>形式参数：在声明一个函数的时候，为了函数的功能更加灵活，有些值是固定不了的，对于这些固定不了的值。我们可以给函数设置参数。这个参数没有具体的值，仅仅起到一个占位置的作用，我们通常称之为形式参数，也叫形参。</li><li>实际参数：如果函数在声明时，设置了形参，那么在函数调用的时候就需要传入对应的参数，我们把传入的参数叫做实际参数，也叫实参。</li></ol></blockquote></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token function">fn</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// x,y实参，有具体的值。函数执行的时候会把x,y复制一份给函数内部的a和b，函数内部的值是复制的新值，无法修改外部的x,y</span></code></pre><h3 id="案例-3"><a href="#案例-3" class="headerlink" title="案例"></a>案例</h3><ul><li>求1-n之间所有数的和</li><li>求n-m之间所有数的和</li><li>圆的面积</li><li>求2个数中的最大值</li><li>求3个数中的最大值</li><li>判断一个数是否是素数(又叫质数，只能被1和自身整数的数)</li></ul><h3 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h3><blockquote><p>当函数执行完的时候，并不是所有时候都要把结果打印。我们期望函数给我一些反馈（比如计算的结果返回进行后续的运算），这个时候可以让函数返回一些东西。也就是返回值。函数通过return返回一个返回值</p></blockquote><p>返回值语法：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//声明一个带返回值的函数</span><span class="token keyword">function</span> <span class="token function">函数名</span><span class="token punctuation">(</span>形参<span class="token number">1</span><span class="token punctuation">,</span> 形参<span class="token number">2</span><span class="token punctuation">,</span> 形参<span class="token number">3</span><span class="token operator">...</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//函数体</span>  <span class="token keyword">return</span> 返回值<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//可以通过变量来接收这个返回值</span><span class="token keyword">var</span> 变量 <span class="token operator">=</span> <span class="token function">函数名</span><span class="token punctuation">(</span>实参<span class="token number">1</span><span class="token punctuation">,</span> 实参<span class="token number">2</span><span class="token punctuation">,</span> 实参<span class="token number">3</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>函数的调用结果就是返回值，因此我们可以直接对函数调用结果进行操作。</p><h3 id="案例-4"><a href="#案例-4" class="headerlink" title="案例"></a>案例</h3><ul><li>求一组数中的最大值</li><li>求一组数中的最小值</li><li>求阶乘</li><li>求1!+2!+3!+….+n!</li></ul><p>返回值详解：</p><pre><code>如果函数没有显示的使用 return语句 ，那么函数有默认的返回值：undefined如果函数使用 return语句，那么跟再return后面的值，就成了函数的返回值如果函数使用 return语句，但是return后面没有任何值，那么函数的返回值也是：undefined函数使用return语句后，这个函数会在执行完 return 语句之后停止并立即退出，也就是说return后面的所有其他代码都不会再执行。推荐的做法是要么让函数始终都返回一个值，要么永远都不要返回值。</code></pre><h3 id="arguments的使用"><a href="#arguments的使用" class="headerlink" title="arguments的使用"></a>arguments的使用</h3><blockquote><p>JavaScript中，arguments对象是比较特别的一个对象，实际上是当前函数的一个内置属性。也就是说所有函数都内置了一个arguments对象，arguments对象中存储了传递的所有的实参。arguments是一个伪数组，因此及可以进行遍历</p></blockquote><ul><li>案例<pre class=" language-javascript"><code class="language-javascript">求任意个数的最大值求任意个数的和</code></pre></li></ul><h3 id="案例-5"><a href="#案例-5" class="headerlink" title="案例"></a>案例</h3><pre class=" language-javascript"><code class="language-javascript">求斐波那契数列Fibonacci中的第n个数是多少？      <span class="token number">1</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">8</span> <span class="token number">13</span> <span class="token number">21</span><span class="token operator">...</span>翻转数组，返回一个新数组对数组排序，从小到大输入一个年份，判断是否是闰年<span class="token punctuation">[</span>闰年：能被<span class="token number">4</span>整数并且不能被<span class="token number">100</span>整数，或者能被<span class="token number">400</span>整数<span class="token punctuation">]</span>输入某年某月某日，判断这一天是这一年的第几天？</code></pre><h2 id="函数其它"><a href="#函数其它" class="headerlink" title="函数其它"></a>函数其它</h2><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><blockquote><p>匿名函数：没有名字的函数</p></blockquote><p>匿名函数如何使用：</p><pre><code>将匿名函数赋值给一个变量，这样就可以通过变量进行调用匿名函数自调用</code></pre><h3 id="自调用函数"><a href="#自调用函数" class="headerlink" title="自调用函数"></a>自调用函数</h3><blockquote><p>匿名函数不能通过直接调用来执行，因此可以通过匿名函数的自调用的方式来执行</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote><h3 id="函数是一种数据类型"><a href="#函数是一种数据类型" class="headerlink" title="函数是一种数据类型"></a>函数是一种数据类型</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>函数作为参数</li></ul><p>因为函数也是一种类型，可以把函数作为两一个函数的参数，在另一个函数中调用</p><ul><li>函数做为返回值</li></ul><p>因为函数是一种类型，所以可以把函数可以作为返回值从函数内部返回。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h3><pre><code>1.命名规范        变量、函数 的命名 必须要有意义    变量 的名称一般用名词    函数 的名称一般用动词2.变量规范       操作符的前后要有空格    var name = 'zs';      5 + 63.注释规范    // 这里是注释4.空格规范    if (true) {    }    for (var i = 0; i &lt;= 100; i++) {    }5.换行规范    var arr = [1, 2, 3, 4];    if (a &gt; b) {    }    for (var i = 0; i &lt; 10; i++) {    }    function fn() {    }</code></pre><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>作用域：变量可以起作用的范围</p><h3 id="全局变量和局部变量"><a href="#全局变量和局部变量" class="headerlink" title="全局变量和局部变量"></a>全局变量和局部变量</h3><ul><li><p>全局变量</p><p>在任何地方都可以访问到的变量就是全局变量，对应全局作用域</p></li><li><p>局部变量</p><p>只在固定的代码片段内可访问到的变量，最常见的例如函数内部。对应局部作用域(函数作用域)</p></li></ul><pre><code>不使用var声明的变量是全局变量，不推荐使用。变量退出作用域之后会销毁，全局变量关闭网页或浏览器才会销毁</code></pre><h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><p>任何一对花括号（｛和｝）中的语句集都属于一个块，在这之中定义的所有变量在代码块外都是不可见的，我们称之为块级作用域。<br><strong>在es5之前没有块级作用域的的概念,只有函数作用域</strong>，现阶段可以认为JavaScript没有块级作用域</p><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><pre><code>只有函数可以制造作用域结构， 那么只要是代码，就至少有一个作用域, 即全局作用域。凡是代码中有函数，那么这个函数就构成另一个作用域。如果函数中还有函数，那么在这个作用域中就又可以诞生一个作用域。将这样的所有的作用域列出来，可以有一个结构: 函数内指向函数外的链式结构。就称作作用域链。</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 案例1：</span><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">456</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">f4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="media/06-1.png" alt="06-1"></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 案例2</span><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">456</span><span class="token punctuation">;</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="media/06-2.png" alt="06-2"></p><h2 id="预解析"><a href="#预解析" class="headerlink" title="预解析"></a>预解析</h2><blockquote><p>JavaScript代码的执行是由浏览器中的JavaScript解析器来执行的。JavaScript解析器执行JavaScript代码的时候，分为两个过程：预解析过程和代码执行过程</p></blockquote><p>预解析过程：</p><ol><li>把变量的声明提升到当前作用域的最前面，只会提升声明，不会提升赋值。</li><li>把函数的声明提升到当前作用域的最前面，只会提升声明，不会提升调用。</li><li>先提升var，在提升function。</li></ol><p>JavaScript的执行过程</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 案例1</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">abc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">alert</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">abc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 案例2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'aaaaa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h3><ul><li><p>变量提升</p><p>定义变量的时候，变量的声明会被提升到作用域的最上面，变量的赋值不会提升。</p></li><li><p>函数提升</p><p>JavaScript解析器首先会把当前作用域的函数声明提前到整个作用域的最前面</p></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 1、-----------------------------------</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//2、-----------------------------------</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'123'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 3、-----------------------------------</span><span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> b <span class="token operator">=</span> c <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="为什么要有对象"><a href="#为什么要有对象" class="headerlink" title="为什么要有对象"></a>为什么要有对象</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">printPerson</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 函数的参数如果特别多的话，可以使用对象简化</span><span class="token keyword">function</span> <span class="token function">printPerson</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  ……<span class="token punctuation">}</span></code></pre><h3 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象"></a>什么是对象</h3><pre><code>现实生活中：万物皆对象，对象是一个具体的事物，一个具体的事物就会有行为和特征。举例： 一部车，一个手机车是一类事物，门口停的那辆车才是对象    特征：红色、四个轮子    行为：驾驶、刹车</code></pre><h3 id="JavaScript中的对象"><a href="#JavaScript中的对象" class="headerlink" title="JavaScript中的对象"></a>JavaScript中的对象</h3><pre><code>JavaScript中的对象其实就是生活中对象的一个抽象JavaScript的对象是无序属性的集合。    其属性可以包含基本值、对象或函数。对象就是一组没有顺序的值。我们可以把JavaScript中的对象想象成键值对，其中值可以是数据和函数。对象的行为和特征    特征---属性    行为---方法</code></pre><ul><li>事物的特征在对象中用属性来表示。</li><li>事物的行为在对象中用方法来表示。</li></ul><h3 id="对象字面量"><a href="#对象字面量" class="headerlink" title="对象字面量"></a>对象字面量</h3><blockquote><p>字面量：11 ‘abc’  true  [] {}等</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> 'zs<span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>  sex<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  sayHi<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>思考：</p><pre class=" language-javascript"><code class="language-javascript">如何把学生对象、老师对象、英雄对象改写成字面量的方式</code></pre><h3 id="对象创建方式"><a href="#对象创建方式" class="headerlink" title="对象创建方式"></a>对象创建方式</h3><ul><li>对象字面量</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'zs'</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>  sex<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  sayHi<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>   </code></pre><ul><li>new Object()创建对象</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'lisi'</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">35</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span>job <span class="token operator">=</span> <span class="token string">'actor'</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span>sayHi <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hello,everyBody'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>工厂函数创建对象<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createPerson</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> job<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>person<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>person<span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>person<span class="token punctuation">.</span>job <span class="token operator">=</span> job<span class="token punctuation">;</span>person<span class="token punctuation">.</span>sayHi <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hello,everyBody'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">return</span> person<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token function">createPerson</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">'actor'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>自定义构造函数<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> job<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>job <span class="token operator">=</span> job<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>sayHi <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hello,everyBody'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'张三'</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">'actor'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="属性和方法"><a href="#属性和方法" class="headerlink" title="属性和方法"></a>属性和方法</h3>  如果一个变量属于一个对象所有，那么该变量就可以称之为该对象的一个属性，属性一般是名词，用来描述事物的特征<br>  如果一个函数属于一个对象所有，那么该函数就可以称之为该对象的一个方法，方法是动词，描述事物的行为和功能<h3 id="new关键字"><a href="#new关键字" class="headerlink" title="new关键字"></a>new关键字</h3><blockquote><p>构造函数 ，是一种特殊的函数。主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值，总与new运算符一起使用在创建对象的语句中。</p></blockquote></li></ul><ol><li>构造函数用于创建一类对象，首字母要大写。</li><li>构造函数要和new一起使用才有意义。</li></ol><p>new在执行时会做四件事情</p><pre><code>new会在内存中创建一个新的空对象new 会让this指向这个新的对象执行构造函数  目的：给这个新对象加属性和方法new会返回这个新对象</code></pre><h3 id="this详解"><a href="#this详解" class="headerlink" title="this详解"></a>this详解</h3><pre><code>JavaScript中的this指向问题，有时候会让人难以捉摸，随着学习的深入，我们可以逐渐了解现在我们需要掌握函数内部的this几个特点    1. 函数在定义的时候this是不确定的，只有在调用的时候才可以确定    2. 一般函数直接执行，内部this指向全局window    3. 函数作为一个对象的方法，被该对象所调用，那么this指向的是该对象    4. 构造函数中的this其实是一个隐式对象，类似一个初始化的模型，所有方法和属性都挂载到了这个隐式对象身上，后续通过new关键字来调用，从而实现实例化</code></pre><h2 id="对象的使用"><a href="#对象的使用" class="headerlink" title="对象的使用"></a>对象的使用</h2><h3 id="遍历对象的属性"><a href="#遍历对象的属性" class="headerlink" title="遍历对象的属性"></a>遍历对象的属性</h3><blockquote><p>通过for..in语法可以遍历一个对象</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">"=="</span> <span class="token operator">+</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="删除对象的属性"><a href="#删除对象的属性" class="headerlink" title="删除对象的属性"></a>删除对象的属性</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'mm'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// mm </span><span class="token keyword">delete</span> obj<span class="token punctuation">.</span>name<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span></code></pre><h3 id="简单类型和复杂类型的区别"><a href="#简单类型和复杂类型的区别" class="headerlink" title="简单类型和复杂类型的区别"></a>简单类型和复杂类型的区别</h3><blockquote><p>基本类型又叫做值类型，复杂类型又叫做引用类型</p><p>值类型：简单数据类型，基本数据类型，在存储时，变量中存储的是值本身，因此叫做值类型。</p><p>引用类型：复杂数据类型，在存储是，变量中存储的仅仅是地址（引用），因此叫做引用数据类型。</p></blockquote><ul><li><p>堆和栈    </p><pre><code>堆栈空间分配区别：　　1、栈（操作系统）：由操作系统自动分配释放 ，存放函数的参数值，局部变量的值等。 　　2、堆（操作系统）： 存储复杂类型(对象)，一般由程序员分配释放， 若程序员不释放，由垃圾回收机制回收。</code></pre></li><li><p>注意：JavaScript中没有堆和栈的概念，此处我们用堆和栈来讲解，目的方便理解和方便以后的学习。</p></li></ul><h4 id="基本类型在内存中的存储"><a href="#基本类型在内存中的存储" class="headerlink" title="基本类型在内存中的存储"></a>基本类型在内存中的存储</h4><p><img src="media/1498288494687.png" alt="1498288494687"></p><h4 id="复杂类型在内存中的存储"><a href="#复杂类型在内存中的存储" class="headerlink" title="复杂类型在内存中的存储"></a>复杂类型在内存中的存储</h4><p><img src="media/1498700592589.png" alt="1498700592589"></p><h4 id="基本类型作为函数的参数"><a href="#基本类型作为函数的参数" class="headerlink" title="基本类型作为函数的参数"></a>基本类型作为函数的参数</h4><p><img src="media/1497497605587-8288640195.png" alt="1497497605587"></p><h4 id="复杂类型作为函数的参数"><a href="#复杂类型作为函数的参数" class="headerlink" title="复杂类型作为函数的参数"></a>复杂类型作为函数的参数</h4><p><img src="media/1497497865969.png" alt="1497497865969"></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 下面代码输出的结果?</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>salary<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">=</span> salary<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span> <span class="token punctuation">{</span>  person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"ls"</span><span class="token punctuation">;</span>  person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"zs"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">f1</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>思考：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//1. </span><span class="token keyword">var</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">var</span> num2 <span class="token operator">=</span> num1<span class="token punctuation">;</span>num1 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2. </span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    num <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f1</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><p>JavaScript中的对象分为3种：内置对象、自定义对象、浏览器对象</p><p>JavaScript 提供多个内置对象：Math/Array/Date….</p><p>对象只是带有<strong>属性</strong>和<strong>方法</strong>的特殊数据类型。</p><p>学习一个内置对象的使用，只要学会其常用的成员的使用（通过查文档学习）</p><p>可以通过MDN/W3C来查询</p><p>内置对象的方法很多，我们只需要知道内置对象提供的常用方法，使用的时候查询文档。</p><h3 id="MDN"><a href="#MDN" class="headerlink" title="MDN"></a>MDN</h3><p>Mozilla 开发者网络（MDN）提供有关开放网络技术（Open Web）的信息，包括 HTML、CSS 和万维网及 HTML5 应用的 API。</p><ul><li><a href="https://developer.mozilla.org/zh-CN/" target="_blank" rel="noopener">MDN</a></li><li>通过查询MDN学习Math对象的random()方法的使用</li></ul><h3 id="如何学习一个方法？"><a href="#如何学习一个方法？" class="headerlink" title="如何学习一个方法？"></a>如何学习一个方法？</h3><ol><li>方法的功能</li><li>参数的意义和<strong>类型</strong></li><li>返回值意义和<strong>类型</strong></li><li>demo进行测试</li></ol><h3 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h3><p>Math对象不是构造函数，它具有数学常数和函数的属性和方法，都是以静态成员的方式提供</p><p>跟数学相关的运算来找Math中的成员（求绝对值，取整）</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math" target="_blank" rel="noopener">Math</a></p><p>演示：Math.PI、Math.random()、Math.floor()/Math.ceil()、Math.round()、Math.abs()    、Math.max()</p><pre class=" language-javascript"><code class="language-javascript">Math<span class="token punctuation">.</span>PI                        <span class="token comment" spellcheck="true">// 圆周率</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 生成随机数</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span>Math<span class="token punctuation">.</span><span class="token function">ceil</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// 向下取整/向上取整</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 取整，四舍五入</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">// 绝对值</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">// 求最大和最小值</span>Math<span class="token punctuation">.</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span>Math<span class="token punctuation">.</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">// 正弦/余弦</span>Math<span class="token punctuation">.</span><span class="token function">power</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// 求指数次幂/求平方根</span></code></pre><h4 id="案例-6"><a href="#案例-6" class="headerlink" title="案例"></a>案例</h4><ul><li>求10-20之间的随机数</li><li>随机生成颜色RGB</li><li>模拟实现max()/min()</li></ul><h3 id="Date对象"><a href="#Date对象" class="headerlink" title="Date对象"></a>Date对象</h3><p>创建 <code>Date</code> 实例用来处理日期和时间。Date 对象基于1970年1月1日（世界标准时间）起的毫秒数。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 获取当前时间，UTC世界时间，距1970年1月1日（世界标准时间）起的毫秒数</span><span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>now<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取距1970年1月1日（世界标准时间）起的毫秒数</span>Date构造函数的参数<span class="token number">1</span><span class="token punctuation">.</span> 毫秒数 <span class="token number">1498099000356</span>        <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">1498099000356</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">.</span> 日期格式字符串  <span class="token string">'2019-5-1'</span>     <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">'2019-5-1'</span><span class="token punctuation">)</span><span class="token number">3</span><span class="token punctuation">.</span> 年、月、日……                  <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2015</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 月份从0开始</span></code></pre><ul><li>获取日期的毫秒形式</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// valueOf用于获取对象的原始值</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// HTML5中提供的方法，有兼容性问题</span><span class="token keyword">var</span> now <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 不支持HTML5的浏览器，可以用下面这种方式</span><span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 调用 Date对象的valueOf() </span></code></pre><ul><li>日期格式化方法</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 转换成字符串</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 获取毫秒值</span><span class="token comment" spellcheck="true">// 下面格式化日期的方法，在不同浏览器可能表现不一致，一般不用</span><span class="token function">toDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">toTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">toLocaleDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>获取日期指定部分</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 返回毫秒数和valueOf()结果一样</span><span class="token function">getMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 返回0-59</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 返回0-59</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 返回0-23</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 返回星期几 0周日   6周6</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// 返回当前月的第几天</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 返回月份，***从0开始***</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//返回4位的年份  如 2016</span></code></pre><h4 id="案例-7"><a href="#案例-7" class="headerlink" title="案例"></a>案例</h4><ul><li>写一个函数，格式化日期对象，返回yyyy-MM-dd HH:mm:ss的形式</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">formatDate</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//如果date不是日期对象，返回</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>date <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> year <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      month <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>       date <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       hour <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       minute <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>       second <span class="token operator">=</span> d<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  month <span class="token operator">=</span> month <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> month <span class="token punctuation">:</span> month<span class="token punctuation">;</span>  date <span class="token operator">=</span> date <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> date <span class="token punctuation">:</span> date<span class="token punctuation">;</span>  hour <span class="token operator">=</span> hour <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> hour <span class="token punctuation">:</span> hour<span class="token punctuation">;</span>  minute <span class="token operator">=</span> minute <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> minute<span class="token punctuation">:</span>minute<span class="token punctuation">;</span>  second <span class="token operator">=</span> second <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token operator">?</span> <span class="token string">'0'</span> <span class="token operator">+</span> second<span class="token punctuation">:</span>second<span class="token punctuation">;</span>  <span class="token keyword">return</span> year <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> month <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> date <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> hour <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> minute <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> second<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>计算时间差，返回相差的天/时/分/秒</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getInterval</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> day<span class="token punctuation">,</span> hour<span class="token punctuation">,</span> minute<span class="token punctuation">,</span> second<span class="token punctuation">,</span> interval<span class="token punctuation">;</span>  interval <span class="token operator">=</span> end <span class="token operator">-</span> start<span class="token punctuation">;</span>  interval <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>  day <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>interval <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  hour <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>interval <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">%</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  minute <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>interval <span class="token operator">/</span> <span class="token number">60</span> <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  second <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>interval <span class="token operator">%</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    day<span class="token punctuation">:</span> day<span class="token punctuation">,</span>    hour<span class="token punctuation">:</span> hour<span class="token punctuation">,</span>    minute<span class="token punctuation">:</span> minute<span class="token punctuation">,</span>    second<span class="token punctuation">:</span> second  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Array对象"><a href="#Array对象" class="headerlink" title="Array对象"></a>Array对象</h3><ul><li>创建数组对象的两种方式<ul><li>字面量方式</li><li>new Array()</li></ul></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 1. 使用构造函数创建数组对象</span><span class="token comment" spellcheck="true">// 创建了一个空数组</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建了一个数组，里面存放了3个字符串</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">'zs'</span><span class="token punctuation">,</span> <span class="token string">'ls'</span><span class="token punctuation">,</span> <span class="token string">'ww'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建了一个数组，里面存放了4个数字</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2. 使用字面量创建数组对象</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取数组中元素的个数</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><p>检测一个对象是否是数组</p><ul><li>instanceof</li><li>Array.isArray()     HTML5中提供的方法，有兼容性问题</li></ul><p>函数的参数，如果要求是一个数组的话，可以用这种方式来进行判断</p></li><li><p>toString()/valueOf()</p><ul><li>toString()        把数组转换成字符串，逗号分隔每一项</li><li>valueOf()         返回数组对象本身</li></ul></li><li><p>数组常用方法</p><p>演示：push()、shift()、unshift()、reverse()、sort()、splice()、indexOf()</p></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 1 栈操作(先进后出)</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">//取出数组中的最后一项，修改length属性</span><span class="token comment" spellcheck="true">// 2 队列操作(先进先出)</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//取出数组中的第一个元素，修改length属性</span><span class="token function">unshift</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//在数组最前面插入项，返回数组的长度</span><span class="token comment" spellcheck="true">// 3 排序方法</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//翻转数组</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//即使是数组sort也是根据字符，从小到大排序</span><span class="token comment" spellcheck="true">// 带参数的sort是如何实现的？</span><span class="token comment" spellcheck="true">// 4 操作方法</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//把参数拼接到当前数组</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//从当前数组中截取一个新的数组，不影响原来的数组，参数start从0开始,end从1开始</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//删除或替换当前数组的某些项目，参数start, deleteCount, options(要替换的项目)</span><span class="token comment" spellcheck="true">// 5 位置方法</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">、lastIndexOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//如果没找到返回-1</span><span class="token comment" spellcheck="true">// 6 迭代方法 不会修改原数组(可选)  html5</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">、filter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">、forEach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">、map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">、some</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 7 方法将数组的所有元素连接到一个字符串中。</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li>清空数组</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 方式1 推荐 </span>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方式2 </span>arr<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方式3</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="案例-8"><a href="#案例-8" class="headerlink" title="案例"></a>案例</h4><ul><li>将一个字符串数组输出为|分割的形式，比如“刘备|张飞|关羽”。使用两种方式实现</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">myJoin</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> seperator<span class="token punctuation">)</span> <span class="token punctuation">{</span>  seperator <span class="token operator">=</span> seperator <span class="token operator">||</span> <span class="token string">','</span><span class="token punctuation">;</span>  array <span class="token operator">=</span> array <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> str <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    str <span class="token operator">+</span><span class="token operator">=</span> seperator <span class="token operator">+</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">myJoin</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li>将一个字符串数组的元素的顺序进行反转。[“a”, “b”, “c”, “d”] -&gt; [ “d”,”c”,”b”,”a”]。使用两种种方式实现。提示：第i个和第length-i-1个进行交换</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">myReverse</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>arr <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">myReverse</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>工资的数组[1500, 1200, 2000, 2100, 1800],把工资超过2000的删除</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 方式1</span><span class="token keyword">var</span> array <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token number">1500</span><span class="token punctuation">,</span><span class="token number">1200</span><span class="token punctuation">,</span><span class="token number">2000</span><span class="token punctuation">,</span><span class="token number">2100</span><span class="token punctuation">,</span><span class="token number">1800</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> tmpArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">2000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    tmpArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tmpArray<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 方式2</span><span class="token keyword">var</span> array <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token number">1500</span><span class="token punctuation">,</span> <span class="token number">1200</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token number">2100</span><span class="token punctuation">,</span> <span class="token number">1800</span><span class="token punctuation">]</span><span class="token punctuation">;</span>array <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">&lt;</span> <span class="token number">2000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>[“c”, “a”, “z”, “a”, “x”, “a”]找到数组中每一个a出现的位置</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> array <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> index <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>编写一个方法去掉一个数组的重复元素</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> array <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> item <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      o<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      o<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">var</span> tmpArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      tmpArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>tmpArray<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        tmpArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> tmpArray<span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">clear</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="基本包装类型"><a href="#基本包装类型" class="headerlink" title="基本包装类型"></a>基本包装类型</h3><p>为了方便操作简单数据类型，JavaScript还提供了三个特殊的简单类型类型：String/Number/Boolean</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 下面代码的问题？</span><span class="token comment" spellcheck="true">// s1是基本类型，基本类型是没有方法的</span><span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token string">'zhangsan'</span><span class="token punctuation">;</span><span class="token keyword">var</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 当调用s1.substring(5)的时候，先把s1包装成String类型的临时对象，再调用substring方法，最后销毁临时对象, 相当于：</span><span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">'zhangsan'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 创建基本包装类型的对象</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//数值，基本类型</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'18'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//类型转换</span><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//基本包装类型，对象</span><span class="token comment" spellcheck="true">// Number和Boolean基本包装类型基本不用，使用的话可能会引起歧义。例如：</span><span class="token keyword">var</span> b1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> b2 <span class="token operator">=</span> b1 <span class="token operator">&amp;&amp;</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 结果是什么</span></code></pre><h3 id="String对象"><a href="#String对象" class="headerlink" title="String对象"></a>String对象</h3><ul><li>字符串的不可变</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token punctuation">;</span>str <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 当重新给str赋值的时候，常量'abc'不会被修改，依然在内存中</span><span class="token comment" spellcheck="true">// 重新给字符串赋值，会重新在内存中开辟空间，这个特点就是字符串的不可变</span><span class="token comment" spellcheck="true">// 由于字符串的不可变，在大量拼接字符串的时候会有效率问题</span></code></pre><ul><li>创建字符串对象</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">'Hello World'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取字符串中字符的个数</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><p>字符串对象的常用方法</p><p>字符串所有的方法，都不会修改字符串本身(字符串是不可变的)，操作完成会返回一个新的字符串</p></li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 1 字符方法</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//获取指定位置处字符</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">//获取指定位置处字符的ASCII码</span>str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>           <span class="token comment" spellcheck="true">//HTML5，IE8+支持 和charAt()等效</span><span class="token comment" spellcheck="true">// 2 字符串操作方法</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">//拼接字符串，等效于+，+更常用</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//从start位置开始，截取到end位置，end取不到</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//从start位置开始，截取到end位置，  end取不到</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">//从start位置开始，截取length个字符</span><span class="token comment" spellcheck="true">// 3 位置方法</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true">//返回指定内容在元字符串中的位置</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//从后往前找，只找第一个匹配的</span><span class="token comment" spellcheck="true">// 4 去除空白   </span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">//只能去除字符串前后的空白</span><span class="token comment" spellcheck="true">// 5 大小写转换方法</span><span class="token function">to</span><span class="token punctuation">(</span>Locale<span class="token punctuation">)</span><span class="token function">UpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//转换大写</span><span class="token function">to</span><span class="token punctuation">(</span>Locale<span class="token punctuation">)</span><span class="token function">LowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//转换小写</span><span class="token comment" spellcheck="true">// 6 其它</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h4 id="案例-9"><a href="#案例-9" class="headerlink" title="案例"></a>案例</h4><ul><li>截取字符串”我爱中华人民共和国”，中的”中华”</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">"我爱中华人民共和国"</span><span class="token punctuation">;</span>s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>“abcoefoxyozzopp”查找字符串中所有o出现的位置</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">'abcoefoxyozzopp'</span><span class="token punctuation">;</span><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> index <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>把字符串中所有的o替换成!</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">'abcoefoxyozzopp'</span><span class="token punctuation">;</span><span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">do</span> <span class="token punctuation">{</span>  index <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 替换</span>    s <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span>index <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>把字符串中的所有空白去掉’   abc       xyz  a    123   ‘</li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">'   abc       xyz  a    123   '</span><span class="token punctuation">;</span>   <span class="token keyword">var</span> arr <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>判断一个字符串中出现次数最多的字符，统计这个次数</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> s <span class="token operator">=</span> <span class="token string">'abcoefoxyozzopp'</span><span class="token punctuation">;</span><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> item <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>o<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    o<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    o<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">var</span> char <span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> key <span class="token keyword">in</span> o<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>max <span class="token operator">&lt;</span> o<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    max <span class="token operator">=</span> o<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>    char <span class="token operator">=</span> key<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>获取url中?后面的内容，并转化成对象的形式。例如：<a href="http://www.bukaedu.com/login?name=zs&amp;age=18&amp;a=1&amp;b=2" target="_blank" rel="noopener">http://www.bukaedu.com/login?name=zs&amp;age=18&amp;a=1&amp;b=2</a></li></ul><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">'http://www.bukaedu.com/login?name=zs&amp;age=18&amp;a=1&amp;b=2'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取url后面的参数</span><span class="token keyword">function</span> <span class="token function">getParams</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 获取? 后面第一个字符的索引</span>  <span class="token keyword">var</span> index <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// url中?后面的字符串 name=zs&amp;age=18&amp;a=1&amp;b=2</span>  <span class="token keyword">var</span> params <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 使用&amp; 切割字符串 ，返回一个数组</span>  <span class="token keyword">var</span> arr <span class="token operator">=</span> params<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 数组中每一项的样子 key = value</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> tmpArr <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> key <span class="token operator">=</span> tmpArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> value <span class="token operator">=</span> tmpArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    o<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> o<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token function">getParams</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h4><pre><code>给定一个字符串如：“abaasdffggghhjjkkgfddsssss3444343”问题如下： 1、 字符串的长度 2、 取出指定位置的字符，如：0,3,5,9等 3、 查找指定字符是否在以上字符串中存在，如：i，c ，b等 4、 替换指定的字符，如：g替换为22,ss替换为b等操作方法 5、 截取指定开始位置到结束位置的字符串，如：取得1-5的字符串6、 找出以上字符串中出现次数最多的字符和出现的次数 7、 遍历字符串，并将遍历出的字符两头添加符号“@”输出至当前的文档页面。 </code></pre><p><em>如有侵权，联系 <a href="mailto:2025685938@qq.com" target="_blank" rel="noopener">2025685938@qq.com</a> 删除</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02-Web API</title>
      <link href="/posts/50686.html"/>
      <url>/posts/50686.html</url>
      
        <content type="html"><![CDATA[<h2 id="本文非原创"><a href="#本文非原创" class="headerlink" title=" 本文非原创 "></a><strong> 本文非原创 </strong></h2><p>学习目标:</p><ul><li>掌握API和Web API的概念</li><li>掌握常见浏览器提供的API的调用方式</li><li>能通过Web API开发常见的页面交互功能</li><li>能够利用搜索引擎解决问题</li></ul><hr><h1 id="Web-API"><a href="#Web-API" class="headerlink" title="Web API"></a>Web API</h1><h2 id="Web-API介绍"><a href="#Web-API介绍" class="headerlink" title="Web API介绍"></a>Web API介绍</h2><h3 id="API的概念"><a href="#API的概念" class="headerlink" title="API的概念"></a>API的概念</h3><p>API（Application Programming Interface,应用程序编程接口）是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。</p><ul><li>任何开发语言都有自己的API</li><li>API的特征输入和输出(I/O)<ul><li>var max =  Math.max(1, 2, 3);</li></ul></li><li>API的使用方法(console.log(‘adf’))</li></ul><h3 id="Web-API的概念"><a href="#Web-API的概念" class="headerlink" title="Web  API的概念"></a>Web  API的概念</h3><p>浏览器提供的一套操作浏览器功能和页面元素的API(BOM和DOM)</p><p>此处的Web API特指浏览器提供的API(一组方法)，Web API在后面的课程中有其它含义</p><h3 id="掌握常见浏览器提供的API的调用方式"><a href="#掌握常见浏览器提供的API的调用方式" class="headerlink" title="掌握常见浏览器提供的API的调用方式"></a>掌握常见浏览器提供的API的调用方式</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API" target="_blank" rel="noopener">MDN-Web API</a></p><h3 id="JavaScript的组成"><a href="#JavaScript的组成" class="headerlink" title="JavaScript的组成"></a>JavaScript的组成</h3><p><img src="media/QQ%E5%9B%BE%E7%89%8720170810172512-2357176615.png" alt="QQ图片20170810172512"></p><h4 id="ECMAScript-JavaScript的核心"><a href="#ECMAScript-JavaScript的核心" class="headerlink" title="ECMAScript - JavaScript的核心"></a>ECMAScript - JavaScript的核心</h4><p>定义了JavaScript 的语法规范</p><p>JavaScript的核心，描述了语言的基本语法和数据类型，ECMAScript是一套标准，定义了一种语言的标准与具体实现无关</p><h4 id="BOM-浏览器对象模型"><a href="#BOM-浏览器对象模型" class="headerlink" title="BOM - 浏览器对象模型"></a>BOM - 浏览器对象模型</h4><p>一套操作浏览器功能的API</p><p>通过BOM可以操作浏览器窗口，比如：弹出框、控制浏览器跳转、获取分辨率等 </p><h4 id="DOM-文档对象模型"><a href="#DOM-文档对象模型" class="headerlink" title="DOM - 文档对象模型"></a>DOM - 文档对象模型</h4><p>一套操作页面元素的API</p><p>DOM可以把HTML看做是文档树，通过DOM提供的API可以对树上的节点进行操作</p><h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><h3 id="DOM的概念"><a href="#DOM的概念" class="headerlink" title="DOM的概念"></a>DOM的概念</h3><p>文档对象模型（Document Object Model，简称DOM），是<a href="https://baike.baidu.com/item/W3C" target="_blank" rel="noopener">W3C</a>组织推荐的处理<a href="https://baike.baidu.com/item/%E5%8F%AF%E6%89%A9%E5%B1%95%E7%BD%AE%E6%A0%87%E8%AF%AD%E8%A8%80" target="_blank" rel="noopener">可扩展标记语言</a>的标准<a href="https://baike.baidu.com/item/%E7%BC%96%E7%A8%8B%E6%8E%A5%E5%8F%A3" target="_blank" rel="noopener">编程接口</a>。它是一种与平台和语言无关的<a href="https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E6%8E%A5%E5%8F%A3" target="_blank" rel="noopener">应用程序接口</a>(API),它可以动态地访问程序和脚本，更新其内容、结构和<a href="https://baike.baidu.com/item/www/109924" target="_blank" rel="noopener">www</a>文档的风格(目前，HTML和XML文档是通过说明部分定义的)。文档可以进一步被处理，处理的结果可以加入到当前的页面。<a href="https://baike.baidu.com/item/DOM/50288" target="_blank" rel="noopener">DOM</a>是一种基于树的<a href="https://baike.baidu.com/item/API/10154" target="_blank" rel="noopener">API</a>文档，它要求在处理过程中整个文档都表示在<a href="https://baike.baidu.com/item/%E5%AD%98%E5%82%A8%E5%99%A8" target="_blank" rel="noopener">存储器</a>中。</p><p>DOM又称为文档树模型</p><p><img src="media/1497154623955.png" alt="1497154623955"></p><ul><li>文档：一个网页可以称为文档</li><li>节点：网页中的所有内容都是节点（标签、属性、文本、注释等）</li><li>元素：网页中的标签</li><li>属性：标签的属性</li></ul><h3 id="DOM经常进行的操作"><a href="#DOM经常进行的操作" class="headerlink" title="DOM经常进行的操作"></a>DOM经常进行的操作</h3><ul><li>获取元素</li><li>对元素进行操作(设置其属性或调用其方法)</li><li>动态创建元素</li><li>事件(什么时机做相应的操作)</li></ul><h2 id="获取页面元素"><a href="#获取页面元素" class="headerlink" title="获取页面元素"></a>获取页面元素</h2><h3 id="为什么要获取页面元素"><a href="#为什么要获取页面元素" class="headerlink" title="为什么要获取页面元素"></a>为什么要获取页面元素</h3><p>例如：我们想要操作页面上的某部分(显示/隐藏，动画)，需要先获取到该部分对应的元素，才进行后续操作</p><h3 id="根据id获取元素"><a href="#根据id获取元素" class="headerlink" title="根据id获取元素"></a>根据id获取元素</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'main'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 获取到的数据类型 HTMLDivElement，对象都是有类型的</span></code></pre><p>注意：由于id名具有唯一性，部分浏览器支持直接使用id名访问元素，但不是标准方式，不推荐使用。</p><h3 id="根据标签名获取元素"><a href="#根据标签名获取元素" class="headerlink" title="根据标签名获取元素"></a>根据标签名获取元素</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> divs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> divs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> div <span class="token operator">=</span> divs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><h3 id="根据name获取元素"><a href="#根据name获取元素" class="headerlink" title="根据name获取元素*"></a>根据name获取元素*</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> inputs <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">'hobby'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> inputs<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> input <span class="token operator">=</span> inputs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="根据类名获取元素"><a href="#根据类名获取元素" class="headerlink" title="根据类名获取元素*"></a>根据类名获取元素*</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> mains <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">'main'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> mains<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> main <span class="token operator">=</span> mains<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="根据选择器获取元素"><a href="#根据选择器获取元素" class="headerlink" title="根据选择器获取元素*"></a>根据选择器获取元素*</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> text <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#text'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> boxes <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'.box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> boxes<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> box <span class="token operator">=</span> boxes<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>总结</li></ul><pre><code>掌握    getElementById()    getElementsByTagName()了解    getElementsByName()    getElementsByClassName()    querySelector()    querySelectorAll()</code></pre><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><p>事件：触发-响应机制</p><h3 id="事件三要素"><a href="#事件三要素" class="headerlink" title="事件三要素"></a>事件三要素</h3><ul><li>事件源:触发(被)事件的元素</li><li>事件名称: click 点击事件</li><li>事件处理程序:事件触发后要执行的代码(函数形式)</li></ul><h3 id="事件的基本使用"><a href="#事件的基本使用" class="headerlink" title="事件的基本使用"></a>事件的基本使用</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>box<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'代码会在box被点击后执行'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><ul><li>点击按钮弹出提示框</li><li>点击按钮切换图片</li></ul><h2 id="属性操作"><a href="#属性操作" class="headerlink" title="属性操作"></a>属性操作</h2><h3 id="非表单元素的属性"><a href="#非表单元素的属性" class="headerlink" title="非表单元素的属性"></a>非表单元素的属性</h3><p>href、title、id、src、className</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> link <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'link'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>link<span class="token punctuation">.</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> pic <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'pic'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>pic<span class="token punctuation">.</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>案例：</p><p>​    点击按钮显示隐藏div</p><p>​    美女相册</p><ul><li>innerHTML和innerText</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>box<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'我是文本&lt;p>我会生成为标签&lt;/p>'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>innerHTML<span class="token punctuation">)</span><span class="token punctuation">;</span>box<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">'我是文本&lt;p>我不会生成为标签&lt;/p>'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li>HTML转义符</li></ul><pre><code>"        &amp;quot;'        &amp;apos;&amp;        &amp;amp;&lt;        &amp;lt;   // less than  小于&gt;        &amp;gt;   // greater than  大于空格       &amp;nbsp;©        &amp;copy;</code></pre><ul><li><p>innerHTML和innerText的区别</p></li><li><p>innerText的兼容性处理</p></li></ul><h3 id="表单元素属性"><a href="#表单元素属性" class="headerlink" title="表单元素属性"></a>表单元素属性</h3><ul><li>value 用于大部分表单元素的内容获取(option除外)</li><li>type 可以获取input标签的类型(输入框或复选框等)</li><li>disabled 禁用属性</li><li>checked 复选框选中属性</li><li>selected 下拉菜单选中属性</li></ul><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><ul><li>点击按钮禁用文本框</li><li>给文本框赋值，获取文本框的值</li><li>检测用户名是否是3-6位，密码是否是6-8位，如果不满足要求高亮显示文本框</li><li>设置下拉框中的选中项</li><li>搜索文本框</li><li>全选反选</li></ul><h3 id="自定义属性操作"><a href="#自定义属性操作" class="headerlink" title="自定义属性操作"></a>自定义属性操作</h3><ul><li>getAttribute() 获取标签行内属性</li><li>setAttribute() 设置标签行内属性</li><li>removeAttribute() 移除标签行内属性</li><li>与element.属性的区别: 上述三个方法用于获取任意的行内属性。</li></ul><h3 id="样式操作"><a href="#样式操作" class="headerlink" title="样式操作"></a>样式操作</h3><ul><li><p>使用style方式设置的样式显示在标签行内</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">'100px'</span><span class="token punctuation">;</span>box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token string">'100px'</span><span class="token punctuation">;</span>box<span class="token punctuation">.</span>style<span class="token punctuation">.</span>backgroundColor <span class="token operator">=</span> <span class="token string">'red'</span><span class="token punctuation">;</span></code></pre></li><li><p>注意</p><p>通过样式属性设置宽高、位置的属性类型是字符串，需要加上px</p></li></ul><h3 id="类名操作"><a href="#类名操作" class="headerlink" title="类名操作"></a>类名操作</h3><ul><li>修改标签的className属性相当于直接修改标签的类名<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>box<span class="token punctuation">.</span>className <span class="token operator">=</span> <span class="token string">'show'</span><span class="token punctuation">;</span></code></pre></li></ul><h3 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h3><ul><li>开关灯</li><li>点击按钮改变div的背景颜色</li><li>图片切换二维码案例</li><li>当前输入的文本框高亮显示</li><li>点击按钮改变div的大小和位置</li><li>列表隔行变色、高亮显示</li><li>tab选项卡切换</li></ul><h2 id="创建元素的三种方式"><a href="#创建元素的三种方式" class="headerlink" title="创建元素的三种方式"></a>创建元素的三种方式</h2><h3 id="document-write"><a href="#document-write" class="headerlink" title="document.write()"></a>document.write()</h3><pre class=" language-javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">'新设置的内容&lt;p>标签也可以生成&lt;/p>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="innerHTML"><a href="#innerHTML" class="headerlink" title="innerHTML"></a>innerHTML</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>box<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">'新内容&lt;p>新标签&lt;/p>'</span><span class="token punctuation">;</span></code></pre><h3 id="document-createElement"><a href="#document-createElement" class="headerlink" title="document.createElement()"></a>document.createElement()</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="性能问题"><a href="#性能问题" class="headerlink" title="性能问题"></a>性能问题</h3><ul><li>innerHTML方法由于会对字符串进行解析，需要避免在循环内多次使用。</li><li>可以借助字符串或数组的方式进行替换，再设置给innerHTML</li><li>优化后与document.createElement性能相近</li></ul><h3 id="案例-3"><a href="#案例-3" class="headerlink" title="案例"></a>案例</h3><ul><li>动态创建列表，高亮显示</li><li>根据数据动态创建表格</li></ul><h2 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> body <span class="token operator">=</span> document<span class="token punctuation">.</span>body<span class="token punctuation">;</span><span class="token keyword">var</span> div <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> firstEle <span class="token operator">=</span> body<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>body<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>div<span class="token punctuation">,</span> firstEle<span class="token punctuation">)</span><span class="token punctuation">;</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>firstEle<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> text <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>body<span class="token punctuation">.</span><span class="token function">replaceChild</span><span class="token punctuation">(</span>text<span class="token punctuation">,</span> div<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>案例：</p><p>​    选择水果</p><h3 id="节点属性"><a href="#节点属性" class="headerlink" title="节点属性"></a>节点属性</h3><ul><li>nodeType  节点的类型<ul><li>1 元素节点</li><li>2 属性节点</li><li>3 文本节点 </li></ul></li><li>nodeName  节点的名称(标签名称)</li><li>nodeValue  节点值<ul><li>元素节点的nodeValue始终是null</li></ul></li></ul><h3 id="模拟文档树结构"><a href="#模拟文档树结构" class="headerlink" title="模拟文档树结构"></a>模拟文档树结构</h3><p><img src="media/1497165666684.png" alt="1497165666684"></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Node</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> option<span class="token punctuation">.</span>id <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>nodeName <span class="token operator">=</span> option<span class="token punctuation">.</span>nodeName <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>nodeValue <span class="token operator">=</span> option<span class="token punctuation">.</span>nodeValue <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>nodeType <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>children <span class="token operator">=</span> option<span class="token punctuation">.</span>children <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> doc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  nodeName<span class="token punctuation">:</span> <span class="token string">'html'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  nodeName<span class="token punctuation">:</span> <span class="token string">'head'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> body <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  nodeName<span class="token punctuation">:</span> <span class="token string">'body'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>doc<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>doc<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> div <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  nodeName<span class="token punctuation">:</span> <span class="token string">'div'</span><span class="token punctuation">,</span>  nodeValue<span class="token punctuation">:</span> <span class="token string">'haha'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  nodeName<span class="token punctuation">:</span> <span class="token string">'p'</span><span class="token punctuation">,</span>  nodeValue<span class="token punctuation">:</span> <span class="token string">'段落'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>body<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>div<span class="token punctuation">)</span><span class="token punctuation">;</span>body<span class="token punctuation">.</span>children<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getChildren</span><span class="token punctuation">(</span>ele<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ele<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> child <span class="token operator">=</span> ele<span class="token punctuation">.</span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span>nodeName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getChildren</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">getChildren</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="节点层级"><a href="#节点层级" class="headerlink" title="节点层级"></a>节点层级</h3><p><img src="media/1503541915769.png" alt="1503541915769"> </p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>parentNode<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>childNodes<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>nextSibling<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>previousSibling<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>firstChild<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>lastChild<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><p>注意</p><p>childNodes和children的区别，childNodes获取的是子节点，children获取的是子元素</p><p>nextSibling和previousSibling获取的是节点，获取元素对应的属性是nextElementSibling和previousElementSibling获取的是元素</p><p>​    nextElementSibling和previousElementSibling有兼容性问题，IE9以后才支持</p></li><li><p>总结</p></li></ul><pre><code>节点操作，方法    appendChild()    insertBefore()    removeChild()    replaceChild()节点层次，属性    parentNode    childNodes    children    nextSibling/previousSibling    firstChild/lastChild</code></pre><h2 id="事件详解"><a href="#事件详解" class="headerlink" title="事件详解"></a>事件详解</h2><h3 id="注册-移除事件的三种方式"><a href="#注册-移除事件的三种方式" class="headerlink" title="注册/移除事件的三种方式"></a>注册/移除事件的三种方式</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>box<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'点击后执行'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>box<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>box<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> eventCode<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>box<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> eventCode<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>box<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">'onclick'</span><span class="token punctuation">,</span> eventCode<span class="token punctuation">)</span><span class="token punctuation">;</span>box<span class="token punctuation">.</span><span class="token function">detachEvent</span><span class="token punctuation">(</span><span class="token string">'onclick'</span><span class="token punctuation">,</span> eventCode<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">eventCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'点击后执行'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="兼容代码"><a href="#兼容代码" class="headerlink" title="兼容代码"></a>兼容代码</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">addEventListener</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> type<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>addEventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>    element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>attachEvent<span class="token punctuation">)</span><span class="token punctuation">{</span>    element<span class="token punctuation">.</span><span class="token function">attachEvent</span><span class="token punctuation">(</span><span class="token string">'on'</span> <span class="token operator">+</span> type<span class="token punctuation">,</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    element<span class="token punctuation">[</span><span class="token string">'on'</span> <span class="token operator">+</span> type<span class="token punctuation">]</span> <span class="token operator">=</span> fn<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">removeEventListener</span><span class="token punctuation">(</span>element<span class="token punctuation">,</span> type<span class="token punctuation">,</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>removeEventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>    element<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> fn<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>element<span class="token punctuation">.</span>detachEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>    element<span class="token punctuation">.</span><span class="token function">detachEvent</span><span class="token punctuation">(</span><span class="token string">'on'</span> <span class="token operator">+</span> type<span class="token punctuation">,</span> fn<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    element<span class="token punctuation">[</span><span class="token string">'on'</span><span class="token operator">+</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="事件的三个阶段"><a href="#事件的三个阶段" class="headerlink" title="事件的三个阶段"></a>事件的三个阶段</h3><ol><li><p>捕获阶段</p></li><li><p>当前目标阶段</p></li><li><p>冒泡阶段</p><p>事件对象.eventPhase属性可以查看事件触发时所处的阶段</p></li></ol><h3 id="事件对象的属性和方法"><a href="#事件对象的属性和方法" class="headerlink" title="事件对象的属性和方法"></a>事件对象的属性和方法</h3><ul><li>event.type 获取事件类型</li><li>clientX/clientY     所有浏览器都支持，窗口位置</li><li>pageX/pageY       IE8以前不支持，页面位置</li><li>event.target || event.srcElement 用于获取触发事件的元素</li><li>event.preventDefault() 取消默认行为</li></ul><h4 id="案例-4"><a href="#案例-4" class="headerlink" title="案例"></a>案例</h4><ul><li>跟着鼠标飞的天使</li><li>鼠标点哪图片飞到哪里</li><li>获取鼠标在div内的坐标</li></ul><h3 id="阻止事件传播的方式"><a href="#阻止事件传播的方式" class="headerlink" title="阻止事件传播的方式"></a>阻止事件传播的方式</h3><ul><li>标准方式 event.stopPropagation();</li><li>IE低版本 event.cancelBubble = true; 标准中已废弃</li></ul><h3 id="常用的鼠标和键盘事件"><a href="#常用的鼠标和键盘事件" class="headerlink" title="常用的鼠标和键盘事件"></a>常用的鼠标和键盘事件</h3><ul><li>onmouseup 鼠标按键放开时触发</li><li>onmousedown 鼠标按键按下触发</li><li>onmousemove 鼠标移动触发</li><li>onkeyup 键盘按键按下触发</li><li>onkeydown 键盘按键抬起触发</li></ul><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><h3 id="BOM的概念"><a href="#BOM的概念" class="headerlink" title="BOM的概念"></a>BOM的概念</h3><p>BOM(Browser Object Model) 是指浏览器对象模型，浏览器对象模型提供了独立于内容的、可以与浏览器窗口进行互动的对象结构。BOM由多个对象组成，其中代表浏览器窗口的Window对象是BOM的顶层对象，其他对象都是该对象的子对象。</p><p>我们在浏览器中的一些操作都可以使用BOM的方式进行编程处理，</p><p>比如：刷新浏览器、后退、前进、在浏览器中输入URL等</p><h3 id="BOM的顶级对象window"><a href="#BOM的顶级对象window" class="headerlink" title="BOM的顶级对象window"></a>BOM的顶级对象window</h3><p>window是浏览器的顶级对象，当调用window下的属性和方法时，可以省略window<br>注意：window下一个特殊的属性 window.name</p><h3 id="对话框"><a href="#对话框" class="headerlink" title="对话框"></a>对话框</h3><ul><li>alert()</li><li>prompt()</li><li>confirm()</li></ul><h3 id="页面加载事件"><a href="#页面加载事件" class="headerlink" title="页面加载事件"></a>页面加载事件</h3><ul><li>onload</li></ul><pre class=" language-javascript"><code class="language-javascript">window<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 当页面加载完成执行</span>  <span class="token comment" spellcheck="true">// 当页面完全加载所有内容（包括图像、脚本文件、CSS 文件等）执行</span><span class="token punctuation">}</span></code></pre><ul><li>onunload</li></ul><pre class=" language-javascript"><code class="language-javascript">window<span class="token punctuation">.</span>onunload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 当用户退出页面时执行</span><span class="token punctuation">}</span></code></pre><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><h4 id="setTimeout-和clearTimeout"><a href="#setTimeout-和clearTimeout" class="headerlink" title="setTimeout()和clearTimeout()"></a>setTimeout()和clearTimeout()</h4><p>在指定的毫秒数到达之后执行指定的函数，只执行一次</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 创建一个定时器，1000毫秒后执行，返回定时器的标示</span><span class="token keyword">var</span> timerId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hello World'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 取消定时器的执行</span><span class="token function">clearTimeout</span><span class="token punctuation">(</span>timerId<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="setInterval-和clearInterval"><a href="#setInterval-和clearInterval" class="headerlink" title="setInterval()和clearInterval()"></a>setInterval()和clearInterval()</h4><p>定时调用的函数，可以按照给定的时间(单位毫秒)周期调用函数</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 创建一个定时器，每隔1秒调用一次</span><span class="token keyword">var</span> timerId <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">toLocaleTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 取消定时器的执行</span><span class="token function">clearInterval</span><span class="token punctuation">(</span>timerId<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>案例：</p><pre><code>定时器简单动画</code></pre><h3 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h3><p>location对象是window对象下的一个属性，使用的时候可以省略window对象</p><p>location可以获取或者设置浏览器地址栏的URL</p><h4 id="location有哪些成员？"><a href="#location有哪些成员？" class="headerlink" title="location有哪些成员？"></a>location有哪些成员？</h4><ul><li><p>使用chrome的控制台查看</p></li><li><p>查MDN</p><p><a href="https://developer.mozilla.org/zh-CN/" target="_blank" rel="noopener">MDN</a></p></li><li><p>成员</p><ul><li>assign()/reload()/replace()</li><li>hash/host/hostname/search/href……</li></ul></li></ul><h4 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h4><p>统一资源定位符 (Uniform Resource Locator, URL)</p><ul><li>URL的组成</li></ul><pre><code>scheme://host:port/path?query#fragmenthttp://www.baidu.com:80/a/b/index.html?name=zs&amp;age=18#bottomscheme:通信协议    常用的http,ftp,maito等host:主机    服务器(计算机)域名系统 (DNS) 主机名或 IP 地址。port:端口号    整数，可选，省略时使用方案的默认端口，如http的默认端口为80。path:路径    由零或多个'/'符号隔开的字符串，一般用来表示主机上的一个目录或文件地址。query:查询    可选，用于给动态网页传递参数，可有多个参数，用'&amp;'符号隔开，每个参数的名和值用'='符号隔开。例如：name=zsfragment:信息片断    字符串，锚点.</code></pre><h4 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h4><p>解析URL中的query，并返回对象的形式</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">getQuery</span><span class="token punctuation">(</span>queryStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> query <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>queryStr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> index <span class="token operator">=</span> queryStr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    queryStr <span class="token operator">=</span> queryStr<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> array <span class="token operator">=</span> queryStr<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> tmpArr <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>tmpArr<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        query<span class="token punctuation">[</span>tmpArr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmpArr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> query<span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getQuery</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>search<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">getQuery</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>href<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h3><ul><li>back()</li><li>forward()</li><li>go()</li></ul><h3 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h3><ul><li>userAgent</li></ul><h2 id="特效"><a href="#特效" class="headerlink" title="特效"></a>特效</h2><h3 id="偏移量"><a href="#偏移量" class="headerlink" title="偏移量"></a>偏移量</h3><ul><li>offsetParent用于获取定位的父级元素</li><li>offsetParent和parentNode的区别</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>offsetParent<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>offsetLeft<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>offsetTop<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>offsetWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>offsetHeight<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="media/1498743216279.png" alt="1498743216279"></p><h3 id="客户区大小"><a href="#客户区大小" class="headerlink" title="客户区大小"></a>客户区大小</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>clientLeft<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>clientTop<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>clientWidth<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>clientHeight<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="media/1504075813134.png" alt="1504075813134"></p><h3 id="滚动偏移"><a href="#滚动偏移" class="headerlink" title="滚动偏移"></a>滚动偏移</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> box <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'box'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>scrollLeft<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>scrollTop<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>scrollWidth<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>box<span class="token punctuation">.</span>scrollHeight<span class="token punctuation">)</span></code></pre><p><img src="media/1498743288621.png" alt="1498743288621"></p><h3 id="案例-5"><a href="#案例-5" class="headerlink" title="案例"></a>案例</h3><ul><li>拖拽案例</li><li>弹出登录窗口</li><li>放大镜案例</li><li>模拟滚动条</li><li>匀速动画函数</li><li>变速动画函数</li><li>无缝轮播图</li><li>回到顶部  </li></ul><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="元素的类型"><a href="#元素的类型" class="headerlink" title="元素的类型"></a>元素的类型</h3><p><img src="media/1497169919418.png" alt="1497169919418"></p><p><em>如有侵权，联系 <a href="mailto:2025685938@qq.com" target="_blank" rel="noopener">2025685938@qq.com</a> 删除</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 02-Web API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03-jd</title>
      <link href="/posts/752.html"/>
      <url>/posts/752.html</url>
      
        <content type="html"><![CDATA[<h2 id="本文非原创"><a href="#本文非原创" class="headerlink" title=" 本文非原创 "></a><strong> 本文非原创 </strong></h2><p>学习目标:</p><ul><li>掌握京东项目流程体系</li><li>掌握网站三大标签优化</li><li>掌握京东头部和尾部制作</li><li>掌握京导航栏制作</li><li>掌握京东焦点图制作</li><li>了解网站三大标签优化</li><li>理解BFC</li><li>了解渐进增强和优雅降级</li></ul><hr><hr><h1 id="京东项目-一"><a href="#京东项目-一" class="headerlink" title="京东项目(一)"></a>京东项目(一)</h1><h2 id="京东项目介绍"><a href="#京东项目介绍" class="headerlink" title="京东项目介绍"></a>京东项目介绍</h2><p>项目名称：京东网<br>项目描述：京东首页公共部分的头部和尾部制作，京东首页中间部分。</p><img src="media/jd.png">##  项目背景<p>现阶段电商类网站很流行，很多同学毕业之后会进入电商类企业工作，同时电商类网站需要的技术也是较为复杂的，这里用京东电商网站复习、总结、提高前面所学布局技术。</p><h2 id="设计目标"><a href="#设计目标" class="headerlink" title="设计目标"></a>设计目标</h2><ul><li><p>保证浏览器 ie7及以上, 火狐, 360, safari，chrome等。</p></li><li><p>熟悉CSS+DIV布局，页面的搭建工作</p></li><li><p>了解常用电商类网站的布局模式</p></li><li><p>为后期京东移动端做铺垫</p></li></ul><h2 id="几点思考"><a href="#几点思考" class="headerlink" title="几点思考"></a>几点思考</h2><p>(1). 开发工具  sublime  、fireworks（ps）、各种浏览器(ie6.7 要测看心情)</p><p>(2). CSS Rest 类库,为跨浏览器兼容做准备(也可以直接运用jd网站的初始化)</p><pre><code>normalize.css   只是一个很小的CSS文件，但它在默认的HTML元素样式上提供了跨浏览器的高度一致性。相比于传统的CSS reset，Normalize.css是一种现代的、为HTML5准备的优质替代方案。Normalize.css现在已经被用于Twitter Bootstrap、HTML5 Boilerplate、GOV.UK、Rdio、CSS Tricks 以及许许多多其他框架、工具和网站上。 你值得拥有。。 - 保护有用的浏览器默认样式而不是完全去掉它们- 一般化的样式：为大部分HTML元素提供- 修复浏览器自身的bug并保证各浏览器的一致性- 优化CSS可用性：用一些小技巧- 解释代码：用注释和详细的文档来</code></pre><p>(3). 技术栈</p><pre><code>HTML5 结构 + CSS3  布局 (因为我们就会这些。。。嘻嘻)</code></pre><p>(4). 低版本浏览器 单独制作一个跳转页面 (都是孩子，也舍不得打，舍不得扔)</p><p><a href="https://h5.m.jd.com/dev/3dm8aE4LDBNMkDfcCaRxLnVQ7rqo/index.html" target="_blank" rel="noopener">https://h5.m.jd.com/dev/3dm8aE4LDBNMkDfcCaRxLnVQ7rqo/index.html</a></p><img src="media/di.png" width="600"><h2 id="目录说明"><a href="#目录说明" class="headerlink" title="目录说明"></a>目录说明</h2><p>要实现结构和样式相分离的设计思想。 根目录下有这4个文件（目录）。</p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>css</td><td>用于存放CSS文件</td></tr><tr><td>images</td><td>用于存放图片</td></tr><tr><td>index</td><td>京东首页 HTML</td></tr><tr><td>js</td><td>用于后期存放javascript文件</td></tr></tbody></table><h2 id="运用知识点"><a href="#运用知识点" class="headerlink" title="运用知识点"></a>运用知识点</h2><h3 id="引入ico图标"><a href="#引入ico图标" class="headerlink" title="引入ico图标"></a>引入ico图标</h3><img src="media/ico.png" style="border: 1px dashed #ccc; padding:3px;">  <pre><code>代码：  &lt;link rel="shortcut icon" href="favicon.ico"  type="image/x-icon"/&gt;     </code></pre><p>注意： </p><ol><li><p>它不是iconfont字体哦。</p></li><li><p>位置是放到 head 标签中间。</p></li><li><p>后面的type=”image/x-icon”  属性可以省略。（我相信你也愿意省略。）</p></li><li><p>为了兼容性，请将favicon.ico 这个图标放到根目录下。（我们就不要任性了，听话放位置，省很多麻烦。。你好，我也好）</p><img src="media/icotu.png"></li></ol><h3 id="转换ico图标"><a href="#转换ico图标" class="headerlink" title="转换ico图标"></a>转换ico图标</h3><p>我们可以自己做的图片，转换为 ico图标，以便放到我们站点里面。 <a href="http://www.bitbug.net/" target="_blank" rel="noopener">http://www.bitbug.net/</a></p><h3 id="网站优化三大标签"><a href="#网站优化三大标签" class="headerlink" title="网站优化三大标签"></a>网站优化三大标签</h3><p>SEO是由英文Search Engine Optimization缩写而来， 中文意译为“搜索引擎优化”！SEO是指通过对网站进行站内优化、网站结构调整、网站内容建设、网站代码优化等)和站外优化，从而提高网站的关键词排名以及公司产品的曝光度。 简单的说就是，把产品做好，搜索引擎就会介绍客户来。  </p><p>我们现在阶段主要进行站内优化。网站优化，我们应该要懂。。。</p><img src="media/san.png"><h4 id="网页title-标题"><a href="#网页title-标题" class="headerlink" title="网页title 标题"></a>网页title 标题</h4><p>title具有不可替代性，是我们的内页第一个重要标签，是搜索引擎了解网页的入口，和对网页主题归属的最佳判断点。</p><img src="media/title.png" width="500"><p>建议：</p><p>首页标题：网站名（产品名）- 网站的介绍    </p><p>例如：</p><p>京东(JD.COM)-综合网购首选-正品低价、品质保障、配送及时、轻松购物！</p><p>小米商城 - 小米5s、红米Note 4、小米MIX、小米笔记本官方网站</p><h4 id="Description-网站说明"><a href="#Description-网站说明" class="headerlink" title="Description  网站说明"></a>Description  网站说明</h4><p>对于关键词的作用明显降低，但由于很多搜索引擎，仍然大量采用网页的MATA标签中描述部分作为搜索结果的“内容摘要”。 就是简要说明我们网站的主要做什么的。<br>我们提倡，Description作为网站的总体业务和主题概括，多采用“我们是…”“我们提供…”“×××网作为…”“电话：010…”之类语句。</p><p>京东网：</p><pre><code>&lt;meta name="description" content="京东JD.COM-专业的综合网上购物商城,销售家电、数码通讯、电脑、家居百货、服装服饰、母婴、图书、食品等数万个品牌优质商品.便捷、诚信的服务，为您提供愉悦的网上购物体验!" /&gt;</code></pre><p>注意点：</p><ol><li>描述中出现关键词，与正文内容相关，这部分内容是给人看的，所以要写的很详细，让人感兴趣， 吸引用户点击。</li><li>同样遵循简短原则，字符数含空格在内不要超过 120  个汉字。</li><li>补充在 title  和 keywords  中未能充分表述的说明.</li><li>用英文逗号 关键词1,关键词2</li></ol><pre><code>&lt;meta name="description" content="小米商城直营小米公司旗下所有产品，囊括小米手机系列小米MIX、小米Note 2，红米手机系列红米Note 4、红米4，智能硬件，配件及小米生活周边，同时提供小米客户服务及售后支持。" /&gt;</code></pre><h4 id="Keywords-关键字"><a href="#Keywords-关键字" class="headerlink" title="Keywords 关键字"></a>Keywords 关键字</h4><p>Keywords是页面关键词，是搜索引擎关注点之一。Keywords应该限制在6～8个关键词左右，电商类网站可以多 少许。</p><p>京东网：</p><pre><code>&lt;meta name="Keywords" content="网上购物,网上商城,手机,笔记本,电脑,MP3,CD,VCD,DV,相机,数码,配件,手表,存储卡,京东" /&gt;</code></pre><p>小米网：</p><pre><code>&lt;meta name="keywords" content="小米,小米6,红米Note4,小米MIX,小米商城" /&gt;</code></pre><h2 id="顶部（快捷菜单）所用知识点"><a href="#顶部（快捷菜单）所用知识点" class="headerlink" title="顶部（快捷菜单）所用知识点"></a>顶部（快捷菜单）所用知识点</h2><table><thead><tr><th>知识点</th><th>说明</th></tr></thead><tbody><tr><td>通栏的盒子</td><td>不用给宽度  默认为 100% &nbsp;但是加了浮动和定位的盒子需要 添加 100%</td></tr><tr><td>盒子居中对齐</td><td>margin: auto;  注意必须有宽度的块级元素，文字水平居中对齐是 text-align:center;</td></tr><tr><td>行高会继承</td><td>文字性质的，比如 颜色、文字大小、字体、行高等会继承父级元素</td></tr><tr><td>浮动元素、固定定位，绝对定位会模式转换</td><td>具有行内块特性，比如一行放多个，有高度和宽度，如果没有指定宽度，则会根据内容多少撑开。</td></tr></tbody></table><h2 id="logo-和搜索-header-区域所用知识点"><a href="#logo-和搜索-header-区域所用知识点" class="headerlink" title="logo 和搜索 header 区域所用知识点"></a>logo 和搜索 header 区域所用知识点</h2><h3 id="网页布局稳定性"><a href="#网页布局稳定性" class="headerlink" title="网页布局稳定性"></a>网页布局稳定性</h3><img src="media/x.png"><h3 id="宽度剩余法："><a href="#宽度剩余法：" class="headerlink" title="宽度剩余法："></a>宽度剩余法：</h3><img src="media/w.png"><table><thead><tr><th>知识点</th><th>说明</th></tr></thead><tbody><tr><td>浮动元素特性</td><td>1. 浮动可以让多个元素同一行显示 2. 浮动的元素是顶部对齐</td></tr><tr><td>logo优化</td><td>text-indent: -20000px; 隐藏文字， 背景图片</td></tr><tr><td>清除浮动</td><td>清除浮动的目的就是为了解决父亲高度为0的问题</td></tr><tr><td>鼠标样式</td><td>cursor: pointer;           小手      cursor: move;            四角箭头     cursor: text;  插入光标     cursor: default;  小白</td></tr><tr><td>不允许换行</td><td>white-space: nowrap;</td></tr></tbody></table><h2 id="nav导航栏所用知识点"><a href="#nav导航栏所用知识点" class="headerlink" title="nav导航栏所用知识点"></a>nav导航栏所用知识点</h2><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>边框底侧</td><td>border-bottom: 2px solid #ccc;</td></tr><tr><td>定位重点</td><td>绝对定位不占位置  相对定位占有位置</td></tr><tr><td>标签语义化dl</td><td>dl也是块级元素 dt 是 定义标题  dd 是定义描述，dd是围绕这dt来描述的，也就是说，dd算是dt 的解释说明详细分解。</td></tr><tr><td>标题标签h</td><td>尽量少用h1，可以多用h2和h3等标签</td></tr></tbody></table><h2 id="页面底部所用知识点"><a href="#页面底部所用知识点" class="headerlink" title="页面底部所用知识点"></a>页面底部所用知识点</h2><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>绝对定位的盒子居中对齐</td><td>盒子 left 50%  然后通过 margin 负值自己的宽度一半（固定定位也是如此）</td></tr></tbody></table><h3 id="固定定位的盒子靠近版心右侧对齐"><a href="#固定定位的盒子靠近版心右侧对齐" class="headerlink" title="固定定位的盒子靠近版心右侧对齐"></a>固定定位的盒子靠近版心右侧对齐</h3><p>跟绝对定位的盒子居中对齐原理差不多。</p><p>left 50%   然后 margin-left  版心宽度一半。</p><img src="media/guding.png" width="500"><p>学习目标:</p><ul><li><p>掌握京东中间部分制作</p></li><li><p>理解BFC使用</p></li><li><p>了解优雅降级和渐进增强</p></li><li><p>了解CSS压缩和验证工具</p><p>typora-copy-images-to: media</p></li></ul><hr><h1 id="京东项目-二"><a href="#京东项目-二" class="headerlink" title="京东项目(二)"></a>京东项目(二)</h1><h2 id="nav导航栏所用知识点-1"><a href="#nav导航栏所用知识点-1" class="headerlink" title="nav导航栏所用知识点"></a>nav导航栏所用知识点</h2><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>边框底侧</td><td>border-bottom: 2px solid #ccc;</td></tr><tr><td>定位重点</td><td>绝对定位不占位置  相对定位占有位置</td></tr><tr><td>标签语义化dl</td><td>dl也是块级元素 dt 是 定义标题  dd 是定义描述，dd是围绕这dt来描述的，也就是说，dd算是dt 的解释说明详细分解。</td></tr><tr><td>标题标签h</td><td>尽量少用h1，可以多用h2和h3等标签</td></tr></tbody></table><h3 id="固定定位的盒子靠近版心右侧对齐-1"><a href="#固定定位的盒子靠近版心右侧对齐-1" class="headerlink" title="固定定位的盒子靠近版心右侧对齐"></a>固定定位的盒子靠近版心右侧对齐</h3><p>跟绝对定位的盒子居中对齐原理差不多。</p><p>left 50%   然后 margin-left  版心宽度一半。</p><img src="media/guding.png" width="500"><h2 id="焦点图部分所用知识点"><a href="#焦点图部分所用知识点" class="headerlink" title="焦点图部分所用知识点"></a>焦点图部分所用知识点</h2><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>圆角矩形</td><td>border-radius: 左上角 右上角 右下角  左下角。</td></tr></tbody></table><p>负值自己的宽度一半（固定定位也是如此）</p><h2 id="背景半透明"><a href="#背景半透明" class="headerlink" title="背景半透明"></a>背景半透明</h2><p>1.强烈推荐：  background: rgba(r,g,b,alpha);</p><p>​     r,g,b 是红绿蓝的颜色，  alpha 是透明度的意思，取值范围是 0~1 之间。</p><p>2.了解ie低版本浏览器 半透明</p><p>filter:Alpha(opacity=50) ；   // opacity值为0 到 100</p><p>但是 此属性是盒子半透明，不是背景半透明哦，因为里面的内容也一起半透明了</p><p>因此，低版本的 ie6.7浏览器，我们不需要透明了，直接采用优雅降级的做法。</p><p>background: gary;</p><p>background: rgba(0,0,0,.2);</p><p>写上两句 背景， 低版本ie只执行gray， 其他浏览器执行 半透明下面这一句。</p><h2 id="BFC-块级格式化上下文"><a href="#BFC-块级格式化上下文" class="headerlink" title="BFC(块级格式化上下文)"></a>BFC(块级格式化上下文)</h2><p>BFC(Block formatting context)</p><p>直译为”块级格式化上下文”。</p><h3 id="元素的显示模式"><a href="#元素的显示模式" class="headerlink" title="元素的显示模式"></a>元素的显示模式</h3><p>我们前面讲过 元素的显示模式 display。 </p><p>分为 块级元素   行内元素  行内块元素 ，其实，它还有很多其他显示模式。</p><img src="media/dis.png" style="border: 1px dashed #ccc; padding: 5px;"><h3 id="那些元素会具有BFC的条件"><a href="#那些元素会具有BFC的条件" class="headerlink" title="那些元素会具有BFC的条件"></a>那些元素会具有BFC的条件</h3><p>不是所有的元素模式都能产生BFC，w3c 规范： </p><p>display 属性为 block, list-item, table 的元素，会产生BFC.</p><p>大家有么有发现这个三个都是用来布局最为合理的元素，因为他们就是用来可视化布局。</p><p>注意其他的，display属性，比如 line 等等，他们创建的是 IFC ，我们暂且不研究。</p><p>这个BFC 有着具体的布局特性： </p><img src="media/box.gif"><p>有宽度和高度 ， 有 外边距margin  有内边距padding 有边框 border。</p><p>就好比，你有了练习武术的体格了。 有潜力，有资质。</p><img src="media/gu.jpeg" width="400"><h3 id="什么情况下可以让元素产生BFC"><a href="#什么情况下可以让元素产生BFC" class="headerlink" title="什么情况下可以让元素产生BFC"></a>什么情况下可以让元素产生BFC</h3><p>以上盒子具有BFC条件了，就是说有资质了，但是怎样触发才会产生BFC，从而创造这个封闭的环境呢？ </p><p>在好比，你光有资质还不行，你需要一定额外效果才能出发的武学潜力，要么你掉到悬崖下面，捡到了一本九阴真经，要么你学习葵花宝典，欲练此功必先….</p><img src="media/kuihua.png">同样，要给这些元素添加如下属性就可以触发BFC。<p>-float属性不为none</p><p>-position为absolute或fixed</p><p>-display为inline-block, table-cell, table-caption, flex, inline-flex</p><p>-overflow不为visible。</p><h3 id="BFC元素所具有的特性"><a href="#BFC元素所具有的特性" class="headerlink" title="BFC元素所具有的特性"></a>BFC元素所具有的特性</h3><p>BFC布局规则特性：</p><p>1.在BFC中，盒子从顶端开始垂直地一个接一个地排列.</p><p>2.盒子垂直方向的距离由margin决定。属于同一个BFC的两个相邻盒子的margin会发生重叠</p><p>3.在BFC中，每一个盒子的左外边缘（margin-left）会触碰到容器的左边缘(border-left)（对于从右到左的格式来说，则触碰到右边缘）。</p><ol><li>BFC的区域不会与浮动盒子产生交集，而是紧贴浮动边缘。</li><li>计算BFC的高度时，自然也会检测浮动或者定位的盒子高度。</li></ol><p>它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。</p><p>白话文： 孩子在家里愿意怎么折腾都行，但是出了家门口，你就的乖乖的，不能影响外面的任何人。</p><img src="media/xiong.jpeg" width="400"><h3 id="BFC的主要用途"><a href="#BFC的主要用途" class="headerlink" title="BFC的主要用途"></a>BFC的主要用途</h3><p>BFC能用来做什么？</p><p>(1) 清除元素内部浮动</p><p>只要把父元素设为BFC就可以清理子元素的浮动了，最常见的用法就是在父元素上设置overflow: hidden样式，对于IE6加上zoom:1就可以了。</p><p>主要用到 </p><pre><code>计算BFC的高度时，自然也会检测浮动或者定位的盒子高度。</code></pre><img src="media/fu.jpg">(2) 解决外边距合并问题<p>外边距合并的问题。</p><p>主要用到 </p><pre><code>盒子垂直方向的距离由margin决定。属于同一个BFC的两个相邻盒子的margin会发生重叠</code></pre><p>属于同一个BFC的两个相邻盒子的margin会发生重叠，那么我们创建不属于同一个BFC，就不会发生margin重叠了。</p><img src="media/ma.png"><p>(3) 制作右侧自适应的盒子问题</p><p>主要用到 </p><pre><code>普通流体元素BFC后，为了和浮动元素不产生任何交集，顺着浮动边缘形成自己的封闭上下文</code></pre><img src="media/you.png"><h3 id="BFC-总结"><a href="#BFC-总结" class="headerlink" title="BFC 总结"></a>BFC 总结</h3><p>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。包括浮动，和外边距合并等等，因此，有了这个特性，我们布局的时候就不会出现意外情况了。</p><h2 id="优雅降级和渐进增强"><a href="#优雅降级和渐进增强" class="headerlink" title="优雅降级和渐进增强"></a>优雅降级和渐进增强</h2><p>什么是渐进增强（progressive enhancement）、优雅降级（graceful degradation）呢？</p><p>渐进增强 progressive enhancement：</p><p>针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。</p><p> 类似 爬山，由低出往高处爬</p>  <img src="media/pa.png" width="400"><p>  <b>优雅降级 graceful degradation：</b></p><p>一开始就构建完整的功能，然后再针对低版本浏览器进行兼容。</p><p>类似蹦极，由高处往低处下落</p><img src="media/xia.jpg"><p>　　区别：渐进增强是向上兼容，优雅降级是向下兼容。</p><p>个人建议： 现在互联网发展很快， 连微软公司都抛弃了ie浏览器，转而支持 edge这样的高版本浏览器，我们很多情况下没有必要再时刻想着低版本浏览器了，而是一开始就构建完整的效果，根据实际情况，修补低版本浏览器问题。</p><h2 id="浏览器前缀"><a href="#浏览器前缀" class="headerlink" title="浏览器前缀"></a>浏览器前缀</h2><table><thead><tr><th>浏览器前缀</th><th>浏览器</th></tr></thead><tbody><tr><td>-webkit-</td><td>Google Chrome, Safari, Android Browser</td></tr><tr><td>-moz-</td><td>Firefox</td></tr><tr><td>-o-</td><td>Opera</td></tr><tr><td>-ms-</td><td>Internet Explorer, Edge</td></tr><tr><td>-khtml-</td><td>Konqueror</td></tr></tbody></table><p>后面我们会有 常用的解决H5和C3 的兼容解决文件， 我们这里暂且不涉及。</p><h2 id="背景渐变"><a href="#背景渐变" class="headerlink" title="背景渐变"></a>背景渐变</h2><p>在线性渐变过程中，颜色沿着一条直线过渡：从左侧到右侧、从右侧到左侧、从顶部到底部、从底部到顶部或着沿任何任意轴。如果你曾使用过制作图件，比如说Photoshop，你对线性渐变并不会陌生。</p><p>兼容性问题很严重，我们这里之讲解线性渐变</p><p>语法格式： </p><pre class=" language-css"><code class="language-css"><span class="token property">background</span><span class="token punctuation">:</span><span class="token function">-webkit-linear-gradient</span><span class="token punctuation">(</span>渐变的起始位置， 起始颜色， 结束颜色<span class="token punctuation">)</span>；</code></pre><pre class=" language-css"><code class="language-css"><span class="token property">background</span><span class="token punctuation">:</span><span class="token function">-webkit-linear-gradient</span><span class="token punctuation">(</span>渐变的起始位置， 颜色 位置， 颜色位置<span class="token number">....</span><span class="token punctuation">)</span>；</code></pre><h2 id="CSS-W3C-统一验证工具"><a href="#CSS-W3C-统一验证工具" class="headerlink" title="CSS W3C 统一验证工具"></a>CSS W3C 统一验证工具</h2><p>CssStats 是一个在线的 CSS 代码分析工具</p><pre><code>网址是：  http://www.cssstats.com/</code></pre><p>如果你想要更全面的，这个神奇，你值得拥有：</p><p>W3C 统一验证工具：    <a href="http://validator.w3.org/unicorn/" target="_blank" rel="noopener">http://validator.w3.org/unicorn/</a>  ☆☆☆☆☆</p><p>因为它可以检测本地文件哦！！</p><h2 id="CSS-压缩"><a href="#CSS-压缩" class="headerlink" title="CSS 压缩"></a>CSS 压缩</h2><p>通过上面的检测没有错误，为了提高加载速度和节约空间（相对来说，css量很少的情况下，几乎没啥区别），可以通过css压缩工具把css进行压缩。</p><p> w3c css压缩   <a href="http://tool.chinaz.com/Tools/CssFormat.aspx" target="_blank" rel="noopener">http://tool.chinaz.com/Tools/CssFormat.aspx</a>   网速比较慢</p><p> 还可以去站长之家进行快速压缩。</p><p> <a href="http://tool.chinaz.com/Tools/CssFormat.aspx" target="_blank" rel="noopener">http://tool.chinaz.com/Tools/CssFormat.aspx</a>  </p><p><em>如有侵权，联系 <a href="mailto:2025685938@qq.com" target="_blank" rel="noopener">2025685938@qq.com</a> 删除</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02-CSS</title>
      <link href="/posts/16824.html"/>
      <url>/posts/16824.html</url>
      
        <content type="html"><![CDATA[<h2 id="本文非原创"><a href="#本文非原创" class="headerlink" title=" 本文非原创 "></a><strong> 本文非原创 </strong></h2><h1 id="课程目标"><a href="#课程目标" class="headerlink" title="课程目标:"></a>课程目标:</h1><blockquote><ol><li>学会使用CSS选择器</li><li>熟记CSS样式和外观属性</li><li>熟练掌握CSS各种选择器</li><li>熟练掌握CSS各种选择器</li><li>熟练掌握CSS三种显示模式</li><li>熟练掌握CSS背景属性</li><li>熟练掌握CSS三大特性</li><li>熟练掌握CSS盒子模型</li><li>熟练掌握CSS浮动</li><li>熟练掌握CSS定位</li><li>熟练掌握CSS高级技巧强化CSS</li></ol></blockquote><hr><h1 id="CSS的发展历程"><a href="#CSS的发展历程" class="headerlink" title="CSS的发展历程"></a>CSS的发展历程</h1><p>从HTML被发明开始，样式就以各种形式存在。不同的浏览器结合它们各自的样式语言为用户提供页面效果的控制。最初的HTML只包含很少的显示属性。<br>随着HTML的成长，为了满足页面设计者的要求，HTML添加了很多显示功能。但是随着这些功能的增加，HTML变的越来越杂乱，而且HTML页面也越来越臃肿。于是CSS便诞生了。</p><h1 id="CSS-网页的美容师"><a href="#CSS-网页的美容师" class="headerlink" title="CSS 网页的美容师"></a>CSS 网页的美容师</h1><p>CSS的出现，拯救了混乱的HTML，当让更加拯救了我们web开发者。 让我们的网页更加丰富多彩。   </p><p>CSS的最大贡献就是：  让 HTML 从样式中解脱苦海，  实现了 HTML 专注去做 结构呈现。 而样式交给 CSS 后，你完全可以放心的早点洗洗睡了！</p><img src="media/x.jpg" width="250"><p>而且。。。。。 CSS 做的很出色，如果JavaScript是网页的魔法师，那么CSS它是我们网页的美容师，不信，你看:</p><img src="media/baby.jpeg"><p>ps:  你跟Angelababy只差了一个妆容的距离</p><p>来个更直观的认识吧： </p><img src="media/db.png"><p>有人说， 没有不漂亮的女人，只有不会打扮的女人。</p><p>我想说， 没有不好看的网页，只有不会CSS的前端。</p><p>网页添加 CSS和不添加CSS 的对比：</p><p>带有CSS的页面</p><img src="media/Cc.png"><p>没有CSS的页面</p><img src="media/fff.png"><h1 id="CSS初识"><a href="#CSS初识" class="headerlink" title="CSS初识"></a>CSS初识</h1><p>CSS(Cascading Style Sheets)</p><p>CSS通常称为CSS样式表或层叠样式表（级联样式表），主要用于设置HTML页面中的文本内容（字体、大小、对齐方式等）、图片的外形（宽高、边框样式、边距等）以及版面的布局等外观显示样式。</p><p>CSS以HTML为基础，提供了丰富的功能，如字体、颜色、背景的控制及整体排版等，而且还可以针对不同的浏览器设置不同的样式。</p><h1 id="CSS样式规则"><a href="#CSS样式规则" class="headerlink" title="CSS样式规则"></a>CSS样式规则</h1><p>使用HTML时，需要遵从一定的规范。CSS亦如此，要想熟练地使用CSS对网页进行修饰，首先需要了解CSS样式规则，具体格式如下：                                          </p><img src="media/gz.png"><pre><code>在上面的样式规则中:1.选择器用于指定CSS样式作用的HTML对象，花括号内是对该对象设置的具体样式。2.属性和属性值以“键值对”的形式出现。3.属性是对指定的对象设置的样式属性，例如字体大小、文本颜色等。4.属性和属性值之间用英文“:”连接。5.多个“键值对”之间用英文“;”进行区分。可以用段落 和 表格的对齐的演示。</code></pre><h1 id="CSS字体样式属性"><a href="#CSS字体样式属性" class="headerlink" title="CSS字体样式属性"></a>CSS字体样式属性</h1><h2 id="font-size-字号大小"><a href="#font-size-字号大小" class="headerlink" title="font-size:字号大小"></a>font-size:字号大小</h2><p>font-size属性用于设置字号，该属性的值可以使用相对长度单位，也可以使用绝对长度单位。其中，相对长度单位比较常用，推荐使用像素单位px，绝对长度单位使用较少。具体如下：</p><img src="media/dd.png"><h2 id="font-family-字体"><a href="#font-family-字体" class="headerlink" title="font-family:字体"></a>font-family:字体</h2><p>font-family属性用于设置字体。网页中常用的字体有宋体、微软雅黑、黑体等，例如将网页中所有段落文本的字体设置为微软雅黑，可以使用如下CSS样式代码：</p><p>p{ font-family:”微软雅黑”;}</p><p>可以同时指定多个字体，中间以逗号隔开，表示如果浏览器不支持第一个字体，则会尝试下一个，直到找到合适的字体。</p><blockquote><p><img src="media/good.png">常用技巧：</p></blockquote><pre><code>1. 现在网页中普遍使用14px+。2. 尽量使用偶数的数字字号。ie6等老式浏览器支持奇数会有bug。3. 各种字体之间必须使用英文状态下的逗号隔开。4. 中文字体需要加英文状态下的引号，英文字体一般不需要加引号。当需要设置英文字体时，英文字体名必须位于中文字体名之前。5. 如果字体名中包含空格、#、$等符号，则该字体必须加英文状态下的单引号或双引号，例如font-family: "Times New Roman";。6. 尽量使用系统默认字体，保证在任何用户的浏览器中都能正确显示。</code></pre><h2 id="CSS-Unicode字体"><a href="#CSS-Unicode字体" class="headerlink" title="CSS Unicode字体"></a>CSS Unicode字体</h2><p>在 CSS 中设置字体名称，直接写中文是可以的。但是在文件编码（GB2312、UTF-8 等）不匹配时会产生乱码的错误。xp 系统不支持 类似微软雅黑的中文。</p><p>方案一： 你可以使用英文来替代。 比如 font-family:”Microsoft Yahei”。</p><p>方案二： 在 CSS 直接使用 Unicode 编码来写字体名称可以避免这些错误。使用 Unicode 写中文字体名称，浏览器是可以正确的解析的。<br>font-family: “\5FAE\8F6F\96C5\9ED1”，表示设置字体为“微软雅黑”。</p><img src="media/shs.png"><p>可以通过escape()  来测试属于什么字体。</p><table><thead><tr><th>字体名称</th><th>英文名称</th><th>Unicode 编码</th></tr></thead><tbody><tr><td>宋体</td><td>SimSun</td><td>\5B8B\4F53</td></tr><tr><td>新宋体</td><td>NSimSun</td><td>\65B0\5B8B\4F53</td></tr><tr><td>黑体</td><td>SimHei</td><td>\9ED1\4F53</td></tr><tr><td>微软雅黑</td><td>Microsoft YaHei</td><td>\5FAE\8F6F\96C5\9ED1</td></tr><tr><td>楷体_GB2312</td><td>KaiTi_GB2312</td><td>\6977\4F53_GB2312</td></tr><tr><td>隶书</td><td>LiSu</td><td>\96B6\4E66</td></tr><tr><td>幼园</td><td>YouYuan</td><td>\5E7C\5706</td></tr><tr><td>华文细黑</td><td>STXihei</td><td>\534E\6587\7EC6\9ED1</td></tr><tr><td>细明体</td><td>MingLiU</td><td>\7EC6\660E\4F53</td></tr><tr><td>新细明体</td><td>PMingLiU</td><td>\65B0\7EC6\660E\4F53</td></tr></tbody></table><p>为了照顾不同电脑的字体安装问题，我们尽量只使用宋体和微软雅黑中文字体</p><h2 id="font-weight-字体粗细"><a href="#font-weight-字体粗细" class="headerlink" title="font-weight:字体粗细"></a>font-weight:字体粗细</h2><p>字体加粗除了用 b  和 strong 标签之外，可以使用CSS 来实现，但是CSS 是没有语义的。</p><pre class=" language-html"><code class="language-html">font-weight属性用于定义字体的粗细，其可用属性值：normal、bold、bolder、lighter、100~900（100的整数倍）。</code></pre><p><img src="media/good.png">小技巧： </p><pre class=" language-css"><code class="language-css">数字 <span class="token number">400</span> 等价于 normal，而 <span class="token number">700</span> 等价于 bold。  但是我们更喜欢用数字来表示。  </code></pre><h2 id="font-style-字体风格"><a href="#font-style-字体风格" class="headerlink" title="font-style:字体风格"></a>font-style:字体风格</h2><p>字体倾斜除了用 i  和 em 标签之外，可以使用CSS 来实现，但是CSS 是没有语义的。</p><p>font-style属性用于定义字体风格，如设置斜体、倾斜或正常字体，其可用属性值如下：</p><p>normal：默认值，浏览器会显示标准的字体样式。</p><p>italic：浏览器会显示斜体的字体样式。</p><p>oblique：浏览器会显示倾斜的字体样式。</p><p><img src="media/good.png">小技巧： </p><pre><code>平时我们很少给文字加斜体，反而喜欢给斜体标签（em，i）改为普通模式。</code></pre><h2 id="font-综合设置字体样式-重点"><a href="#font-综合设置字体样式-重点" class="headerlink" title="font:综合设置字体样式 (重点)"></a>font:综合设置字体样式 (重点)</h2><p>font属性用于对字体样式进行综合设置，其基本语法格式如下：</p><pre class=" language-css"><code class="language-css"><span class="token selector">选择器</span><span class="token punctuation">{</span><span class="token property">font</span><span class="token punctuation">:</span> font-style  font-weight  font-size/line-height  font-family<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre><code>使用font属性时，必须按上面语法格式中的顺序书写，不能更换顺序，各个属性以空格隔开。注意：其中不需要设置的属性可以省略（取默认值），但必须保留font-size和font-family属性，否则font属性将不起作用。</code></pre><h1 id="开发者工具（chrome）"><a href="#开发者工具（chrome）" class="headerlink" title="开发者工具（chrome）"></a>开发者工具（chrome）</h1><p>此工具是我们的必备工具，以后代码出了问题，我们首先第一反应就是：</p><p>“按F12”或者是 “shift+ctrl+i”   打开 开发者工具。</p><p>菜单：   右击网页空白出—查看 </p><img src="media/chrome.png"><p><img src="media/good.png">小技巧：</p><ol><li>ctrl+滚轮 可以 放大开发者工具代码大小。</li><li>左边是HTML元素结构   右边是CSS样式。</li><li>右边CSS样式可以改动数值和颜色查看更改后效果。</li></ol><h1 id="选择器（重点）"><a href="#选择器（重点）" class="headerlink" title="选择器（重点）"></a>选择器（重点）</h1><p>要想将CSS样式应用于特定的HTML元素，首先需要找到该目标元素。在CSS中，执行这一任务的样式规则部分被称为选择器（选择符）。</p><img src="media/ax.png"><p>如上图所以，要把里面的小黄人分为2组，最快的方法怎办？  </p><p>很多， 比如 一只眼睛的一组，剩下的一组  </p><p>这就用到基础选择器组：</p><h2 id="标签选择器（元素选择器）"><a href="#标签选择器（元素选择器）" class="headerlink" title="标签选择器（元素选择器）"></a>标签选择器（元素选择器）</h2><p>标签选择器是指用HTML标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的CSS样式。其基本语法格式如下：</p><pre><code>标签名{属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }  或者元素名{属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }</code></pre><p>标签选择器最大的优点是能快速为页面中同类型的标签统一样式，同时这也是他的缺点，不能设计差异化样式。</p><h2 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h2><p>类选择器使用“.”（英文点号）进行标识，后面紧跟类名，其基本语法格式如下：</p><pre><code>.类名{属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }</code></pre><pre><code> 标签调用的时候用 class=“类名”  即可。</code></pre><p>类选择器最大的优势是可以为元素对象定义单独或相同的样式。</p><p><img src="media/good.png">小技巧：</p><pre><code>1.长名称或词组可以使用中横线来为选择器命名。2.不建议使用“_”下划线来命名CSS选择器。</code></pre><p>​    输入的时候少按一个shift键;<br>　浏览器兼容问题 (比如使用_tips的选择器命名，在IE6是无效的)<br>　能良好区分JavaScript变量命名(JS变量命名是用“_”)</p><pre><code>3.不要纯数字、中文等命名， 尽量使用英文字母来表示。</code></pre><p>猜谜底游戏：</p><p><img src="media/midi.png" width="450">   你猜？</p><p>命名是我们通俗约定的，但是没有规定必须用这些常用的命名。</p><p>课堂案例：</p> <img src="media/go.png"><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">span </span><span class="token punctuation">{</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.blue</span> </span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.red</span> </span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.orange</span> </span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.green</span> </span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>G<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>o<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>orange<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>o<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>g<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>green<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>l<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>e<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h2 id="多类名选择器"><a href="#多类名选择器" class="headerlink" title="多类名选择器"></a>多类名选择器</h2><p>我们可以给标签指定多个类名，从而达到更多的选择目的。</p><img src="media/lei.png"><p>注意：</p><pre><code>1. 样式显示效果跟HTML元素中的类名先后顺序没有关系,受CSS样式书写的上下顺序有关。2. 各个类名中间用空格隔开。</code></pre><p>多类名选择器在后期布局比较复杂的情况下，还是较多使用的。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pink fontWeight font20<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>亚瑟<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>font20<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>刘备<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>font14 pink<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>安其拉<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>font14<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>貂蝉<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h2 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h2><p>id选择器使用“#”进行标识，后面紧跟id名，其基本语法格式如下：</p><pre><code>#id名{属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }</code></pre><p>该语法中，id名即为HTML元素的id属性值，大多数HTML元素都可以定义id属性，元素的id值是唯一的，只能对应于文档中某一个具体的元素。</p><p>用法基本和类选择器相同。</p><h2 id="id选择器和类选择器区别"><a href="#id选择器和类选择器区别" class="headerlink" title="id选择器和类选择器区别"></a>id选择器和类选择器区别</h2><p>W3C标准规定，在同一个页面内，不允许有相同名字的id对象出现，但是允许相同名字的class。</p><p>类选择器（class） 好比人的名字，  是可以多次重复使用的， 比如  张伟  王伟  李伟  李娜</p><p>id选择器     好比人的身份证号码，  全中国是唯一的， 不得重复。 只能使用一次。</p><p><strong><em>id选择器和类选择器最大的不同在于 使用次数上。</em></strong></p><img src="media/zfb.jpg"><h2 id="通配符选择器"><a href="#通配符选择器" class="headerlink" title="通配符选择器"></a>通配符选择器</h2><p>通配符选择器用“ * ”号表示，他是所有选择器中作用范围最广的，能匹配页面中所有的元素。其基本语法格式如下：</p><pre><code>* { 属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }</code></pre><p>例如下面的代码，使用通配符选择器定义CSS样式，清除所有HTML标记的默认边距。</p><pre class=" language-css"><code class="language-css"><span class="token selector">* </span><span class="token punctuation">{</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">/* 定义外边距*/</span>  <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>                   <span class="token comment" spellcheck="true">/* 定义内边距*/</span><span class="token punctuation">}</span></code></pre><p>注意：</p><p>  这个通配符选择器，就像我们的电影明星中的梦中情人， 想想它就好了，但是它不会和你过日子。 </p><h2 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h2><p>  伪类选择器用于向某些选择器添加特殊的效果。比如给链接添加特殊效果， 比如可以选择 第1个，第n个元素。</p><pre class=" language-css"><code class="language-css"><span class="token selector">为了和我们刚才学的类选择器相区别，  类选择器是一个点 比如 <span class="token class">.demo</span> </span><span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token selector">而我们的伪类 用 2个点 就是 冒号  比如  <span class="token pseudo-class">:link</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><h3 id="链接伪类选择器"><a href="#链接伪类选择器" class="headerlink" title="链接伪类选择器"></a>链接伪类选择器</h3><ul><li>:link      /* 未访问的链接 */</li><li>:visited   /* 已访问的链接 */</li><li>:hover     /* 鼠标移动到链接上 */</li><li>:active    /* 选定的链接 */</li></ul><p>   注意写的时候，他们的顺序尽量不要颠倒  按照  lvha 的顺序。   love   hate  爱上了讨厌 记忆法    或者   lv 包包 非常 hao </p><pre class=" language-css"><code class="language-css"><span class="token selector">a </span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/* a是标签选择器  所有的链接 */</span>            <span class="token property">font-weight</span><span class="token punctuation">:</span> <span class="token number">700</span><span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">16</span>px<span class="token punctuation">;</span>            <span class="token property">color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token selector">a<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">/* :hover 是链接伪类选择器 鼠标经过 */</span>            <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*  鼠标经过的时候，由原来的 灰色 变成了红色 */</span><span class="token punctuation">}</span></code></pre><h3 id="结构-位置-伪类选择器（CSS3"><a href="#结构-位置-伪类选择器（CSS3" class="headerlink" title="结构(位置)伪类选择器（CSS3)"></a>结构(位置)伪类选择器（CSS3)</h3><ul><li>:first-child :选取属于其父元素的首个子元素的指定选择器</li><li>:last-child :选取属于其父元素的最后一个子元素的指定选择器</li><li>:nth-child(n) ： 匹配属于其父元素的第 N 个子元素，不论元素的类型</li><li>:nth-last-child(n) ：选择器匹配属于其元素的第 N 个子元素的每个元素，不论元素的类型，从最后一个子元素开始计数。<br>n 可以是数字、关键词或公式</li><li></li></ul><pre class=" language-css"><code class="language-css"><span class="token selector">li<span class="token pseudo-class">:first-child</span> </span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">/*  选择第一个孩子 */</span>    <span class="token property">color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token selector">li<span class="token pseudo-class">:last-child</span> </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 最后一个孩子 */</span>    <span class="token property">color</span><span class="token punctuation">:</span> purple<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">li<span class="token pseudo-class">:nth-child(4)</span> </span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 选择第4个孩子  n  代表 第几个的意思 */</span>       <span class="token property">color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="目标伪类选择器-CSS3"><a href="#目标伪类选择器-CSS3" class="headerlink" title="目标伪类选择器(CSS3)"></a>目标伪类选择器(CSS3)</h3><p> :target目标伪类选择器 :选择器可用于选取当前活动的目标元素</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token pseudo-class">:target</span> </span><span class="token punctuation">{</span>        <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="CSS注释"><a href="#CSS注释" class="headerlink" title="CSS注释"></a>CSS注释</h1><pre><code>CSS规则是使用     /*  需要注释的内容  */  进行注释的，即在需要注释的内容前使用 “/*” 标记开始注释，在内容的结尾使用 “*/”结束。</code></pre><p>   例如：</p><pre class=" language-css"><code class="language-css"><span class="token selector">p </span><span class="token punctuation">{</span>      <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">14</span>px<span class="token punctuation">;</span>                 <span class="token comment" spellcheck="true">/* 所有的字体是14像素大小*/</span><span class="token punctuation">}</span></code></pre><h1 id="CSS外观属性"><a href="#CSS外观属性" class="headerlink" title="CSS外观属性"></a>CSS外观属性</h1><h2 id="color-文本颜色"><a href="#color-文本颜色" class="headerlink" title="color:文本颜色"></a>color:文本颜色</h2><p>color属性用于定义文本的颜色，其取值方式有如下3种：</p><p>1.预定义的颜色值，如red，green，blue等。</p><p>2.十六进制，如#FF0000，#FF6600，#29D794等。实际工作中，十六进制是最常用的定义颜色的方式。</p><p>3.RGB代码，如红色可以表示为rgb(255,0,0)或rgb(100%,0%,0%)。</p><p>需要注意的是，如果使用RGB代码的百分比颜色值，取值为0时也不能省略百分号，必须写为0%。</p><h2 id="line-height-行间距"><a href="#line-height-行间距" class="headerlink" title="line-height:行间距"></a>line-height:行间距</h2><p>line-height属性用于设置行间距，就是行与行之间的距离，即字符的垂直间距，一般称为行高。line-height常用的属性值单位有三种，分别为像素px，相对值em和百分比%，实际工作中使用最多的是像素px</p><p>一般情况下，行距比字号大7.8像素左右就可以了。</p><h2 id="text-align-水平对齐方式"><a href="#text-align-水平对齐方式" class="headerlink" title="text-align:水平对齐方式"></a>text-align:水平对齐方式</h2><pre><code>text-align属性用于设置文本内容的水平对齐，相当于html中的align对齐属性。其可用属性值如下：</code></pre><p>left：左对齐（默认值）</p><p>right：右对齐</p><p>center：居中对齐</p><h2 id="text-indent-首行缩进"><a href="#text-indent-首行缩进" class="headerlink" title="text-indent:首行缩进"></a>text-indent:首行缩进</h2><p>text-indent属性用于设置首行文本的缩进，其属性值可为不同单位的数值、em字符宽度的倍数、或相对于浏览器窗口宽度的百分比%，允许使用负值, 建议使用em作为设置单位。</p><p>1em 就是一个字的宽度   如果是汉字的段落， 1em 就是一个汉字的宽度</p><h2 id="letter-spacing-字间距"><a href="#letter-spacing-字间距" class="headerlink" title="letter-spacing:字间距"></a>letter-spacing:字间距</h2><p>letter-spacing属性用于定义字间距，所谓字间距就是字符与字符之间的空白。其属性值可为不同单位的数值，允许使用负值，默认为normal。</p><h2 id="word-spacing-单词间距"><a href="#word-spacing-单词间距" class="headerlink" title="word-spacing:单词间距"></a>word-spacing:单词间距</h2><p>word-spacing属性用于定义英文单词之间的间距，对中文字符无效。和letter-spacing一样，其属性值可为不同单位的数值，允许使用负值，默认为normal。</p><p>word-spacing和letter-spacing均可对英文进行设置。不同的是letter-spacing定义的为字母之间的间距，而word-spacing定义的为英文单词之间的间距。</p><h2 id="颜色半透明-css3"><a href="#颜色半透明-css3" class="headerlink" title="颜色半透明(css3)"></a>颜色半透明(css3)</h2><p>文字颜色到了CSS3我们可以采取半透明的格式了语法格式如下：</p><pre class=" language-css"><code class="language-css"><span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span>r,g,b,a<span class="token punctuation">)</span>  a 是alpha  透明的意思  取值范围 <span class="token number">0</span>~<span class="token number">1</span>之间    <span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">0.3</span><span class="token punctuation">)</span> </code></pre><h2 id="文字阴影-CSS3"><a href="#文字阴影-CSS3" class="headerlink" title="文字阴影(CSS3)"></a>文字阴影(CSS3)</h2><p>以后我们可以给我们的文字添加阴影效果了  Shadow  影子  </p><pre class=" language-css"><code class="language-css"><span class="token property">text-shadow</span><span class="token punctuation">:</span>水平位置 垂直位置 模糊距离 阴影颜色<span class="token punctuation">;</span></code></pre><p><img src="media/1498467502625.png" alt="1498467502625"> </p><ol><li>前两项是必须写的。  后两项可以选写。</li></ol><p><img src="media/1498467519665.png" alt="1498467519665">    </p><h1 id="sublime快捷方式"><a href="#sublime快捷方式" class="headerlink" title="sublime快捷方式"></a>sublime快捷方式</h1><p>sublime可以快速提高我们代码的书写方式</p><ol><li><p>生成标签 直接输入标签名 按tab键即可   比如  div   然后tab 键， 就可以生成 </p><div></div><p></p></li><li><p>如果想要生成多个相同标签  加上 * 就可以了 比如   div*3  就可以快速生成3个div</p></li><li><p>如果有父子级关系的标签，可以用 &gt;  比如   ul &gt; li就可以了</p></li><li><p>如果有兄弟关系的标签，用  +  就可以了 比如 div+p  </p></li><li><p>如果生成带有类名或者id名字的，  直接写  .demo  或者  #two   tab 键就可以了</p></li></ol><h1 id="引入CSS样式表（书写位置）"><a href="#引入CSS样式表（书写位置）" class="headerlink" title="引入CSS样式表（书写位置）"></a>引入CSS样式表（书写位置）</h1><p>CSS可以写到那个位置？ 是不是一定写到html文件里面呢？</p><h2 id="内部样式表"><a href="#内部样式表" class="headerlink" title="内部样式表"></a>内部样式表</h2><p>内嵌式是将CSS代码集中写在HTML文档的head头部标签中，并且用style标签定义，其基本语法格式如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/CSS<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">选择器 </span><span class="token punctuation">{</span>属性<span class="token property">1</span><span class="token punctuation">:</span>属性值<span class="token number">1</span><span class="token punctuation">;</span> 属性<span class="token property">2</span><span class="token punctuation">:</span>属性值<span class="token number">2</span><span class="token punctuation">;</span> 属性<span class="token property">3</span><span class="token punctuation">:</span>属性值<span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre><p>语法中，style标签一般位于head标签中title标签之后，也可以把他放在HTML文档的任何地方。</p><p>type=”text/CSS”  在html5中可以省略， 写上也比较符合规范， 所以这个地方可以写也可以省略。</p><h2 id="行内式（内联样式）"><a href="#行内式（内联样式）" class="headerlink" title="行内式（内联样式）"></a>行内式（内联样式）</h2><p>内联样式，又有人称行内样式、行间样式、内嵌样式。是通过标签的style属性来设置元素的样式，其基本语法格式如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>标签名</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value">属性<span class="token property">1</span><span class="token punctuation">:</span>属性值<span class="token number">1</span><span class="token punctuation">;</span> 属性<span class="token property">2</span><span class="token punctuation">:</span>属性值<span class="token number">2</span><span class="token punctuation">;</span> 属性<span class="token property">3</span><span class="token punctuation">:</span>属性值<span class="token number">3</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 内容 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>标签名</span><span class="token punctuation">></span></span></code></pre><p>语法中style是标签的属性，实际上任何HTML标签都拥有style属性，用来设置行内式。其中属性和值的书写规范与CSS样式规则相同，行内式只对其所在的标签及嵌套在其中的子标签起作用。</p><h2 id="外部样式表（外链式）"><a href="#外部样式表（外链式）" class="headerlink" title="外部样式表（外链式）"></a>外部样式表（外链式）</h2><p>链入式是将所有的样式放在一个或多个以.CSS为扩展名的外部样式表文件中，通过link标签将外部样式表文件链接到HTML文档中，其基本语法格式如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>CSS文件的路径<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/CSS<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre><p>注意：  link 是个单标签哦!!!</p><p>该语法中，link标签需要放在head头部标签中，并且必须指定link标签的三个属性，具体如下：</p><pre><code>href：定义所链接外部样式表文件的URL，可以是相对路径，也可以是绝对路径。type：定义所链接文档的类型，在这里需要指定为“text/CSS”，表示链接的外部文件为CSS样式表。rel：定义当前文档与被链接文档之间的关系，在这里需要指定为“stylesheet”，表示被链接的文档是一个样式表文件。</code></pre><h2 id="三种样式表总结"><a href="#三种样式表总结" class="headerlink" title="三种样式表总结"></a>三种样式表总结</h2><table><thead><tr><th>样式表</th><th>优点</th><th>缺点</th><th>使用情况</th><th>控制范围</th></tr></thead><tbody><tr><td>行内样式表</td><td>书写方便，权重高</td><td>没有实现样式和结构相分离</td><td>较少</td><td>控制一个标签（少）</td></tr><tr><td>内部样式表</td><td>部分结构和样式相分离</td><td>没有彻底分离</td><td>较多</td><td>控制一个页面（中）</td></tr><tr><td>外部样式表</td><td>完全实现结构和样式相分离</td><td>需要引入</td><td>最多，强烈推荐</td><td>控制整个站点（多）</td></tr></tbody></table><h1 id="标签显示模式（display）"><a href="#标签显示模式（display）" class="headerlink" title="标签显示模式（display）"></a>标签显示模式（display）</h1><img src="media/people.png"><p>非洲黑人：  皮肤内黑色素含量高，以吸收阳光中的紫外线，保护皮肤内部结构免遭损害，头发象羊毛一样卷曲，使每根卷发周围都有许多空隙，空隙充满空气，卷发有隔热作用。</p><p>欧洲白人： 生活寒带或着是说常年温度较低的地缘,加上年日照时间少，身体的黑色素沉淀比较少``所以出现皮肤、发色、瞳晕都呈现浅色</p><p>buka黄人：  我中间的。。。  <img src="media/h.jpg" alt=""></p><p>最重要的总结：  是为了更好的适应环境而完成的自然选择。 </p><p>同理，我们网页的标签非常多，再不同地方会用到不同类型的标签，以便更好的完成我们的网页。</p><p>标签的类型(显示模式)</p><p>HTML标签一般分为块标签和行内标签两种类型，它们也称块元素和行内元素。具体如下：</p><h2 id="块级元素-block-level"><a href="#块级元素-block-level" class="headerlink" title="块级元素(block-level)"></a>块级元素(block-level)</h2><p>每个块元素通常都会独自占据一整行或多整行，可以对其设置宽度、高度、对齐等属性，常用于网页布局和网页结构的搭建。</p><pre><code>常见的块元素有&lt;h1&gt;~&lt;h6&gt;、&lt;p&gt;、&lt;div&gt;、&lt;ul&gt;、&lt;ol&gt;、&lt;li&gt;等，其中&lt;div&gt;标签是最典型的块元素。</code></pre>  <img src="media/xtf.jpg"><p>块级元素的特点：</p><p>（1）总是从新行开始</p><p>（2）高度，行高、外边距以及内边距都可以控制。</p><p>（3）宽度默认是容器的100%</p><p>（4）可以容纳内联元素和其他块元素。</p><h2 id="行内元素-inline-level"><a href="#行内元素-inline-level" class="headerlink" title="行内元素(inline-level)"></a>行内元素(inline-level)</h2><p>行内元素（内联元素）不占有独立的区域，仅仅靠自身的字体大小和图像尺寸来支撑结构，一般不可以设置宽度、高度、对齐等属性，常用于控制页面中文本的样式。</p><pre><code>常见的行内元素有&lt;a&gt;、&lt;strong&gt;、&lt;b&gt;、&lt;em&gt;、&lt;i&gt;、&lt;del&gt;、&lt;s&gt;、&lt;ins&gt;、&lt;u&gt;、&lt;span&gt;等，其中&lt;span&gt;标签最典型的行内元素。</code></pre><p>  <img src="media/wf.jpg">  我一样重要</p><p>行内元素的特点：</p><p>（1）和相邻行内元素在一行上。</p><p>（2）高、宽无效，但水平方向的padding和margin可以设置，垂直方向的无效。</p><p>（3）默认宽度就是它本身内容的宽度。</p><p>（4）行内元素只能容纳文本或则其他行内元素。（a特殊）</p><p>  <img src="media/w.jpg">    注意：</p><ol><li>只有 文字才 能组成段落  因此 p  里面不能放块级元素，同理还有这些标签h1,h2,h3,h4,h5,h6,dt，他们都是文字类块级标签，里面不能放其他块级元素。</li><li>链接里面不能再放链接。</li></ol><h2 id="块级元素和行内元素区别"><a href="#块级元素和行内元素区别" class="headerlink" title="块级元素和行内元素区别"></a>块级元素和行内元素区别</h2><pre><code>块级元素的特点：（1）总是从新行开始（2）高度，行高、外边距以及内边距都可以控制。（3）宽度默认是容器的100%（4）可以容纳内联元素和其他块元素。</code></pre><pre><code>行内元素的特点：（1）和相邻行内元素在一行上。（2）高、宽无效，但水平方向的padding和margin可以设置，垂直方向的无效。（3）默认宽度就是它本身内容的宽度。（4）行内元素只能容纳文本或则其他行内元素。</code></pre><h2 id="行内块元素（inline-block）"><a href="#行内块元素（inline-block）" class="headerlink" title="行内块元素（inline-block）"></a>行内块元素（inline-block）</h2><pre><code>在行内元素中有几个特殊的标签——&lt;img /&gt;、&lt;input /&gt;、&lt;td&gt;，可以对它们设置宽高和对齐属性，有些资料可能会称它们为行内块元素。行内块元素的特点：（1）和相邻行内元素（行内块）在一行上,但是之间会有空白缝隙。（2）默认宽度就是它本身内容的宽度。（3）高度，行高、外边距以及内边距都可以控制。</code></pre><img src="media/lyc.jpg" width="400"><h2 id="标签显示模式转换-display"><a href="#标签显示模式转换-display" class="headerlink" title="标签显示模式转换 display"></a>标签显示模式转换 display</h2><p>块转行内：display:inline;</p><p>行内转块：display:block;</p><p>块、行内元素转换为行内块： display: inline-block;</p><p>此阶段，我们只需关心这三个，其他的是我们后面的工作。</p><h1 id="CSS复合选择器"><a href="#CSS复合选择器" class="headerlink" title="CSS复合选择器"></a>CSS复合选择器</h1><p>复合选择器是由两个或多个基础选择器，通过不同的方式组合而成的,目的是为了可以选择更准确更精细的目标元素标签。</p><h2 id="交集选择器"><a href="#交集选择器" class="headerlink" title="交集选择器"></a>交集选择器</h2><p>交集选择器由两个选择器构成，其中第一个为标签选择器，第二个为class选择器，两个选择器之间不能有空格，如h3.special。</p><img src="media/jiao.png"><p><strong>记忆技巧：</strong></p><p>交集选择器 是 并且的意思。  即…又…的意思</p><pre><code>比如：   p.one   选择的是： 类名为 .one  的 段落标签。  </code></pre><p>用的相对来说比较少，不太建议使用。</p><h2 id="并集选择器"><a href="#并集选择器" class="headerlink" title="并集选择器"></a>并集选择器</h2><p>并集选择器（CSS选择器分组）是各个选择器通过<strong style="color:#f00">逗号</strong>连接而成的，任何形式的选择器（包括标签选择器、class类选择器id选择器等），都可以作为并集选择器的一部分。如果某些选择器定义的样式完全相同，或部分相同，就可以利用并集选择器为它们定义相同的CSS样式。</p><img src="media/bing.png"><p>记忆技巧：</p><p>并集选择器  和 的意思，  就是说，只要逗号隔开的，所有选择器都会执行后面样式。</p><pre><code>比如  .one, p , #test {color: #F00;}  表示   .one 和 p  和 #test 这三个选择器都会执行颜色为红色。  通常用于集体声明。</code></pre><p><img src="media/hu.gif">  他和他，在一起， 在一起    一起的意思</p><h2 id="后代选择器"><a href="#后代选择器" class="headerlink" title="后代选择器"></a>后代选择器</h2><p>后代选择器又称为包含选择器，用来选择元素或元素组的后代，其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔。当标签发生嵌套时，内层标签就成为外层标签的后代。</p><img src="media/hou.png"><p>子孙后代都可以这么选择。 或者说，它能选择任何包含在内 的标签。 </p><img src="media/li.png"><h2 id="子元素选择器"><a href="#子元素选择器" class="headerlink" title="子元素选择器"></a>子元素选择器</h2><p>子元素选择器只能选择作为某元素子元素的元素。其写法就是把父级标签写在前面，子级标签写在后面，中间跟一个 &gt; 进行连接，注意，符号左右两侧各保留一个空格。</p><img src="media/zi1.png"><p>白话：  这里的子 指的是 亲儿子  不包含孙子 重孙子之类。</p><pre><code> 比如：  .demo &gt; h3 {color: red;}   说明  h3 一定是demo 亲儿子。  demo 元素包含着h3。</code></pre><img src="media/san.jpg"><h2 id="测试题"><a href="#测试题" class="headerlink" title="测试题"></a>测试题</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nav<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 主导航栏 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>公司首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>公司简介<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>公司产品<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>联系我们<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>公司邮箱<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>公司电话<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sitenav<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 侧导航栏 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>site-l<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>左侧侧导航栏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>site-r<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>在不修改以上代码的前提下，完成以下任务：</p><ol><li><p>链接 登录 的颜色为红色,同时主导航栏里面的所有的链接改为蓝色     (简单)</p></li><li><p>主导航栏和侧导航栏里面文字都是14像素并且是微软雅黑。（中等)</p></li><li><p>主导航栏里面的一级菜单链接文字颜色为绿色。（难)</p></li></ol><h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><p>选取标签带有某些特殊属性的选择器 我们成为属性选择器</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 获取到 拥有 该属性的元素 */</span><span class="token selector">div<span class="token attribute">[class^=font]</span> </span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/*  class^=font 表示 font 开始位置就行了 */</span>            <span class="token property">color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token selector">div<span class="token attribute">[class$=footer]</span> </span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/*  class$=footer 表示 footer 结束位置就行了 */</span>            <span class="token property">color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token selector">div<span class="token attribute">[class*=tao]</span> </span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* class*=tao  *=  表示tao 在任意位置都可以 */</span>            <span class="token property">color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>font12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>属性选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>font12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>属性选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>font24<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>属性选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>font24<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>属性选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>font24<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>属性选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>24font<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>属性选择器123<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sub-footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>属性选择器footer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jd-footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>属性选择器footer<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>news-tao-nav<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>属性选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>news-tao-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>属性选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tao-header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>属性选择器<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h2 id="伪元素选择器（CSS3"><a href="#伪元素选择器（CSS3" class="headerlink" title="伪元素选择器（CSS3)"></a>伪元素选择器（CSS3)</h2><ol><li>E::first-letter文本的第一个单词或字（如中文、日文、韩文等）</li><li>E::first-line 文本第一行；</li><li>E::selection 可改变选中文本的样式；</li></ol><pre class=" language-css"><code class="language-css"><span class="token selector">p<span class="token pseudo-element">::first-letter</span> </span><span class="token punctuation">{</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>  <span class="token property">color</span><span class="token punctuation">:</span> hotpink<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 首行特殊样式 */</span><span class="token selector">p<span class="token pseudo-element">::first-line</span> </span><span class="token punctuation">{</span>  <span class="token property">color</span><span class="token punctuation">:</span> skyblue<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">p<span class="token pseudo-element">::selection</span> </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* font-size: 50px; */</span>  <span class="token property">color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>4、E::before和E::after</p><p>在E元素内部的开始位置和结束位创建一个元素，该元素为行内元素，且必须要结合content属性使用。</p><pre class=" language-css"><code class="language-css"><span class="token selector">div<span class="token pseudo-element">::befor</span> </span><span class="token punctuation">{</span>  <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">"开始"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div<span class="token pseudo-element">::after</span> </span><span class="token punctuation">{</span>  <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">"结束"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>E:after、E:before 在旧版本里是伪元素，CSS3的规范里“:”用来表示伪类，“::”用来表示伪元素，但是在高版本浏览器下E:after、E:before会被自动识别为E::after、E::before，这样做的目的是用来做兼容处理。</p><p>E:after、E:before后面的练习中会反复用到，目前只需要有个大致了解</p><p>“:” 与 “::” 区别在于区分伪类和伪元素</p><h1 id="CSS书写规范"><a href="#CSS书写规范" class="headerlink" title="CSS书写规范"></a>CSS书写规范</h1><p>开始就形成良好的书写规范，是你专业化的开始。</p><h2 id="空格规范"><a href="#空格规范" class="headerlink" title="空格规范"></a>空格规范</h2><p>【强制】 选择器 与 { 之间必须包含空格。</p><p>示例： .selector { }</p><p>【强制】 属性名 与之后的 : 之间不允许包含空格， : 与 属性值 之间必须包含空格。</p><p>示例：</p><p>font-size: 12px;</p><h2 id="选择器规范"><a href="#选择器规范" class="headerlink" title="选择器规范"></a>选择器规范</h2><p>【强制】 当一个 rule 包含多个 selector 时，每个选择器声明必须独占一行。</p><p>示例：</p><pre><code>/* good */.post,.page,.comment {    line-height: 1.5;}/* bad */.post, .page, .comment {    line-height: 1.5;}</code></pre><p>【建议】 选择器的嵌套层级应不大于 3 级，位置靠后的限定条件应尽可能精确。</p><p>示例：</p><pre><code>/* good */#username input {}.comment .avatar {}/* bad */.page .header .login #username input {}.comment div * {}</code></pre><h2 id="属性规范"><a href="#属性规范" class="headerlink" title="属性规范"></a>属性规范</h2><p>【强制】 属性定义必须另起一行。</p><p>示例：</p><pre><code>/* good */.selector {    margin: 0;    padding: 0;}/* bad */.selector { margin: 0; padding: 0; }</code></pre><p>【强制】 属性定义后必须以分号结尾。</p><p>示例：</p><pre><code>/* good */.selector {    margin: 0;}/* bad */.selector {    margin: 0}</code></pre><h1 id="CSS-背景-background"><a href="#CSS-背景-background" class="headerlink" title="CSS 背景(background)"></a>CSS 背景(background)</h1><p>CSS 可以添加背景颜色和背景图片，以及来进行图片设置。</p><table><thead><tr><th>background-color</th><th>背景颜色</th></tr></thead><tbody><tr><td>background-image</td><td>背景图片地址</td></tr><tr><td>background-repeat</td><td>是否平铺</td></tr><tr><td>background-position</td><td>背景位置</td></tr><tr><td>background-attachment</td><td>背景固定还是滚动</td></tr><tr><td>背景的合写（复合属性）</td><td></td></tr><tr><td>background:背景颜色 背景图片地址 背景平铺 背景滚动 背景位置</td><td></td></tr></tbody></table><h2 id="背景图片-image"><a href="#背景图片-image" class="headerlink" title="背景图片(image)"></a>背景图片(image)</h2><p>语法： </p><pre class=" language-css"><code class="language-css"><span class="token property">background-image</span> <span class="token punctuation">:</span> none | url <span class="token punctuation">(</span>url<span class="token punctuation">)</span> </code></pre><p>参数： </p><p>none : 　无背景图（默认的）<br>url : 　使用绝对或相对地址指定背景图像 </p><p>background-image 属性允许指定一个图片展示在背景中（只有CSS3才可以多背景）可以和 background-color 连用。 如果图片不重复地话，图片覆盖不到地地方都会被背景色填充。 如果有背景图片平铺，则会覆盖背景颜色。</p><p>小技巧：  我们提倡 背景图片后面的地址，url不要加引号。</p><h2 id="背景平铺（repeat）"><a href="#背景平铺（repeat）" class="headerlink" title="背景平铺（repeat）"></a>背景平铺（repeat）</h2><p>语法： </p><pre class=" language-css"><code class="language-css"><span class="token property">background-repeat</span> <span class="token punctuation">:</span> repeat | no-repeat | repeat-x | repeat-y </code></pre><p>参数： </p><p>repeat : 　背景图像在纵向和横向上平铺（默认的）</p><p>no-repeat : 　背景图像不平铺</p><p>repeat-x : 　背景图像在横向上平铺</p><p>repeat-y : 　背景图像在纵向平铺 </p><p>设置背景图片时，默认把图片在水平和垂直方向平铺以铺满整个元素。</p><p>repeat-x : 　背景图像在横向上平铺  </p><p>repeat-y : 　背景图像在纵向平铺 </p><img src="media/y.png" width="600"><p>设置背景图片时，默认把图片在水平和垂直方向平铺以铺满整个元素。</p><img src="media/q.png" width="600"><h2 id="背景位置-position"><a href="#背景位置-position" class="headerlink" title="背景位置(position)"></a>背景位置(position)</h2><p>语法： </p><pre class=" language-css"><code class="language-css"><span class="token property">background-position</span> <span class="token punctuation">:</span> length || length<span class="token property">background-position</span> <span class="token punctuation">:</span> position || position </code></pre><p>参数： </p><p>length : 　百分数 | 由浮点数字和单位标识符组成的长度值。请参阅长度单位<br>position : 　top | center | bottom | left | center | right </p><p>说明： </p><p>设置或检索对象的背景图像位置。必须先指定background-image属性。默认值为：(0% 0%)。<br>如果只指定了一个值，该值将用于横坐标。纵坐标将默认为50%。第二个值将用于纵坐标。</p><p>注意：</p><ol><li>position 后面是x坐标和y坐标。 可以使用方位名词或者 精确单位。</li><li>如果和精确单位和方位名字混合使用，则必须是x坐标在前，y坐标后面。比如 background-position: 15px top;   则 15px 一定是  x坐标   top是 y坐标。</li></ol><p>实际工作用的最多的，就是背景图片居中对齐了。</p><h2 id="背景附着"><a href="#背景附着" class="headerlink" title="背景附着"></a>背景附着</h2><p>语法： </p><pre class=" language-css"><code class="language-css"><span class="token property">background-attachment</span> <span class="token punctuation">:</span> scroll | fixed </code></pre><p>参数： </p><p>scroll : 　背景图像是随对象内容滚动<br>fixed : 　背景图像固定 </p><p>说明： </p><p>设置或检索背景图像是随对象内容滚动还是固定的。</p><h2 id="背景简写"><a href="#背景简写" class="headerlink" title="背景简写"></a>背景简写</h2><p>background属性的值的书写顺序官方并没有强制标准的。为了可读性，建议大家如下写：</p><p>background:背景颜色 背景图片地址 背景平铺 背景滚动 背景位置</p><pre class=" language-css"><code class="language-css"><span class="token property">background</span><span class="token punctuation">:</span> transparent <span class="token url">url(image.jpg)</span> repeat-y  scroll <span class="token number">50%</span> <span class="token number">0</span> <span class="token punctuation">;</span></code></pre><h2 id="背景透明-CSS3"><a href="#背景透明-CSS3" class="headerlink" title="背景透明(CSS3)"></a>背景透明(CSS3)</h2><p>CSS3支持背景半透明的写法语法格式是:</p><pre class=" language-css"><code class="language-css"><span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">0.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p> 最后一个参数是alpha 透明度  取值范围 0~1之间</p><p> 注意：  背景半透明是指盒子背景半透明， 盒子里面的内容不收影响。</p><h2 id="背景缩放-CSS3"><a href="#背景缩放-CSS3" class="headerlink" title="背景缩放(CSS3)"></a>背景缩放(CSS3)</h2><p>通过background-size设置背景图片的尺寸，就像我们设置img的尺寸一样，在移动Web开发中做屏幕适配应用非常广泛。</p><p>其参数设置如下：</p><p>a) 可以设置长度单位(px)或百分比（设置百分比时，参照盒子的宽高）</p><p>b) 设置为cover时，会自动调整缩放比例，保证图片始终填充满背景区域，如有溢出部分则会被隐藏。我们平时用的cover 最多</p><p>c) 设置为contain会自动调整缩放比例，保证图片始终完整显示在背景区域。</p><pre class=" language-css"><code class="language-css"><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url('images/gyt.jpg')</span><span class="token punctuation">;</span>            <span class="token property">background-size</span><span class="token punctuation">:</span> <span class="token number">300</span>px <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* background-size: contain; */</span>            <span class="token comment" spellcheck="true">/* background-size: cover; */</span></code></pre><h2 id="多背景-CSS3"><a href="#多背景-CSS3" class="headerlink" title="多背景(CSS3)"></a>多背景(CSS3)</h2><p>以逗号分隔可以设置多背景，可用于自适应布局  做法就是 用逗号隔开就好了。</p><ul><li>一个元素可以设置多重背景图像。 </li><li>每组属性间使用逗号分隔。 </li><li>如果设置的多重背景图之间存在着交集（即存在着重叠关系），前面的背景图会覆盖在后面的背景图之上。</li><li>为了避免背景色将图像盖住，背景色通常都定义在最后一组上，</li></ul><pre class=" language-css"><code class="language-css"><span class="token property">background</span><span class="token punctuation">:</span><span class="token url">url(test1.jpg)</span> no-repeat scroll <span class="token number">10</span>px <span class="token number">20</span>px/<span class="token number">50</span>px <span class="token number">60</span>px  ,       <span class="token url">url(test1.jpg)</span> no-repeat scroll <span class="token number">10</span>px <span class="token number">20</span>px/<span class="token number">70</span>px <span class="token number">90</span>px ,       <span class="token url">url(test1.jpg)</span> no-repeat scroll <span class="token number">10</span>px <span class="token number">20</span>px/<span class="token number">110</span>px <span class="token number">130</span>px c <span class="token hexcode">#aaa</span><span class="token punctuation">;</span></code></pre><ul><li><h2 id="凹凸文字"><a href="#凹凸文字" class="headerlink" title="凹凸文字"></a>凹凸文字</h2></li></ul><pre class=" language-css"><code class="language-css"><span class="token selector">&lt;head>        &lt;meta charset="utf-8">        &lt;style>        body </span><span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">div </span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>            <span class="token property">font</span><span class="token punctuation">:</span> <span class="token number">700</span> <span class="token number">80</span>px <span class="token string">"微软雅黑"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">div<span class="token pseudo-class">:first-child</span> </span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* text-shadow: 水平位置  垂直位置  模糊距离 阴影颜色; */</span>            <span class="token property">text-shadow</span><span class="token punctuation">:</span> <span class="token number">1</span>px <span class="token number">1</span>px <span class="token number">1</span>px <span class="token hexcode">#000</span>, -<span class="token number">1</span>px -<span class="token number">1</span>px <span class="token number">1</span>px <span class="token hexcode">#fff</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">div<span class="token pseudo-class">:last-child</span> </span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* text-shadow: 水平位置  垂直位置  模糊距离 阴影颜色; */</span>            <span class="token property">text-shadow</span><span class="token punctuation">:</span> -<span class="token number">1</span>px -<span class="token number">1</span>px <span class="token number">1</span>px <span class="token hexcode">#000</span>, <span class="token number">1</span>px <span class="token number">1</span>px <span class="token number">1</span>px <span class="token hexcode">#fff</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        &lt;/style>    &lt;/head>    &lt;body>    &lt;div>我是凸起的文字&lt;/div>    &lt;div>我是凹下的文字&lt;/div>    &lt;/body></code></pre><p><img src="media/1498467533412.png" alt="1498467533412"></p><h2 id="导航栏案例"><a href="#导航栏案例" class="headerlink" title="导航栏案例"></a>导航栏案例</h2><h3 id="文本的装饰"><a href="#文本的装饰" class="headerlink" title="文本的装饰"></a>文本的装饰</h3><p>text-decoration   通常我们用于给链接修改装饰效果</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>默认。定义标准的文本。</td></tr><tr><td>underline</td><td>定义文本下的一条线。下划线 也是我们链接自带的</td></tr><tr><td>overline</td><td>定义文本上的一条线。</td></tr><tr><td>line-through</td><td>定义穿过文本下的一条线。</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><p><strong>使用技巧</strong>：在一行内的盒子内，我们设定行高等于盒子的高度，就可以使文字垂直居中。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">body </span><span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#000</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">a </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* background-color: orange; */</span>            <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 把a 行内元素转换为行内块元素 */</span>            <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 文字水平居中 */</span>            <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 我们设定行高等于盒子的高度，就可以使文字垂直居中 */</span>            <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span><span class="token punctuation">;</span>            <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">22</span>px<span class="token punctuation">;</span>            <span class="token property">text-decoration</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 取消下划线 文本装饰 */</span>        <span class="token punctuation">}</span>        <span class="token selector">a<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* 鼠标经过 给我们的链接添加背景图片*/</span>            <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url(images/h.png)</span> no-repeat<span class="token punctuation">;</span>         <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>专区说明<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>申请资格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>兑换奖励<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>下载游戏<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h1 id="CSS-三大特性"><a href="#CSS-三大特性" class="headerlink" title="CSS 三大特性"></a>CSS 三大特性</h1><p>层叠 继承  优先级 是我们学习CSS 必须掌握的三个特性。</p><h2 id="CSS层叠性"><a href="#CSS层叠性" class="headerlink" title="CSS层叠性"></a>CSS层叠性</h2><p>所谓层叠性是指多种CSS样式的叠加。</p><p>是浏览器处理冲突的一个能力,如果一个属性通过两个相同选择器设置到同一个元素上，那么这个时候一个属性就会将另一个属性层叠掉</p><p>比如先给某个标签指定了内部文字颜色为红色，接着又指定了颜色为蓝色，此时出现一个标签指定了相同样式不同值的情况，这就是样式冲突。</p><p>一般情况下，如果出现样式冲突，则会按照CSS书写的顺序，以最后的样式为准。</p><ol><li>样式冲突，遵循的原则是就近原则。 那个样式离着结构近，就执行那个样式。</li><li>样式不冲突，不会层叠</li></ol><pre><code>CSS最后的执行口诀：  长江后浪推前浪，前浪死在沙滩上。</code></pre><img src="media/hai.gif" width="600" height="400"><h2 id="CSS继承性"><a href="#CSS继承性" class="headerlink" title="CSS继承性"></a>CSS继承性</h2><p>所谓继承性是指书写CSS样式表时，子标签会继承父标签的某些样式，如文本颜色和字号。想要设置一个可继承的属性，只需将它应用于父元素即可。</p><p>简单的理解就是：  子承父业。</p><pre><code>CSS最后的执行口诀：  龙生龙，凤生凤，老鼠生的孩子会打洞。</code></pre><img src="media/shu.gif"><p>注意：</p><pre><code>恰当地使用继承可以简化代码，降低CSS样式的复杂性。子元素可以继承父元素的样式（text-，font-，line-这些元素开头的都可以继承，以及color属性）</code></pre><h2 id="CSS优先级"><a href="#CSS优先级" class="headerlink" title="CSS优先级"></a>CSS优先级</h2><p>定义CSS样式时，经常出现两个或更多规则应用在同一元素上，这时就会出现优先级的问题。</p><p>在考虑权重时，初学者还需要注意一些特殊的情况，具体如下：</p><pre><code>继承样式的权重为0。即在嵌套结构中，不管父元素样式的权重多大，被子元素继承时，他的权重都为0，也就是说子元素定义的样式会覆盖继承来的样式。行内样式优先。应用style属性的元素，其行内样式的权重非常高，可以理解为远大于100。总之，他拥有比上面提高的选择器都大的优先级。权重相同时，CSS遵循就近原则。也就是说靠近元素的样式具有最大的优先级，或者说排在最后的样式优先级最大。CSS定义了一个!important命令，该命令被赋予最大的优先级。也就是说不管权重如何以及样式位置的远近，!important都具有最大优先级。</code></pre><h3 id="CSS特殊性（Specificity）"><a href="#CSS特殊性（Specificity）" class="headerlink" title="CSS特殊性（Specificity）"></a>CSS特殊性（Specificity）</h3><p>关于CSS权重，我们需要一套计算公式来去计算，这个就是 CSS Specificity，我们称为CSS 特性或称非凡性，它是一个衡量CSS值优先级的一个标准 具体规范入如下：</p><p>specificity用一个四位的数 字串(CSS2是三位)来表示，更像四个级别，值从左到右，左面的最大，一级大于一级，数位之间没有进制，级别之间不可超越。 </p><table><thead><tr><th>继承或者* 的贡献值</th><th>0,0,0,0</th></tr></thead><tbody><tr><td>每个元素（标签）贡献值为</td><td>0,0,0,1</td></tr><tr><td>每个类，伪类贡献值为</td><td>0,0,1,0</td></tr><tr><td>每个ID贡献值为</td><td>0,1,0,0</td></tr><tr><td>每个行内样式贡献值</td><td>1,0,0,0</td></tr><tr><td>每个!important贡献值</td><td>∞ 无穷大</td></tr></tbody></table><p>权重是可以叠加的</p><p> 比如的例子：</p><pre><code>div ul  li   ------&gt;      0,0,0,3.nav ul li   ------&gt;      0,0,1,2a:hover      -----—&gt;      0,0,1,1.nav a       ------&gt;      0,0,1,1   #nav p       ------&gt;      0,1,0,1</code></pre><p> <img src="media/w.jpg"> 注意： </p><p>1.数位之间没有进制 比如说： 0,0,0,5 + 0,0,0,5 =0,0,0,10 而不是 0,0, 1, 0， 所以不会存在10个div能赶上一个类选择器的情况。</p><ol start="2"><li>继承的 权重是 0</li></ol><p>总结优先级：</p><ol><li>使用了 !important声明的规则。</li><li>内嵌在 HTML 元素的 style属性里面的声明。</li><li>使用了 ID 选择器的规则。</li><li>使用了类选择器、属性选择器、伪元素和伪类选择器的规则。</li><li>使用了元素选择器的规则。</li><li>只包含一个通用选择器的规则。</li><li>同一类选择器则遵循就近原则。</li></ol><pre><code>总结：权重是优先级的算法，层叠是优先级的表现</code></pre><h1 id="盒子模型（CSS重点）"><a href="#盒子模型（CSS重点）" class="headerlink" title="盒子模型（CSS重点）"></a>盒子模型（CSS重点）</h1><p>其实，CSS就三个大模块：  盒子模型 、 浮动 、 定位，其余的都是细节。要求这三部分，无论如何也要学的非常精通。  </p><p>所谓盒子模型就是把HTML页面中的元素看作是一个矩形的盒子，也就是一个盛装内容的容器。每个矩形都由元素的内容、内边距（padding）、边框（border）和外边距（margin）组成。</p><h2 id="看透网页布局的本质"><a href="#看透网页布局的本质" class="headerlink" title="看透网页布局的本质"></a>看透网页布局的本质</h2><p>网页布局中，我们是如何把里面的文字，图片，按照美工给我们的效果图排列的整齐有序呢？</p><img src="media/t.png"><p>牛奶是怎样运输，让消费者购买的呢？</p><img src="media/m.jpg"><p>我们说过，行内元素比如 文字 类似牛奶，也需要一个盒子把他们装起来，我们前面学过的双标签都是一个盒子。有了盒子，我们就可以随意的，自由的，摆放位置了。</p><p>看透网页布局的本质：  把网页元素比如文字图片等等，放入盒子里面，然后利用CSS摆放盒子的过程，就是网页布局。</p><img src="media/t1.png"><p>CSS 其实没有太多逻辑可言 ， 类似我们小时候玩的积木,我们可以自由的，随意的摆放出我们想要的效果。</p><img src="media/j.jpg" width="300"><h2 id="盒子模型（Box-Model）"><a href="#盒子模型（Box-Model）" class="headerlink" title="盒子模型（Box Model）"></a>盒子模型（Box Model）</h2><p>这里略过 老旧的ie盒子模型（IE6以下），对不起，我都没见过IE5的浏览器。 </p><img src="media/d.jpg"><p>。首先，我们来看一张图，来体会下什么是盒子模型。</p><img src="media/box.png" width="700"><p>所有的文档元素（标签）都会生成一个矩形框，我们成为元素框（element box），它描述了一个文档元素再网页布局汇总所占的位置大小。因此，<strong style="color: #f00;">每个盒子除了有自己大小和位置外，还影响着其他盒子的大小和位置。</strong></p><img src="media/boxs.png" width="700"><h2 id="盒子边框（border）"><a href="#盒子边框（border）" class="headerlink" title="盒子边框（border）"></a>盒子边框（border）</h2><p>边框就是那层皮。  橘子皮。。柚子皮。。橙子皮。。。</p><p>语法： </p><pre class=" language-css"><code class="language-css"><span class="token property">border</span> <span class="token punctuation">:</span> border-width || border-style || border-color </code></pre><p>边框属性—设置边框样式（border-style）</p><p>边框样式用于定义页面中边框的风格，常用属性值如下：</p><pre><code>none：没有边框即忽略所有边框的宽度（默认值）solid：边框为单实线(最为常用的)dashed：边框为虚线  dotted：边框为点线double：边框为双实线</code></pre><h3 id="盒子边框写法总结表"><a href="#盒子边框写法总结表" class="headerlink" title="盒子边框写法总结表"></a>盒子边框写法总结表</h3><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td>设置内容</td><td>样式属性</td><td>常用属性值</td></tr><tr><td>上边框</td><td>border-top-style:样式; border-top-width:宽度;border-top-color:颜色;border-top:宽度 样式 颜色;</td><td></td></tr><tr><td>下边框</td><td>border-bottom-style:样式;border- bottom-width:宽度;border- bottom-color:颜色;border-bottom:宽度 样式 颜色;</td><td></td></tr><tr><td>左边框</td><td>border-left-style:样式; border-left-width:宽度;border-left-color:颜色;border-left:宽度 样式 颜色;</td><td></td></tr><tr><td>右边框</td><td>border-right-style:样式;border-right-width:宽度;border-right-color:颜色;border-right:宽度 样式 颜色;</td><td></td></tr><tr><td>样式综合设置</td><td>border-style:上边 [右边 下边 左边];</td><td>none无（默认）、solid单实线、dashed虚线、dotted点线、double双实线</td></tr><tr><td>宽度综合设置</td><td>border-width:上边 [右边 下边 左边];</td><td>像素值</td></tr><tr><td>颜色综合设置</td><td>border-color:上边 [右边 下边 左边];</td><td>颜色值、#十六进制、rgb(r,g,b)、rgb(r%,g%,b%)</td></tr><tr><td>边框综合设置</td><td>border:四边宽度 四边样式 四边颜色;</td><td></td></tr></tbody></table><h3 id="表格的细线边框"><a href="#表格的细线边框" class="headerlink" title="表格的细线边框"></a>表格的细线边框</h3><p>以前学过的html表格边框很粗，这里只需要CSS一句话就可以美观起来。 让我们真的相信，CSS就是我们的白马王子（白雪公主）。</p><p>table{ border-collapse:collapse; }  collapse 单词是合并的意思</p><p>border-collapse:collapse; 表示边框合并在一起。</p><h3 id="圆角边框-CSS3"><a href="#圆角边框-CSS3" class="headerlink" title="圆角边框(CSS3)"></a>圆角边框(CSS3)</h3><p>从此以后，我们的世界不只有矩形。radius 半径（距离）</p><p>语法格式：</p><pre class=" language-css"><code class="language-css"><span class="token property">border-radius</span><span class="token punctuation">:</span> 左上角  右上角  右下角  左下角<span class="token punctuation">;</span></code></pre><p>课堂案例:</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">div </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid red<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">div<span class="token pseudo-class">:first-child</span> </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* 结构伪类选择器 选亲兄弟 */</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*  一个数值表示4个角都是相同的 10px 的弧度 */</span>         <span class="token punctuation">}</span>        <span class="token selector">div<span class="token pseudo-class">:nth-child(2)</span> </span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/*border-radius: 100px;    取宽度和高度 一半  则会变成一个圆形 */</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/*  100px   50% 取宽度和高度 一半  则会变成一个圆形 */</span>        <span class="token punctuation">}</span>        <span class="token selector">div<span class="token pseudo-class">:nth-child(3)</span> </span><span class="token punctuation">{</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px <span class="token number">40</span>px<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 左上角  和 右下角  是 10px  右上角 左下角 40 对角线 */</span>        <span class="token punctuation">}</span>        <span class="token selector">div<span class="token pseudo-class">:nth-child(4)</span> </span><span class="token punctuation">{</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px <span class="token number">40</span>px  <span class="token number">80</span>px<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 左上角 10    右上角  左下角 40   右下角80 */</span>        <span class="token punctuation">}</span>        <span class="token selector">div<span class="token pseudo-class">:nth-child(5)</span> </span><span class="token punctuation">{</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px <span class="token number">40</span>px  <span class="token number">80</span>px  <span class="token number">100</span>px<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* 左上角 10    右上角 40  右下角 80   左下角   右下角100 */</span>        <span class="token punctuation">}</span>        <span class="token selector">div<span class="token pseudo-class">:nth-child(6)</span> </span><span class="token punctuation">{</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>              <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token selector">div<span class="token pseudo-class">:nth-child(7)</span> </span><span class="token punctuation">{</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">100</span>px <span class="token number">0</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h2 id="内边距（padding）"><a href="#内边距（padding）" class="headerlink" title="内边距（padding）"></a>内边距（padding）</h2><p>padding属性用于设置内边距。  是指 边框与内容之间的距离。</p><p>padding-top:上内边距</p><p>padding-right:右内边距</p><p>padding-bottom:下内边距</p><p>padding-left:左内边距</p><p> <img src="media/w.jpg">注意：  后面跟几个数值表示的意思是不一样的。</p><table><thead><tr><th>值的个数</th><th>表达意思</th></tr></thead><tbody><tr><td>1个值</td><td>padding：上下左右边距 比如padding: 3px; 表示上下左右都是3像素</td></tr><tr><td>2个值</td><td>padding: 上下边距 左右边距 比如 padding: 3px 5px; 表示 上下3像素 左右 5像素</td></tr><tr><td>3个值</td><td>padding：上边距 左右边距 下边距 比如 padding: 3px 5px 10px; 表示 上是3像素 左右是5像素 下是10像素</td></tr><tr><td>4个值</td><td>padding:上内边距 右内边距 下内边距 左内边距 比如: padding: 3px 5px 10px 15px; 表示 上3px 右是5px 下 10px 左15px 顺时针</td></tr></tbody></table><p>课堂案例：  新浪导航</p><img src="media/al.gif"><h2 id="外边距（margin）"><a href="#外边距（margin）" class="headerlink" title="外边距（margin）"></a>外边距（margin）</h2><p>margin属性用于设置外边距。  设置外边距会在元素之间创建“空白”， 这段空白通常不能放置其他内容。</p><p>margin-top:上外边距</p><p>margin-right:右外边距</p><p>margin-bottom:下外边距</p><p>margin-left:上外边距</p><p>margin:上外边距 右外边距  下外边距  左外边</p><p>取值顺序跟内边距相同。</p><h3 id="外边距实现盒子居中"><a href="#外边距实现盒子居中" class="headerlink" title="外边距实现盒子居中"></a>外边距实现盒子居中</h3><p>可以让一个盒子实现水平居中，需要满足一下两个条件：</p><ol><li>必须是块级元素。     </li><li>盒子必须指定了宽度（width）</li></ol><p>然后就给<strong>左右的外边距都设置为auto</strong>，就可使块级元素水平居中。</p><p>实际工作中常用这种方式进行网页布局，示例代码如下：</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.header</span></span><span class="token punctuation">{</span> <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">960</span>px<span class="token punctuation">;</span> <span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">0</span> auto<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="文字盒子居中图片和背景区别"><a href="#文字盒子居中图片和背景区别" class="headerlink" title="文字盒子居中图片和背景区别"></a>文字盒子居中图片和背景区别</h3><ol><li>文字水平居中是  text-align: center</li><li>盒子水平居中  左右margin 改为 auto </li></ol><pre class=" language-css"><code class="language-css"><span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*  文字居中水平 */</span><span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">10</span>px auto<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 盒子水平居中  左右margin 改为 auto 就阔以了 */</span></code></pre><ol start="3"><li>插入图片 我们用的最多 比如产品展示类</li><li>背景图片我们一般用于小图标背景 或者 超大背景图片</li></ol><pre class=" language-css"><code class="language-css"><span class="token selector">section img </span><span class="token punctuation">{</span>          <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 插入图片更改大小 width 和 height */</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">210</span>px<span class="token punctuation">;</span>        <span class="token property">margin-top</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 插入图片更改位置 可以用margin 或padding  盒模型 */</span>        <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 插入当图片也是一个盒子 */</span>    <span class="token punctuation">}</span><span class="token selector">aside </span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>        <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid purple<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#fff</span> <span class="token url">url(images/sun.jpg)</span> no-repeat<span class="token punctuation">;</span>        <span class="token property">background-size</span><span class="token punctuation">:</span> <span class="token number">200</span>px <span class="token number">210</span>px<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*  背景图片更改大小只能用 background-size */</span>        <span class="token property">background-position</span><span class="token punctuation">:</span> <span class="token number">30</span>px <span class="token number">50</span>px<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 背景图片更该位置 我用 background-position */</span>    <span class="token punctuation">}</span></code></pre><h3 id="清除元素的默认内外边距"><a href="#清除元素的默认内外边距" class="headerlink" title="清除元素的默认内外边距"></a>清除元素的默认内外边距</h3><p>为了更方便地控制网页中的元素，制作网页时，可使用如下代码清除元素的默认内外边距： </p><pre class=" language-css"><code class="language-css"><span class="token selector">* </span><span class="token punctuation">{</span>   <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">/* 清除内边距 */</span>   <span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">/* 清除外边距 */</span><span class="token punctuation">}</span></code></pre><p>注意：  行内元素是只有左右外边距的，是没有上下外边距的。 内边距，在ie6等低版本浏览器也会有问题。</p><p>我们尽量不要给行内元素指定上下的内外边距就好了。</p><h2 id="外边距合并"><a href="#外边距合并" class="headerlink" title="外边距合并"></a>外边距合并</h2><p>使用margin定义块元素的垂直外边距时，可能会出现外边距的合并。</p><h3 id="相邻块元素垂直外边距的合并"><a href="#相邻块元素垂直外边距的合并" class="headerlink" title="相邻块元素垂直外边距的合并"></a>相邻块元素垂直外边距的合并</h3><p>当上下相邻的两个块元素相遇时，如果上面的元素有下外边距margin-bottom，下面的元素有上外边距margin-top，则他们之间的垂直间距不是margin-bottom与margin-top之和，而是两者中的较大者。这种现象被称为相邻块元素垂直外边距的合并（也称外边距塌陷）。</p><img src="media/www.png"><p>解决方案：  避免就好了。</p><h3 id="嵌套块元素垂直外边距的合并"><a href="#嵌套块元素垂直外边距的合并" class="headerlink" title="嵌套块元素垂直外边距的合并"></a>嵌套块元素垂直外边距的合并</h3><p>对于两个嵌套关系的块元素，如果父元素没有上内边距及边框，则父元素的上外边距会与子元素的上外边距发生合并，合并后的外边距为两者中的较大者，即使父元素的上外边距为0，也会发生合并。</p><img src="media/n.png"><p>解决方案：</p><ol><li>可以为父元素定义1像素的上边框或上内边距。<ol start="2"><li>可以为父元素添加overflow:hidden。</li></ol></li></ol><h2 id="content宽度和高度"><a href="#content宽度和高度" class="headerlink" title="content宽度和高度"></a>content宽度和高度</h2><p>使用宽度属性width和高度属性height可以对盒子的大小进行控制。</p><p>width和height的属性值可以为不同单位的数值或相对于父元素的百分比%，实际工作中最常用的是像素值。</p><p>大多数浏览器，如Firefox、IE6及以上版本都采用了W3C规范，符合CSS规范的盒子模型的总宽度和总高度的计算原则是：</p><pre><code>  /*外盒尺寸计算（元素空间尺寸）*/  Element空间高度 = content height + padding + border + margin  Element 空间宽度 = content width + padding + border + margin  /*内盒尺寸计算（元素实际大小）*/  Element Height = content height + padding + border （Height为内容高度）  Element Width = content width + padding + border （Width为内容宽度）</code></pre><p>注意：</p><p>1、宽度属性width和高度属性height仅适用于块级元素，对行内元素无效（ img 标签和 input除外）。</p><p>2、计算盒子模型的总高度时，还应考虑上下两个盒子垂直外边距合并的情况。</p><p>3、<strong>如果一个盒子没有给定宽度/高度或者继承父亲的宽度/高度，则padding 不会影响本盒子大小</strong>。</p><h2 id="盒子模型布局稳定性"><a href="#盒子模型布局稳定性" class="headerlink" title="盒子模型布局稳定性"></a>盒子模型布局稳定性</h2><p>开始学习盒子模型，同学们最大的困惑就是， 分不清内外边距的使用，什么情况下使用内边距，什么情况下使用外边距？</p><p>答案是：  其实他们大部分情况下是可以混用的。  就是说，你用内边距也可以，用外边距也可以。 你觉得哪个方便，就用哪个。</p><p>但是，总有一个最好用的吧，我们根据稳定性来分，建议如下：</p><p>按照 优先使用  宽度 （width）  其次 使用内边距（padding）    再次  外边距（margin）。   </p><pre><code>  width &gt;  padding  &gt;   margin   </code></pre><p>原因：</p><ol><li><p>margin 会有外边距合并 还有 ie6下面margin 加倍的bug（讨厌）所以最后使用。</p></li><li><p>padding  会影响盒子大小， 需要进行加减计算（麻烦） 其次使用。</p></li><li><p>width   没有问题（嗨皮）我们经常使用宽度剩余法 高度剩余法来做。</p></li></ol><h2 id="CSS3盒模型"><a href="#CSS3盒模型" class="headerlink" title="CSS3盒模型"></a>CSS3盒模型</h2><p>CSS3中可以通过box-sizing 来指定盒模型，即可指定为content-box、border-box，这样我们计算盒子大小的方式就发生了改变。</p><p>可以分成两种情况：</p><p>1、box-sizing: content-box  盒子大小为 width + padding + border   content-box:此值为其默认值，其让元素维持W3C的标准Box Mode</p><p>2、box-sizing: border-box  盒子大小为 width    就是说  padding 和 border 是包含到width里面的</p><p>注：上面的标注的width指的是CSS属性里设置的width: length，content的值是会自动调整的。</p><pre class=" language-css"><code class="language-css"><span class="token selector">div<span class="token pseudo-class">:first-child</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>             <span class="token property">box-sizing</span><span class="token punctuation">:</span> content-box<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/*  就是以前的标准盒模型  w3c */</span>            <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">15</span>px solid red<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* 盒子大小为 width + padding + border   content-box:此值为其默认值，其让元素维持W3C的标准Box Mode */</span>        <span class="token punctuation">}</span>        <span class="token selector">div<span class="token pseudo-class">:last-child</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> purple<span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>            <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">/* padding border  不撑开盒子 */</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">15</span>px solid red<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* margin: 10px; */</span>            <span class="token comment" spellcheck="true">/* 盒子大小为 width    就是说  padding 和 border 是包含到width里面的 */</span><span class="token punctuation">}</span></code></pre><h2 id="盒子阴影"><a href="#盒子阴影" class="headerlink" title="盒子阴影"></a>盒子阴影</h2><p>语法格式：</p><pre class=" language-css"><code class="language-css"><span class="token property">box-shadow</span><span class="token punctuation">:</span>水平阴影 垂直阴影 模糊距离 阴影尺寸 阴影颜色  内/外阴影；</code></pre><p><img src="media/1498467567011.png" alt="1498467567011"></p><ol><li>前两个属性是必须写的。其余的可以省略。</li><li>外阴影 (outset) 但是不能写    默认      想要内阴影  inset </li></ol><pre class=" language-css"><code class="language-css"><span class="token selector">div </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">10</span>px solid red<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* box-shadow: 5px 5px 3px 4px rgba(0, 0, 0, .4);  */</span>            <span class="token comment" spellcheck="true">/* box-shadow:水平位置 垂直位置 模糊距离 阴影尺寸（影子大小） 阴影颜色  内/外阴影； */</span>            <span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">15</span>px <span class="token number">30</span>px  <span class="token function">rgba</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">.4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="浮动-float"><a href="#浮动-float" class="headerlink" title="浮动(float)"></a>浮动(float)</h1><h2 id="普通流-normal-flow"><a href="#普通流-normal-flow" class="headerlink" title="普通流(normal flow)"></a>普通流(normal flow)</h2><p>这个单词很多人翻译为 文档流 ， 字面翻译  普通流 或者标准流都可以。</p><p>前面我们说过，网页布局的核心，就是用CSS来摆放盒子位置。如何把盒子摆放到合适的位置？  </p><p>CSS的定位机制有3种：普通流（标准流）、浮动和定位。</p><p>html语言当中另外一个相当重要的概念———-标准流！或者普通流。普通流实际上就是一个网页内标签元素正常从上到下，从左到右排列顺序的意思，比如块级元素会独占一行，行内元素会按顺序依次前后排列；按照这种大前提的布局排列之下绝对不会出现例外的情况叫做普通流布局。</p><img src="media/t.jpg"><h2 id="浮动-float-1"><a href="#浮动-float-1" class="headerlink" title="浮动(float)"></a>浮动(float)</h2><p>浮动最早是用来控制图片，以便达到其他元素（特别是文字）实现“环绕”图片的效果。</p><img src="media/l.png" style="width: 600px; border: 2px solid #000;"><p>后来，我们发现浮动有个很有意思的事情：就是让任何盒子可以一行排列,因此我们就慢慢的偏离主题，用浮动的特性来布局了。（CSS3已经我们真正意义上的网页布局，具体CSS3我们会详细解释）</p><img src="media/d.png"><h2 id="什么是浮动？"><a href="#什么是浮动？" class="headerlink" title="什么是浮动？"></a>什么是浮动？</h2><p>元素的浮动是指设置了浮动属性的元素会脱离标准普通流的控制，移动到其父元素中指定位置的过程。</p><p>在CSS中，通过float属性来定义浮动，其基本语法格式如下：</p><pre><code>选择器{float:属性值;}</code></pre><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>元素向左浮动</td></tr><tr><td>right</td><td>元素向右浮动</td></tr><tr><td>none</td><td>元素不浮动（默认值）</td></tr></tbody></table><h2 id="浮动详细内幕特性"><a href="#浮动详细内幕特性" class="headerlink" title="浮动详细内幕特性"></a>浮动详细内幕特性</h2><p>浮动脱离标准流，不占位置，会影响标准流。浮动只有左右浮动。</p><pre><code>浮动首先创建包含块的概念（包裹）。就是说， 浮动的元素总是找理它最近的父级元素对齐。但是不会超出内边距的范围。 </code></pre>   <img src="media/one.jpg" width="500"> <pre><code>浮动的元素排列位置，跟上一个元素（块级）有关系。如果上一个元素有浮动，则A元素顶部会和上一个元素的顶部对齐；如果上一个元素是标准流，则A元素的顶部会和上一个元素的底部对齐。</code></pre>  <img src="media/two.jpg" width="400"><pre><code>由2可以推断出，一个父盒子里面的子盒子，如果其中一个子级有浮动的，则其他子级都需要浮动。这样才能一行对齐显示。</code></pre><pre><code>元素添加浮动后，元素会具有行内块元素的特性。元素的大小完全取决于定义的大小或者默认的内容多少浮动根据元素书写的位置来显示相应的浮动。</code></pre><p>总结：  浮动 —&gt;    </p><p>浮动的目的就是为了让多个块级元素同一行上显示。</p><p>float      浮 漏 特   </p><p>浮：    加了浮动的元素盒子是浮起来的，漂浮在其他的标准流盒子上面。<br>漏：    加了浮动的盒子，不占位置的，它浮起来了，它原来的位置漏 给了标准流的盒子。<br>特：    特别注意，首先浮动的盒子需要和标准流的父级搭配使用， 其次 特别的注意浮动可以使元素显示模式体现为行内块特性。</p><h1 id="版心和布局流程"><a href="#版心和布局流程" class="headerlink" title="版心和布局流程"></a>版心和布局流程</h1><p>阅读报纸时容易发现，虽然报纸中的内容很多，但是经过合理地排版，版面依然清晰、易读。同样，在制作网页时，要想使页面结构清晰、有条理，也需要对网页进行“排版”。</p><p>“版心”(可视区) 是指网页中主体内容所在的区域。一般在浏览器窗口中水平居中显示，常见的宽度值为960px、980px、1000px、1200px等。</p><h2 id="布局流程"><a href="#布局流程" class="headerlink" title="布局流程"></a>布局流程</h2><p>为了提高网页制作的效率，布局时通常需要遵守一定的布局流程，具体如下：</p><p>1、确定页面的版心（可视区）。</p><p>2、分析页面中的行模块，以及每个行模块中的列模块。</p><p>3、制作HTML结构 。</p><p>4、CSS初始化，然后开始运用盒子模型的原理，通过DIV+CSS布局来控制网页的各个模块。</p><h2 id="一列固定宽度且居中"><a href="#一列固定宽度且居中" class="headerlink" title="一列固定宽度且居中"></a>一列固定宽度且居中</h2><img src="media/yl.jpg" width="400"><p>最普通的，最为常用的结构</p><h2 id="两列左窄右宽型"><a href="#两列左窄右宽型" class="headerlink" title="两列左窄右宽型"></a>两列左窄右宽型</h2><img src="media/ll.jpg" width="400"><p>比如小米    <a href="http://www.mi.com" target="_blank"> 小米官网 </a></p><h2 id="通栏平均分布型"><a href="#通栏平均分布型" class="headerlink" title="通栏平均分布型"></a>通栏平均分布型</h2><img src="media/tl.jpg" width="600"><p>比如锤子    <a href="http://www.smartisan.com/" target="_blank"> 锤子官网 </a></p><h1 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h1><p>人生就像乘坐北京地铁一号线：</p><p>途经国贸，羡慕繁华；</p><p>途经天安门，幻想权力；</p><p>途经金融街，梦想发财；</p><p>经过公主坟，遥想华丽家族；</p><p>经过玉泉路，依然雄心勃勃…</p><p>这时，有个声音飘然入耳:乘客你好,八宝山马上就要到了！</p><p>顿时醒悟：人生苦短，有始有终。 </p><p>好比我们的浮动，有浮动开始，则就应该有浮动结束。</p><h2 id="为什么要清除浮动"><a href="#为什么要清除浮动" class="headerlink" title="为什么要清除浮动"></a>为什么要清除浮动</h2><p>我们前面说过，浮动本质是用来做一些文字混排效果的，但是被我们拿来做布局用，则会有很多的问题出现， 但是，你不能说浮动不好 <img src="media/wq.jpg" height="100">。  </p><p>由于浮动元素不再占用原文档流的位置，所以它会对后面的元素排版产生影响，为了解决这些问题，此时就需要在该元素中清除浮动。</p><p>准确地说，并不是清除浮动，而是<strong>清除浮动后造成的影响</strong></p><p>如果浮动一开始就是一个美丽的错误，那么请用正确的方法挽救它。</p><h2 id="清除浮动本质"><a href="#清除浮动本质" class="headerlink" title="清除浮动本质"></a>清除浮动本质</h2><p>清除浮动主要为了解决父级元素因为子级浮动引起内部高度为0 的问题。</p><img src="media/n.jpg"><img src="media/no.jpg"><img src="media/kc.jpg"><h2 id="清除浮动的方法"><a href="#清除浮动的方法" class="headerlink" title="清除浮动的方法"></a>清除浮动的方法</h2><p>其实本质叫做闭合浮动更好一些, 记住，清除浮动就是把浮动的盒子圈到里面，让父盒子闭合出口和入口不让他们出来影响其他元素。</p><p>在CSS中，clear属性用于清除浮动，其基本语法格式如下：</p><pre><code>选择器{clear:属性值;}</code></pre><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>不允许左侧有浮动元素（清除左侧浮动的影响）</td></tr><tr><td>right</td><td>不允许右侧有浮动元素（清除右侧浮动的影响）</td></tr><tr><td>both</td><td>同时清除左右两侧浮动的影响</td></tr></tbody></table><h3 id="额外标签法"><a href="#额外标签法" class="headerlink" title="额外标签法"></a>额外标签法</h3><pre class=" language-html"><code class="language-html">是W3C推荐的做法是通过在浮动元素末尾添加一个空的标签例如 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation">=</span>”clear:both”</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>，或则其他标签br等亦可。</code></pre><p>优点： 通俗易懂，书写方便</p><p>缺点： 添加许多无意义的标签，结构化较差。  我只能说，w3c你推荐的方法我不接受，你不值得拥有。。。</p><h3 id="父级添加overflow属性方法"><a href="#父级添加overflow属性方法" class="headerlink" title="父级添加overflow属性方法"></a>父级添加overflow属性方法</h3><p>可以通过触发BFC的方式，可以实现清除浮动效果。（BFC后面讲解）</p><pre class=" language-css"><code class="language-css">可以给父级添加： overflow为 hidden|auto|scroll  都可以实现。</code></pre><p>优点：  代码简洁</p><p>缺点：  内容增多时候容易造成不会自动换行导致内容被隐藏掉，无法显示需要溢出的元素。</p><h3 id="使用after伪元素清除浮动"><a href="#使用after伪元素清除浮动" class="headerlink" title="使用after伪元素清除浮动"></a>使用after伪元素清除浮动</h3><p><strong>:after 方式为空元素的升级版，好处是不用单独加标签了</strong> </p><p>使用方法：</p><pre class=" language-css"><code class="language-css"> <span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"."</span><span class="token punctuation">;</span> <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span> <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.clearfix</span> </span><span class="token punctuation">{</span>*<span class="token property">zoom</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>   <span class="token comment" spellcheck="true">/* IE6、7 专有 */</span></code></pre><p>优点： 符合闭合浮动思想  结构语义化正确</p><p>缺点： 由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。</p><p>代表网站： 百度、淘宝网、网易等</p><img src="media/163.png" style="border: 1px dashed #3c3c3c;"><p>注意： content:”.”  里面尽量跟一个小点，或者其他，尽量不要为空，否则再firefox 7.0前的版本会有生成空格。</p><h3 id="使用before和after双伪元素清除浮动"><a href="#使用before和after双伪元素清除浮动" class="headerlink" title="使用before和after双伪元素清除浮动"></a>使用before和after双伪元素清除浮动</h3><p>使用方法：</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">:before</span>,<span class="token class">.clearfix</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>   <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">;</span>  <span class="token property">display</span><span class="token punctuation">:</span>table<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 这句话可以出发BFC BFC可以清除浮动,BFC我们后面讲 */</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span> <span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.clearfix</span> </span><span class="token punctuation">{</span>  *<span class="token property">zoom</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>优点：  代码更简洁</p><p>缺点：  由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。</p><p>代表网站： 小米、腾讯等</p><h1 id="Photoshop图像处理专家"><a href="#Photoshop图像处理专家" class="headerlink" title="Photoshop图像处理专家"></a>Photoshop图像处理专家</h1><p><img src="media/1498465020015.png" alt="1498465020015"></p><p>PS 工具是我们使用频率比较高的软件之一， 我们学习PS目的不是为了设计海报做电商和UI的，而是要求：</p><ol><li>会简单的抠图</li><li>会简单的修改PSD效果图</li><li><strong>熟练的切图</strong></li><li>能和网站美工美眉有共同话题。。。。。</li></ol><h2 id="Photoshop基本使用"><a href="#Photoshop基本使用" class="headerlink" title="Photoshop基本使用"></a>Photoshop基本使用</h2><h2 id="PS界面组成："><a href="#PS界面组成：" class="headerlink" title="PS界面组成："></a>PS界面组成：</h2><p>菜单栏、选项栏、工具栏、浮动面板（拖拽名称，可单独操作面板）、绘图窗口、窗口菜单，可显示隐藏所有面板</p><p>工作区：（新建）</p><p>调整浮动面板</p><img src="media/jiemian.png"><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><p>文件下拉菜单：<br>​    1、新建      新建文档      CTRL+N</p><p>单位：像素   厘米   毫米</p><p>屏幕显示： 单位  像素      72像素/英寸    RGB颜色模式</p><img src="media/huabu.png"><p>2、关闭文档     CTRL+W </p><p>3、存储    CTRL+S    （替存）</p><p>4、存储为  CTRL+SHIFT+S    另存一份文件</p><img src="media/baocun.png"><p>5、格式：<br>​      .psd     PS源文件格式   图层、文字、样式等，可再次编辑<br>​      （给自己）<br>​      .jpg     有损压缩格式   （给客户）  品质  最高12</p><p>6、文件打开：<br>​      1）文件下拉菜单-打开（CTRL+O欧）</p><p>​      2）双击软件空白处也能打开</p><h2 id="移动工具-V"><a href="#移动工具-V" class="headerlink" title="移动工具 V"></a>移动工具 V</h2><p>1、不同文件之间拖拽图像。</p><h2 id="自由变形"><a href="#自由变形" class="headerlink" title="自由变形"></a>自由变形</h2><p>ctrl + T 可以改变图像的大小</p><img src="media/bianhuan.png"><p>按下enter 回车确认操作。</p><h2 id="图层操作-重点"><a href="#图层操作-重点" class="headerlink" title="图层操作(重点)"></a>图层操作(重点)</h2><p> 图层面板快捷键   F7  其实图层就是一张张透明的纸  可以实现叠加问题。</p><img src="media/tuceng.png"><p> 图层选择： 使用移动工具V </p><p> 1、图层缩览图判断</p><p> 2、按住CTRL,在目标图像上单击</p><p> 3、将光标放置在目标图像上右键，选择图层名称</p><p>图层面板中加选图层：</p><p>1、按SHIFT，单击另一目标图层     中间所有图层被选中</p><p>2、按CTRL，单击另一目标图层     只选中目标图层</p><p>复制图层：选中目标图层后（移动工具状态下）</p><p>   1、按ALT拖拽图像</p><p>   2、CTRL+J      （重合）</p><p>案例： 摆放一个自行车</p><img src="media/bike.jpg"><h2 id="图层编组"><a href="#图层编组" class="headerlink" title="图层编组"></a>图层编组</h2><p>选中目标图层，CTRL+G   </p><p>取消编组：CTRL+SHIFT+G</p><p>双击图层名称可重新命名</p><p>双击组名称，可命名组</p><p>  移动工具V选择组或图层时，需设置选项栏</p><p><img src="media/1498465862231.png" alt="1498465862231"></p><h2 id="图层上下位置移动"><a href="#图层上下位置移动" class="headerlink" title="图层上下位置移动"></a>图层上下位置移动</h2><p>1、选中目标图层，在图层面拖拽</p><p>2、CTRL+]    向上移动图层<br>​      CTRL+[    向下移动图层</p><p>3、CTRL+SHIFT+]   图层置顶<br>​      CTRL+SHIFT+[   图层置底</p><p>移动选区或图像时：</p><p>移动过程中，没释放鼠标，按住SHIFT，可同一水平线、同一垂线、45度移动。</p><p>ps中的撤销操作是：</p><p>ctrl+z  撤销一步</p><p>ctrl+alt+z  撤销多步</p><h2 id="图层合并"><a href="#图层合并" class="headerlink" title="图层合并"></a>图层合并</h2><p>ctrl+e 可以合并图层</p><img src="media/hebing.png"><h2 id="图层透明度"><a href="#图层透明度" class="headerlink" title="图层透明度"></a>图层透明度</h2><p>不透明度：设置图层的不透明程度    0%完全透明，不可见，100%完全不透明，真实可见</p><p>填充：与不透明度效果类似</p><p><img src="media/1498465905203.png" alt="1498465905203">)</p><p>键盘数字键，可快速设置透明度数值     </p><h2 id="矩形选区工具-M"><a href="#矩形选区工具-M" class="headerlink" title="矩形选区工具 M"></a>矩形选区工具 M</h2><p>用来选择某部分区域  我们成为选区工具 </p><img src="media/gongjuxiang.png"><p>取消选区：  ctrl+d </p><h2 id="颜色填充"><a href="#颜色填充" class="headerlink" title="颜色填充"></a>颜色填充</h2><img src="media/yanse1.png"><img src="media/yanse2.png"><img src="media/miqi.jpg"><h2 id="套索工具-L"><a href="#套索工具-L" class="headerlink" title="套索工具 L"></a>套索工具 L</h2><p>1、套索工具      L  在屏幕上拖拽鼠标左键，释放后生成选区</p><p>2、多边形套索    L  连续单击绘制多边形选区</p><p>​                  闭合方法：1、单击起始点  2、双击任意位置</p><p>​                  DELETE删除当前点</p><img src="media/shiboguan.jpg"><h2 id="磁性套索-L"><a href="#磁性套索-L" class="headerlink" title="磁性套索 L"></a>磁性套索 L</h2><p>L   在颜色交界的位置单击后拖动。单击起始点后，生成选区。      </p><img src="media/cixing.jpg"><h2 id="魔棒工具-W"><a href="#魔棒工具-W" class="headerlink" title="魔棒工具   W"></a>魔棒工具   W</h2><p>以单击位置为选择色，选择相似颜色生成选区。</p><p><img src="media/1498465928343.png" alt="1498465928343"> </p><p>容差：选择颜色的范围     容差小，颜色选择精确。    0-255</p><p>连续：勾选连续时，相连颜色生成选区。</p><p>​            不勾选，画面中所有相似颜色被选中生成选区。</p><p>按SHIFT在未生成选区位置单击，可选区相加。</p><p>选区反选：CTRL+SHIFT+I </p><h2 id="选区布尔运算"><a href="#选区布尔运算" class="headerlink" title="选区布尔运算"></a>选区布尔运算</h2><p><img src="media/1498465944087.png" alt="1498465944087"></p><p>选区面积大小的变化。</p><p>新选区：保持选中状态</p><p>添加到选区：相加运算（按住SHIFT再绘制选区）</p><p>从选区减去：相减（按住ALT再绘制选区）</p><p>与选区交叉：重合部分保留。（按住ALT+SHIFT再绘制选区）</p><p>梦幻星球</p><img src="media/chengshi.jpg"><h2 id="钢笔工具：-P"><a href="#钢笔工具：-P" class="headerlink" title="钢笔工具：   P"></a>钢笔工具：   P</h2><p>作用：绘制路径，生成选区，抠图。</p><p>组成;路径线和锚点</p><p>绘制路径后，CTRL+回车，生成选区。</p><p>路径类型：</p><p>直线型路径：连续单击</p><p>曲线型路径：第一点单击，第二点拖动鼠标。</p><img src="media/jiu.png"><h2 id="文字工具"><a href="#文字工具" class="headerlink" title="文字工具"></a>文字工具</h2><p>T  可以直接输入文字</p><h2 id="Photoshop-切图"><a href="#Photoshop-切图" class="headerlink" title="Photoshop 切图"></a>Photoshop 切图</h2><p>PS切图 可以 分为 手动 利用切片切图 以及 利用PS的插件快速切图</p><h3 id="切片工具"><a href="#切片工具" class="headerlink" title="切片工具"></a>切片工具</h3><p><img src="media/1498466173246.png" alt="1498466173246"></p><ol><li><p>利用切片工具手动划出</p></li><li><p>图层菜单—新建基于图层的切片</p></li><li><p>利用标尺   基于参考线的切片 （选择切片工具）</p></li></ol><p>   <img src="media/1498466734205.png" alt="1498466734205"></p><ol start="4"><li>先选个一个整个的切片，  切片选择工具– 属性面板中有 “划分”   –可以等分数平分切图</li></ol><p>导出切片： 文件– 存储为web设备所用格式</p><h3 id="辅助线和切片使用及清除"><a href="#辅助线和切片使用及清除" class="headerlink" title="辅助线和切片使用及清除"></a>辅助线和切片使用及清除</h3><p>视图菜单– 清除 辅助线/ 清除切片</p><h3 id="切图插件"><a href="#切图插件" class="headerlink" title="切图插件"></a>切图插件</h3><p>Cutterman是一款运行在photoshop中的插件，能够自动将你需要的图层进行输出， 以替代传统的手工 “导出web所用格式” 以及使用切片工具进行挨个切图的繁琐流程。 它支持各种各样的图片尺寸、格式、形态输出，方便你在pc、ios、Android等端上使用。 它不需要你记住一堆的语法、规则，纯点击操作，方便、快捷，易于上手。</p><p>官网: <a href="http://www.cutterman.cn/zh/cutterman" target="_blank" rel="noopener">http://www.cutterman.cn/zh/cutterman</a></p><p>注意： cutterman插件要求你的ps 必须是完整版，不能是绿色版，所以大家需要从新安装完整版本。</p><img src="media/sample1.gif"><h1 id="项目案例：-学成网"><a href="#项目案例：-学成网" class="headerlink" title="项目案例： 学成网"></a>项目案例： 学成网</h1><p>案例练习目的是总结以前的css和html</p><p>还有ps的使用。</p><p>制作步骤：</p><ol><li>准备相关文件。（内部样式表) html文件(index.html)   图片文件</li><li>准备CSS 初始化。 书写结构和样式</li><li>确定版心（是1200像素)和各个模块。</li></ol><h1 id="定位-position"><a href="#定位-position" class="headerlink" title="定位(position)"></a>定位(position)</h1><p>如果，说浮动， 关键在一个 “浮” 字上面， 那么 我们的定位，关键在于一个 “位” 上。</p><p>PS: 定位是我们CSS算是数一数二难点的了，但是，你务必要学好它，我们CSS离不开定位，特别是后面的js特效，天天和定位打交道。不要抵触它，反而要爱上它，它可以让我们工作更加轻松哦！</p><h2 id="为什么要用定位？"><a href="#为什么要用定位？" class="headerlink" title="为什么要用定位？"></a>为什么要用定位？</h2><p>那么定位，最长运用的场景再那里呢？   来看几幅图片，你一定会有感悟！</p><p>第一幅图， 小黄色块可以再图片上移动：</p><img src="media/1.gif" style="border: 1px dashed #3c3c3c;"><p>第二幅图， 左右箭头压住图片：</p><img src="media/2.gif" style="border: 1px dashed #3c3c3c;"><p>第三幅图,  hot 再盒子外面多出一块，更加突出：</p><img src="media/it.png" style="border: 1px dashed #3c3c3c;"><p>以上三个小地方，如果用标准流或者浮动，实现会比较复杂或者难以实现，此时我们用定位来做，just soso！</p><h2 id="元素的定位属性"><a href="#元素的定位属性" class="headerlink" title="元素的定位属性"></a>元素的定位属性</h2><p>元素的定位属性主要包括定位模式和边偏移两部分。</p><p>1、边偏移</p><table><thead><tr><th>边偏移属性</th><th>描述</th></tr></thead><tbody><tr><td>top</td><td>顶端偏移量，定义元素相对于其父元素上边线的距离</td></tr><tr><td>bottom</td><td>底部偏移量，定义元素相对于其父元素下边线的距离</td></tr><tr><td>left</td><td>左侧偏移量，定义元素相对于其父元素左边线的距离</td></tr><tr><td>right</td><td>右侧偏移量，定义元素相对于其父元素右边线的距离</td></tr></tbody></table><p>也就说，以后定位要和这边偏移搭配使用了， 比如 top: 100px;  left: 30px; 等等</p><p>2、定位模式(定位的分类)</p><p>在CSS中，position属性用于定义元素的定位模式，其基本语法格式如下：</p><p>选择器{position:属性值;}</p><p>position属性的常用值</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>static</td><td>自动定位（默认定位方式）</td></tr><tr><td>relative</td><td>相对定位，相对于其原文档流的位置进行定位</td></tr><tr><td>absolute</td><td>绝对定位，相对于其上一个已经定位的父元素进行定位</td></tr><tr><td>fixed</td><td>固定定位，相对于浏览器窗口进行定位</td></tr></tbody></table><h2 id="静态定位-static"><a href="#静态定位-static" class="headerlink" title="静态定位(static)"></a>静态定位(static)</h2><p>静态定位是所有元素的默认定位方式，当position属性的取值为static时，可以将元素定位于静态位置。 所谓静态位置就是各个元素在HTML文档流中默认的位置。</p><p>上面的话翻译成白话：  就是网页中所有元素都默认的是静态定位哦！ 其实就是标准流的特性。</p><p>在静态定位状态下，无法通过边偏移属性（top、bottom、left或right）来改变元素的位置。</p><p>PS： 静态定位其实没啥可说的。</p><h2 id="相对定位relative-自恋型"><a href="#相对定位relative-自恋型" class="headerlink" title="相对定位relative(自恋型)"></a>相对定位relative(自恋型)</h2><pre><code>小笑话： 刚刚看到一个超级超级帅的帅哥，看得我都忍不住想和他搞基了。世间怎会有如此之完美的男人。我和他就这样一动不动的对视着，就仿佛一见钟情。时间也在这一瞬间停止了。直到我的手麻了。才恋恋不舍的放下镜子。。。。</code></pre><img src="media/smail.gif" width="100"><p>相对定位是将元素相对于它在标准流中的位置进行定位，当position属性的取值为relative时，可以将元素定位于相对位置。</p><p>对元素设置相对定位后，可以通过边偏移属性改变元素的位置，但是它在文档流中的位置仍然保留。如下图所示，即是一个相对定位的效果展示：</p><img src="media/r.png"><p>注意：   </p><ol><li>相对定位最重要的一点是，它可以通过边偏移移动位置，但是原来的所占的位置，继续占有。</li><li>其次，每次移动的位置，是以自己的左上角为基点移动（相对于自己来移动位置）</li></ol><p>就是说，相对定位的盒子仍在标准流中，它后面的盒子仍以标准流方式对待它。（相对定位不脱标）</p><p>如果说浮动的主要目的是 让多个块级元素一行显示，那么定位的主要价值就是 移动位置， 让盒子到我们想要的位置上去。</p><h2 id="绝对定位absolute-拼爹型"><a href="#绝对定位absolute-拼爹型" class="headerlink" title="绝对定位absolute (拼爹型)"></a>绝对定位absolute (拼爹型)</h2><pre><code>小笑话：吃早饭时，老婆往儿子碗里放了两个煎蛋，儿子全给了我，还一本正经地说：“爸爸，多吃点，男人养家不容易。” &lt;br/&gt;我一阵感动，刚想夸他两句。 儿子接着说：“以后全靠你让我拼爹了！”</code></pre><img src="media/smail.gif" width="100"><p>[注意] 如果文档可滚动，绝对定位元素会随着它滚动，因为元素最终会相对于正常流的某一部分定位。</p><p>当position属性的取值为absolute时，可以将元素的定位模式设置为绝对定位。</p><p>注意：绝对定位最重要的一点是，它可以通过边偏移移动位置，但是它完全脱标，完全不占位置。</p><h3 id="父级没有定位"><a href="#父级没有定位" class="headerlink" title="父级没有定位"></a>父级没有定位</h3><p>若所有父元素都没有定位，以浏览器为准对齐(document文档)。</p><img src="media/ab.png"><h3 id="父级有定位"><a href="#父级有定位" class="headerlink" title="父级有定位"></a>父级有定位</h3><p>绝对定位是将元素依据最近的已经定位（绝对、固定或相对定位）的父元素（祖先）进行定位。 </p><img src="media/ab1.png"><h3 id="子绝父相"><a href="#子绝父相" class="headerlink" title="子绝父相"></a>子绝父相</h3><p>这个“子绝父相”太重要了，是我们学习定位的口诀，时时刻刻记住的。</p><p>这句话的意思是 子级是绝对定位的话， 父级要用相对定位。</p><p>首先， 我们说下， 绝对定位是将元素依据最近的已经定位绝对、固定或相对定位）的父元素（祖先）进行定位。</p><p>就是说， 子级是绝对定位，父亲只要是定位即可（不管父亲是绝对定位还是相对定位，甚至是固定定位都可以），就是说， 子绝父绝，子绝父相都是正确的。</p><p>但是，在我们网页布局的时候， 最常说的 子绝父相是怎么来的呢？ 请看如下图：</p><img src="media/zi.png" style="border: 1px dashed #3c3c3c;"><p>所以，我们可以得出如下结论：</p><p>因为子级是绝对定位，不会占有位置， 可以放到父盒子里面的任何一个地方。</p><p>父盒子布局时，需要占有位置，因此父亲只能是 相对定位. </p><p>这就是子绝父相的由来。</p><h2 id="绝对定位的盒子水平-垂直居中"><a href="#绝对定位的盒子水平-垂直居中" class="headerlink" title="绝对定位的盒子水平/垂直居中"></a>绝对定位的盒子水平/垂直居中</h2><p>普通的盒子是左右margin 改为 auto就可， 但是对于绝对定位就无效了</p><p>定位的盒子也可以水平或者垂直居中，有一个算法。</p><ol><li><p>首先left 50%   父盒子的一半大小</p></li><li><p>然后走自己外边距负的一半值就可以了 margin-left。</p></li></ol><h2 id="固定定位fixed-认死理型"><a href="#固定定位fixed-认死理型" class="headerlink" title="固定定位fixed(认死理型)"></a>固定定位fixed(认死理型)</h2><p>固定定位是绝对定位的一种特殊形式，类似于 正方形是一个特殊的 矩形。它以浏览器窗口作为参照物来定义网页元素。当position属性的取值为fixed时，即可将元素的定位模式设置为固定定位。</p><p>当对元素设置固定定位后，它将脱离标准文档流的控制，始终依据浏览器窗口来定义自己的显示位置。不管浏览器滚动条如何滚动也不管浏览器窗口的大小如何变化，该元素都会始终显示在浏览器窗口的固定位置。</p><p>固定定位有两点：</p><ol><li>固定定位的元素跟父亲没有任何关系，只认浏览器。</li><li>固定定位完全脱标，不占有位置，不随着滚动条滚动。</li></ol><p>记忆法：  就类似于孙猴子， 无父无母，好不容易找到一个可靠的师傅（浏览器），就听的师傅的，别的都不听。</p><img src="media/sun.jpg" width="100"><p>ie6等低版本浏览器不支持固定定位。</p><h2 id="叠放次序（z-index）"><a href="#叠放次序（z-index）" class="headerlink" title="叠放次序（z-index）"></a>叠放次序（z-index）</h2><p>当对多个元素同时设置定位时，定位元素之间有可能会发生重叠。</p><img src="media/zzz.png"><p>在CSS中，要想调整重叠定位元素的堆叠顺序，可以对定位元素应用z-index层叠等级属性，其取值可为正整数、负整数和0。</p><p>比如：  z-index: 2;</p><p>注意：</p><ol><li><p>z-index的默认属性值是0，取值越大，定位元素在层叠元素中越居上。</p></li><li><p>如果取值相同，则根据书写顺序，后来居上。</p></li><li><p>后面数字一定不能加单位。</p></li><li><p>只有相对定位，绝对定位，固定定位有此属性，其余标准流，浮动，静态定位都无此属性，亦不可指定此属性。</p></li></ol><h1 id="四种定位总结"><a href="#四种定位总结" class="headerlink" title="四种定位总结"></a>四种定位总结</h1><table><thead><tr><th>定位模式</th><th>是否脱标占有位置</th><th>是否可以使用边偏移</th><th>移动位置基准</th></tr></thead><tbody><tr><td>静态static</td><td>不脱标，正常模式</td><td>不可以</td><td>正常模式</td></tr><tr><td>相对定位relative</td><td>不脱标，占有位置</td><td>可以</td><td>相对自身位置移动（自恋型）</td></tr><tr><td>绝对定位absolute</td><td>完全脱标，不占有位置</td><td>可以</td><td>相对于定位父级移动位置（拼爹型）</td></tr><tr><td>固定定位fixed</td><td>完全脱标，不占有位置</td><td>可以</td><td>相对于浏览器移动位置（认死理型）</td></tr></tbody></table><h1 id="定位模式转换"><a href="#定位模式转换" class="headerlink" title="定位模式转换"></a>定位模式转换</h1><p>跟 浮动一样， 元素添加了 绝对定位和固定定位之后， 元素模式也会发生转换， 都转换为 行内块模式，</p><p><strong>因此 比如 行内元素 如果添加了 绝对定位或者 固定定位后 浮动后，可以不用转换模式，直接给高度和宽度就可以了。</strong></p><h1 id="元素的显示与隐藏"><a href="#元素的显示与隐藏" class="headerlink" title="元素的显示与隐藏"></a>元素的显示与隐藏</h1><p>在CSS中有三个显示和隐藏的单词比较常见，我们要区分开，他们分别是 display visibility 和 overflow。</p><p>他们的主要目的是让一个元素在页面中消失，但是不在文档源码中删除。 最常见的是网站广告，当我们点击类似关闭不见了，但是我们重新刷新页面，它们又会出现和你玩躲猫猫！！</p><h2 id="display-显示"><a href="#display-显示" class="headerlink" title="display 显示"></a>display 显示</h2><p>display 设置或检索对象是否及如何显示。</p><p>display : none 隐藏对象 与它相反的是 display:block 除了转换为块级元素之外，同时还有显示元素的意思。</p><p>特点： 隐藏之后，不再保留位置。</p><h2 id="visibility-可见性"><a href="#visibility-可见性" class="headerlink" title="visibility 可见性"></a>visibility 可见性</h2><p>设置或检索是否显示对象。</p><p>visible : 　对象可视</p><p>hidden : 　对象隐藏</p><p>特点： 隐藏之后，继续保留原有位置。（停职留薪）</p><h2 id="overflow-溢出"><a href="#overflow-溢出" class="headerlink" title="overflow 溢出"></a>overflow 溢出</h2><p>检索或设置当对象的内容超过其指定高度及宽度时如何管理内容。</p><p>visible : 　不剪切内容也不添加滚动条。</p><p>auto : 　 超出自动显示滚动条，不超出不显示滚动条</p><p>hidden : 　不显示超过对象尺寸的内容，超出的部分隐藏掉</p><p>scroll : 　不管超出内容否，总是显示滚动条</p><h1 id="CSS高级技巧"><a href="#CSS高级技巧" class="headerlink" title="CSS高级技巧"></a>CSS高级技巧</h1><h2 id="CSS用户界面样式"><a href="#CSS用户界面样式" class="headerlink" title="CSS用户界面样式"></a>CSS用户界面样式</h2><p> 所谓的界面样式， 就是更改一些用户操作样式， 比如 更改用户的鼠标样式， 表单轮廓等。但是比如滚动条的样式改动受到了很多浏览器的抵制，因此我们就放弃了。 防止表单域拖拽</p><h3 id="鼠标样式cursor"><a href="#鼠标样式cursor" class="headerlink" title="鼠标样式cursor"></a>鼠标样式cursor</h3><p> 设置或检索在对象上移动的鼠标指针采用何种系统预定义的光标形状。 </p><pre class=" language-html"><code class="language-html">cursor :  default  小白 | pointer  小手  | move  移动  |  text  文本</code></pre><p> 鼠标放我身上查看效果哦：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">cursor</span><span class="token punctuation">:</span>default</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是小白<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">cursor</span><span class="token punctuation">:</span>pointer</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是小手<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">cursor</span><span class="token punctuation">:</span>move</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是移动<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">cursor</span><span class="token punctuation">:</span>text</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是文本<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><p> 尽量不要用hand  因为 火狐不支持     pointer ie6以上都支持的尽量用</p><h3 id="轮廓-outline"><a href="#轮廓-outline" class="headerlink" title="轮廓 outline"></a>轮廓 outline</h3><p> 是绘制于元素周围的一条线，位于边框边缘的外围，可起到突出元素的作用。</p><pre class=" language-css"><code class="language-css"> <span class="token property">outline</span> <span class="token punctuation">:</span> outline-color ||outline-style || outline-width </code></pre><p> 但是我们都不关心可以设置多少，我们平时都是去掉的。</p><p>最直接的写法是 ：  outline: 0;   或者  outline: none;</p><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>  <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name">  <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">outline</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h3 id="防止拖拽文本域resize"><a href="#防止拖拽文本域resize" class="headerlink" title="防止拖拽文本域resize"></a>防止拖拽文本域resize</h3><p>resize：none    这个单词可以防止 火狐 谷歌等浏览器随意的拖动 文本域。</p><p>右下角可以拖拽： </p><p><textarea></textarea><br>右下角不可以拖拽： </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span><span class="token style-attr language-css"><span class="token attr-name">  <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">resize</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span></code></pre><h2 id="vertical-align-垂直对齐"><a href="#vertical-align-垂直对齐" class="headerlink" title="vertical-align 垂直对齐"></a>vertical-align 垂直对齐</h2><p>以前我们讲过让带有宽度的块级元素居中对齐，是margin: 0 auto;</p><p>以前我们还讲过让文字居中对齐，是 text-align: center;</p><p>但是我们从来没有讲过有垂直居中的属性， 我们的妈妈一直很担心我们的垂直居中怎么做。</p><p>vertical-align 垂直对齐， 这个看上去很美好的一个属性， 实际有着不可捉摸的脾气，否则我们也不会这么晚来讲解。</p><img src="media/xian.jpg"><pre class=" language-css"><code class="language-css"><span class="token property">vertical-align</span> <span class="token punctuation">:</span> baseline |top |middle |bottom </code></pre><p>设置或检索对象内容的垂直对其方式。 </p><p>vertical-align 不影响块级元素中的内容对齐，它只针对于 行内元素或者行内块元素，特别是行内块元素， <strong>通常用来控制图片/表单与文字的对齐</strong>。</p><p><img src="media/1498467742995.png" alt="1498467742995"></p><h3 id="图片、表单和文字对齐"><a href="#图片、表单和文字对齐" class="headerlink" title="图片、表单和文字对齐"></a>图片、表单和文字对齐</h3><p>所以我们知道，我们可以通过vertical-align 控制图片和文字的垂直关系了。 默认的图片会和文字基线对齐。</p><h3 id="去除图片底侧空白缝隙"><a href="#去除图片底侧空白缝隙" class="headerlink" title="去除图片底侧空白缝隙"></a>去除图片底侧空白缝隙</h3><p>有个很重要特性你要记住： 图片或者表单等行内块元素，他的底线会和父级盒子的基线对齐。这样会造成一个问题，就是图片底侧会有一个空白缝隙。</p><img src="media/3.jpg"><p>解决的方法就是：  </p><ol><li>给img vertical-align:middle | top等等。  让图片不要和基线对齐。<img src="media/1633.png" width="500" style="border: 1px dashed #ccc;"></li></ol><ol><li>给img 添加 display：block; 转换为块级元素就不会存在问题了。<img src="media/sina1.png" width="500" style="border: 1px dashed #ccc;"></li></ol><h1 id="溢出的文字隐藏"><a href="#溢出的文字隐藏" class="headerlink" title="溢出的文字隐藏"></a>溢出的文字隐藏</h1><h2 id="word-break-自动换行"><a href="#word-break-自动换行" class="headerlink" title="word-break:自动换行"></a>word-break:自动换行</h2><p>normal   使用浏览器默认的换行规则。</p><p>break-all   允许在单词内换行。</p><p>keep-all    只能在半角空格或连字符处换行。</p><p>主要处理英文单词</p><h2 id="white-space"><a href="#white-space" class="headerlink" title="white-space"></a>white-space</h2><p>white-space设置或检索对象内文本显示方式。通常我们使用于强制一行显示内容 </p><p>normal : 　默认处理方式<br>nowrap : 　强制在同一行内显示所有文本，直到文本结束或者遭遇br标签对象才换行。</p><p>可以处理中文</p><h2 id="text-overflow-文字溢出"><a href="#text-overflow-文字溢出" class="headerlink" title="text-overflow 文字溢出"></a>text-overflow 文字溢出</h2><p>text-overflow : clip | ellipsis</p><p>设置或检索是否使用一个省略标记（…）标示对象内文本的溢出</p><p>clip : 　不显示省略标记（…），而是简单的裁切 </p><p>ellipsis : 　当对象内文本溢出时显示省略标记（…）</p><p>注意一定要首先强制一行内显示，再次和overflow属性  搭配使用</p><h2 id="CSS精灵技术（sprite）-小妖精-雪碧"><a href="#CSS精灵技术（sprite）-小妖精-雪碧" class="headerlink" title="CSS精灵技术（sprite） 小妖精  雪碧"></a>CSS精灵技术（sprite） 小妖精  雪碧</h2><h3 id="精灵技术产生的背景"><a href="#精灵技术产生的背景" class="headerlink" title="精灵技术产生的背景"></a>精灵技术产生的背景</h3><img src="media/sss.png"><p>图所示为网页的请求原理图，当用户访问一个网站时，需要向服务器发送请求，网页上的每张图像都要经过一次请求才能展现给用户。</p><p>然而，一个网页中往往会应用很多小的背景图像作为修饰，当网页中的图像过多时，服务器就会频繁地接受和发送请求，这将大大降低页面的加载速度。为了有效地减少服务器接受和发送请求的次数，提高页面的加载速度，出现了CSS精灵技术（也称CSS Sprites、CSS雪碧）。</p><h3 id="精灵技术本质"><a href="#精灵技术本质" class="headerlink" title="精灵技术本质"></a>精灵技术本质</h3><p>简单地说，CSS精灵是一种处理网页背景图像的方式。它将一个页面涉及到的所有零星背景图像都集中到一张大图中去，然后将大图应用于网页，这样，当用户访问该页面时，只需向服务发送一次请求，网页中的背景图像即可全部展示出来。通常情况下，这个由很多小的背景图像合成的大图被称为精灵图（雪碧图），如下图所示为京东网站中的一个精灵图。</p><img src="media/jds.png" style="border: 1px dashed #ccc;"><h3 id="精灵技术的使用"><a href="#精灵技术的使用" class="headerlink" title="精灵技术的使用"></a>精灵技术的使用</h3><p>CSS 精灵其实是将网页中的一些背景图像整合到一张大图中（精灵图），然而，各个网页元素通常只需要精灵图中不同位置的某个小图，要想精确定位到精灵图中的某个小图，就需要使用CSS的background-image、background-repeat和background-position属性进行背景定位，其中最关键的是使用background-position属性精确地定位。</p><h3 id="制作精灵图"><a href="#制作精灵图" class="headerlink" title="制作精灵图"></a>制作精灵图</h3><p>CSS 精灵其实是将网页中的一些背景图像整合到一张大图中（精灵图），那我们要做的，就是把小图拼合成一张大图。</p><p>大部分情况下，精灵图都是网页美工做。</p><pre><code>我们精灵图上放的都是小的装饰性质的背景图片。 插入图片不能往上放。我们精灵图的宽度取决于最宽的那个背景。 我们可以横向摆放也可以纵向摆放，但是每个图片之间，间隔至少隔开偶数像素合适。在我们精灵图的最低端，留一片空隙，方便我们以后添加其他精灵图。</code></pre><p>结束语：   小公司，背景图片很少的情况，没有必要使用精灵技术，维护成本太高。 如果是背景图片比较多，可以建议使用精灵技术。</p><h2 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h2><p>图片是有诸多优点的，但是缺点很明显，比如图片不但增加了总文件的大小，还增加了很多额外的”http请求”，这都会大大降低网页的性能的。更重要的是图片不能很好的进行“缩放”，因为图片放大和缩小会失真。 我们后面会学习移动端响应式，很多情况下希望我们的图标是可以缩放的。此时，一个非常重要的技术出现了，额不是出现了，是以前就有，是被从新”宠幸”啦。。 这就是字体图标（iconfont).</p><h3 id="字体图标优点"><a href="#字体图标优点" class="headerlink" title="字体图标优点"></a>字体图标优点</h3><pre><code>可以做出跟图片一样可以做的事情,改变透明度、旋转度，等..但是本质其实是文字，可以很随意的改变颜色、产生阴影、透明效果等等...本身体积更小，但携带的信息并没有削减。几乎支持所有的浏览器移动端设备必备良药...</code></pre><h3 id="字体图标使用流程"><a href="#字体图标使用流程" class="headerlink" title="字体图标使用流程"></a>字体图标使用流程</h3><p>总体来说，字体图标按照如下流程：</p><img src="media/fontt.png"><h4 id="设计字体图标"><a href="#设计字体图标" class="headerlink" title="设计字体图标"></a>设计字体图标</h4><p>假如图标是我们公司单独设计，那就需要第一步了，这个属于UI设计人员的工作， 他们在 illustrator 或 Sketch 这类矢量图形软件里创建 icon图标， 比如下图：</p><img src="media/03.jpg"><p>  之后保存为svg格式，然后给我们前端人员就好了。 </p><p>  其实第一步，我们不需要关心，只需要给我们这些图标就可以了，如果图标是大众的，网上本来就有的，可以直接跳过第一步，进入第三步。</p><h4 id="上传生成字体包"><a href="#上传生成字体包" class="headerlink" title="上传生成字体包"></a>上传生成字体包</h4><p>   当UI设计人员给我们svg文件的时候，我们需要转换成我们页面能使用的字体文件， 而且需要生成的是兼容性的适合各个浏览器的。</p><p>​    推荐网站： <a href="http://icomoon.io" target="_blank" rel="noopener">http://icomoon.io</a></p><p><strong>icomoon字库</strong></p><p>IcoMoon成立于2011年，推出的第一个自定义图标字体生成器，它允许用户选择他们所需要的图标，使它们成一字型。 内容种类繁多，非常全面，唯一的遗憾是国外服务器，打开网速较慢。</p><p>   推荐网站： <a href="http://www.iconfont.cn/" target="_blank" rel="noopener">http://www.iconfont.cn/</a></p><p><strong>阿里icon font字库</strong></p><p><a href="http://www.iconfont.cn/" target="_blank" rel="noopener">http://www.iconfont.cn/</a></p><p>这个是阿里妈妈M2UX的一个icon font字体图标字库，包含了淘宝图标库和阿里妈妈图标库。可以使用AI制作图标上传生成。 一个字，免费，免费！！</p><p><strong>fontello</strong></p><p><a href="http://fontello.com/" target="_blank" rel="noopener">http://fontello.com/</a></p><p>在线定制你自己的icon font字体图标字库，也可以直接从GitHub下载整个图标集，该项目也是开源的。</p><p><strong>Font-Awesome</strong></p><p><a href="http://fortawesome.github.io/Font-Awesome/" target="_blank" rel="noopener">http://fortawesome.github.io/Font-Awesome/</a></p><p>这是我最喜欢的字库之一了，更新比较快。目前已经有369个图标了。</p><p><strong>Glyphicon Halflings</strong></p><p><a href="http://glyphicons.com/" target="_blank" rel="noopener">http://glyphicons.com/</a></p><p>这个字体图标可以在Bootstrap下免费使用。自带了200多个图标。</p><p><strong>Icons8</strong></p><p><a href="https://icons8.com/" target="_blank" rel="noopener">https://icons8.com/</a></p><p>提供PNG免费下载，像素大能到500PX</p><h4 id="下载兼容字体包"><a href="#下载兼容字体包" class="headerlink" title="下载兼容字体包"></a>下载兼容字体包</h4><p>刚才上传完毕， 网站会给我们把UI做的svg图片转换为我们的字体格式， 然后下载下来就好了</p><p>当然，我们不需要自己专门的图标，是想网上找几个图标使用，以上2步可以直接省略了， 直接到刚才的网站上找喜欢的下载使用吧。</p><img src="media/fontt1.png"><img src="media/fontt2.png"><h4 id="字体引入到HTML"><a href="#字体引入到HTML" class="headerlink" title="字体引入到HTML"></a>字体引入到HTML</h4><p>得到压缩包之后，最后一步，是最重要的一步了， 就是字体文件已经有了，我们需要引入到我们页面中。</p><ol><li><p>首先把 以下4个文件放入到 fonts文件夹里面。 通俗的做法</p><p><img src="media/1498032122244.png" alt="1498032122244"></p><h5 id="第一步：在样式里面声明字体：-告诉别人我们自己定义的字体"><a href="#第一步：在样式里面声明字体：-告诉别人我们自己定义的字体" class="headerlink" title="第一步：在样式里面声明字体： 告诉别人我们自己定义的字体"></a>第一步：在样式里面声明字体： 告诉别人我们自己定义的字体</h5><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">'icomoon'</span><span class="token punctuation">;</span>  <span class="token property">src</span><span class="token punctuation">:</span>  <span class="token url">url('fonts/icomoon.eot?7kkyc2')</span><span class="token punctuation">;</span>  <span class="token property">src</span><span class="token punctuation">:</span>  <span class="token url">url('fonts/icomoon.eot?7kkyc2#iefix')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'embedded-opentype'</span><span class="token punctuation">)</span>,    <span class="token url">url('fonts/icomoon.ttf?7kkyc2')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'truetype'</span><span class="token punctuation">)</span>,    <span class="token url">url('fonts/icomoon.woff?7kkyc2')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'woff'</span><span class="token punctuation">)</span>,    <span class="token url">url('fonts/icomoon.svg?7kkyc2#icomoon')</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'svg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">font-weight</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>  <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="第二步：给盒子使用字体"><a href="#第二步：给盒子使用字体" class="headerlink" title="第二步：给盒子使用字体"></a>第二步：给盒子使用字体</h5><pre class=" language-css"><code class="language-css"><span class="token selector">span </span><span class="token punctuation">{</span>        <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"icomoon"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h5 id="第三步：盒子里面添加结构"><a href="#第三步：盒子里面添加结构" class="headerlink" title="第三步：盒子里面添加结构"></a>第三步：盒子里面添加结构</h5><pre class=" language-css"><code class="language-css"><span class="token selector">span<span class="token pseudo-element">::before</span> </span><span class="token punctuation">{</span>         <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">"\e900"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>或者  &lt;span>&lt;/span>  </code></pre><h3 id="追加新图标到原来库里面"><a href="#追加新图标到原来库里面" class="headerlink" title="追加新图标到原来库里面"></a>追加新图标到原来库里面</h3><p>如果工作中，原来的字体图标不够用了，我们需要添加新的字体图标，但是原来的不能删除，继续使用，此时我们需要这样做</p><p>把压缩包里面的selection.json 从新上传，然后，选中自己想要新的图标，从新下载压缩包，替换原来文件即可。</p><img src="media/fontt5.png"></li></ol><h2 id="滑动门"><a href="#滑动门" class="headerlink" title="滑动门"></a>滑动门</h2><p>先来体会下现实中的滑动门,或者你可以叫做推拉门：</p><img src="media/h.gif"><h3 id="滑动门出现的背景"><a href="#滑动门出现的背景" class="headerlink" title="滑动门出现的背景"></a>滑动门出现的背景</h3><p>制作网页时，为了美观，常常需要为网页元素设置特殊形状的背景，比如微信导航栏，有凸起和凹下去的感觉，最大的问题是里面的字数不一样多，咋办？</p><img src="media/wxx.jpg"><p>为了使各种特殊形状的背景能够自适应元素中文本内容的多少，出现了CSS滑动门技术。它从新的角度构建页面，使各种特殊形状的背景能够自由拉伸滑动，以适应元素内部的文本内容，可用性更强。 最常见于各种导航栏的滑动门。</p><h3 id="核心技术"><a href="#核心技术" class="headerlink" title="核心技术"></a>核心技术</h3><p>核心技术就是利用CSS精灵（主要是背景位置）和盒子padding撑开宽度, 以便能适应不同字数的导航栏。</p><p>一般的经典布局都是这样的：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>导航栏内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></code></pre><p>总结： </p><ol><li>a 设置 背景左侧，padding撑开合适宽度。    </li><li>span 设置背景右侧， padding撑开合适宽度 剩下由文字继续撑开宽度。</li><li>之所以a包含span就是因为 整个导航都是可以点击的。</li></ol><h2 id="before和after伪元素-详解"><a href="#before和after伪元素-详解" class="headerlink" title="before和after伪元素(详解)"></a>before和after伪元素(详解)</h2><p>之所以被称为伪元素，是因为他们不是真正的页面元素，html没有对应的元素，但是其所有用法和表现行为与真正的页面元素一样，可以对其使用诸如页面元素一样的css样式，表面上看上去貌似是页面的某些元素来展现，实际上是css样式展现的行为，因此被称为伪元素。是伪元素在html代码机构中的展现，可以看出无法伪元素的结构无法审查</p><p><strong>注意</strong></p><p>伪元素:before和:after添加的内容默认是inline元素**；这个两个伪元素的<code>content</code>属性，表示伪元素的内容,设置:before和:after时必须设置其<code>content</code>属性，否则伪元素就不起作用。</p><h2 id="过渡-CSS3"><a href="#过渡-CSS3" class="headerlink" title="过渡(CSS3)"></a>过渡(CSS3)</h2><p>过渡（transition)是CSS3中具有颠覆性的特征之一，我们可以在不使用 Flash 动画或 JavaScript 的情况下，当元素从一种样式变换为另一种样式时为元素添加效果。</p><p>帧动画：通过一帧一帧的画面按照固定顺序和速度播放。如电影胶片</p><p><img src="media/1498445034712.png" alt="1498445034712"></p><img src="media/zhen.gif"><p>在CSS3里使用transition可以实现补间动画（过渡效果），并且当前元素只要有“属性”发生变化时即存在两种状态(我们用A和B代指），就可以实现平滑的过渡，为了方便演示采用hover切换两种状态，但是并不仅仅局限于hover状态来实现过渡。</p><p>语法格式:</p><pre><code>transition: 要过渡的属性  花费时间  运动曲线  何时开始;如果有多组属性变化，还是用逗号隔开。</code></pre><table><thead><tr><th>属性</th><th>描述</th><th>CSS</th></tr></thead><tbody><tr><td>transition</td><td>简写属性，用于在一个属性中设置四个过渡属性。</td><td>3</td></tr><tr><td>transition-property</td><td>规定应用过渡的 CSS 属性的名称。</td><td>3</td></tr><tr><td>transition-duration</td><td>定义过渡效果花费的时间。默认是 0。</td><td>3</td></tr><tr><td>transition-timing-function</td><td>规定过渡效果的时间曲线。默认是 “ease”。</td><td>3</td></tr><tr><td>transition-delay</td><td>规定过渡效果何时开始。默认是 0。</td><td>3</td></tr></tbody></table><p>如果想要所有的属性都变化过渡， 写一个all 就可以</p><p>transition-duration  花费时间  单位是  秒     s    比如 0.5s    这个s单位必须写      ms 毫秒</p><p>运动曲线   默认是 ease</p><p> 何时开始  默认是 0s  立马开始</p><p>运动曲线示意图：</p><p><img src="media/1498445454760.png" alt="1498445454760"></p><pre class=" language-css"><code class="language-css"><span class="token selector">div </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* transition: 要过渡的属性  花费时间  运动曲线  何时开始; */</span>            <span class="token property">transition</span><span class="token punctuation">:</span> width <span class="token number">0.6</span>s ease <span class="token number">0</span>s, height <span class="token number">0.3</span>s ease-in <span class="token number">1</span>s<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* transtion 过渡的意思  这句话写到div里面而不是 hover里面 */</span><span class="token punctuation">}</span><span class="token selector">div<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* 鼠标经过盒子，我们的宽度变为400 */</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">}</span><span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">0.6</span>s<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 所有属性都变化用all 就可以了  后面俩个属性可以省略 */</span></code></pre><h2 id="2D变形-CSS3-transform"><a href="#2D变形-CSS3-transform" class="headerlink" title="2D变形(CSS3) transform"></a>2D变形(CSS3) transform</h2><p>transform是CSS3中具有颠覆性的特征之一，可以实现元素的位移、旋转、倾斜、缩放，甚至支持矩阵方式，配合过渡和即将学习的动画知识，可以取代大量之前只能靠Flash才可以实现的效果。</p><p>变形转换 transform    transform  变换 变形的意思             《 transformers 变形金刚》</p><h3 id="移动-translate-x-y"><a href="#移动-translate-x-y" class="headerlink" title="移动 translate(x, y)"></a>移动 translate(x, y)</h3><p>translate 移动平移的意思</p><p><img src="media/1498443715586.png" alt="1498443715586"></p><pre class=" language-css"><code class="language-css"><span class="token function">translate</span><span class="token punctuation">(</span><span class="token number">50</span>px,<span class="token number">50</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用translate方法来将文字或图像在水平方向和垂直方向上分别垂直移动50像素。</p><p>可以改变元素的位置，x、y可为负值；</p><pre><code> translate(x,y)水平方向和垂直方向同时移动（也就是X轴和Y轴同时移动） translateX(x)仅水平方向移动（X轴移动） translateY(Y)仅垂直方向移动（Y轴移动）</code></pre><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">499.9999</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span><span class="token number">50%</span><span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span><span class="token number">50%</span><span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">translate</span><span class="token punctuation">(</span>-<span class="token number">50%</span>,-<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 走的自己的一半 */</span><span class="token punctuation">}</span></code></pre><p> 让定位的盒子水平居中</p><h3 id="缩放-scale-x-y"><a href="#缩放-scale-x-y" class="headerlink" title="缩放 scale(x, y)"></a>缩放 scale(x, y)</h3><p><img src="media/1498444645795.png" alt="1498444645795"></p><pre class=" language-css"><code class="language-css"><span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">0.8</span>,<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>可以对元素进行水平和垂直方向的缩放。该语句使用scale方法使该元素在水平方向上缩小了20%，垂直方向上不缩放。</p><pre><code>scale(X,Y)使元素水平方向和垂直方向同时缩放（也就是X轴和Y轴同时缩放）scaleX(x)元素仅水平方向缩放（X轴缩放）scaleY(y)元素仅垂直方向缩放（Y轴缩放）</code></pre><p> scale()的取值默认的值为1，当值设置为0.01到0.99之间的任何值，作用使一个元素缩小；而任何大于或等于1.01的值，作用是让元素放大</p><h3 id="旋转-rotate-deg"><a href="#旋转-rotate-deg" class="headerlink" title="旋转 rotate(deg)"></a>旋转 rotate(deg)</h3><p>可以对元素进行旋转，正值为顺时针，负值为逆时针；</p><p><img src="media/1498443651293.png" alt="1498443651293"></p><pre class=" language-css"><code class="language-css"><span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">45</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p> 注意单位是 deg 度数      </p><h3 id="transform-origin可以调整元素转换变形的原点"><a href="#transform-origin可以调整元素转换变形的原点" class="headerlink" title="transform-origin可以调整元素转换变形的原点"></a>transform-origin可以调整元素转换变形的原点</h3><p><img src="media/1498443912530.png" alt="1498443912530"></p><pre class=" language-css"><code class="language-css"> <span class="token selector">div</span><span class="token punctuation">{</span><span class="token property">transform-origin</span><span class="token punctuation">:</span> left top<span class="token punctuation">;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">45</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/* 改变元素原点到左上角，然后进行顺时旋转45度 */</span>    </code></pre><p> 如果是4个角，可以用 left top这些，如果想要精确的位置， 可以用  px 像素。</p><pre class=" language-css"><code class="language-css"> <span class="token selector">div</span><span class="token punctuation">{</span><span class="token property">transform-origin</span><span class="token punctuation">:</span> <span class="token number">10</span>px <span class="token number">10</span>px<span class="token punctuation">;</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">45</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/* 改变元素原点到x 为10  y 为10，然后进行顺时旋转45度 */</span> </code></pre><p>案例旋转楚乔传</p><pre class=" language-css"><code class="language-css"><span class="token selector">div </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">250</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">170</span>px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid pink<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">200</span>px auto<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">div img </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">0.6</span>s<span class="token punctuation">;</span>            <span class="token property">transform-origin</span><span class="token punctuation">:</span> top right<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">div<span class="token pseudo-class">:hover</span> img<span class="token pseudo-class">:nth-child(1)</span> </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* 鼠标经过div  第一张图片旋转 */</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">60</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">div<span class="token pseudo-class">:hover</span> img<span class="token pseudo-class">:nth-child(2)</span> </span><span class="token punctuation">{</span>              <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">120</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">div<span class="token pseudo-class">:hover</span> img<span class="token pseudo-class">:nth-child(3)</span> </span><span class="token punctuation">{</span>              <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">180</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">div<span class="token pseudo-class">:hover</span> img<span class="token pseudo-class">:nth-child(4)</span> </span><span class="token punctuation">{</span>              <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">240</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">div<span class="token pseudo-class">:hover</span> img<span class="token pseudo-class">:nth-child(5)</span> </span><span class="token punctuation">{</span>              <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">300</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">div<span class="token pseudo-class">:hover</span> img<span class="token pseudo-class">:nth-child(6)</span> </span><span class="token punctuation">{</span>              <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">360</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h3 id="倾斜-skew-deg-deg"><a href="#倾斜-skew-deg-deg" class="headerlink" title="倾斜 skew(deg, deg)"></a>倾斜 skew(deg, deg)</h3><p><img src="media/1498443827389.png" alt="1498443827389"></p><pre class=" language-css"><code class="language-css"><span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">skew</span><span class="token punctuation">(</span><span class="token number">30</span>deg,<span class="token number">0</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>该实例通过skew方法把元素水平方向上倾斜30度，处置方向保持不变。</p><p>可以使元素按一定的角度进行倾斜，可为负值，第二个参数不写默认为0。</p><h2 id="3D变形-CSS3-transform"><a href="#3D变形-CSS3-transform" class="headerlink" title="3D变形(CSS3) transform"></a>3D变形(CSS3) transform</h2><p>2d    x  y  </p><p>3d  x  y  z</p><p>左手坐标系</p><p>伸出左手，让拇指和食指成“L”形，大拇指向右，食指向上，中指指向前方。这样我们就建立了一个左手坐标系，拇指、食指和中指分别代表X、Y、Z轴的正方向。如下图</p><p><img src="media/1498445587576.png" alt="1498445587576"></p><p>CSS3中的3D坐标系与上述的3D坐标系是有一定区别的，相当于其绕着X轴旋转了180度，如下图</p><p><img src="media/1498459001951.png" alt="1498459001951"></p><p>简单记住他们的坐标：</p><p> x左边是负的，右边是正的</p><p>y 上面是负的， 下面是正的</p><p>z 里面是负的， 外面是正的</p><h3 id="rotateX"><a href="#rotateX" class="headerlink" title="rotateX()"></a>rotateX()</h3><p> 就是沿着 x 立体旋转.</p><p><img src="media/1498445756802.png" alt="1498445756802"></p><pre class=" language-css"><code class="language-css"><span class="token selector">img </span><span class="token punctuation">{</span>  <span class="token property">transition</span><span class="token punctuation">:</span>all <span class="token number">0.5</span>s ease <span class="token number">0</span>s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">img<span class="token pseudo-class">:hove</span> </span><span class="token punctuation">{</span>  <span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">rotateX</span><span class="token punctuation">(</span><span class="token number">180</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="rotateY"><a href="#rotateY" class="headerlink" title="rotateY()"></a>rotateY()</h3><p>沿着y轴进行旋转</p><p><img src="media/1498446043198.png" alt="1498446043198"></p><pre class=" language-css"><code class="language-css"><span class="token selector">img </span><span class="token punctuation">{</span>  <span class="token property">transition</span><span class="token punctuation">:</span>all <span class="token number">0.5</span>s ease <span class="token number">0</span>s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">img<span class="token pseudo-class">:hove</span> </span><span class="token punctuation">{</span>  <span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">rotateX</span><span class="token punctuation">(</span><span class="token number">180</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="rotateZ-"><a href="#rotateZ-" class="headerlink" title="rotateZ()"></a>rotateZ()</h3><p>沿着z轴进行旋转</p><pre class=" language-css"><code class="language-css"><span class="token selector">img </span><span class="token punctuation">{</span>  <span class="token property">transition</span><span class="token punctuation">:</span>all <span class="token number">.25</span>s ease-in <span class="token number">0</span>s<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">img<span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">/* transform:rotateX(180deg); */</span>  <span class="token comment" spellcheck="true">/* transform:rotateY(180deg); */</span>  <span class="token comment" spellcheck="true">/* transform:rotateZ(180deg); */</span>  <span class="token comment" spellcheck="true">/* transform:rotateX(45deg) rotateY(180deg) rotateZ(90deg) skew(0,10deg); */</span><span class="token punctuation">}</span></code></pre><h3 id="透视-perspective"><a href="#透视-perspective" class="headerlink" title="透视(perspective)"></a>透视(perspective)</h3><p>电脑显示屏是一个2D平面，图像之所以具有立体感（3D效果），其实只是一种视觉呈现，通过透视可以实现此目的。</p><p>透视可以将一个2D平面，在转换的过程当中，呈现3D效果。</p><ul><li>透视原理： 近大远小 。</li><li>浏览器透视：把近大远小的所有图像，透视在屏幕上。</li><li>perspective：视距，表示视点距离屏幕的长短。视点，用于模拟透视效果时人眼的位置</li></ul><p>注：并非任何情况下需要透视效果，根据开发需要进行设置。</p><p>perspective 一般作为一个属性，设置给父元素，作用于所有3D转换的子元素</p><p>理解透视距离原理：</p><p><img src="media/1498446715314.png" alt="1498446715314"></p><h3 id="translateX-x"><a href="#translateX-x" class="headerlink" title="translateX(x)"></a>translateX(x)</h3><p>仅水平方向移动**（X轴移动）</p><p><img src="media/1498459697576.png" alt="1498459697576"></p><p>主要目的实现移动效果</p><h3 id="translateY-y"><a href="#translateY-y" class="headerlink" title="translateY(y)"></a>translateY(y)</h3><p>仅垂直方向移动（Y轴移动）</p><p><img src="media/1498459770252.png" alt="1498459770252"></p><h3 id="translateZ-z"><a href="#translateZ-z" class="headerlink" title="translateZ(z)"></a>translateZ(z)</h3><p>transformZ的直观表现形式就是大小变化，实质是XY平面相对于视点的远近变化（说远近就一定会说到离什么参照物远或近，在这里参照物就是perspective属性）。比如设置了perspective为200px;那么transformZ的值越接近200，就是离的越近，看上去也就越大，超过200就看不到了，因为相当于跑到后脑勺去了，我相信你正常情况下，是看不到自己的后脑勺的。</p><h3 id="translate3d-x-y-z"><a href="#translate3d-x-y-z" class="headerlink" title="translate3d(x,y,z)"></a>translate3d(x,y,z)</h3><p>[注意]其中，x和y可以是长度值，也可以是百分比，百分比是相对于其本身元素水平方向的宽度和垂直方向的高度和；z只能设置长度值</p><h3 id="开门案例"><a href="#开门案例" class="headerlink" title="开门案例"></a>开门案例</h3><pre class=" language-css"><code class="language-css"><span class="token selector">body </span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.door</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">100</span>px auto<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid gray<span class="token punctuation">;</span>  <span class="token property">perspective</span><span class="token punctuation">:</span> <span class="token number">1000</span>px<span class="token punctuation">;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url">url('images/dog.gif')</span> no-repeat cover<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.door</span> > div </span><span class="token punctuation">{</span>  <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid black<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.left</span> </span><span class="token punctuation">{</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> brown<span class="token punctuation">;</span>  <span class="token property">transform-origin</span><span class="token punctuation">:</span> left center<span class="token punctuation">;</span>  <span class="token property">transition</span><span class="token punctuation">:</span> <span class="token number">1</span>s<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.left</span><span class="token pseudo-element">::before</span> </span><span class="token punctuation">{</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-<span class="token number">10</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid whitesmoke<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.right</span> </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token property">background-color</span><span class="token punctuation">:</span> brown<span class="token punctuation">;</span>  <span class="token property">transform-origin</span><span class="token punctuation">:</span> right center<span class="token punctuation">;</span>  <span class="token property">transition</span><span class="token punctuation">:</span> <span class="token number">1</span>s<span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.right</span><span class="token pseudo-element">::before</span> </span><span class="token punctuation">{</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>  <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>  <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>  <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-<span class="token number">10</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid whitesmoke<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.door</span><span class="token pseudo-class">:hover</span> <span class="token class">.left</span> </span><span class="token punctuation">{</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span>-<span class="token number">130</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.door</span><span class="token pseudo-class">:hover</span> <span class="token class">.right</span> </span><span class="token punctuation">{</span>  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span><span class="token number">130</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="backface-visibility"><a href="#backface-visibility" class="headerlink" title="backface-visibility"></a>backface-visibility</h3><p>backface-visibility 属性定义当元素不面向屏幕时是否可见。</p><h3 id="翻转盒子案例"><a href="#翻转盒子案例" class="headerlink" title="翻转盒子案例"></a>翻转盒子案例</h3><pre class=" language-css"><code class="language-css"><span class="token selector">div </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">224</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">224</span>px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">100</span>px auto<span class="token punctuation">;</span>            <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">div img </span><span class="token punctuation">{</span>            <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>            <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">1</span>s<span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token selector">div img<span class="token pseudo-class">:first-child</span> </span><span class="token punctuation">{</span>            <span class="token property">z-index</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token property">backface-visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 不是正面对象屏幕，就隐藏 */</span>        <span class="token punctuation">}</span>        <span class="token selector">div<span class="token pseudo-class">:hover</span> img </span><span class="token punctuation">{</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateY</span><span class="token punctuation">(</span><span class="token number">180</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="动画-CSS3-animation"><a href="#动画-CSS3-animation" class="headerlink" title="动画(CSS3) animation"></a>动画(CSS3) animation</h2><p>动画是CSS3中具有颠覆性的特征之一，可通过设置多个节点来精确控制一个或一组动画，常用来实现复杂的动画效果。</p><p>语法格式：</p><pre class=" language-css"><code class="language-css"><span class="token property">animation</span><span class="token punctuation">:</span>动画名称 动画时间 运动曲线  何时开始  播放次数  是否反方向<span class="token punctuation">;</span></code></pre><p><img src="media/1498461096243.png" alt="1498461096243"></p><p>关于几个值，除了名字，动画时间，延时有严格顺序要求其它随意r</p><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@keyframes</span> 动画名称</span> <span class="token punctuation">{</span>  <span class="token selector">from</span><span class="token punctuation">{</span> 开始位置 <span class="token punctuation">}</span>  <span class="token selector">0%  to</span><span class="token punctuation">{</span>  结束  <span class="token punctuation">}</span>  <span class="token number">100%</span><span class="token punctuation">}</span></code></pre><pre><code>animation-iteration-count:infinite;  无限循环播放animation-play-state:paused;   暂停动画"</code></pre><h3 id="小汽车案例"><a href="#小汽车案例" class="headerlink" title="小汽车案例"></a>小汽车案例</h3><pre class=" language-css"><code class="language-css"><span class="token selector">body </span><span class="token punctuation">{</span>  <span class="token property">background</span><span class="token punctuation">:</span> white<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">img </span><span class="token punctuation">{</span>  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.animation</span> </span><span class="token punctuation">{</span>  <span class="token property">animation-name</span><span class="token punctuation">:</span> goback<span class="token punctuation">;</span>  <span class="token property">animation-duration</span><span class="token punctuation">:</span> <span class="token number">5</span>s<span class="token punctuation">;</span>  <span class="token property">animation-timing-function</span><span class="token punctuation">:</span> ease<span class="token punctuation">;</span>  <span class="token property">animation-iteration-count</span><span class="token punctuation">:</span> infinite<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@keyframes</span> goback</span> <span class="token punctuation">{</span>  <span class="token selector">0%</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token selector">49%</span><span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span><span class="token number">1000</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">55%</span><span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span><span class="token number">1000</span>px<span class="token punctuation">)</span> <span class="token function">rotateY</span><span class="token punctuation">(</span><span class="token number">180</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">95%</span><span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">rotateY</span><span class="token punctuation">(</span><span class="token number">180</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector">100%</span><span class="token punctuation">{</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token function">rotateY</span><span class="token punctuation">(</span><span class="token number">0</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="伸缩布局-CSS3"><a href="#伸缩布局-CSS3" class="headerlink" title="伸缩布局(CSS3)"></a>伸缩布局(CSS3)</h2><p>CSS3在布局方面做了非常大的改进，使得我们对块级元素的布局排列变得十分灵活，适应性非常强，其强大的伸缩性，在响应式开中可以发挥极大的作用。</p><p>主轴：Flex容器的主轴主要用来配置Flex项目，默认是水平方向</p><p>侧轴：与主轴垂直的轴称作侧轴，默认是垂直方向的</p><p>方向：默认主轴从左向右，侧轴默认从上到下</p><p>主轴和侧轴并不是固定不变的，通过flex-direction可以互换。</p><p><img src="media/1498441839910.png" alt="1498441839910"></p><p>Flex布局的语法规范经过几年发生了很大的变化，也给Flexbox的使用带来一定的局限性，因为语法规范版本众多，浏览器支持不一致，致使Flexbox布局使用不多</p><p><strong>2、各属性详解</strong></p><p>1.flex子项目在主轴的缩放比例，不指定flex属性，则不参与伸缩分配</p><p>min-width  最小值      min-width: 280px  最小宽度  不能小于 280</p><p>max-width: 1280px  最大宽度  不能大于 1280</p><p>2.flex-direction调整主轴方向（默认为水平方向）</p><p>flex-direction: column 垂直排列</p><p>flex-direction: row  水平排列</p><p><a href="http://m.ctrip.com/html5/" target="_blank" rel="noopener">http://m.ctrip.com/html5/</a>   携程网手机端地址</p><p>3、justify-content调整主轴对齐（水平对齐）</p><p>子盒子如何在父盒子里面水平对齐</p><table><thead><tr><th>值</th><th>描述</th><th>白话文</th></tr></thead><tbody><tr><td>flex-start</td><td>默认值。项目位于容器的开头。</td><td>让子元素从父容器的开头开始排序但是盒子顺序不变</td></tr><tr><td>flex-end</td><td>项目位于容器的结尾。</td><td>让子元素从父容器的后面开始排序但是盒子顺序不变</td></tr><tr><td>center</td><td>项目位于容器的中心。</td><td>让子元素在父容器中间显示</td></tr><tr><td>space-between</td><td>项目位于各行之间留有空白的容器内。</td><td>左右的盒子贴近父盒子，中间的平均分布空白间距</td></tr><tr><td>space-around</td><td>项目位于各行之前、之间、之后都留有空白的容器内。</td><td>相当于给每个盒子添加了左右margin外边距</td></tr></tbody></table><p>4、align-items调整侧轴对齐（垂直对齐）</p><p>子盒子如何在父盒子里面垂直对齐（单行）</p><table><thead><tr><th>值</th><th>描述</th><th>白话文</th></tr></thead><tbody><tr><td>stretch</td><td>默认值。项目被拉伸以适应容器。</td><td>让子元素的高度拉伸适用父容器（子元素不给高度的前提下)</td></tr><tr><td>center</td><td>项目位于容器的中心。</td><td>垂直居中</td></tr><tr><td>flex-start</td><td>项目位于容器的开头。</td><td>垂直对齐开始位置 上对齐</td></tr><tr><td>flex-end</td><td>项目位于容器的结尾。</td><td>垂直对齐结束位置 底对齐</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p>5、flex-wrap控制是否换行</p><p>当我们子盒子内容宽度多于父盒子的时候如何处理</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>nowrap</td><td>默认值。规定灵活的项目不拆行或不拆列。  不换行，则 收缩（压缩） 显示  强制一行内显示</td></tr><tr><td>wrap</td><td>规定灵活的项目在必要的时候拆行或拆列。</td></tr><tr><td>wrap-reverse</td><td>规定灵活的项目在必要的时候拆行或拆列，但是以相反的顺序。</td></tr><tr><td></td><td></td></tr></tbody></table><p>6、flex-flow是flex-direction、flex-wrap的简写形式</p><pre class=" language-css"><code class="language-css"><span class="token property">flex-flow</span><span class="token punctuation">:</span> flex-direction  flex-wrap<span class="token punctuation">;</span>  </code></pre><p>白话记：    flex-flow: 排列方向   换不换行; </p><p>两个中间用空格</p><p>例如：</p><pre class=" language-css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* flex-direction: row;flex-wrap: wrap;   这两句话等价于下面的这句话*/</span><span class="token property">flex-flow</span><span class="token punctuation">:</span> column wrap<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 两者的综合 */</span></code></pre><p>7、align-content堆栈（由flex-wrap产生的独立行）多行垂直对齐方式齐</p><p>align-content是针对flex容器里面多轴(多行)的情况,align-items是针对一行的情况进行排列。</p><p>必须对父元素设置自由盒属性display:flex;，并且设置排列方式为横向排列flex-direction:row;并且设置换行，flex-wrap:wrap;这样这个属性的设置才会起作用。</p><table><thead><tr><th>值</th><th>描述</th><th>测试</th></tr></thead><tbody><tr><td>stretch</td><td>默认值。项目被拉伸以适应容器。</td><td></td></tr><tr><td>center</td><td>项目位于容器的中心。</td><td></td></tr><tr><td>flex-start</td><td>项目位于容器的开头。</td><td></td></tr><tr><td>flex-end</td><td>项目位于容器的结尾。</td><td></td></tr><tr><td>space-between</td><td>项目位于各行之间留有空白的容器内。</td><td></td></tr><tr><td>space-around</td><td>项目位于各行之前、之间、之后都留有空白的容器内。</td><td></td></tr></tbody></table><p>8、order控制子项目的排列顺序，正序方式排序，从小到大</p><p>用css 来控制盒子的前后顺序。  用order 就可以</p><p>用整数值来定义排列顺序，数值小的排在前面。可以为负值。 默认值是 0</p><pre class=" language-css"><code class="language-css"><span class="token property">order</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><p>此知识点重在理解，要明确找出主轴、侧轴、方向，各属性对应的属性值</p><p><em>如有侵权，联系 <a href="mailto:2025685938@qq.com" target="_blank" rel="noopener">2025685938@qq.com</a> 删除</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01.HTML</title>
      <link href="/posts/61886.html"/>
      <url>/posts/61886.html</url>
      
        <content type="html"><![CDATA[<p><strong> 本文非原创 </strong><br> 学习目标:</p><ul><li>了解常用浏览器</li><li>掌握WEB标准</li><li>理解标签语义化</li><li>掌握常用的排版标签</li><li>掌握常用的文本格式化图像链接等标签</li><li>掌握三种列表标签</li><li>掌握表格标签</li><li>掌握表格标签</li><li>掌握表单标签</li><li>掌握H5新增表单和表单属性</li></ul><hr><h1 id="认识网页"><a href="#认识网页" class="headerlink" title="认识网页"></a>认识网页</h1><pre><code>网页主要由文字、图像和超链接等元素构成。当然，除了这些元素，网页中还可以包含音频、视频以及Flash等。</code></pre><p>&lt;<img src="media/mi.png"></p><pre><code>思考：  网页是如何形成的呢?</code></pre><p>&lt;<img src="media/web.png"></p><h1 id="常见浏览器介绍"><a href="#常见浏览器介绍" class="headerlink" title="常见浏览器介绍"></a>常见浏览器介绍</h1><pre><code>浏览器是网页运行的平台，常用的浏览器有IE、火狐（Firefox）、谷歌（Chrome）、Safari和Opera等。我们平时称为五大浏览器。</code></pre><p>&lt;<img src="media/b.png"></p><h2 id="查看浏览器占有的市场份额（知晓）"><a href="#查看浏览器占有的市场份额（知晓）" class="headerlink" title="查看浏览器占有的市场份额（知晓）"></a>查看浏览器占有的市场份额（知晓）</h2><p>查看网站： <a href="http://tongji.baidu.com/data/browser" target="_blank">http://tongji.baidu.com/data/browser</a></p><p>&lt;<img src="media/count.png"></p><h2 id="浏览器内核（理解）"><a href="#浏览器内核（理解）" class="headerlink" title="浏览器内核（理解）"></a>浏览器内核（理解）</h2><pre><code>浏览器内核又可以分成两部分：渲染引擎(layout engineer 或者 Rendering Engine)和 JS 引擎。渲染引擎 它负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入 CSS 等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。JS 引擎 则是解析 Javascript 语言，执行 javascript语言来实现网页的动态效果。最开始渲染引擎和 JS 引擎并没有区分的很明确，后来 JS 引擎越来越独立，内核就倾向于只指渲染引擎。有一个网页标准计划小组制作了一个 ACID 来测试引擎的兼容性和性能。内核的种类很多，如加上没什么人使用的非商业的免费内核，可能会有10多种，但是常见的浏览器内核可以分这四种：Trident、Gecko、Blink、Webkit。</code></pre><p>（1）Trident(IE内核) </p><p>国内很多的双核浏览器的其中一核便是 Trident，美其名曰 “兼容模式”。</p><p>代表： IE、傲游、世界之窗浏览器、Avant、腾讯TT、猎豹安全浏览器、360极速浏览器、百度浏览器等。</p><p>Window10 发布后，IE 将其内置浏览器命名为 Edge，Edge 最显著的特点就是新内核 EdgeHTML。</p><p>（2）Gecko(firefox) </p><p>Gecko(Firefox 内核)： Mozilla FireFox(火狐浏览器) 采用该内核，Gecko 的特点是代码完全公开，因此，其可开发程度很高，全世界的程序员都可以为其编写代码，增加功能。 可惜这几年已经没落了， 比如 打开速度慢、升级频繁、猪一样的队友flash、神一样的对手chrome。</p><p>（3） webkit(Safari)  </p><p> Safari 是苹果公司开发的浏览器，所用浏览器内核的名称是大名鼎鼎的 WebKit。</p><p> 现在很多人错误地把 webkit 叫做 chrome内核（即使 chrome内核已经是 blink 了），苹果感觉像被别人抢了媳妇，都哭晕再厕所里面了。</p><p> 代表浏览器：傲游浏览器3、 Apple Safari (Win/Mac/iPhone/iPad)、Symbian手机浏览器、Android 默认浏览器，</p><p>（4） Chromium/Bink(chrome) </p><p>   在 Chromium 项目中研发 Blink 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。Blink 其实是 WebKit 的分支。 </p><p>​     大部分国产浏览器最新版都采用Blink内核。</p><p>（5） Presto(Opera) </p><p>  Presto 是挪威产浏览器 opera 的 “前任” 内核，为何说是 “前任”，因为最新的 opera 浏览器早已将之抛弃从而投入到了谷歌怀抱了。</p><p>  &lt;<img src="media/s.jpg"></p><pre><code>了解一点：</code></pre><p>移动端的浏览器内核主要说的是系统内置浏览器的内核。</p><p>目前移动设备浏览器上常用的内核有 Webkit，Blink，Trident，Gecko 等，其中 iPhone 和 iPad 等苹果 iOS 平台主要是 WebKit，Android 4.4 之前的 Android 系统浏览器内核是 WebKit，Android4.4 系统浏览器切换到了Chromium，内核是 Webkit 的分支 Blink，Windows Phone 8 系统浏览器内核是 Trident。</p><h1 id="Web标准（重点）"><a href="#Web标准（重点）" class="headerlink" title="Web标准（重点）"></a>Web标准（重点）</h1><p>通过以上浏览器的内核不同，我们知道他们工作原理、解析肯定不同，显示就会有差别。</p><pre><code>问：  哪个语言再全国基本都可以听得懂？ </code></pre><p>  &lt;<img src="media/bz.png"></p><h2 id="Web-标准的好处"><a href="#Web-标准的好处" class="headerlink" title="Web 标准的好处"></a>Web 标准的好处</h2><p><em>1</em>、让Web的发展前景更广阔<br><em>2</em>、内容能被更广泛的设备访问<br><em>3</em>、更容易被搜寻引擎搜索<br><em>4</em>、降低网站流量费用<br><em>5</em>、使网站更易于维护<br><em>6</em>、提高页面浏览速度</p><h2 id="Web-标准构成"><a href="#Web-标准构成" class="headerlink" title="Web 标准构成"></a>Web 标准构成</h2><p> Web标准不是某一个标准，而是由W3C和其他标准化组织制定的一系列标准的集合。主要包括结构（Structure）、表现（Presentation）和行为（Behavior）三个方面。</p><pre><code>结构标准：结构用于对网页元素进行整理和分类，主要包括XML和XHTML两个部分。样式标准：表现用于设置网页元素的版式、颜色、大小等外观样式，主要指的是CSS。行为标准：行为是指网页模型的定义及交互的编写，主要包括DOM和ECMAScript两个部分</code></pre><p>理想状态我们的源码： .HTML    .css   .js </p><pre><code>专业的人，写专业的代码</code></pre><p>  &lt;<img src="media/wk.png"></p><p>直观感受：</p><p>  &lt;<img src="media/gx.png"></p><p>总结WEB标准：</p><p>结构标准：     &lt;<img src="media/hb1.png">决定你是否有个好天然身体 </p><p>样式标准：     &lt;<img src="media/hb2.png"> 决定你是否打扮的美丽外观</p><p>行为标准：     <img src="media/hb3.jpg" width="440">  决定你是否有吸引人的行为</p><h1 id="HTML-初识"><a href="#HTML-初识" class="headerlink" title="HTML 初识"></a>HTML 初识</h1><p>一般先学习HTML+CSS， 这里我们先定一个小目标，先学HTML,后学习CSS。</p><p>HTML（英文Hyper Text Markup Language的缩写）中文译为“超文本标签语言”，主要是通过HTML标签对网页中的文本、图片、声音等内容进行描述。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span> 我是加粗的字体 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span></code></pre><p>   注意：   体会 文本    标签    语言   几个词语  </p><h2 id="HTML骨架格式"><a href="#HTML骨架格式" class="headerlink" title="HTML骨架格式"></a>HTML骨架格式</h2><p>日常生活的书信，我们要遵循共同的约定。 </p><img src="media/mess.png" alt=""><p>同理：HTML 有自己的语言语法骨架格式：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>HTML</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>HTML</span><span class="token punctuation">></span></span></code></pre><p>课堂练习1：    书写我们的第一个HTML 页面！</p><ol><li>新建一个demo 的 TXT 文件。</li><li>里面写入刚才的HTML 骨架。</li><li>把后缀名改为 .HTML。</li><li>右击–谷歌浏览器打开。</li></ol><pre><code>1 HTML标签：作用所有HTML中标签的一个根节点。2 head标签：作用：用于存放：title,meta,base,style,script,link注意在head标签中我们必须要设置的标签是title3.title标签：作用：让页面拥有一个属于自己的标题。4.body标签：作用：页面在的主体部分，用于存放所有的HTML标签：p,h,a,b,u,i,s,em,del,ins,strong,img</code></pre><p>为了便于记忆，我们请出刚才要辞职回家养猪的二师兄来帮忙， 我称之为  猪八戒记忆法</p><img src="media/pig.png"><h2 id="HTML标签分类"><a href="#HTML标签分类" class="headerlink" title="HTML标签分类"></a>HTML标签分类</h2><p>在HTML页面中，带有“&lt; &gt;”符号的元素被称为HTML标签，如上面提到的 &lt;HTML&gt;、&lt;head&gt;、&lt;body&gt;都是HTML标签。所谓标签就是放在“&lt; &gt;” 标签符中表示某个功能的编码命令，也称为HTML标签或 HTML元素</p><p>1.双标签</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>标签名</span><span class="token punctuation">></span></span> 内容 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>标签名</span><span class="token punctuation">></span></span></code></pre><p>该语法中“&lt;标签名&gt;”表示该标签的作用开始，一般称为“开始标签（start tag）”，“&lt;/标签名&gt;” 表示该标签的作用结束，一般称为“结束标签（end tag）”。和开始标签相比，结束标签只是在前面加了一个关闭符“/”。</p><blockquote><pre class=" language-html"><code class="language-html">比如 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>我是文字  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre></blockquote><p>2.单标签</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>标签名</span> <span class="token punctuation">/></span></span></code></pre><p>  单标签也称空标签，是指用一个标签符号即可完整地描述某个功能的标签。</p><blockquote><pre class=" language-html"><code class="language-html">比如  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span></code></pre></blockquote><h2 id="HTML标签关系"><a href="#HTML标签关系" class="headerlink" title="HTML标签关系"></a>HTML标签关系</h2><p>标签的相互关系就分为两种：</p><p>1.嵌套关系</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></code></pre><img src="media/father.jpg"><p>2.并列关系</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><img src="media/xiong.jpg"><p>测试题：</p><pre><code>请问下列哪个标签是错误的？</code></pre><pre><code>A  &lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;</code></pre><pre><code>B  &lt;strong&gt;&lt;div&gt;&lt;/div&gt;&lt;/strong&gt;</code></pre><pre><code>C  &lt;head&gt;&lt;title&gt;&lt;/head&gt;&lt;/title&gt;</code></pre><pre><code>D  &lt;body&gt;&lt;div&gt;&lt;/div&gt;&lt;/body&gt;</code></pre><p> 倡议： 如果两个标签之间的关系是嵌套关系，子元素最好缩进一个tab键的身位。如果是并列关系，最好上下对齐。</p><h1 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h1><p> 这些工具你认识几个？</p> <img src="media/s.png"><p>  普通青年    Dreamweaver</p><p>  文艺青年    sublime</p><p>  高手和傻子  用记事本</p>  <img src="media/node.png"><pre><code>再页面中输入 以下2个单词1.  html: 5   2.  !在sublime里面然后按下tab键盘即可生成HTML骨架</code></pre><h1 id="文档类型-lt-DOCTYPE-gt"><a href="#文档类型-lt-DOCTYPE-gt" class="headerlink" title="文档类型<!DOCTYPE>"></a>文档类型&lt;!DOCTYPE&gt;</h1><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span></code></pre><p>这句话就是告诉我们使用哪个html版本？  我们使用的是 html 5 的版本。  html有很多版本，那我们应该告诉用户和浏览器我们使用的版本号。</p><p> 标签位于文档的最前面，用于向浏览器说明当前文档使用哪种 HTML 或 XHTML 标准规范，必需在开头处使用&lt;!DOCTYPE&gt;标签为所有的XHTML文档指定XHTML版本和类型，只有这样浏览器才能按指定的文档类型进行解析。</p><p>注意：  一些老网站可能用的还是老版本的文档类型比如 XHTML之类的，但是我们学的是HTML5,而且HTML5的文档类型兼容很好(向下兼容的原则)，所以大家放心的使用HTML5的文档类型就好了。</p><h1 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h1><meta charset="UTF-8"><p>utf-8是目前最常用的字符集编码方式，常用的字符集编码方式还有gbk和gb2312。</p><p>gb2312 简单中文  包括6763个汉字</p><p>BIG5   繁体中文 港澳台等用</p><p>GBK包含全部中文字符    是GB2312的扩展，加入对繁体字的支持，兼容GB2312</p><p>UTF-8则包含全世界所有国家需要用到的字符</p><pre><code>记住一点，以后我们统统使用UTF-8 字符集, 这样就避免出现字符集不统一而引起乱码的情况了。</code></pre><h1 id="HTML标签的语义化"><a href="#HTML标签的语义化" class="headerlink" title="HTML标签的语义化"></a>HTML标签的语义化</h1><p>白话： 所谓标签语义化，就是指标签的含义。</p><h2 id="为什么要有语义化标签"><a href="#为什么要有语义化标签" class="headerlink" title="为什么要有语义化标签"></a>为什么要有语义化标签</h2><ol><li><p>方便代码的阅读和维护</p></li><li><p>同时让浏览器或是网络爬虫可以很好地解析，从而更好分析其中的内容 </p></li><li><p>使用语义化标签会具有更好地搜索引擎优化 </p></li></ol><p>核心：合适的地方给一个最为合理的标签。</p><p>语义是否良好： 当我们去掉CSS之后，网页结构依然组织有序，并且有良好的可读性。</p><p>不管是谁都能看懂这块内容是什么。</p><p>遵循的原则：先确定语义的HTML ，再选合适的CSS。</p><h1 id="HTML标签"><a href="#HTML标签" class="headerlink" title="HTML标签"></a>HTML标签</h1><p> 首先 HTML和CSS是两种完全不同的语言，我们学的是结构，就只写HTML标签，认识标签就可以了。 不会再给结构标签指定样式了。</p><p> HTML标签有很多，这里我们学习最为常用的，后面有些较少用的，我们可以查下手册就可以了。 </p><h2 id="排版标签"><a href="#排版标签" class="headerlink" title="排版标签"></a>排版标签</h2><p>排版标签主要和css搭配使用，显示网页结构的标签，是网页布局最常用的标签。</p><h3 id="标题标签-熟记"><a href="#标题标签-熟记" class="headerlink" title="标题标签 (熟记)"></a>标题标签 (熟记)</h3><p> 单词缩写：  head   头部. 标题 </p><p>为了使网页更具有语义化，我们经常会在页面中用到标题标签，HTML提供了6个等级的标题，即</p><pre class=" language-html"><code class="language-html"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span>、<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">></span></span>和<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">></span></span></code></pre><pre><code>标题标签语义：  作为标题使用，并且依据重要性递减</code></pre><p>其基本语法格式如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hn</span><span class="token punctuation">></span></span>   标题文本   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hn</span><span class="token punctuation">></span></span></code></pre><blockquote><p>注意：  h1 标签因为重要，尽量少用，不要动不动就向你扔了一个h1。 一般h1 都是给logo使用。</p></blockquote>  <img src="media/dog.gif"><h3 id="段落标签-熟记"><a href="#段落标签-熟记" class="headerlink" title="段落标签( 熟记)"></a>段落标签( 熟记)</h3><p>单词缩写：  paragraph  段落</p><p> 在网页中要把文字有条理地显示出来，离不开段落标签，就如同我们平常写文章一样，整个网页也可以分为若干个段落，而段落的标签就是</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>  文本内容  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span></code></pre><p>是HTML文档中最常见的标签，默认情况下，文本在一个段落中会根据浏览器窗口的大小自动换行。</p><h3 id="水平线标签-认识"><a href="#水平线标签-认识" class="headerlink" title="水平线标签(认识)"></a>水平线标签(认识)</h3><p>单词缩写：  horizontal  横线</p><p>在网页中常常看到一些水平线将段落与段落之间隔开，使得文档结构清晰，层次分明。这些水平线可以通过插入图片实现，也可以简单地通过标签来完成，</p><hr>就是创建横跨网页水平线的标签。其基本语法格式如下：<p></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token punctuation">/></span></span>是单标签</code></pre><p> 在网页中显示默认样式的水平线。</p><p>课堂练习2：    新闻页面</p><img src="media/sh.png"> <h3 id="换行标签-熟记"><a href="#换行标签-熟记" class="headerlink" title="换行标签(熟记)"></a>换行标签(熟记)</h3><p>单词缩写：  break   打断 ,换行</p><p>在HTML中，一个段落中的文字会从左到右依次排列，直到浏览器窗口的右端，然后自动换行。如果希望某段文本强制换行显示，就需要使用换行标签</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span></code></pre><p>这时如果还像在word中直接敲回车键换行就不起作用了。</p><h3 id="div-span标签-重点"><a href="#div-span标签-重点" class="headerlink" title="div span标签(重点)"></a>div span标签(重点)</h3><p>div  span    是没有语义的     是我们网页布局主要的2个盒子</p><p>div 就是  division  的缩写   分割， 分区的意思  其实有很多div 来组合网页。</p><p>span, 跨度，跨距；范围    </p><p>语法格式：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span> 这是头部 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>今日价格<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span></code></pre><h2 id="文本格式化标签-熟记"><a href="#文本格式化标签-熟记" class="headerlink" title="文本格式化标签(熟记)"></a>文本格式化标签(熟记)</h2><p>在网页中，有时需要为文字设置粗体、斜体或下划线效果，这时就需要用到HTML中的文本格式化标签，使文字以特殊的方式显示。</p><img src="media/tab.png"><p>  b  i  s  u   只有使用 没有 强调的意思       strong   em  del   ins  语义更强烈</p><h2 id="标签属性"><a href="#标签属性" class="headerlink" title="标签属性"></a>标签属性</h2><img src="media/ttt.jpg" width="300"><p>属性就是特性 比如 手机的颜色 手机的尺寸 ，总结就是手机的。。</p><p>使用HTML制作网页时，如果想让HTML标签提供更多的信息，可以使用HTML标签的属性加以设置。其基本语法格式如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>标签名</span> <span class="token attr-name">属性1</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>属性值1<span class="token punctuation">"</span></span> <span class="token attr-name">属性2</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>属性值2<span class="token punctuation">"</span></span> <span class="token attr-name">…</span><span class="token punctuation">></span></span> 内容 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>标签名</span><span class="token punctuation">></span></span></code></pre><p>在上面的语法中，</p><p>1.标签可以拥有多个属性，必须写在开始标签中，位于标签名后面。</p><p>2.属性之间不分先后顺序，标签名与属性、属性与属性之间均以空格分开。</p><p>3.任何标签的属性都有默认值，省略该属性则取默认值。</p><p>采取  键值对 的格式   key=”value”  的格式  </p><p>比如:  </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>400<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p>属性  是 宽度  </p><p>值    是 400 </p><p>提倡：   尽量不使用 样式属性。   <img src="media/sm.jpg"> </p><h2 id="图像标签img-重点"><a href="#图像标签img-重点" class="headerlink" title="图像标签img (重点)"></a>图像标签img (重点)</h2><p>单词缩写：   image  图像</p><p>HTML网页中任何元素的实现都要依靠HTML标签，要想在网页中显示图像就需要使用图像标签，接下来将详细介绍图像标签<img>以及和他相关的属性。其基本语法格式如下：</p><p>该语法中src属性用于指定图像文件的路径和文件名，他是img标签的必需属性。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>图像URL<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><img src="media/img.png"><h2 id="链接标签-重点"><a href="#链接标签-重点" class="headerlink" title="链接标签(重点)"></a>链接标签(重点)</h2><p>单词缩写：  anchor 的缩写 。基本解释 锚, 铁锚 的</p><p>在HTML中创建超链接非常简单，只需用标签环绕需要被链接的对象即可，其基本语法格式如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>跳转目标<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>目标窗口的弹出方式<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>文本或图像<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>href：用于指定链接目标的url地址，当为标签应用href属性时，它就具有了超链接的功能。  Hypertext Reference的缩写。意思是超文本引用</p><p>target：用于指定链接页面的打开方式，其取值有_self和_blank两种，其中_self为默认值，_blank为在新窗口中打开方式。</p><p>注意：</p><p>1.外部链接 需要添加 http:// <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a></p><p>2.内部链接 直接链接内部页面名称即可 比如 &lt; a href=”index.html”&gt; 首页 </p><p>3.如果当时没有确定链接目标时，通常将链接标签的href属性值定义为“#”(即href=”#”)，表示该链接暂时为一个空链接。</p><p>4.不仅可以创建文本超链接，在网页中各种网页元素，如图像、表格、音频、视频等都可以添加超链接。</p><h3 id="锚点定位-（难点）"><a href="#锚点定位-（难点）" class="headerlink" title="锚点定位 （难点）"></a>锚点定位 （难点）</h3><p>通过创建锚点链接，用户能够快速定位到目标内容。<br>创建锚点链接分为两步：</p><pre class=" language-html"><code class="language-html">1.使用“a href=”#id名>“链接文本"<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>创建链接文本。2.使用相应的id名标注跳转目标的位置。</code></pre><h3 id="base-标签"><a href="#base-标签" class="headerlink" title="base 标签"></a>base 标签</h3><p>base 可以设置整体链接的打开状态   </p><p>base 写到  <meta name="generator" content="Hexo 3.9.0">  <link rel="stylesheet" href="/css/prism-tomorrow.css" type="text/css">  之间</p> <img src="media/base.png"><h2 id="特殊字符标签-（理解）"><a href="#特殊字符标签-（理解）" class="headerlink" title="特殊字符标签 （理解）"></a>特殊字符标签 （理解）</h2> <img src="media/zifu.png"><h2 id="注释标签"><a href="#注释标签" class="headerlink" title="注释标签"></a>注释标签</h2><p>在HTML中还有一种特殊的标签——注释标签。如果需要在HTML文档中添加一些便于阅读和理解但又不需要显示在页面中的注释文字，就需要使用注释标签。其基本语法格式如下：<br>​        </p><pre class=" language-html"><code class="language-html">    <span class="token comment" spellcheck="true">&lt;!-- 注释语句 --></span></code></pre><p>注释内容不会显示在浏览器窗口中，但是作为HTML文档内容的一部分，也会被下载到用户的计算机上，查看源代码时就可以看到。</p><p>注释重要性：</p><img src="media/zs.png"><h1 id="路径-重点、难点"><a href="#路径-重点、难点" class="headerlink" title="路径(重点、难点)"></a>路径(重点、难点)</h1><img src="media/dt.png"><img src="media/lj.png"><p>实际工作中，通常新建一个文件夹专门用于存放图像文件，这时再插入图像，就需要采用“路径”的方式来指定图像文件的位置。</p><p>路径可以分为： 相对路径和绝对路径</p><h2 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h2><ol><li>图像文件和HTML文件位于同一文件夹：只需输入图像文件的名称即可，如&lt;img src=”logo.gif” /&gt;。</li><li>图像文件位于HTML文件的下一级文件夹：输入文件夹名和文件名，之间用“/”隔开，如&lt;img src=”img/img01/logo.gif” /&gt;。</li><li>图像文件位于HTML文件的上一级文件夹：在文件名之前加入“../” ，如果是上两级，则需要使用 “../ ../”，以此类推，如&lt;img src=”../logo.gif” /&gt;。</li></ol><h2 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h2><p>绝对路径</p><p>“D:\web\img\logo.gif”，或完整的网络地址，例如“<a href="http://www.itcast.cn/images/logo.gif”。" target="_blank" rel="noopener">http://www.itcast.cn/images/logo.gif”。</a></p><h1 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h1><p>什么是列表？</p><img src="media/list.png"><p>把…制成表,以表显示</p><p>容器里面装载着文字或图表的一种形式，叫列表。</p><p>列表最大的特点就是  整齐 、整洁、 有序</p><h2 id="无序列表-ul-（重点）"><a href="#无序列表-ul-（重点）" class="headerlink" title="无序列表 ul （重点）"></a>无序列表 ul （重点）</h2><p>无序列表的各个列表项之间没有顺序级别之分，是并列的。其基本语法格式如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  ......<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code></pre><p>比如下面这些，新闻是没有顺序的，不用排队，先到先得，后发布先显示。</p><img src="media/ul.png"><p>脚下留心：</p><pre><code> 1. &lt;ul&gt;&lt;/ul&gt;中只能嵌套&lt;li&gt;&lt;/li&gt;，直接在&lt;ul&gt;&lt;/ul&gt;标签中输入其他标签或者文字的做法是不被允许的。 2. &lt;li&gt;与&lt;/li&gt;之间相当于一个容器，可以容纳所有元素。 3. 无序列表会带有自己样式属性，放下那个样式，一会让CSS来！</code></pre><h2 id="有序列表-ol-（了解）"><a href="#有序列表-ol-（了解）" class="headerlink" title="有序列表 ol （了解）"></a>有序列表 ol （了解）</h2><img src="media/gold.png"><p>有序列表即为有排列顺序的列表，其各个列表项按照一定的顺序排列定义，有序列表的基本语法格式如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表项3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>  ......<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">></span></span></code></pre><p>  所有特性基本与ul 一致。  </p><p>  但是实际工作中， 较少用 ol ，因此我们用一句话来总结下 ol： </p>  <img src="media/1.jpg"><h2 id="自定义列表（理解）"><a href="#自定义列表（理解）" class="headerlink" title="自定义列表（理解）"></a>自定义列表（理解）</h2><p>定义列表常用于对术语或名词进行解释和描述，定义列表的列表项前没有任何项目符号。其基本语法如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>名词1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>名词1解释1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>名词1解释2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>  ...  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>名词2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>名词2解释1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>名词2解释2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>  ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span></code></pre> <img src="media/2.jpg"> <p>用的还可以：</p><img src="media/mix.png"><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>每一天都有一个主题 我们HTML第一天的主题就是 &lt;认识标签&gt;</p><p>学HTML 之前 觉得 很神秘  </p><img src="media/z.png"><p>等你学完之后忽然发现</p><img src="media/rh.jpg" width="615"><p>总结今天的思路贯穿线：</p><img src="media/a.png" width="1000"><h1 id="表格-table-会使用"><a href="#表格-table-会使用" class="headerlink" title="表格 table(会使用)"></a>表格 table(会使用)</h1><p>存在即是合理的。  表格的现在还是较为常用的一种标签，但不是用来布局，常见处理表格式数据。</p><img src="media/table.png"><h2 id="创建表格"><a href="#创建表格" class="headerlink" title="创建表格"></a>创建表格</h2><p>在HTML网页中，要想创建表格，就需要使用表格相关的标签。创建表格的基本语法格式如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>单元格内的文字<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    ...  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>  ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><p>在上面的语法中包含三对HTML标签，分别为 &lt;table&gt;&lt;/table&gt;、&lt;tr&gt;&lt;/tr&gt;、&lt;td&gt;&lt;/td&gt;，他们是创建表格的基本标签，缺一不可，下面对他们进行具体地解释。</p><pre><code>1.table用于定义一个表格。2.tr 用于定义表格中的一行，必须嵌套在 table /table标签中，在 table /table中包含几对 tr /tr，就有几行表格。3.td /td：用于定义表格中的单元格，必须嵌套在&lt;tr&gt;&lt;/tr&gt;标签中，一对 &lt;tr&gt; &lt;/tr&gt;中包含几对&lt;td&gt;&lt;/td&gt;，就表示该行中有多少列（或多少个单元格）。</code></pre><p>注意：</p><pre><code>1. &lt;tr&gt;&lt;/tr&gt;中只能嵌套&lt;td&gt;&lt;/td&gt;</code></pre><pre><code>2. &lt;td&gt;&lt;/td&gt;标签，他就像一个容器，可以容纳所有的元素</code></pre><h2 id="表格属性"><a href="#表格属性" class="headerlink" title="表格属性"></a>表格属性</h2><img src="media/tt.png"><h2 id="表头标签"><a href="#表头标签" class="headerlink" title="表头标签"></a>表头标签</h2><p>表头一般位于表格的第一行或第一列，其文本加粗居中，如下图所示，即为设置了表头的表格。设置表头非常简单，只需用表头标签&lt;th&gt;&lt;/th&gt;替代相应的单元格标签&lt;td&gt;&lt;/td&gt;即可。</p> <img src="media/th.png"><h2 id="表格结构（了解）"><a href="#表格结构（了解）" class="headerlink" title="表格结构（了解）"></a>表格结构（了解）</h2><pre><code>在使用表格进行布局时，可以将表格划分为头部、主体和页脚（页脚因为有兼容性问题，我们不在赘述），具体 如下所示：&lt;thead&gt;&lt;/thead&gt;：用于定义表格的头部。必须位于&lt;table&gt;&lt;/table&gt; 标签中，一般包含网页的logo和导航等头部信息。&lt;tbody&gt;&lt;/tbody&gt;：用于定义表格的主体。位于&lt;table&gt;&lt;/table&gt;标签中，一般包含网页中除头部和底部之外的其他内容。</code></pre><img src="media/thead.png"><h2 id="合并单元格"><a href="#合并单元格" class="headerlink" title="合并单元格"></a>合并单元格</h2><p>跨行合并：rowspan    跨列合并：colspan</p><p>合并单元格的思想：</p><p>将多个内容合并的时候，就会有多余的东西，把它删除。    例如 把 3个 td 合并成一个， 那就多余了2个，需要删除。</p><p>公式：  删除的个数  =  合并的个数  - 1   </p><h2 id="总结表格"><a href="#总结表格" class="headerlink" title="总结表格"></a>总结表格</h2><ol><li>表格提供了HTML 中定义表格式数据的方法。</li><li>表格中由行中的单元格组成。</li><li>表格中没有列元素，列的个数取决于行的单元格个数。</li><li>表格不要纠结于外观，那是CSS 的作用。</li></ol><h1 id="表单标签-掌握"><a href="#表单标签-掌握" class="headerlink" title="表单标签(掌握)"></a>表单标签(掌握)</h1><p>现实中的表单，类似我们去银行办理信用卡填写的单子。 如下图</p><img src="media/car.jpg" width="500"><p>目的是为了收集用户信息。</p><p>在我们网页中， 我们也需要跟用户进行交互，收集用户资料，此时也需要表单。</p><p>在HTML中，一个完整的表单通常由表单控件（也称为表单元素）、提示信息和表单域3个部分构成。</p><img src="media/bd.png"><p>  表单控件：</p><p>​       包含了具体的表单功能项，如单行文本输入框、密码输入框、复选框、提交按钮、重置按钮等。</p><p>  提示信息：</p><p>​        一个表单中通常还需要包含一些说明性的文字，提示用户进行填写和操作。</p><p>  表单域：  </p><p>​      他相当于一个容器，用来容纳所有的表单控件和提示信息，可以通过他定义处理表单数据所用程序的url地址，以及数据提交到服务器的方法。如果不定义表单域，表单中的数据就无法传送到后台服务器。</p><h2 id="input-控件-重点"><a href="#input-控件-重点" class="headerlink" title="input 控件(重点)"></a>input 控件(重点)</h2><p>在上面的语法中，&lt;input /&gt;标签为单标签，type属性为其最基本的属性，其取值有多种，用于指定不同的控件类型。除了type属性之外，&lt;input /&gt;标签还可以定义很多其他的属性，其常用属性如下表所示。</p><img src="media/input.png"><h2 id="label标签-理解"><a href="#label标签-理解" class="headerlink" title="label标签(理解)"></a>label标签(理解)</h2><p>label 标签为 input 元素定义标注（标签）。</p><p>作用：  用于绑定一个表单元素, 当点击label标签的时候, 被绑定的表单元素就会获得输入焦点</p><p>如何绑定元素呢？</p><p>for 属性规定 label 与哪个表单元素绑定。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>male<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Male<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>male<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>male<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h2 id="textarea控件-文本域"><a href="#textarea控件-文本域" class="headerlink" title="textarea控件(文本域)"></a>textarea控件(文本域)</h2><p>如果需要输入大量的信息，就需要用到&lt;textarea&gt;&lt;/textarea&gt;标签。通过textarea控件可以轻松地创建多行文本输入框，其基本语法格式如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>每行中的字符数<span class="token punctuation">"</span></span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>显示的行数<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  文本内容<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span></code></pre><img src="media/textarea.png"><h2 id="下拉菜单"><a href="#下拉菜单" class="headerlink" title="下拉菜单"></a>下拉菜单</h2><p>使用select控件定义下拉菜单的基本语法格式如下</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>选项1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>选项2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>选项3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><p>注意：</p><ol><li>&lt;select&gt;&lt;/select&gt;中至少应包含一对&lt;option&gt;&lt;/option&gt;。</li><li>在option 中定义selected =” selected “时，当前项即为默认选中项。</li></ol><h2 id="表单域"><a href="#表单域" class="headerlink" title="表单域"></a>表单域</h2><p>在HTML中，form标签被用于定义表单域，即创建一个表单，以实现用户信息的收集和传递，form中的所有内容都会被提交给服务器。创建表单的基本语法格式如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url地址<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>提交方式<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>表单名称<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  各种表单控件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p>常用属性：</p><ol><li>Action<br>在表单收集到信息后，需要将信息传递给服务器进行处理，action属性用于指定接收并处理表单数据的服务器程序的url地址。</li><li>method<br>用于设置表单数据的提交方式，其取值为get或post。</li><li>name<br>用于指定表单的名称，以区分同一个页面中的多个表单。</li></ol><p>注意：  每个表单都应该有自己表单域。</p><h1 id="HTML5新标签与特性"><a href="#HTML5新标签与特性" class="headerlink" title="HTML5新标签与特性"></a>HTML5新标签与特性</h1><h2 id="文档类型设定"><a href="#文档类型设定" class="headerlink" title="文档类型设定"></a>文档类型设定</h2><ul><li>document<ul><li>HTML</li><li>XHTML</li><li>HTML5</li></ul></li></ul><h2 id="字符设定"><a href="#字符设定" class="headerlink" title="字符设定"></a>字符设定</h2><ul><li><meta http-equiv="charset" content="utf-8">：HTML与XHTML中建议这样去写</li><li><meta charset="utf-8">：HTML5的标签中建议这样去写</li></ul><h2 id="常用新标签"><a href="#常用新标签" class="headerlink" title="常用新标签"></a>常用新标签</h2><ul><li>header：定义文档的页眉</li><li>nav：定义导航链接的部分</li><li>footer：定义文档或节的页脚</li><li>article：标签规定独立的自包含内容</li><li>section：定义文档中的节（section、区段）</li><li>aside：定义其所处内容之外的内容</li></ul><h2 id="常用新属性"><a href="#常用新属性" class="headerlink" title="常用新属性"></a>常用新属性</h2><table><thead><tr><th><strong>属性</strong></th><th><strong>用法</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td><strong>placeholder</strong></td><td><input type="text" placeholder="请输入用户名"></td><td>占位符提供可描述输入字段预期值的提示信息</td></tr><tr><td><strong>autofocus</strong></td><td><input type="text" autofocus=""></td><td>规定当页面加载时 input 元素应该自动获得焦点</td></tr><tr><td><strong>multiple</strong></td><td><input type="file" multiple=""></td><td>多文件上传</td></tr><tr><td><strong>autocomplete</strong></td><td><input type="text" autocomplete="off"></td><td>规定表单是否应该启用自动完成功能</td></tr><tr><td><strong>required</strong></td><td><input type="text" required=""></td><td>必填项</td></tr><tr><td><strong>accesskey</strong></td><td><input type="text" accesskey="s"></td><td>规定激活（使元素获得焦点）元素的快捷键</td></tr></tbody></table><h2 id="新增的type属性值"><a href="#新增的type属性值" class="headerlink" title="新增的type属性值"></a>新增的type属性值</h2><table><thead><tr><th><strong>类型</strong></th><th><strong>使用示例</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td><strong>email</strong></td><td><input type="email"></td><td>输入邮箱格式</td></tr><tr><td><strong>tel</strong></td><td><input type="tel"></td><td>输入手机号码格式</td></tr><tr><td><strong>url</strong></td><td><input type="url"></td><td>输入url格式</td></tr><tr><td><strong>number</strong></td><td><input type="number"></td><td>输入数字格式</td></tr><tr><td><strong>search</strong></td><td><input type="search"></td><td>搜索框（体现语义化）</td></tr><tr><td><strong>range</strong></td><td><input type="range"></td><td>自由拖动滑块</td></tr><tr><td><strong>time</strong></td><td><input type="time"></td><td></td></tr><tr><td><strong>date</strong></td><td><input type="date"></td><td></td></tr><tr><td><strong>datetime</strong></td><td><input type="datetime"></td><td></td></tr><tr><td><strong>month</strong></td><td><input type="month"></td><td></td></tr><tr><td><strong>week</strong></td><td><input type="week"></td><td></td></tr></tbody></table><h2 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h2><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>legend</span><span class="token punctuation">></span></span>学生档案<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>legend</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>姓名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userName<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userName<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请输入用户名<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userPhone<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>手机号码:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tel<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userPhone<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>userPhone<span class="token punctuation">"</span></span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>^1\d{10}$<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>邮箱地址:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">required</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>collage<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>所属学院:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>collage<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>collage<span class="token punctuation">"</span></span> <span class="token attr-name">list</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cList<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>请选择<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>datalist</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cList<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>前端与移动开发学院<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java学院<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>c++学院<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>datalist</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>score<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>入学成绩:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">min</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>score<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>level<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>基础水平:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meter</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>level<span class="token punctuation">"</span></span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span> <span class="token attr-name">min</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">low</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>59<span class="token punctuation">"</span></span> <span class="token attr-name">high</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>90<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>meter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inTime<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>入学日期:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inTime<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inTime<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>leaveTime<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>毕业日期:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>leaveTime<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>leaveTime<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldset</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><h2 id="多媒体标签"><a href="#多媒体标签" class="headerlink" title="多媒体标签"></a>多媒体标签</h2><ul><li><p>embed：标签定义嵌入的内容</p></li><li><p>audio：播放音频</p></li><li><p>video：播放视频</p></li></ul><h3 id="多媒体-embed（会使用）"><a href="#多媒体-embed（会使用）" class="headerlink" title="多媒体 embed（会使用）"></a>多媒体 embed（会使用）</h3><p>embed可以用来插入各种多媒体，格式可以是 Midi、Wav、AIFF、AU、MP3等等。url为音频或视频文件及其路径，可以是相对路径或绝对路径。</p><p>因为兼容性问题，我们这里只讲解 插入网络视频， 后面H5会讲解 audio 和video 视频多媒体。 </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>embed</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://player.youku.com/player.php/sid/XMTI4MzM2MDIwOA<span class="token punctuation">=</span><span class="token punctuation">=</span>/v.swf<span class="token punctuation">"</span></span> <span class="token attr-name">allowFullScreen</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">quality</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>high<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>480<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>400<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>middle<span class="token punctuation">"</span></span> <span class="token attr-name">allowScriptAccess</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>always<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>application/x-shockwave-flash<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>embed</span><span class="token punctuation">></span></span></code></pre> <img src="media/embed.png"><p> 优酷，土豆，爱奇艺，腾讯、乐视等等</p><ol><li>先上传   </li><li>在分享</li></ol><h3 id="多媒体-audio"><a href="#多媒体-audio" class="headerlink" title="多媒体 audio"></a>多媒体 audio</h3><p>HTML5通过<audio>标签来解决音频播放的问题。</audio></p><p>使用相当简单，如下图所示</p><p><img src="media/1498468026526.png" alt="1498468026526"> </p><p>并且可以通过附加属性可以更友好控制音频的播放，如：</p><p>autoplay 自动播放</p><p>controls 是否显不默认播放控件</p><p>loop 循环播放</p><p>由于版权等原因，不同的浏览器可支持播放的格式是不一样的，如下图供参考</p><p><img src="media/1498468041058.png" alt="1498468041058"> </p><p>多浏览器支持的方案，如下图</p><p><img src="media/1498468052965.png" alt="1498468052965"> </p><h3 id="多媒体-video"><a href="#多媒体-video" class="headerlink" title="多媒体 video"></a>多媒体 video</h3><p>HTML5通过<video>标签来解决音频播放的问题。</video></p><p>同音频播放一样，<video>使用也相当简单，如下图</video></p><p><img src="media/1498468072194.png" alt="1498468072194"> </p><p>同样，通过附加属性可以更友好的控制视频的播放</p><p>autoplay 自动播放</p><p>controls 是否显示默认播放控件</p><p>loop 循环播放</p><p>width 设置播放窗口宽度</p><p>height 设置播放窗口的高度</p><p>由于版权等原因，不同的浏览器可支持播放的格式是不一样的，如下图供参考</p><p><img src="media/1498468086199.png" alt="1498468086199"> </p><p><strong>多浏览器支持的方案，如下图</strong></p><p><img src="media/1498468097509.png" alt="1498468097509"></p><p><em>如有侵权，联系 <a href="mailto:2025685938@qq.com" target="_blank" rel="noopener">2025685938@qq.com</a> 删除</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.Shell 数组</title>
      <link href="/posts/54139.html"/>
      <url>/posts/54139.html</url>
      
        <content type="html"><![CDATA[<h1 id="Shell-数组"><a href="#Shell-数组" class="headerlink" title="Shell 数组"></a>Shell 数组</h1><p>数组中可以存放多个值。Bash Shell 只支持一维数组（不支持多维数组），初始化时不需要定义数组大小（与 PHP 类似）。</p><p>与大部分编程语言类似，数组元素的下标由0开始。</p><p>Shell 数组用括号来表示，元素用”空格”符号分割开，语法格式如下：</p><pre><code>array_name=(value1 ... valuen)</code></pre><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><pre><code>#!/bin/bash# author:菜鸟教程# url:www.runoob.commy_array=(A B "C" D)</code></pre><p>我们也可以使用下标来定义数组:</p><pre><code>array_name[0]=value0array_name[1]=value1array_name[2]=value2</code></pre><h3 id="读取数组"><a href="#读取数组" class="headerlink" title="读取数组"></a>读取数组</h3><p>读取数组元素值的一般格式是：</p><pre><code>${array_name[index]}</code></pre><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><pre><code>#!/bin/bash# author:菜鸟教程# url:www.runoob.commy_array=(A B "C" D)echo "第一个元素为: ${my_array[0]}"echo "第二个元素为: ${my_array[1]}"echo "第三个元素为: ${my_array[2]}"echo "第四个元素为: ${my_array[3]}"</code></pre><p>执行脚本，输出结果如下所示：</p><pre><code>$ chmod +x test.sh $ ./test.sh第一个元素为: A第二个元素为: B第三个元素为: C第四个元素为: D</code></pre><h3 id="获取数组中的所有元素"><a href="#获取数组中的所有元素" class="headerlink" title="获取数组中的所有元素"></a>获取数组中的所有元素</h3><p>使用@ 或 * 可以获取数组中的所有元素，例如：</p><pre><code>#!/bin/bash# author:菜鸟教程# url:www.runoob.commy_array[0]=Amy_array[1]=Bmy_array[2]=Cmy_array[3]=Decho "数组的元素为: ${my_array[*]}"echo "数组的元素为: ${my_array[@]}"</code></pre><p>执行脚本，输出结果如下所示：</p><pre><code>$ chmod +x test.sh $ ./test.sh数组的元素为: A B C D数组的元素为: A B C D</code></pre><h3 id="获取数组的长度"><a href="#获取数组的长度" class="headerlink" title="获取数组的长度"></a>获取数组的长度</h3><p>获取数组长度的方法与获取字符串长度的方法相同，例如：</p><pre><code>#!/bin/bash# author:菜鸟教程# url:www.runoob.commy_array[0]=Amy_array[1]=Bmy_array[2]=Cmy_array[3]=Decho "数组元素个数为: ${#my_array[*]}"echo "数组元素个数为: ${#my_array[@]}"</code></pre><p>执行脚本，输出结果如下所示：</p><pre><code>$ chmod +x test.sh $ ./test.sh数组元素个数为: 4数组元素个数为: 4</code></pre><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><ul><li><a href="https://www.runoob.com/linux/linux-shell-array.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-shell-array.html</a></li></ul><p><em>如有侵权，联系 <a href="mailto:2025685938@qq.com" target="_blank" rel="noopener">2025685938@qq.com</a> 删除</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.Shell 传递参数</title>
      <link href="/posts/42970.html"/>
      <url>/posts/42970.html</url>
      
        <content type="html"><![CDATA[<h1 id="Shell-传递参数"><a href="#Shell-传递参数" class="headerlink" title="Shell 传递参数"></a>Shell 传递参数</h1><p>我们可以在执行 Shell 脚本时，向脚本传递参数，脚本内获取参数的格式为：<strong>$n</strong>。<strong>n</strong> 代表一个数字，1 为执行脚本的第一个参数，2 为执行脚本的第二个参数，以此类推……</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>以下实例我们向脚本传递三个参数，并分别输出，其中 <strong>$0</strong> 为执行的文件名：</p><pre><code>#!/bin/bash# author:菜鸟教程# url:www.runoob.comecho "Shell 传递参数实例！";echo "执行的文件名：$0";echo "第一个参数为：$1";echo "第二个参数为：$2";echo "第三个参数为：$3";</code></pre><p>为脚本设置可执行权限，并执行脚本，输出结果如下所示：</p><pre><code>$ chmod +x test.sh $ ./test.sh 1 2 3Shell 传递参数实例！执行的文件名：./test.sh第一个参数为：1第二个参数为：2第三个参数为：3</code></pre><p>另外，还有几个特殊字符用来处理参数：</p><table><thead><tr><th align="left">参数处理</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">$#</td><td align="left">传递到脚本的参数个数</td></tr><tr><td align="left">$*</td><td align="left">以一个单字符串显示所有向脚本传递的参数。 如”$*”用「”」括起来的情况、以”$1 $2 … $n”的形式输出所有参数。</td></tr><tr><td align="left">$$</td><td align="left">脚本运行的当前进程ID号</td></tr><tr><td align="left">$!</td><td align="left">后台运行的最后一个进程的ID号</td></tr><tr><td align="left">$@</td><td align="left">与$*相同，但是使用时加引号，并在引号中返回每个参数。 如”$@”用「”」括起来的情况、以”$1” “$2” … “$n” 的形式输出所有参数。</td></tr><tr><td align="left">$-</td><td align="left">显示Shell使用的当前选项，与<a href="https://www.runoob.com/linux/linux-comm-set.html" target="_blank" rel="noopener">set命令</a>功能相同。</td></tr><tr><td align="left">$?</td><td align="left">显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</td></tr></tbody></table><pre><code>#!/bin/bash# author:菜鸟教程# url:www.runoob.comecho "Shell 传递参数实例！";echo "第一个参数为：$1";echo "参数个数为：$#";echo "传递的参数作为一个字符串显示：$*";</code></pre><p>执行脚本，输出结果如下所示：</p><pre><code>$ chmod +x test.sh $ ./test.sh 1 2 3Shell 传递参数实例！第一个参数为：1参数个数为：3传递的参数作为一个字符串显示：1 2 3</code></pre><p>$* 与 $@ 区别：</p><ul><li>相同点：都是引用所有参数。</li><li>不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，，则 “ * “ 等价于 “1 2 3”（传递了一个参数），而 “@” 等价于 “1” “2” “3”（传递了三个参数）。</li></ul><pre><code>#!/bin/bash# author:菜鸟教程# url:www.runoob.comecho "-- \$* 演示 ---"for i in "$*"; do    echo $idoneecho "-- \$@ 演示 ---"for i in "$@"; do    echo $idone</code></pre><p>执行脚本，输出结果如下所示：</p><pre><code>$ chmod +x test.sh $ ./test.sh 1 2 3-- $* 演示 ---1 2 3-- $@ 演示 ---123</code></pre><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><ul><li><a href="https://www.runoob.com/linux/linux-shell-passing-arguments.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-shell-passing-arguments.html</a></li></ul><p><em>如有侵权，联系 <a href="mailto:2025685938@qq.com" target="_blank" rel="noopener">2025685938@qq.com</a> 删除</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.Shell 变量</title>
      <link href="/posts/32796.html"/>
      <url>/posts/32796.html</url>
      
        <content type="html"><![CDATA[<h1 id="Shell-变量"><a href="#Shell-变量" class="headerlink" title="Shell 变量"></a>Shell 变量</h1><p>定义变量时，变量名不加美元符号（$，PHP语言中变量需要），如：</p><pre><code>your_name="runoob.com"</code></pre><p>注意，变量名和等号之间不能有空格，这可能和你熟悉的所有编程语言都不一样。同时，变量名的命名须遵循如下规则：</p><ul><li>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。</li><li>中间不能有空格，可以使用下划线（_）。</li><li>不能使用标点符号。</li><li>不能使用bash里的关键字（可用help命令查看保留关键字）。</li></ul><p>有效的 Shell 变量名示例如下：</p><pre><code>RUNOOBLD_LIBRARY_PATH_varvar2</code></pre><p>无效的变量命名：</p><pre><code>?var=123user*name=runoob</code></pre><p>除了显式地直接赋值，还可以用语句给变量赋值，如：</p><pre><code>for file in `ls /etc`或for file in $(ls /etc)</code></pre><p>以上语句将 /etc 下目录的文件名循环出来。</p><hr><h3 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h3><p>使用一个定义过的变量，只要在变量名前面加美元符号即可，如：</p><pre><code>your_name="qinjx"echo $your_nameecho ${your_name}</code></pre><p>变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界，比如下面这种情况：</p><pre><code>for skill in Ada Coffe Action Java; do    echo "I am good at ${skill}Script"done</code></pre><p>如果不给skill变量加花括号，写成echo “I am good at $skillScript”，解释器就会把$skillScript当成一个变量（其值为空），代码执行结果就不是我们期望的样子了。</p><p>推荐给所有变量加上花括号，这是个好的编程习惯。</p><p>已定义的变量，可以被重新定义，如：</p><pre><code>your_name="tom"echo $your_nameyour_name="alibaba"echo $your_name</code></pre><p>这样写是合法的，但注意，第二次赋值的时候不能写$your_name=”alibaba”，使用变量的时候才加美元符（$）。</p><h3 id="只读变量"><a href="#只读变量" class="headerlink" title="只读变量"></a>只读变量</h3><p>使用 readonly 命令可以将变量定义为只读变量，只读变量的值不能被改变。</p><p>下面的例子尝试更改只读变量，结果报错：</p><pre><code>#!/bin/bashmyUrl="http://www.google.com"readonly myUrlmyUrl="http://www.runoob.com"</code></pre><p>运行脚本，结果如下：</p><pre><code>/bin/sh: NAME: This variable is read only.</code></pre><h3 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h3><p>使用 unset 命令可以删除变量。语法：</p><pre><code>unset variable_name</code></pre><p>变量被删除后不能再次使用。unset 命令不能删除只读变量。</p><p><strong>实例</strong></p><pre><code>#!/bin/shmyUrl="http://www.runoob.com"unset myUrlecho $myUrl</code></pre><p>以上实例执行将没有任何输出。</p><h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><p>运行shell时，会同时存在三种变量：</p><ul><li><strong>1) 局部变量</strong> 局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。</li><li><strong>2) 环境变量</strong> 所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。</li><li><strong>3) shell变量</strong> shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行</li></ul><hr><h2 id="Shell-字符串"><a href="#Shell-字符串" class="headerlink" title="Shell 字符串"></a>Shell 字符串</h2><p>字符串是shell编程中最常用最有用的数据类型（除了数字和字符串，也没啥其它类型好用了），字符串可以用单引号，也可以用双引号，也可以不用引号。单双引号的区别跟PHP类似。</p><h3 id="单引号"><a href="#单引号" class="headerlink" title="单引号"></a>单引号</h3><pre><code>str='this is a string'</code></pre><p>单引号字符串的限制：</p><ul><li>单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；</li><li>单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用。</li></ul><h3 id="双引号"><a href="#双引号" class="headerlink" title="双引号"></a>双引号</h3><pre><code>your_name='runoob'str="Hello, I know you are \"$your_name\"! \n"echo -e $str</code></pre><p>输出结果为：</p><pre><code>Hello, I know you are "runoob"! </code></pre><p>双引号的优点：</p><ul><li>双引号里可以有变量</li><li>双引号里可以出现转义字符</li></ul><h3 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h3><pre><code>your_name="runoob"# 使用双引号拼接greeting="hello, "$your_name" !"greeting_1="hello, ${your_name} !"echo $greeting  $greeting_1# 使用单引号拼接greeting_2='hello, '$your_name' !'greeting_3='hello, ${your_name} !'echo $greeting_2  $greeting_3</code></pre><p>输出结果为：</p><pre><code>hello, runoob ! hello, runoob !hello, runoob ! hello, ${your_name} !</code></pre><h3 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度"></a>获取字符串长度</h3><pre><code>string="abcd"echo ${#string} #输出 4</code></pre><h3 id="提取子字符串"><a href="#提取子字符串" class="headerlink" title="提取子字符串"></a>提取子字符串</h3><p>以下实例从字符串第 <strong>2</strong> 个字符开始截取 <strong>4</strong> 个字符：</p><pre><code>string="runoob is a great site"echo ${string:1:4} # 输出 unoo</code></pre><h3 id="查找子字符串"><a href="#查找子字符串" class="headerlink" title="查找子字符串"></a>查找子字符串</h3><p>查找字符 <strong>i</strong> 或 <strong>o</strong> 的位置(哪个字母先出现就计算哪个)：</p><pre><code>string="runoob is a great site"echo `expr index "$string" io`  # 输出 4</code></pre><p><strong>注意：</strong> 以上脚本中 <strong>`</strong> 是反引号，而不是单引号 <strong>‘</strong>，不要看错了哦。</p><hr><h2 id="Shell-数组"><a href="#Shell-数组" class="headerlink" title="Shell 数组"></a>Shell 数组</h2><p>bash支持一维数组（不支持多维数组），并且没有限定数组的大小。</p><p>类似于 C 语言，数组元素的下标由 0 开始编号。获取数组中的元素要利用下标，下标可以是整数或算术表达式，其值应大于或等于 0。</p><h3 id="定义数组"><a href="#定义数组" class="headerlink" title="定义数组"></a>定义数组</h3><p>在 Shell 中，用括号来表示数组，数组元素用”空格”符号分割开。定义数组的一般形式为：</p><pre><code>数组名=(值1 值2 ... 值n)</code></pre><p>例如：</p><pre><code>array_name=(value0 value1 value2 value3)</code></pre><p>或者</p><pre><code>array_name=(value0value1value2value3)</code></pre><p>还可以单独定义数组的各个分量：</p><pre><code>array_name[0]=value0array_name[1]=value1array_name[n]=valuen</code></pre><p>可以不使用连续的下标，而且下标的范围没有限制。</p><h3 id="读取数组"><a href="#读取数组" class="headerlink" title="读取数组"></a>读取数组</h3><p>读取数组元素值的一般格式是：</p><pre><code>${数组名[下标]}</code></pre><p>例如：</p><pre><code>valuen=${array_name[n]}</code></pre><p>使用 <strong>@</strong> 符号可以获取数组中的所有元素，例如：</p><pre><code>echo ${array_name[@]}</code></pre><h3 id="获取数组的长度"><a href="#获取数组的长度" class="headerlink" title="获取数组的长度"></a>获取数组的长度</h3><p>获取数组长度的方法与获取字符串长度的方法相同，例如：</p><pre><code># 取得数组元素的个数length=${#array_name[@]}# 或者length=${#array_name[*]}# 取得数组单个元素的长度lengthn=${#array_name[n]}</code></pre><hr><h2 id="Shell-注释"><a href="#Shell-注释" class="headerlink" title="Shell 注释"></a>Shell 注释</h2><p>以 <strong>#</strong> 开头的行就是注释，会被解释器忽略。</p><p>通过每一行加一个 <strong>#</strong> 号设置多行注释，像这样：</p><pre><code>#--------------------------------------------# 这是一个注释# author：菜鸟教程# site：www.runoob.com# slogan：学的不仅是技术，更是梦想！#--------------------------------------------##### 用户配置区 开始 ######## 这里可以添加脚本描述信息# ###### 用户配置区 结束  #####</code></pre><p>如果在开发过程中，遇到大段的代码需要临时注释起来，过一会儿又取消注释，怎么办呢？</p><p>每一行加个#符号太费力了，可以把这一段要注释的代码用一对花括号括起来，定义成一个函数，没有地方调用这个函数，这块代码就不会执行，达到了和注释一样的效果。</p><h3 id="多行注释"><a href="#多行注释" class="headerlink" title="多行注释"></a>多行注释</h3><p>多行注释还可以使用以下格式：</p><pre><code>:&lt;&lt;EOF注释内容...注释内容...注释内容...EOF</code></pre><p>EOF 也可以使用其他符号:</p><pre><code>:&lt;&lt;'注释内容...注释内容...注释内容...':&lt;&lt;!注释内容...注释内容...注释内容...!</code></pre><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><ul><li><a href="https://www.runoob.com/linux/linux-shell-variable.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-shell-variable.html</a></li></ul><p><em>如有侵权，联系 <a href="mailto:2025685938@qq.com" target="_blank" rel="noopener">2025685938@qq.com</a> 删除</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.Shell 教程</title>
      <link href="/posts/48699.html"/>
      <url>/posts/48699.html</url>
      
        <content type="html"><![CDATA[<h1 id="Shell-教程"><a href="#Shell-教程" class="headerlink" title="Shell 教程"></a>Shell 教程</h1><p>Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。Shell 既是一种命令语言，又是一种程序设计语言。</p><p>Shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。</p><p>Ken Thompson 的 sh 是第一种 Unix Shell，Windows Explorer 是一个典型的图形界面 Shell。</p><p><a href="https://www.runoob.com/try/showbash.php?filename=helloworld" target="_blank" rel="noopener"><strong>Shell 在线工具</strong></a></p><hr><h2 id="Shell-脚本"><a href="#Shell-脚本" class="headerlink" title="Shell 脚本"></a>Shell 脚本</h2><p>Shell 脚本（shell script），是一种为 shell 编写的脚本程序。</p><p>业界所说的 shell 通常都是指 shell 脚本，但读者朋友要知道，shell 和 shell script 是两个不同的概念。</p><p>由于习惯的原因，简洁起见，本文出现的 “shell编程” 都是指 shell 脚本编程，不是指开发 shell 自身。</p><hr><h2 id="Shell-环境"><a href="#Shell-环境" class="headerlink" title="Shell 环境"></a>Shell 环境</h2><p>Shell 编程跟 JavaScript、php 编程一样，只要有一个能编写代码的文本编辑器和一个能解释执行的脚本解释器就可以了。</p><p>Linux 的 Shell 种类众多，常见的有：</p><ul><li>Bourne Shell（/usr/bin/sh或/bin/sh）</li><li>Bourne Again Shell（/bin/bash）</li><li>C Shell（/usr/bin/csh）</li><li>K Shell（/usr/bin/ksh）</li><li>Shell for Root（/sbin/sh）</li><li>……</li></ul><p>本教程关注的是 Bash，也就是 Bourne Again Shell，由于易用和免费，Bash 在日常工作中被广泛使用。同时，Bash 也是大多数Linux 系统默认的 Shell。</p><p>在一般情况下，人们并不区分 Bourne Shell 和 Bourne Again Shell，所以，像 <strong>#!/bin/sh</strong>，它同样也可以改为 <strong>#!/bin/bash</strong>。</p><p><strong>#!</strong> 告诉系统其后路径所指定的程序即是解释此脚本文件的 Shell 程序。</p><hr><h2 id="第一个shell脚本"><a href="#第一个shell脚本" class="headerlink" title="第一个shell脚本"></a>第一个shell脚本</h2><p>打开文本编辑器(可以使用 vi/vim 命令来创建文件)，新建一个文件 test.sh，扩展名为 sh（sh代表shell），扩展名并不影响脚本执行，见名知意就好，如果你用 php 写 shell 脚本，扩展名就用 php 好了。</p><p>输入一些代码，第一行一般是这样：</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p><em>#!/bin/bash</em><br><strong>echo</strong> “Hello World !”</p><p><a href="https://www.runoob.com/try/runcode.php?filename=helloworld&amp;type=bash" target="_blank" rel="noopener">运行实例 »</a></p><p><strong>#!</strong> 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种 Shell。</p><p>echo 命令用于向窗口输出文本。</p><h3 id="运行-Shell-脚本有两种方法："><a href="#运行-Shell-脚本有两种方法：" class="headerlink" title="运行 Shell 脚本有两种方法："></a>运行 Shell 脚本有两种方法：</h3><p><strong>1、作为可执行程序</strong></p><p>将上面的代码保存为 test.sh，并 cd 到相应目录：</p><pre><code>chmod +x ./test.sh  #使脚本具有执行权限./test.sh  #执行脚本</code></pre><p>注意，一定要写成 <strong>./test.sh</strong>，而不是 <strong>test.sh</strong>，运行其它二进制的程序也一样，直接写 test.sh，linux 系统会去 PATH 里寻找有没有叫 test.sh 的，而只有 /bin, /sbin, /usr/bin，/usr/sbin 等在 PATH 里，你的当前目录通常不在 PATH 里，所以写成 test.sh 是会找不到命令的，要用 ./test.sh 告诉系统说，就在当前目录找。</p><p><strong>2、作为解释器参数</strong></p><p>这种运行方式是，直接运行解释器，其参数就是 shell 脚本的文件名，如：</p><pre><code>/bin/sh test.sh/bin/php test.php</code></pre><p>这种方式运行的脚本，不需要在第一行指定解释器信息，写了也没用。</p><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><ul><li><a href="https://www.runoob.com/linux/linux-shell.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-shell.html</a></li></ul><p><em>如有侵权，联系 <a href="mailto:2025685938@qq.com" target="_blank" rel="noopener">2025685938@qq.com</a> 删除</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12.Shell 文件包含</title>
      <link href="/posts/8585.html"/>
      <url>/posts/8585.html</url>
      
        <content type="html"><![CDATA[<h1 id="Shell-文件包含"><a href="#Shell-文件包含" class="headerlink" title="Shell 文件包含"></a>Shell 文件包含</h1><p>和其他语言一样，Shell 也可以包含外部脚本。这样可以很方便的封装一些公用的代码作为一个独立的文件。</p><p>Shell 文件包含的语法格式如下：</p><pre><code>. filename   # 注意点号(.)和文件名中间有一空格或source filename</code></pre><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>创建两个 shell 脚本文件。</p><p>test1.sh 代码如下：</p><pre><code>#!/bin/bash# author:菜鸟教程# url:www.runoob.comurl="http://www.runoob.com"</code></pre><p>test2.sh 代码如下：</p><pre><code>#!/bin/bash# author:菜鸟教程# url:www.runoob.com#使用 . 号来引用test1.sh 文件. ./test1.sh# 或者使用以下包含文件代码# source ./test1.shecho "菜鸟教程官网地址：$url"</code></pre><p>接下来，我们为 test2.sh 添加可执行权限并执行：</p><pre><code>$ chmod +x test2.sh $ ./test2.sh 菜鸟教程官网地址：http://www.runoob.com</code></pre><blockquote><p>  <strong>注：</strong>被包含的文件 test1.sh 不需要可执行权限。</p></blockquote><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><ul><li><a href="https://www.runoob.com/linux/linux-shell-include-file.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-shell-include-file.html</a></li></ul><p><em>如有侵权，联系 <a href="mailto:2025685938@qq.com" target="_blank" rel="noopener">2025685938@qq.com</a> 删除</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11.Shell 输入/输出重定向</title>
      <link href="/posts/35589.html"/>
      <url>/posts/35589.html</url>
      
        <content type="html"><![CDATA[<h1 id="Shell-输入-输出重定向"><a href="#Shell-输入-输出重定向" class="headerlink" title="Shell 输入/输出重定向"></a>Shell 输入/输出重定向</h1><p>大多数 UNIX 系统命令从你的终端接受输入并将所产生的输出发送回到您的终端。一个命令通常从一个叫标准输入的地方读取输入，默认情况下，这恰好是你的终端。同样，一个命令通常将其输出写入到标准输出，默认情况下，这也是你的终端。</p><p>重定向命令列表如下：</p><table><thead><tr><th align="left">命令</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">command &gt; file</td><td align="left">将输出重定向到 file。</td></tr><tr><td align="left">command &lt; file</td><td align="left">将输入重定向到 file。</td></tr><tr><td align="left">command &gt;&gt; file</td><td align="left">将输出以追加的方式重定向到 file。</td></tr><tr><td align="left">n &gt; file</td><td align="left">将文件描述符为 n 的文件重定向到 file。</td></tr><tr><td align="left">n &gt;&gt; file</td><td align="left">将文件描述符为 n 的文件以追加的方式重定向到 file。</td></tr><tr><td align="left">n &gt;&amp; m</td><td align="left">将输出文件 m 和 n 合并。</td></tr><tr><td align="left">n &lt;&amp; m</td><td align="left">将输入文件 m 和 n 合并。</td></tr><tr><td align="left">&lt;&lt; tag</td><td align="left">将开始标记 tag 和结束标记 tag 之间的内容作为输入。</td></tr></tbody></table><blockquote><p>  需要注意的是文件描述符 0 通常是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。</p></blockquote><hr><h2 id="输出重定向"><a href="#输出重定向" class="headerlink" title="输出重定向"></a>输出重定向</h2><p>重定向一般通过在命令间插入特定的符号来实现。特别的，这些符号的语法如下所示:</p><pre><code>command1 &gt; file1</code></pre><p>上面这个命令执行command1然后将输出的内容存入file1。</p><p>注意任何file1内的已经存在的内容将被新内容替代。如果要将新内容添加在文件末尾，请使用&gt;&gt;操作符。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>执行下面的 who 命令，它将命令的完整的输出重定向在用户文件中(users):</p><pre><code>$ who &gt; users</code></pre><p>执行后，并没有在终端输出信息，这是因为输出已被从默认的标准输出设备（终端）重定向到指定的文件。</p><p>你可以使用 cat 命令查看文件内容：</p><pre><code>$ cat users_mbsetupuser console  Oct 31 17:35 tianqixin    console  Oct 31 17:35 tianqixin    ttys000  Dec  1 11:33 </code></pre><p>输出重定向会覆盖文件内容，请看下面的例子：</p><pre><code>$ echo "菜鸟教程：www.runoob.com" &gt; users$ cat users菜鸟教程：www.runoob.com$</code></pre><p>如果不希望文件内容被覆盖，可以使用 &gt;&gt; 追加到文件末尾，例如：</p><pre><code>$ echo "菜鸟教程：www.runoob.com" &gt;&gt; users$ cat users菜鸟教程：www.runoob.com菜鸟教程：www.runoob.com$</code></pre><hr><h2 id="输入重定向"><a href="#输入重定向" class="headerlink" title="输入重定向"></a>输入重定向</h2><p>和输出重定向一样，Unix 命令也可以从文件获取输入，语法为：</p><pre><code>command1 &lt; file1</code></pre><p>这样，本来需要从键盘获取输入的命令会转移到文件读取内容。</p><p>注意：输出重定向是大于号(&gt;)，输入重定向是小于号(&lt;)。</p><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>接着以上实例，我们需要统计 users 文件的行数,执行以下命令：</p><pre><code>$ wc -l users       2 users</code></pre><p>也可以将输入重定向到 users 文件：</p><pre><code>$  wc -l &lt; users       2 </code></pre><p>注意：上面两个例子的结果不同：第一个例子，会输出文件名；第二个不会，因为它仅仅知道从标准输入读取内容。</p><pre><code>command1 &lt; infile &gt; outfile</code></pre><p>同时替换输入和输出，执行command1，从文件infile读取内容，然后将输出写入到outfile中。</p><h3 id="重定向深入讲解"><a href="#重定向深入讲解" class="headerlink" title="重定向深入讲解"></a>重定向深入讲解</h3><p>一般情况下，每个 Unix/Linux 命令运行时都会打开三个文件：</p><ul><li>标准输入文件(stdin)：stdin的文件描述符为0，Unix程序默认从stdin读取数据。</li><li>标准输出文件(stdout)：stdout 的文件描述符为1，Unix程序默认向stdout输出数据。</li><li>标准错误文件(stderr)：stderr的文件描述符为2，Unix程序会向stderr流中写入错误信息。</li></ul><p>默认情况下，command &gt; file 将 stdout 重定向到 file，command &lt; file 将stdin 重定向到 file。</p><p>如果希望 stderr 重定向到 file，可以这样写：</p><pre><code>$ command 2 &gt; file</code></pre><p>如果希望 stderr 追加到 file 文件末尾，可以这样写：</p><pre><code>$ command 2 &gt;&gt; file</code></pre><p><strong>2</strong> 表示标准错误文件(stderr)。</p><p>如果希望将 stdout 和 stderr 合并后重定向到 file，可以这样写：</p><pre><code>$ command &gt; file 2&gt;&amp;1或者$ command &gt;&gt; file 2&gt;&amp;1</code></pre><p>如果希望对 stdin 和 stdout 都重定向，可以这样写：</p><pre><code>$ command &lt; file1 &gt;file2</code></pre><p>command 命令将 stdin 重定向到 file1，将 stdout 重定向到 file2。</p><hr><h2 id="Here-Document"><a href="#Here-Document" class="headerlink" title="Here Document"></a>Here Document</h2><p>Here Document 是 Shell 中的一种特殊的重定向方式，用来将输入重定向到一个交互式 Shell 脚本或程序。</p><p>它的基本的形式如下：</p><pre><code>command &lt;&lt; delimiter    documentdelimiter</code></pre><p>它的作用是将两个 delimiter 之间的内容(document) 作为输入传递给 command。</p><blockquote><p>  注意：</p><ul><li>结尾的delimiter 一定要顶格写，前面不能有任何字符，后面也不能有任何字符，包括空格和 tab 缩进。</li><li>开始的delimiter前后的空格会被忽略掉。</li></ul></blockquote><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><p>在命令行中通过 wc -l 命令计算 Here Document 的行数：</p><pre><code>$ wc -l &lt;&lt; EOF    欢迎来到    菜鸟教程    www.runoob.comEOF3          # 输出结果为 3 行$</code></pre><p>我们也可以将 Here Document 用在脚本中，例如：</p><pre><code>#!/bin/bash# author:菜鸟教程# url:www.runoob.comcat &lt;&lt; EOF欢迎来到菜鸟教程www.runoob.comEOF</code></pre><p>执行以上脚本，输出结果：</p><pre><code>欢迎来到菜鸟教程www.runoob.com</code></pre><hr><h2 id="dev-null-文件"><a href="#dev-null-文件" class="headerlink" title="/dev/null 文件"></a>/dev/null 文件</h2><p>如果希望执行某个命令，但又不希望在屏幕上显示输出结果，那么可以将输出重定向到 /dev/null：</p><pre><code>$ command &gt; /dev/null</code></pre><p>/dev/null 是一个特殊的文件，写入到它的内容都会被丢弃；如果尝试从该文件读取内容，那么什么也读不到。但是 /dev/null 文件非常有用，将命令的输出重定向到它，会起到”禁止输出”的效果。</p><p>如果希望屏蔽 stdout 和 stderr，可以这样写：</p><pre><code>$ command &gt; /dev/null 2&gt;&amp;1</code></pre><blockquote><p>  <strong>注意：</strong>0 是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。</p></blockquote><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><ul><li><a href="https://www.runoob.com/linux/linux-shell-io-redirections.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-shell-io-redirections.html</a></li></ul><p><em>如有侵权，联系 <a href="mailto:2025685938@qq.com" target="_blank" rel="noopener">2025685938@qq.com</a> 删除</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10.Shell 函数</title>
      <link href="/posts/10360.html"/>
      <url>/posts/10360.html</url>
      
        <content type="html"><![CDATA[<h1 id="Shell-函数"><a href="#Shell-函数" class="headerlink" title="Shell 函数"></a>Shell 函数</h1><p>linux shell 可以用户定义函数，然后在shell脚本中可以随便调用。</p><p>shell中函数的定义格式如下：</p><pre><code>[ function ] funname [()]{    action;    [return int;]}</code></pre><p>说明：</p><ul><li>1、可以带function fun() 定义，也可以直接fun() 定义,不带任何参数。</li><li>2、参数返回，可以显示加：return 返回，如果不加，将以最后一条命令运行结果，作为返回值。 return后跟数值n(0-255</li></ul><p>下面的例子定义了一个函数并进行调用：</p><pre><code>#!/bin/bash# author:菜鸟教程# url:www.runoob.comdemoFun(){    echo "这是我的第一个 shell 函数!"}echo "-----函数开始执行-----"demoFunecho "-----函数执行完毕-----"</code></pre><p>输出结果：</p><pre><code>-----函数开始执行-----这是我的第一个 shell 函数!-----函数执行完毕-----</code></pre><p>下面定义一个带有return语句的函数：</p><pre><code>#!/bin/bash# author:菜鸟教程# url:www.runoob.comfunWithReturn(){    echo "这个函数会对输入的两个数字进行相加运算..."    echo "输入第一个数字: "    read aNum    echo "输入第二个数字: "    read anotherNum    echo "两个数字分别为 $aNum 和 $anotherNum !"    return $(($aNum+$anotherNum))}funWithReturnecho "输入的两个数字之和为 $? !"</code></pre><p>输出类似下面：</p><pre><code>这个函数会对输入的两个数字进行相加运算...输入第一个数字: 1输入第二个数字: 2两个数字分别为 1 和 2 !输入的两个数字之和为 3 !</code></pre><p>函数返回值在调用该函数后通过 $? 来获得。</p><p>注意：所有函数在使用前必须定义。这意味着必须将函数放在脚本开始部分，直至shell解释器首次发现它时，才可以使用。调用函数仅使用其函数名即可。</p><hr><h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h2><p>在Shell中，调用函数时可以向其传递参数。在函数体内部，通过 $n 的形式来获取参数的值，例如，$1表示第一个参数，$2表示第二个参数…</p><p>带参数的函数示例：</p><pre><code>#!/bin/bash# author:菜鸟教程# url:www.runoob.comfunWithParam(){    echo "第一个参数为 $1 !"    echo "第二个参数为 $2 !"    echo "第十个参数为 $10 !"    echo "第十个参数为 ${10} !"    echo "第十一个参数为 ${11} !"    echo "参数总数有 $# 个!"    echo "作为一个字符串输出所有参数 $* !"}funWithParam 1 2 3 4 5 6 7 8 9 34 73</code></pre><p>输出结果：</p><pre><code>第一个参数为 1 !第二个参数为 2 !第十个参数为 10 !第十个参数为 34 !第十一个参数为 73 !参数总数有 11 个!作为一个字符串输出所有参数 1 2 3 4 5 6 7 8 9 34 73 !</code></pre><p>注意，$10 不能获取第十个参数，获取第十个参数需要${10}。当n&gt;=10时，需要使用${n}来获取参数。</p><p>另外，还有几个特殊字符用来处理参数：</p><table><thead><tr><th align="left">参数处理</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">$#</td><td align="left">传递到脚本的参数个数</td></tr><tr><td align="left">$*</td><td align="left">以一个单字符串显示所有向脚本传递的参数</td></tr><tr><td align="left">$$</td><td align="left">脚本运行的当前进程ID号</td></tr><tr><td align="left">$!</td><td align="left">后台运行的最后一个进程的ID号</td></tr><tr><td align="left">$@</td><td align="left">与$*相同，但是使用时加引号，并在引号中返回每个参数。</td></tr><tr><td align="left">$-</td><td align="left">显示Shell使用的当前选项，与set命令功能相同。</td></tr><tr><td align="left">$?</td><td align="left">显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。</td></tr></tbody></table><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><ul><li><a href="https://www.runoob.com/linux/linux-shell-func.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-shell-func.html</a></li></ul><p><em>如有侵权，联系 <a href="mailto:2025685938@qq.com" target="_blank" rel="noopener">2025685938@qq.com</a> 删除</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.Shell 流程控制</title>
      <link href="/posts/19021.html"/>
      <url>/posts/19021.html</url>
      
        <content type="html"><![CDATA[<h1 id="Shell-流程控制"><a href="#Shell-流程控制" class="headerlink" title="Shell 流程控制"></a>Shell 流程控制</h1><p>和Java、PHP等语言不一样，sh的流程控制不可为空，如(以下为PHP流程控制写法)：</p><pre><code>&lt;?phpif (isset($_GET["q"])) {    search(q);}else {    // 不做任何事情}</code></pre><p>在sh/bash里可不能这么写，如果else分支没有语句执行，就不要写这个else。</p><hr><h2 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h2><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><p>if 语句语法格式：</p><pre><code>if conditionthen    command1     command2    ...    commandN fi</code></pre><p>写成一行（适用于终端命令提示符）：</p><pre><code>if [ $(ps -ef | grep -c "ssh") -gt 1 ]; then echo "true"; fi</code></pre><p>末尾的fi就是if倒过来拼写，后面还会遇到类似的。</p><h3 id="if-else-1"><a href="#if-else-1" class="headerlink" title="if else"></a>if else</h3><p>if else 语法格式：</p><pre><code>if conditionthen    command1     command2    ...    commandNelse    commandfi</code></pre><h3 id="if-else-if-else"><a href="#if-else-if-else" class="headerlink" title="if else-if else"></a>if else-if else</h3><p>if else-if else 语法格式：</p><pre><code>if condition1then    command1elif condition2 then     command2else    commandNfi</code></pre><p>以下实例判断两个变量是否相等：</p><pre><code>a=10b=20if [ $a == $b ]then   echo "a 等于 b"elif [ $a -gt $b ]then   echo "a 大于 b"elif [ $a -lt $b ]then   echo "a 小于 b"else   echo "没有符合的条件"fi</code></pre><p>输出结果：</p><pre><code>a 小于 b</code></pre><p>if else语句经常与test命令结合使用，如下所示：</p><pre><code>num1=$[2*3]num2=$[1+5]if test $[num1] -eq $[num2]then    echo '两个数字相等!'else    echo '两个数字不相等!'fi</code></pre><p>输出结果：</p><pre><code>两个数字相等!</code></pre><hr><h2 id="for-循环"><a href="#for-循环" class="headerlink" title="for 循环"></a>for 循环</h2><p>与其他编程语言类似，Shell支持for循环。</p><p>for循环一般格式为：</p><pre><code>for var in item1 item2 ... itemNdo    command1    command2    ...    commandNdone</code></pre><p>写成一行：</p><pre><code>for var in item1 item2 ... itemN; do command1; command2… done;</code></pre><p>当变量值在列表里，for循环即执行一次所有命令，使用变量名获取列表中的当前取值。命令可为任何有效的shell命令和语句。in列表可以包含替换、字符串和文件名。</p><p>in列表是可选的，如果不用它，for循环使用命令行的位置参数。</p><p>例如，顺序输出当前列表中的数字：</p><pre><code>for loop in 1 2 3 4 5do    echo "The value is: $loop"done</code></pre><p>输出结果：</p><pre><code>The value is: 1The value is: 2The value is: 3The value is: 4The value is: 5</code></pre><p>顺序输出字符串中的字符：</p><pre><code>for str in 'This is a string'do    echo $strdone</code></pre><p>输出结果：</p><pre><code>This is a string</code></pre><hr><h2 id="while-语句"><a href="#while-语句" class="headerlink" title="while 语句"></a>while 语句</h2><p>while循环用于不断执行一系列命令，也用于从输入文件中读取数据；命令通常为测试条件。其格式为：</p><pre><code>while conditiondo    commanddone</code></pre><p>以下是一个基本的while循环，测试条件是：如果int小于等于5，那么条件返回真。int从0开始，每次循环处理时，int加1。运行上述脚本，返回数字1到5，然后终止。</p><pre><code>#!/bin/bashint=1while(( $int&lt;=5 ))do    echo $int    let "int++"done</code></pre><p>运行脚本，输出：</p><pre><code>12345</code></pre><p>以上实例使用了 Bash let 命令，它用于执行一个或多个表达式，变量计算中不需要加上 $ 来表示变量，具体可查阅：<a href="https://www.runoob.com/linux/linux-comm-let.html" target="_blank" rel="noopener">Bash let 命令</a></p><p>。</p><p>while循环可用于读取键盘信息。下面的例子中，输入信息被设置为变量FILM，按<ctrl-d>结束循环。</ctrl-d></p><pre><code>echo '按下 &lt;CTRL-D&gt; 退出'echo -n '输入你最喜欢的网站名: 'while read FILMdo    echo "是的！$FILM 是一个好网站"done</code></pre><p>运行脚本，输出类似下面：</p><pre><code>按下 &lt;CTRL-D&gt; 退出输入你最喜欢的网站名:菜鸟教程是的！菜鸟教程 是一个好网站</code></pre><h3 id="无限循环"><a href="#无限循环" class="headerlink" title="无限循环"></a>无限循环</h3><p>无限循环语法格式：</p><pre><code>while :do    commanddone</code></pre><p>或者</p><pre><code>while truedo    commanddone</code></pre><p>或者</p><pre><code>for (( ; ; ))</code></pre><hr><h2 id="until-循环"><a href="#until-循环" class="headerlink" title="until 循环"></a>until 循环</h2><p>until 循环执行一系列命令直至条件为 true 时停止。</p><p>until 循环与 while 循环在处理方式上刚好相反。</p><p>一般 while 循环优于 until 循环，但在某些时候—也只是极少数情况下，until 循环更加有用。</p><p>until 语法格式:</p><pre><code>until conditiondo    commanddone</code></pre><p>condition 一般为条件表达式，如果返回值为 false，则继续执行循环体内的语句，否则跳出循环。</p><p>以下实例我们使用 until 命令来输出 0 ~ 9 的数字：</p><pre><code>#!/bin/basha=0until [ ! $a -lt 10 ]do   echo $a   a=`expr $a + 1`done</code></pre><p>运行结果：</p><p>输出结果为：</p><pre><code>0123456789</code></pre><hr><h2 id="case"><a href="#case" class="headerlink" title="case"></a>case</h2><p>Shell case语句为多选择语句。可以用case语句匹配一个值与一个模式，如果匹配成功，执行相匹配的命令。case语句格式如下：</p><pre><code>case 值 in模式1)    command1    command2    ...    commandN    ;;模式2）    command1    command2    ...    commandN    ;;esac</code></pre><p>case工作方式如上所示。取值后面必须为单词in，每一模式必须以右括号结束。取值可以为变量或常数。匹配发现取值符合某一模式后，其间所有命令开始执行直至 ;;。</p><p>取值将检测匹配的每一个模式。一旦模式匹配，则执行完匹配模式相应命令后不再继续其他模式。如果无一匹配模式，使用星号 * 捕获该值，再执行后面的命令。</p><p>下面的脚本提示输入1到4，与每一种模式进行匹配：</p><pre><code>echo '输入 1 到 4 之间的数字:'echo '你输入的数字为:'read aNumcase $aNum in    1)  echo '你选择了 1'    ;;    2)  echo '你选择了 2'    ;;    3)  echo '你选择了 3'    ;;    4)  echo '你选择了 4'    ;;    *)  echo '你没有输入 1 到 4 之间的数字'    ;;esac</code></pre><p>输入不同的内容，会有不同的结果，例如：</p><pre><code>输入 1 到 4 之间的数字:你输入的数字为:3你选择了 3</code></pre><hr><h2 id="跳出循环"><a href="#跳出循环" class="headerlink" title="跳出循环"></a>跳出循环</h2><p>在循环过程中，有时候需要在未达到循环结束条件时强制跳出循环，Shell使用两个命令来实现该功能：break和continue。</p><h3 id="break命令"><a href="#break命令" class="headerlink" title="break命令"></a>break命令</h3><p>break命令允许跳出所有循环（终止执行后面的所有循环）。</p><p>下面的例子中，脚本进入死循环直至用户输入数字大于5。要跳出这个循环，返回到shell提示符下，需要使用break命令。</p><pre><code>#!/bin/bashwhile :do    echo -n "输入 1 到 5 之间的数字:"    read aNum    case $aNum in        1|2|3|4|5) echo "你输入的数字为 $aNum!"        ;;        *) echo "你输入的数字不是 1 到 5 之间的! 游戏结束"            break        ;;    esacdone</code></pre><p>执行以上代码，输出结果为：</p><pre><code>输入 1 到 5 之间的数字:3你输入的数字为 3!输入 1 到 5 之间的数字:7你输入的数字不是 1 到 5 之间的! 游戏结束</code></pre><h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><p>continue命令与break命令类似，只有一点差别，它不会跳出所有循环，仅仅跳出当前循环。</p><p>对上面的例子进行修改：</p><pre><code>#!/bin/bashwhile :do    echo -n "输入 1 到 5 之间的数字: "    read aNum    case $aNum in        1|2|3|4|5) echo "你输入的数字为 $aNum!"        ;;        *) echo "你输入的数字不是 1 到 5 之间的!"            continue            echo "游戏结束"        ;;    esacdone</code></pre><p>运行代码发现，当输入大于5的数字时，该例中的循环不会结束，语句 <strong>echo “游戏结束”</strong> 永远不会被执行。</p><hr><h2 id="esac"><a href="#esac" class="headerlink" title="esac"></a>esac</h2><p>case的语法和C family语言差别很大，它需要一个esac（就是case反过来）作为结束标记，每个case分支用右圆括号，用两个分号表示break。</p><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><ul><li><a href="https://www.runoob.com/linux/linux-shell-process-control.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-shell-process-control.html</a></li></ul><p><em>如有侵权，联系 <a href="mailto:2025685938@qq.com" target="_blank" rel="noopener">2025685938@qq.com</a> 删除</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.Shell test 命令</title>
      <link href="/posts/24569.html"/>
      <url>/posts/24569.html</url>
      
        <content type="html"><![CDATA[<h1 id="Shell-test-命令"><a href="#Shell-test-命令" class="headerlink" title="Shell test 命令"></a>Shell test 命令</h1><p>Shell中的 test 命令用于检查某个条件是否成立，它可以进行数值、字符和文件三个方面的测试。</p><hr><h2 id="数值测试"><a href="#数值测试" class="headerlink" title="数值测试"></a>数值测试</h2><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">-eq</td><td align="left">等于则为真</td></tr><tr><td align="left">-ne</td><td align="left">不等于则为真</td></tr><tr><td align="left">-gt</td><td align="left">大于则为真</td></tr><tr><td align="left">-ge</td><td align="left">大于等于则为真</td></tr><tr><td align="left">-lt</td><td align="left">小于则为真</td></tr><tr><td align="left">-le</td><td align="left">小于等于则为真</td></tr></tbody></table><p>实例演示：</p><pre><code>num1=100num2=100if test $[num1] -eq $[num2]then    echo '两个数相等！'else    echo '两个数不相等！'fi</code></pre><p>输出结果：</p><pre><code>两个数相等！</code></pre><p>代码中的 [] 执行基本的算数运算，如：</p><pre><code>#!/bin/basha=5b=6result=$[a+b] # 注意等号两边不能有空格echo "result 为： $result"</code></pre><p>结果为:</p><pre><code>result 为： 11</code></pre><hr><h2 id="字符串测试"><a href="#字符串测试" class="headerlink" title="字符串测试"></a>字符串测试</h2><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">=</td><td align="left">等于则为真</td></tr><tr><td align="left">!=</td><td align="left">不相等则为真</td></tr><tr><td align="left">-z 字符串</td><td align="left">字符串的长度为零则为真</td></tr><tr><td align="left">-n 字符串</td><td align="left">字符串的长度不为零则为真</td></tr></tbody></table><p>实例演示：</p><pre><code>num1="ru1noob"num2="runoob"if test $num1 = $num2then    echo '两个字符串相等!'else    echo '两个字符串不相等!'fi</code></pre><p>输出结果：</p><pre><code>两个字符串不相等!</code></pre><hr><h2 id="文件测试"><a href="#文件测试" class="headerlink" title="文件测试"></a>文件测试</h2><table><thead><tr><th align="left">参数</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">-e 文件名</td><td align="left">如果文件存在则为真</td></tr><tr><td align="left">-r 文件名</td><td align="left">如果文件存在且可读则为真</td></tr><tr><td align="left">-w 文件名</td><td align="left">如果文件存在且可写则为真</td></tr><tr><td align="left">-x 文件名</td><td align="left">如果文件存在且可执行则为真</td></tr><tr><td align="left">-s 文件名</td><td align="left">如果文件存在且至少有一个字符则为真</td></tr><tr><td align="left">-d 文件名</td><td align="left">如果文件存在且为目录则为真</td></tr><tr><td align="left">-f 文件名</td><td align="left">如果文件存在且为普通文件则为真</td></tr><tr><td align="left">-c 文件名</td><td align="left">如果文件存在且为字符型特殊文件则为真</td></tr><tr><td align="left">-b 文件名</td><td align="left">如果文件存在且为块特殊文件则为真</td></tr></tbody></table><p>实例演示：</p><pre><code>cd /binif test -e ./bashthen    echo '文件已存在!'else    echo '文件不存在!'fi</code></pre><p>输出结果：</p><pre><code>文件已存在!</code></pre><p>另外，Shell还提供了与( -a )、或( -o )、非( ! )三个逻辑操作符用于将测试条件连接起来，其优先级为：”!”最高，”-a”次之，”-o”最低。例如：</p><pre><code>cd /binif test -e ./notFile -o -e ./bashthen    echo '至少有一个文件存在!'else    echo '两个文件都不存在'fi</code></pre><p>输出结果：</p><pre><code>至少有一个文件存在!</code></pre><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><ul><li><a href="https://www.runoob.com/linux/linux-shell-test.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-shell-test.html</a></li></ul><p><em>如有侵权，联系 <a href="mailto:2025685938@qq.com" target="_blank" rel="noopener">2025685938@qq.com</a> 删除</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.Shell printf 命令</title>
      <link href="/posts/62278.html"/>
      <url>/posts/62278.html</url>
      
        <content type="html"><![CDATA[<h1 id="Shell-printf-命令"><a href="#Shell-printf-命令" class="headerlink" title="Shell printf 命令"></a>Shell printf 命令</h1><p>上一章节我们学习了 Shell 的 echo 命令，本章节我们来学习 Shell 的另一个输出命令 printf。</p><p>printf 命令模仿 C 程序库（library）里的 printf() 程序。</p><p>printf 由 POSIX 标准所定义，因此使用 printf 的脚本比使用 echo 移植性好。</p><p>printf 使用引用文本或空格分隔的参数，外面可以在 printf 中使用格式化字符串，还可以制定字符串的宽度、左右对齐方式等。默认 printf 不会像 echo 自动添加换行符，我们可以手动添加 \n。</p><p>printf 命令的语法：</p><pre><code>printf  format-string  [arguments...]</code></pre><p><strong>参数说明：</strong></p><ul><li><strong>format-string:</strong> 为格式控制字符串</li><li><strong>arguments:</strong> 为参数列表。</li></ul><p>实例如下：</p><pre><code>$ echo "Hello, Shell"Hello, Shell$ printf "Hello, Shell\n"Hello, Shell$</code></pre><p>接下来,我来用一个脚本来体现printf的强大功能：</p><pre><code>#!/bin/bash# author:菜鸟教程# url:www.runoob.comprintf "%-10s %-8s %-4s\n" 姓名 性别 体重kg  printf "%-10s %-8s %-4.2f\n" 郭靖 男 66.1234 printf "%-10s %-8s %-4.2f\n" 杨过 男 48.6543 printf "%-10s %-8s %-4.2f\n" 郭芙 女 47.9876 </code></pre><p>执行脚本，输出结果如下所示：</p><pre><code>姓名     性别   体重kg郭靖     男      66.12杨过     男      48.65郭芙     女      47.99</code></pre><p>%s %c %d %f都是格式替代符</p><p>%-10s 指一个宽度为10个字符（-表示左对齐，没有则表示右对齐），任何字符都会被显示在10个字符宽的字符内，如果不足则自动以空格填充，超过也会将内容全部显示出来。</p><p>%-4.2f 指格式化为小数，其中.2指保留2位小数。</p><p>更多实例：</p><pre><code>#!/bin/bash# author:菜鸟教程# url:www.runoob.com# format-string为双引号printf "%d %s\n" 1 "abc"# 单引号与双引号效果一样 printf '%d %s\n' 1 "abc" # 没有引号也可以输出printf %s abcdef# 格式只指定了一个参数，但多出的参数仍然会按照该格式输出，format-string 被重用printf %s abc defprintf "%s\n" abc defprintf "%s %s %s\n" a b c d e f g h i j# 如果没有 arguments，那么 %s 用NULL代替，%d 用 0 代替printf "%s and %d \n" </code></pre><p>执行脚本，输出结果如下所示：</p><pre><code>1 abc1 abcabcdefabcdefabcdefa b cd e fg h ij   and 0</code></pre><hr><h2 id="printf的转义序列"><a href="#printf的转义序列" class="headerlink" title="printf的转义序列"></a>printf的转义序列</h2><table><thead><tr><th align="left">序列</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">\a</td><td align="left">警告字符，通常为ASCII的BEL字符</td></tr><tr><td align="left">\b</td><td align="left">后退</td></tr><tr><td align="left">\c</td><td align="left">抑制（不显示）输出结果中任何结尾的换行字符（只在%b格式指示符控制下的参数字符串中有效），而且，任何留在参数里的字符、任何接下来的参数以及任何留在格式字符串中的字符，都被忽略</td></tr><tr><td align="left">\f</td><td align="left">换页（formfeed）</td></tr><tr><td align="left">\n</td><td align="left">换行</td></tr><tr><td align="left">\r</td><td align="left">回车（Carriage return）</td></tr><tr><td align="left">\t</td><td align="left">水平制表符</td></tr><tr><td align="left">\v</td><td align="left">垂直制表符</td></tr><tr><td align="left">\</td><td align="left">一个字面上的反斜杠字符</td></tr><tr><td align="left">\ddd</td><td align="left">表示1到3位数八进制值的字符。仅在格式字符串中有效</td></tr><tr><td align="left">\0ddd</td><td align="left">表示1到3位的八进制值字符</td></tr></tbody></table><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><pre><code>$ printf "a string, no processing:&lt;%s&gt;\n" "A\nB"a string, no processing:&lt;A\nB&gt;$ printf "a string, no processing:&lt;%b&gt;\n" "A\nB"a string, no processing:&lt;AB&gt;$ printf "www.runoob.com \a"www.runoob.com $                  #不换行</code></pre><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><ul><li><a href="https://www.runoob.com/linux/linux-shell-printf.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-shell-printf.html</a></li></ul><p><em>如有侵权，联系 <a href="mailto:2025685938@qq.com" target="_blank" rel="noopener">2025685938@qq.com</a> 删除</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.hell echo命令</title>
      <link href="/posts/18695.html"/>
      <url>/posts/18695.html</url>
      
        <content type="html"><![CDATA[<h2 id="hell-echo命令"><a href="#hell-echo命令" class="headerlink" title="hell echo命令"></a>hell echo命令</h2><p>Shell 的 echo 指令与 PHP 的 echo 指令类似，都是用于字符串的输出。命令格式：</p><pre><code>echo string</code></pre><p>您可以使用echo实现更复杂的输出格式控制。</p><h3 id="1-显示普通字符串"><a href="#1-显示普通字符串" class="headerlink" title="1.显示普通字符串:"></a>1.显示普通字符串:</h3><pre><code>echo "It is a test"</code></pre><p>这里的双引号完全可以省略，以下命令与上面实例效果一致：</p><pre><code>echo It is a test</code></pre><h3 id="2-显示转义字符"><a href="#2-显示转义字符" class="headerlink" title="2.显示转义字符"></a>2.显示转义字符</h3><pre><code>echo "\"It is a test\""</code></pre><p>结果将是:</p><pre><code>"It is a test"</code></pre><p>同样，双引号也可以省略</p><h3 id="3-显示变量"><a href="#3-显示变量" class="headerlink" title="3.显示变量"></a>3.显示变量</h3><p>read 命令从标准输入中读取一行,并把输入行的每个字段的值指定给 shell 变量</p><pre><code>#!/bin/shread name echo "$name It is a test"</code></pre><p>以上代码保存为 test.sh，name 接收标准输入的变量，结果将是:</p><pre><code>[root@www ~]# sh test.shOK                     #标准输入OK It is a test        #输出</code></pre><h3 id="4-显示换行"><a href="#4-显示换行" class="headerlink" title="4.显示换行"></a>4.显示换行</h3><pre><code>echo -e "OK! \n" # -e 开启转义echo "It is a test"</code></pre><p>输出结果：</p><pre><code>OK!It is a test</code></pre><h3 id="5-显示不换行"><a href="#5-显示不换行" class="headerlink" title="5.显示不换行"></a>5.显示不换行</h3><pre><code>#!/bin/shecho -e "OK! \c" # -e 开启转义 \c 不换行echo "It is a test"</code></pre><p>输出结果：</p><pre><code>OK! It is a test</code></pre><h3 id="6-显示结果定向至文件"><a href="#6-显示结果定向至文件" class="headerlink" title="6.显示结果定向至文件"></a>6.显示结果定向至文件</h3><pre><code>echo "It is a test" &gt; myfile</code></pre><h3 id="7-原样输出字符串，不进行转义或取变量-用单引号"><a href="#7-原样输出字符串，不进行转义或取变量-用单引号" class="headerlink" title="7.原样输出字符串，不进行转义或取变量(用单引号)"></a>7.原样输出字符串，不进行转义或取变量(用单引号)</h3><pre><code>echo '$name\"'</code></pre><p>输出结果：</p><pre><code>$name\"</code></pre><h3 id="8-显示命令执行结果"><a href="#8-显示命令执行结果" class="headerlink" title="8.显示命令执行结果"></a>8.显示命令执行结果</h3><pre><code>echo `date`</code></pre><p><strong>注意：</strong> 这里使用的是反引号 <strong>`</strong>, 而不是单引号 <strong>‘</strong>。</p><p>结果将显示当前日期</p><pre><code>Thu Jul 24 10:08:46 CST 2014</code></pre><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><ul><li><a href="https://www.runoob.com/linux/linux-shell-echo.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-shell-echo.html</a></li></ul><p><em>如有侵权，联系 <a href="mailto:2025685938@qq.com" target="_blank" rel="noopener">2025685938@qq.com</a> 删除</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.Shell 基本运算符</title>
      <link href="/posts/57057.html"/>
      <url>/posts/57057.html</url>
      
        <content type="html"><![CDATA[<h1 id="Shell-基本运算符"><a href="#Shell-基本运算符" class="headerlink" title="Shell 基本运算符"></a>Shell 基本运算符</h1><p>Shell 和其他编程语言一样，支持多种运算符，包括：</p><ul><li>算数运算符</li><li>关系运算符</li><li>布尔运算符</li><li>字符串运算符</li><li>文件测试运算符</li></ul><p>原生bash不支持简单的数学运算，但是可以通过其他命令来实现，例如 awk 和 expr，expr 最常用。</p><p>expr 是一款表达式计算工具，使用它能完成表达式的求值操作。</p><p>例如，两个数相加(<strong>注意使用的是反引号 ` 而不是单引号 ‘</strong>)：</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p><em>#!/bin/bash</em></p><p>val=<strong>`**</strong>expr** 2 + 2<strong>`</strong><br><strong>echo</strong> “两数之和为 : $val”</p><p><a href="https://www.runoob.com/try/runcode.php?filename=add2data&amp;type=bash" target="_blank" rel="noopener">运行实例 »</a></p><p>执行脚本，输出结果如下所示：</p><pre><code>两数之和为 : 4</code></pre><p>两点注意：</p><ul><li>表达式和运算符之间要有空格，例如 2+2 是不对的，必须写成 2 + 2，这与我们熟悉的大多数编程语言不一样。</li><li>完整的表达式要被 <strong><code></code></strong> 包含，注意这个字符不是常用的单引号，在 Esc 键下边。</li></ul><hr><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><p>下表列出了常用的算术运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">加法</td><td align="left"><code>expr $a + $b</code> 结果为 30。</td></tr><tr><td align="left">-</td><td align="left">减法</td><td align="left"><code>expr $a - $b</code> 结果为 -10。</td></tr><tr><td align="left">*</td><td align="left">乘法</td><td align="left"><code>expr $a \* $b</code> 结果为  200。</td></tr><tr><td align="left">/</td><td align="left">除法</td><td align="left"><code>expr $b / $a</code> 结果为 2。</td></tr><tr><td align="left">%</td><td align="left">取余</td><td align="left"><code>expr $b % $a</code> 结果为 0。</td></tr><tr><td align="left">=</td><td align="left">赋值</td><td align="left">a=$b 将把变量 b 的值赋给 a。</td></tr><tr><td align="left">==</td><td align="left">相等。用于比较两个数字，相同则返回 true。</td><td align="left">[ $a == $b ] 返回 false。</td></tr><tr><td align="left">!=</td><td align="left">不相等。用于比较两个数字，不相同则返回 true。</td><td align="left">[ $a != $b ] 返回 true。</td></tr></tbody></table><p><strong>注意：</strong>条件表达式要放在方括号之间，并且要有空格，例如: <strong>[$a==$b]</strong> 是错误的，必须写成 <strong>[ $a == $b ]</strong>。</p><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>算术运算符实例如下：</p><h2 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h2><p><em>#!/bin/bash</em><br><em># author:菜鸟教程</em><br><em># url:<a href="http://www.runoob.com" target="_blank" rel="noopener">www.runoob.com</a></em></p><p>a=10<br>b=20</p><p>val=<strong>`**</strong>expr** $a + $b<strong>`</strong><br><strong>echo</strong> “a + b : $val”</p><p>val=<strong>`**</strong>expr** $a - $b<strong>`</strong><br><strong>echo</strong> “a - b : $val”</p><p>val=<strong>`**</strong>expr** $a *<strong>** $b</strong>`**<br><strong>echo</strong> “a * b : $val”</p><p>val=<strong>`**</strong>expr** $b <strong>/</strong> $a<strong>`</strong><br><strong>echo</strong> “b / a : $val”</p><p>val=<strong>`**</strong>expr** $b <strong>%</strong> $a<strong>`</strong><br><strong>echo</strong> “b % a : $val”</p><p><strong>if</strong> <strong>[</strong> $a == $b <strong>]</strong><br><strong>then</strong><br>   <strong>echo</strong> “a 等于 b”<br><strong>fi</strong><br><strong>if</strong> <strong>[</strong> $a <strong>!</strong>= $b <strong>]</strong><br><strong>then</strong><br>   <strong>echo</strong> “a 不等于 b”<br><strong>fi</strong></p><p>执行脚本，输出结果如下所示：</p><pre><code>a + b : 30a - b : -10a * b : 200b / a : 2b % a : 0a 不等于 b</code></pre><blockquote><p>  <strong>注意：</strong></p><ul><li>乘号(*)前边必须加反斜杠()才能实现乘法运算；</li><li>if…then…fi 是条件语句，后续将会讲解。</li><li>在 MAC 中 shell 的 expr 语法是：<strong>$((表达式))</strong>，此处表达式中的 “*” 不需要转义符号 “" 。</li></ul></blockquote><hr><h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><p>关系运算符只支持数字，不支持字符串，除非字符串的值是数字。</p><p>下表列出了常用的关系运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">-eq</td><td align="left">检测两个数是否相等，相等返回 true。</td><td align="left">[ $a -eq $b ] 返回 false。</td></tr><tr><td align="left">-ne</td><td align="left">检测两个数是否不相等，不相等返回 true。</td><td align="left">[ $a -ne $b ] 返回 true。</td></tr><tr><td align="left">-gt</td><td align="left">检测左边的数是否大于右边的，如果是，则返回 true。</td><td align="left">[ $a -gt $b ] 返回 false。</td></tr><tr><td align="left">-lt</td><td align="left">检测左边的数是否小于右边的，如果是，则返回 true。</td><td align="left">[ $a -lt $b ] 返回 true。</td></tr><tr><td align="left">-ge</td><td align="left">检测左边的数是否大于等于右边的，如果是，则返回 true。</td><td align="left">[ $a -ge $b ] 返回 false。</td></tr><tr><td align="left">-le</td><td align="left">检测左边的数是否小于等于右边的，如果是，则返回 true。</td><td align="left">[ $a -le $b ] 返回 true。</td></tr></tbody></table><h3 id="实例-3"><a href="#实例-3" class="headerlink" title="实例"></a>实例</h3><p>关系运算符实例如下：</p><h2 id="实例-4"><a href="#实例-4" class="headerlink" title="实例"></a>实例</h2><p><em>#!/bin/bash</em><br><em># author:菜鸟教程</em><br><em># url:<a href="http://www.runoob.com" target="_blank" rel="noopener">www.runoob.com</a></em></p><p>a=10<br>b=20</p><p><strong>if</strong> <strong>[</strong> $a -eq $b <strong>]</strong><br><strong>then</strong><br>   <strong>echo</strong> “$a -eq $b : a 等于 b”<br><strong>else</strong><br>   <strong>echo</strong> “$a -eq $b: a 不等于 b”<br><strong>fi</strong><br><strong>if</strong> <strong>[</strong> $a -ne $b <strong>]</strong><br><strong>then</strong><br>   <strong>echo</strong> “$a -ne $b: a 不等于 b”<br><strong>else</strong><br>   <strong>echo</strong> “$a -ne $b : a 等于 b”<br><strong>fi</strong><br><strong>if</strong> <strong>[</strong> $a -gt $b <strong>]</strong><br><strong>then</strong><br>   <strong>echo</strong> “$a -gt $b: a 大于 b”<br><strong>else</strong><br>   <strong>echo</strong> “$a -gt $b: a 不大于 b”<br><strong>fi</strong><br><strong>if</strong> <strong>[</strong> $a -lt $b <strong>]</strong><br><strong>then</strong><br>   <strong>echo</strong> “$a -lt $b: a 小于 b”<br><strong>else</strong><br>   <strong>echo</strong> “$a -lt $b: a 不小于 b”<br><strong>fi</strong><br><strong>if</strong> <strong>[</strong> $a -ge $b <strong>]</strong><br><strong>then</strong><br>   <strong>echo</strong> “$a -ge $b: a 大于或等于 b”<br><strong>else</strong><br>   <strong>echo</strong> “$a -ge $b: a 小于 b”<br><strong>fi</strong><br><strong>if</strong> <strong>[</strong> $a -le $b <strong>]</strong><br><strong>then</strong><br>   <strong>echo</strong> “$a -le $b: a 小于或等于 b”<br><strong>else</strong><br>   <strong>echo</strong> “$a -le $b: a 大于 b”<br><strong>fi</strong></p><p>执行脚本，输出结果如下所示：</p><pre><code>10 -eq 20: a 不等于 b10 -ne 20: a 不等于 b10 -gt 20: a 不大于 b10 -lt 20: a 小于 b10 -ge 20: a 小于 b10 -le 20: a 小于或等于 b</code></pre><hr><h2 id="布尔运算符"><a href="#布尔运算符" class="headerlink" title="布尔运算符"></a>布尔运算符</h2><p>下表列出了常用的布尔运算符，假定变量 a 为 10，变量 b 为 20：</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">!</td><td align="left">非运算，表达式为 true 则返回 false，否则返回 true。</td><td align="left">[ ! false ] 返回 true。</td></tr><tr><td align="left">-o</td><td align="left">或运算，有一个表达式为 true 则返回 true。</td><td align="left">[ $a -lt 20 -o $b -gt 100 ] 返回 true。</td></tr><tr><td align="left">-a</td><td align="left">与运算，两个表达式都为 true 才返回 true。</td><td align="left">[ $a -lt 20 -a $b -gt 100 ] 返回 false。</td></tr></tbody></table><h3 id="实例-5"><a href="#实例-5" class="headerlink" title="实例"></a>实例</h3><p>布尔运算符实例如下：</p><h2 id="实例-6"><a href="#实例-6" class="headerlink" title="实例"></a>实例</h2><p><em>#!/bin/bash</em><br><em># author:菜鸟教程</em><br><em># url:<a href="http://www.runoob.com" target="_blank" rel="noopener">www.runoob.com</a></em></p><p>a=10<br>b=20</p><p><strong>if</strong> <strong>[</strong> $a <strong>!</strong>= $b <strong>]</strong><br><strong>then</strong><br>   <strong>echo</strong> “$a != $b : a 不等于 b”<br><strong>else</strong><br>   <strong>echo</strong> “$a == $b: a 等于 b”<br><strong>fi</strong><br><strong>if</strong> <strong>[</strong> $a -lt 100 -a $b -gt 15 <strong>]</strong><br><strong>then</strong><br>   <strong>echo</strong> “$a 小于 100 且 $b 大于 15 : 返回 true”<br><strong>else</strong><br>   <strong>echo</strong> “$a 小于 100 且 $b 大于 15 : 返回 false”<br><strong>fi</strong><br><strong>if</strong> <strong>[</strong> $a -lt 100 -o $b -gt 100 <strong>]</strong><br><strong>then</strong><br>   <strong>echo</strong> “$a 小于 100 或 $b 大于 100 : 返回 true”<br><strong>else</strong><br>   <strong>echo</strong> “$a 小于 100 或 $b 大于 100 : 返回 false”<br><strong>fi</strong><br><strong>if</strong> <strong>[</strong> $a -lt 5 -o $b -gt 100 <strong>]</strong><br><strong>then</strong><br>   <strong>echo</strong> “$a 小于 5 或 $b 大于 100 : 返回 true”<br><strong>else</strong><br>   <strong>echo</strong> “$a 小于 5 或 $b 大于 100 : 返回 false”<br><strong>fi</strong></p><p>执行脚本，输出结果如下所示：</p><pre><code>10 != 20 : a 不等于 b10 小于 100 且 20 大于 15 : 返回 true10 小于 100 或 20 大于 100 : 返回 true10 小于 5 或 20 大于 100 : 返回 false</code></pre><hr><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>以下介绍 Shell 的逻辑运算符，假定变量 a 为 10，变量 b 为 20:</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">&amp;&amp;</td><td align="left">逻辑的 AND</td><td align="left">[[ $a -lt 100 &amp;&amp; $b -gt 100 ]] 返回 false</td></tr><tr><td align="left">||</td><td align="left">逻辑的 OR</td><td align="left">[[ $a -lt 100 || $b -gt 100 ]] 返回 true</td></tr></tbody></table><h3 id="实例-7"><a href="#实例-7" class="headerlink" title="实例"></a>实例</h3><p>逻辑运算符实例如下：</p><h2 id="实例-8"><a href="#实例-8" class="headerlink" title="实例"></a>实例</h2><p><em>#!/bin/bash</em><br><em># author:菜鸟教程</em><br><em># url:<a href="http://www.runoob.com" target="_blank" rel="noopener">www.runoob.com</a></em></p><p>a=10<br>b=20</p><p><strong>if</strong> <strong>[**</strong>[** $a -lt 100 <strong>&amp;&amp;</strong> $b -gt 100 <strong>]**</strong>]**<br><strong>then</strong><br>   <strong>echo</strong> “返回 true”<br><strong>else</strong><br>   <strong>echo</strong> “返回 false”<br><strong>fi</strong></p><p><strong>if</strong> <strong>[**</strong>[** $a -lt 100 <strong>||</strong> $b -gt 100 <strong>]**</strong>]**<br><strong>then</strong><br>   <strong>echo</strong> “返回 true”<br><strong>else</strong><br>   <strong>echo</strong> “返回 false”<br><strong>fi</strong></p><p>执行脚本，输出结果如下所示：</p><pre><code>返回 false返回 true</code></pre><hr><h2 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h2><p>下表列出了常用的字符串运算符，假定变量 a 为 “abc”，变量 b 为 “efg”：</p><table><thead><tr><th align="left">运算符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">=</td><td align="left">检测两个字符串是否相等，相等返回 true。</td><td align="left">[ $a = $b ] 返回 false。</td></tr><tr><td align="left">!=</td><td align="left">检测两个字符串是否相等，不相等返回 true。</td><td align="left">[ $a != $b ] 返回 true。</td></tr><tr><td align="left">-z</td><td align="left">检测字符串长度是否为0，为0返回 true。</td><td align="left">[ -z $a ] 返回 false。</td></tr><tr><td align="left">-n</td><td align="left">检测字符串长度是否为0，不为0返回 true。</td><td align="left">[ -n “$a” ] 返回 true。</td></tr><tr><td align="left">$</td><td align="left">检测字符串是否为空，不为空返回 true。</td><td align="left">[ $a ] 返回 true。</td></tr></tbody></table><h3 id="实例-9"><a href="#实例-9" class="headerlink" title="实例"></a>实例</h3><p>字符串运算符实例如下：</p><h2 id="实例-10"><a href="#实例-10" class="headerlink" title="实例"></a>实例</h2><p><em>#!/bin/bash</em><br><em># author:菜鸟教程</em><br><em># url:<a href="http://www.runoob.com" target="_blank" rel="noopener">www.runoob.com</a></em></p><p>a=”abc”<br>b=”efg”</p><p><strong>if</strong> <strong>[</strong> $a = $b <strong>]</strong><br><strong>then</strong><br>   <strong>echo</strong> “$a = $b : a 等于 b”<br><strong>else</strong><br>   <strong>echo</strong> “$a = $b: a 不等于 b”<br><strong>fi</strong><br><strong>if</strong> <strong>[</strong> $a <strong>!</strong>= $b <strong>]</strong><br><strong>then</strong><br>   <strong>echo</strong> “$a != $b : a 不等于 b”<br><strong>else</strong><br>   <strong>echo</strong> “$a != $b: a 等于 b”<br><strong>fi</strong><br><strong>if</strong> <strong>[</strong> -z $a <strong>]</strong><br><strong>then</strong><br>   <strong>echo</strong> “-z $a : 字符串长度为 0”<br><strong>else</strong><br>   <strong>echo</strong> “-z $a : 字符串长度不为 0”<br><strong>fi</strong><br><strong>if</strong> <strong>[</strong> -n “$a” <strong>]</strong><br><strong>then</strong><br>   <strong>echo</strong> “-n $a : 字符串长度不为 0”<br><strong>else</strong><br>   <strong>echo</strong> “-n $a : 字符串长度为 0”<br><strong>fi</strong><br><strong>if</strong> <strong>[</strong> $a <strong>]</strong><br><strong>then</strong><br>   <strong>echo</strong> “$a : 字符串不为空”<br><strong>else</strong><br>   <strong>echo</strong> “$a : 字符串为空”<br><strong>fi</strong></p><p>执行脚本，输出结果如下所示：</p><pre><code>abc = efg: a 不等于 babc != efg : a 不等于 b-z abc : 字符串长度不为 0-n abc : 字符串长度不为 0abc : 字符串不为空</code></pre><hr><h2 id="文件测试运算符"><a href="#文件测试运算符" class="headerlink" title="文件测试运算符"></a>文件测试运算符</h2><p>文件测试运算符用于检测 Unix 文件的各种属性。</p><p>属性检测描述如下：</p><table><thead><tr><th align="left">操作符</th><th align="left">说明</th><th align="left">举例</th></tr></thead><tbody><tr><td align="left">-b file</td><td align="left">检测文件是否是块设备文件，如果是，则返回 true。</td><td align="left">[ -b $file ] 返回 false。</td></tr><tr><td align="left">-c file</td><td align="left">检测文件是否是字符设备文件，如果是，则返回 true。</td><td align="left">[ -c $file ] 返回 false。</td></tr><tr><td align="left">-d file</td><td align="left">检测文件是否是目录，如果是，则返回 true。</td><td align="left">[ -d $file ] 返回 false。</td></tr><tr><td align="left">-f file</td><td align="left">检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。</td><td align="left">[ -f $file ] 返回 true。</td></tr><tr><td align="left">-g file</td><td align="left">检测文件是否设置了 SGID 位，如果是，则返回 true。</td><td align="left">[ -g $file ] 返回 false。</td></tr><tr><td align="left">-k file</td><td align="left">检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。</td><td align="left">[ -k $file ] 返回 false。</td></tr><tr><td align="left">-p file</td><td align="left">检测文件是否是有名管道，如果是，则返回 true。</td><td align="left">[ -p $file ] 返回 false。</td></tr><tr><td align="left">-u file</td><td align="left">检测文件是否设置了 SUID 位，如果是，则返回 true。</td><td align="left">[ -u $file ] 返回 false。</td></tr><tr><td align="left">-r file</td><td align="left">检测文件是否可读，如果是，则返回 true。</td><td align="left">[ -r $file ] 返回 true。</td></tr><tr><td align="left">-w file</td><td align="left">检测文件是否可写，如果是，则返回 true。</td><td align="left">[ -w $file ] 返回 true。</td></tr><tr><td align="left">-x file</td><td align="left">检测文件是否可执行，如果是，则返回 true。</td><td align="left">[ -x $file ] 返回 true。</td></tr><tr><td align="left">-s file</td><td align="left">检测文件是否为空（文件大小是否大于0），不为空返回 true。</td><td align="left">[ -s $file ] 返回 true。</td></tr><tr><td align="left">-e file</td><td align="left">检测文件（包括目录）是否存在，如果是，则返回 true。</td><td align="left">[ -e $file ] 返回 true。</td></tr></tbody></table><p>其他检查符：</p><ul><li><strong>-S</strong>: 判断某文件是否 socket。</li><li><strong>-L</strong>: 检测文件是否存在并且是一个符号链接。</li></ul><h3 id="实例-11"><a href="#实例-11" class="headerlink" title="实例"></a>实例</h3><p>变量 file 表示文件 <strong>/var/www/runoob/test.sh**</strong>rwx**</p><h2 id="实例-12"><a href="#实例-12" class="headerlink" title="实例"></a>实例</h2><p><em>#!/bin/bash</em><br><em># author:菜鸟教程</em><br><em># url:<a href="http://www.runoob.com" target="_blank" rel="noopener">www.runoob.com</a></em></p><p>file=”/var/www/runoob/test.sh”<br><strong>if</strong> <strong>[</strong> -r $file <strong>]</strong><br><strong>then</strong><br>   <strong>echo</strong> “文件可读”<br><strong>else</strong><br>   <strong>echo</strong> “文件不可读”<br><strong>fi</strong><br><strong>if</strong> <strong>[</strong> -w $file <strong>]</strong><br><strong>then</strong><br>   <strong>echo</strong> “文件可写”<br><strong>else</strong><br>   <strong>echo</strong> “文件不可写”<br><strong>fi</strong><br><strong>if</strong> <strong>[</strong> -x $file <strong>]</strong><br><strong>then</strong><br>   <strong>echo</strong> “文件可执行”<br><strong>else</strong><br>   <strong>echo</strong> “文件不可执行”<br><strong>fi</strong><br><strong>if</strong> <strong>[</strong> -f $file <strong>]</strong><br><strong>then</strong><br>   <strong>echo</strong> “文件为普通文件”<br><strong>else</strong><br>   <strong>echo</strong> “文件为特殊文件”<br><strong>fi</strong><br><strong>if</strong> <strong>[</strong> -d $file <strong>]</strong><br><strong>then</strong><br>   <strong>echo</strong> “文件是个目录”<br><strong>else</strong><br>   <strong>echo</strong> “文件不是个目录”<br><strong>fi</strong><br><strong>if</strong> <strong>[</strong> -s $file <strong>]</strong><br><strong>then</strong><br>   <strong>echo</strong> “文件不为空”<br><strong>else</strong><br>   <strong>echo</strong> “文件为空”<br><strong>fi</strong><br><strong>if</strong> <strong>[</strong> -e $file <strong>]</strong><br><strong>then</strong><br>   <strong>echo</strong> “文件存在”<br><strong>else</strong><br>   <strong>echo</strong> “文件不存在”<br><strong>fi</strong></p><p>执行脚本，输出结果如下所示：</p><pre><code>文件可读文件可写文件可执行文件为普通文件文件不是个目录文件不为空文件存在</code></pre><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><ul><li><a href="https://www.runoob.com/linux/linux-shell-basic-operators.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-shell-basic-operators.html</a></li></ul><p><em>如有侵权，联系 <a href="mailto:2025685938@qq.com" target="_blank" rel="noopener">2025685938@qq.com</a> 删除</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> shell </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx安装配置</title>
      <link href="/posts/48054.html"/>
      <url>/posts/48054.html</url>
      
        <content type="html"><![CDATA[<h1 id="Nginx安装配置"><a href="#Nginx安装配置" class="headerlink" title="Nginx安装配置"></a>Nginx安装配置</h1><p><img src="https://www.runoob.com/wp-content/uploads/2015/01/nginx.jpg" alt="img"></p><p>Nginx（“引擎x”）是一款是由俄罗斯的程序设计师Igor Sysoev所开发高性能的Web和反向代理服务器，也是一个IMAP / POP3 / SMTP代理服务器。</p><p>在高连接并发的情况下，Nginx的是Apache的服务器不错的替代品。</p><hr><h2 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a>Nginx安装</h2><p>系统平台：CentOS 6.6版（最终版）64位。</p><h3 id="一，安装编译工具及库文件"><a href="#一，安装编译工具及库文件" class="headerlink" title="一，安装编译工具及库文件"></a>一，安装编译工具及库文件</h3><pre><code>yum -y install make zlib zlib-devel gcc-c ++ libtool openssl openssl-devel</code></pre><h3 id="二，首先要安装PCRE"><a href="#二，首先要安装PCRE" class="headerlink" title="二，首先要安装PCRE"></a>二，首先要安装PCRE</h3><p>PCRE作用是让Nginx支持重写功能。</p><p>1，下载PCRE安装包，下载地址：<a href="http://downloads.sourceforge.net/project/pcre/pcre/8.35/pcre-8.35.tar.gz" target="_blank" rel="noopener">http</a>：  <a href="http://downloads.sourceforge.net/project/pcre/pcre/8.35/pcre-8.35.tar.gz" target="_blank" rel="noopener">//downloads.sourceforge.net/project/pcre/pcre/8.35/pcre-8.35.tar.gz</a></p><pre><code>[root @ bogon src] #cd / usr / local / src /[root @ bogon src] #wget http://downloads.sourceforge.net/project/pcre/pcre/8.35/pcre-8.35.tar.gz</code></pre><p><img src="https://www.runoob.com/wp-content/uploads/2015/01/nginx1.png" alt="img"></p><pre><code>[root @ bogon src] #tar zxvf pcre-8.35.tar.gz</code></pre><p>3，进入安装包目录</p><pre><code>[root @ bogon src] #cd pcre-8.35</code></pre><p>4，编译安装 </p><pre><code>[root @ bogon pcre-8.35]＃。/ configure[root @ bogon pcre-8.35] #make &amp;&amp; make install</code></pre><p>5，查看PCRE版本</p><pre><code>[root @ bogon pcre-8.35] #pcre-config --version</code></pre><p><img src="https://www.runoob.com/wp-content/uploads/2015/01/nginx2.png" alt="img"></p><p>1，下载Nginx，下载地址：<a href="http://nginx.org/download/nginx-1.6.2.tar.gz" target="_blank" rel="noopener">http</a>：<a href="http://nginx.org/download/nginx-1.6.2.tar.gz" target="_blank" rel="noopener">//nginx.org/download/nginx-1.6.2.tar.gz</a></p><pre><code>[root @ bogon src] #cd / usr / local / src /[root @ bogon src] #wget http://nginx.org/download/nginx-1.6.2.tar.gz</code></pre><p><img src="https://www.runoob.com/wp-content/uploads/2015/01/nginx3.png" alt="img">2，解压安装包</p><pre><code>[root @ bogon src] #tar zxvf nginx-1.6.2.tar.gz</code></pre><p>3，进入安装包目录</p><pre><code>[root @ bogon src] #cd nginx-1.6.2</code></pre><p>4，编译安装</p><pre><code>[root @ bogon nginx-1.6.2]＃。/ configure --prefix = / usr / local / webserver / nginx --with-http_stub_status_module --with-http_ssl_module --with-pcre = / usr / local / src / pcre -8.35[root @ bogon nginx-1.6.2] #make[root @ bogon nginx-1.6.2] #make install</code></pre><p>5，查看nginx的版本</p><pre><code>[root @ bogon nginx-1.6.2]＃/ usr / local / webserver / nginx / sbin / nginx -v</code></pre><p><img src="https://www.runoob.com/wp-content/uploads/2015/01/nginx4.png" alt="img"></p><hr><h2 id="Nginx配置"><a href="#Nginx配置" class="headerlink" title="Nginx配置"></a>Nginx配置</h2><p>创建Nginx运行使用的用户www：</p><pre><code>[root @ bogon conf]＃/ usr / sbin / groupadd www [root @ bogon conf]＃/ usr / sbin / useradd -g www www</code></pre><p>配置nginx.conf，将/usr/local/webserver/nginx/conf/nginx.conf替换为以下内容</p><pre><code>[root @ bogon conf] #cat /usr/local/webserver/nginx/conf/nginx.conf用户www www;worker_processes 2; ＃设置值和CPU核心数一致error_log /usr/local/webserver/nginx/logs/nginx_error.log crit; ＃日志位置和日志级别pid /usr/local/webserver/nginx/nginx.pid;＃指定此进程可以打开的最大文件描述符的值。worker_rlimit_nofile 65535;事件{  使用epoll;  worker_connections 65535;}HTTP{  包括mime.types;  default_type application / octet-stream;  log_format main'$ remote_addr  -  $ remote_user [$ time_local]“$ request”'               '$ status $ body_bytes_sent“$ http_referer”'               '“$ http_user_agent”$ http_x_forwarded_for';#charset gb2312;  server_names_hash_bucket_size 128;  client_header_buffer_size 32k;  large_client_header_buffers 4 32k;  client_max_body_size 8m;  sendfile on;  tcp_nopush on;  keepalive_timeout 60;  tcp_nodelay on;  fastcgi_connect_timeout 300;  fastcgi_send_timeout 300;  fastcgi_read_timeout 300;  fastcgi_buffer_size 64k;  fastcgi_buffers 4 64k;  fastcgi_busy_buffers_size 128k;  fastcgi_temp_file_write_size 128k;  gzip on;   gzip_min_length 1k;  gzip_buffers 4 16k;  gzip_http_version 1.0;  gzip_comp_level 2;  gzip_types text / plain application / x-javascript text / css application / xml;  gzip_vary on;  #limit_zone crawler $ binary_remote_addr 10m; ＃下面是服务器虚拟主机的配置 服务器  {    听80;＃监听端口    server_name localhost;＃域名    index index.html index.htm index.php;    root / usr / local / webserver / nginx / html;＃站点目录      location~. * \。（php | php5）？$    {      #fastcgi_pass unix：/tmp/php-cgi.sock;      fastcgi_pass 127.0.0.1:9000;      fastcgi_index index.php;      包括fastcgi.conf;    }    location~. * \。（gif | jpg | jpeg | png | bmp | swf | ico）$    {      到期30d;  ＃access_log off;    }    location~. * \。（js | css）？$    {      到期15d;   ＃access_log off;    }    access_log off;  }}</code></pre><p>检查配置文件nginx.conf的正确性命令：</p><pre><code>[root @ bogon conf]＃/ usr / local / webserver / nginx / sbin / nginx -t</code></pre><p><img src="https://www.runoob.com/wp-content/uploads/2015/01/nginx5.png" alt="img"></p><h2 id="启动Nginx"><a href="#启动Nginx" class="headerlink" title="启动Nginx"></a>启动Nginx</h2><p>Nginx启动命令如下：</p><pre><code>[root @ bogon conf]＃/ usr / local / webserver / nginx / sbin / nginx</code></pre><p><img src="https://www.runoob.com/wp-content/uploads/2015/01/nginx6.png" alt="img"></p><h2 id="访问站点"><a href="#访问站点" class="headerlink" title="访问站点"></a>访问站点</h2><p>从浏览器访问我们配置的站点IP：</p><p><img src="https://www.runoob.com/wp-content/uploads/2015/01/nginx7.png" alt="img"></p><h2 id="Nginx其他命令"><a href="#Nginx其他命令" class="headerlink" title="Nginx其他命令"></a>Nginx其他命令</h2><p>以下包含了Nginx常用的几个命令：</p><pre><code>/ usr / local / webserver / nginx / sbin / nginx -s reload＃重新载入配置文件/ usr / local / webserver / nginx / sbin / nginx -s reopen＃重启Nginx/ usr / local / webserver / nginx / sbin / nginx -s stop＃停止Nginx</code></pre><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><ul><li><a href="https://www.runoob.com/linux/nginx-install-setup.html" target="_blank" rel="noopener">https://www.runoob.com/linux/nginx-install-setup.html</a></li></ul><p><em>如有侵权，联系 <a href="mailto:2025685938@qq.com" target="_blank" rel="noopener">2025685938@qq.com</a> 删除</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL安装配置</title>
      <link href="/posts/47877.html"/>
      <url>/posts/47877.html</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL安装配置"><a href="#MySQL安装配置" class="headerlink" title="MySQL安装配置"></a>MySQL安装配置</h1><p>MySQL是最流行的关系型数据库管理系统，由瑞典MySQL AB公司开发，目前属于Oracle公司。</p><p>MySQL的所使用的SQL语言是用于访问数据库的最常用标准化语言。</p><p>MySQL的由于其体积小，速度快，总体拥有成本低，尤其是开放源码这一特点，一般中小型网站的开发都选择的MySQL作为网站数据库。</p><hr><h2 id="MySQL安装"><a href="#MySQL安装" class="headerlink" title="MySQL安装"></a>MySQL安装</h2><p>本教程的系统平台：CentOS版本6.6（最终版）64位。</p><h3 id="一，安装编译工具及库文件"><a href="#一，安装编译工具及库文件" class="headerlink" title="一，安装编译工具及库文件"></a>一，安装编译工具及库文件</h3><pre><code>yum -y install gcc gcc-c ++ make autoconf libtool-ltdl-devel gd-devel freetype-devel libxml2-devel libjpeg-devel libpng-devel openssl-devel curl-devel bison patch unzip libmcrypt-devel libmhash-devel ncurses-devel sudo bzip2 flex libaio-devel</code></pre><h3 id="二，安装cmake编译器"><a href="#二，安装cmake编译器" class="headerlink" title="二，安装cmake编译器"></a>二，安装cmake编译器</h3><p>cmake版本：cmake-3.1.1。</p><p>1，下载地址：<a href="http://www.cmake.org/files/v3.1/cmake-3.1.1.tar.gz" target="_blank" rel="noopener">http</a>：<a href="http://www.cmake.org/files/v3.1/cmake-3.1.1.tar.gz" target="_blank" rel="noopener">//www.cmake.org/files/v3.1/cmake-3.1.1.tar.gz</a></p><pre><code>$ wget http://www.cmake.org/files/v3.1/cmake-3.1.1.tar.gz</code></pre><p><img src="https://www.runoob.com/wp-content/uploads/2015/01/mysql1.png" alt="mysql1"></p><pre><code>$ tar zxvf cmake-3.1.1.tar.gz</code></pre><p>3，进入安装包目录</p><pre><code>$ cd cmake-3.1.1</code></pre><p>4，编译安装 </p><pre><code>$ ./bootstrap$ make &amp;&amp; make install</code></pre><hr><h3 id="三，安装MySQL"><a href="#三，安装MySQL" class="headerlink" title="三，安装MySQL"></a>三，安装MySQL</h3><p>MySQL的版本：的mysql-5.6.15。</p><p>1，下载地址：<a href="http://dev.mysql.com/get/Downloads/MySQL-5.6/mysql-5.6.15.tar.gz" target="_blank" rel="noopener">http</a>：  <a href="http://dev.mysql.com/get/Downloads/MySQL-5.6/mysql-5.6.15.tar.gz" target="_blank" rel="noopener">//dev.mysql.com/get/Downloads/MySQL-5.6/mysql-5.6.15.tar.gz</a></p><pre><code>$ wget http://dev.mysql.com/get/Downloads/MySQL-5.6/mysql-5.6.15.tar.gz</code></pre><p><img src="https://www.runoob.com/wp-content/uploads/2015/01/mysql2.png" alt="mysql2"></p><pre><code>$ tar zxvf mysql-5.6.15.tar.gz</code></pre><p>3，进入安装包目录</p><pre><code>$ cd mysql-5.6.15</code></pre><p>4，编译安装 </p><pre><code>$ cmake的-DCMAKE_INSTALL_PREFIX =在/ usr /本地/网络服务器/ MySQL的/ -DMYSQL_UNIX_ADDR =的/ tmp /的mysql.sock -DDEFAULT_CHARSET = UTF8 -DDEFAULT_COLLATION = utf8_general_ci -DWITH_EXTRA_CHARSETS =所有-DWITH_MYISAM_STORAGE_ENGINE = 1 -DWITH_INNOBASE_STORAGE_ENGINE = 1 -DWITH_MEMORY_STORAGE_ENGINE = 1 -DWITH_READLINE = 1 -DWITH_INNODB_MEMCACHED = 1 -DWITH_DEBUG = OFF -DWITH_ZLIB = bundled -DENABLED_LOCAL_INFILE = 1 -DENABLED_PROFILING = ON -DMYSQL_MAINTAINER_MODE = OFF -DMYSQL_DATADIR = / usr / local / webserver / mysql / data -DMYSQL_TCP_PORT = 3306$ make &amp;&amp; make install</code></pre><p>5，查看MySQL的版本：</p><pre><code>$ / usr / local / webserver / mysql / bin / mysql --version</code></pre><p><img src="https://www.runoob.com/wp-content/uploads/2015/01/mysql3.png" alt="mysql3"></p><hr><h2 id="MySQL配置"><a href="#MySQL配置" class="headerlink" title="MySQL配置"></a>MySQL配置</h2><p>1，创建MySQL的运行使用的用户的MySQL：</p><pre><code>$ / usr / sbin / groupadd mysql$ / usr / sbin / useradd -g mysql mysql</code></pre><p>2，创建二进制日志和库的存储路径并赋予MySQL的用户权限</p><pre><code>$ mkdir -p / usr / local / webserver / mysql / binlog / www / data_mysql$ chown mysql.mysql / usr / local / webserver / mysql / binlog / / www / data_mysql /</code></pre><p>3，创建的my.cnf配置文件</p><p>将/etc/my.cnf中替换为下面内容</p><pre><code>$ cat /etc/my.cnf[客户]port = 3306socket = /tmp/mysql.sock的[mysqld]replicate-ignore-db = mysqlreplicate-ignore-db = testreplicate-ignore-db = information_schemauser = mysqlport = 3306socket = /tmp/mysql.sockbasedir = / usr / local / webserver / mysqldatadir = / www / data_mysqllog-error = /usr/local/webserver/mysql/mysql_error.logpid-file = /usr/local/webserver/mysql/mysql.pidopen_files_limit = 65535back_log = 600max_connections = 5000max_connect_errors = 1000table_open_cache = 1024外锁= FALSEmax_allowed_packet = 32Msort_buffer_size = 1Mjoin_buffer_size = 1Mthread_cache_size = 600#thread_concurrency = 8query_cache_size = 128Mquery_cache_limit = 2Mquery_cache_min_res_unit = 2kdefault-storage-engine = MyISAM默认-TMP-存储引擎= MYISAMthread_stack = 192Ktransaction_isolation = READ-COMMITTEDtmp_table_size = 128Mmax_heap_table_size = 128M登录奴隶更新log-bin = / usr / local / webserver / mysql / binlog / binlog二进制日志-DO-DB = oa_fb二进制日志-忽略-DB = MySQL的binlog_cache_size = 4Mbinlog_format = MIXEDmax_binlog_cache_size = 8Mmax_binlog_size = 1Grelay-log-index = / usr / local / webserver / mysql / relaylog / relaylogrelay-log-info-file = / usr / local / webserver / mysql / relaylog / relaylogrelay-log = / usr / local / webserver / mysql / relaylog / relaylogexpire_logs_days = 10key_buffer_size = 256Mread_buffer_size = 1Mread_rnd_buffer_size = 16Mbulk_insert_buffer_size = 64Mmyisam_sort_buffer_size = 128Mmyisam_max_sort_file_size = 10Gmyisam_repair_threads = 1myisam_recoverinteractive_timeout = 120wait_timeout = 120跳过名称解析#master-connect-retry = 10slave-skip-errors = 1032,1062,126,1114,1146,1048,1396#master-host = 192.168.1.2#master-user = username#master-password =密码#master-port = 3306server-id = 1松innodb的-TRX = 0 松innodb的锁= 0 松innodb的锁-等待= 0 松innodb的-CMP = 0 松innodb的-CMP-每个索引= 0松innodb的-CMP-每个索引复位= 0松innodb的-CMP-复位= 0 松innodb的-cmpmem = 0 松innodb的-cmpmem复位= 0 松innodb的缓冲页= 0 松innodb的缓冲页-LRU = 0 松innodb的缓冲池提供的统计信息= 0 松innodb的度量= 0 松innodb的英尺 - 缺省 - 停止字= 0 松散的innodb英尺插入= 0 松散的innodb英尺缺失= 0 松散的innodb英尺感缺失= 0 松innodb的-FT-配置= 0 松innodb的-FT-索引缓存= 0 松innodb的-FT-索引表= 0 松innodb的-SYS-表= 0 松innodb的-SYS-tablestats = 0 松innodb的-SYS的索引= 0 松innodb的-SYS-列= 0 松innodb的-SYS-字段= 0 松innodb的-SYS-外国= 0 松innodb的-SYS-外国COLS = 0slow_query_log_file =的/ usr /本地/网络服务器/ MySQL的/ mysql_slow.loglong_query_time = 1[mysqldump的]快max_allowed_packet = 32M</code></pre><p>4，初始化数据库</p><pre><code>$ / usr / local / webserver / mysql / scripts / mysql_install_db --defaults-file = / etc / my.cnf --user = mysql</code></pre><p>显示如下信息：</p><pre><code>安装MySQL系统表... 2015-01-26 20:18:51 0 [警告]不推荐使用具有隐式DEFAULT值的TIMESTAMP。请使用--explicit_defaults_for_timestamp服务器选项（有关详细信息，请参阅文档）。好填写帮助表... 2015-01-26 20:18:57 0 [警告]不推荐使用具有隐式DEFAULT值的TIMESTAMP。请使用--explicit_defaults_for_timestamp服务器选项（有关详细信息，请参阅文档）。好...</code></pre><p>5，创建开机启动脚本</p><pre><code>$ cd / usr / local / webserver / mysql /$ cp support-files / mysql.server /etc/rc.d/init.d/mysqld $ chkconfig --add mysqld $ chkconfig --level 35 mysqld on</code></pre><p>6，启动MySQL的服务器</p><pre><code>$ service mysqld start</code></pre><p><img src="https://www.runoob.com/wp-content/uploads/2015/01/mysql4.png" alt="mysql4"></p><pre><code>$ / usr / local / webserver / mysql / bin / mysql -u root -p</code></pre><p><img src="https://www.runoob.com/wp-content/uploads/2015/01/mysql5.png" alt="MYSQL5"></p><pre><code>mysqladmin -u用户名-p旧密码密码新密码</code></pre><p>或进入mysql的命令行</p><pre><code>为'用户名'设置密码@'主机'= PASSWORD（'密码'）;</code></pre><p>创建新用户并授权：</p><pre><code>将*。*的所有权限授予由'密码'用授权选项标识的用户名@'％';</code></pre><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><ul><li>启动：service mysqld start</li><li>停止：服务mysqld停止</li><li>重启：service mysqld restart</li><li>重载配置：service mysqld reload</li></ul><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><ul><li><a href="https://www.runoob.com/linux/mysql-install-setup.html" target="_blank" rel="noopener">https://www.runoob.com/linux/mysql-install-setup.html</a></li></ul><p><em>如有侵权，联系 <a href="mailto:2025685938@qq.com" target="_blank" rel="noopener">2025685938@qq.com</a> 删除</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12.linux yum命令</title>
      <link href="/posts/17824.html"/>
      <url>/posts/17824.html</url>
      
        <content type="html"><![CDATA[<h1 id="linux-yum命令"><a href="#linux-yum命令" class="headerlink" title="linux yum命令"></a>linux yum命令</h1><p>yum（Yellow dog Updater，Modified）是一个在Fedora和RedHat以及SUSE中的Shell前端软件包管理器。</p><p>基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软体包，无须繁琐地一次次下载，安装。</p><p>百胜提供了查找，安装，删除某一个，一组甚至全部软件包的命令，而且命令简洁而又好记。</p><h3 id="yum语法"><a href="#yum语法" class="headerlink" title="yum语法"></a>yum语法</h3><pre><code>yum [options] [command] [package ...]</code></pre><ul><li><strong>选项：</strong>可选，选项包括-h（帮助） - Y（当安装过程提示选择全部为“是”）， - Q（不显示安装的过程）等等。</li><li><strong>命令：</strong>要进行的操作。</li><li><strong>封装</strong>操作的对象。</li></ul><hr><h2 id="百胜常用命令"><a href="#百胜常用命令" class="headerlink" title="百胜常用命令"></a>百胜常用命令</h2><ul><li>1.列出所有可更新的软件清单命令：yum check-update</li><li>2.更新所有软件命令：yum update</li><li>3.仅安装指定的软件命令：yum install <package_name></package_name></li><li>4.仅更新指定的软件命令：yum update <package_name></package_name></li><li>5.列出所有可安装的软件清单命令：yum list</li><li>6.删除软件包命令：yum remove <package_name></package_name></li><li>7.查找软件包命令：yum search <keyword></keyword></li><li>8.清除缓存命令：<ul><li>yum clean package：清除缓存目录下的软件包</li><li>yum clean headers：清除缓存目录下的标题</li><li>yum clean oldheaders：清除缓存目录下旧的标题</li><li>yum clean，yum clean all（= yum clean package; yum clean oldheaders）：清除缓存目录下的软件包及旧的header</li></ul></li></ul><h3 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h3><p>安装pam-devel</p><pre><code>[root @ www~] #yum install pam-develroot @ www ~] #yum install pam - devel设置安装过程设置了安装过程 解析包安装参数解析包安装参数 解决依赖性&lt;==先检查软件的属性相依问题解决依赖性&lt;==先检查软件的属性相依问题   - &gt;运行事务检查- &gt; 运行事务检查 ---&gt;包pam-devel.i386 0：0.99.6.2-4.el5设置为更新---&gt; 包pam - 开发。i386 0 ：0.99 。6.2 - 4.el5 设置为更新  - &gt; Processing Dependency：pam = 0.99.6.2-4.el5 for package：pam-devel- &gt; 处理依赖性：pam = 0.99 。6.2 - 4.el5 for package ：pam - devel     - &gt;运行事务检查- &gt; 运行事务检查 ---&gt;包pam.i386 0：0.99.6.2-4.el5设置为更新---&gt; 打包pam 。i386 0 ：0.99 。6.2 - 4.el5 设置为更新  filelists.xml.gz 100％| ========================= | 1.6 MB 00:05。xml 。gz           100 ％| ========================= | 1.6 MB     00 ：05  filelists.xml.gz 100％| ========================= | 138 kB 00:00。xml 。gz           100 ％| ========================= | 138 KB     00 ：00  - &gt;完成的依赖性解决方案- &gt; 完成的依赖性解决方案   ......（省略）......（省略）</code></pre><h3 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h3><p>移除pam-devel</p><pre><code>[root @ www~] #yum remove pam-develroot @ www ~] #yum remove pam - devel设置删除流程设置了删除处理 解决依赖性&lt;==同样的，先解决属性相依的问题解决依赖性&lt;==同样的，先解决属性相依的问题   - &gt;运行事务检查- &gt; 运行事务检查 ---&gt;包pam-devel.i386 0：0.99.6.2-4.el5设置为擦除---&gt; 包pam - 开发。i386 0 ：0.99 。6.2 - 4.el5 设置为删除  - &gt;完成的依赖性解决方案- &gt; 完成的依赖性解决方案   已解决的依赖关系已解决的依赖关系 ================================================== ============================================================================= =========================== 包Arch版本存储库大小包Arch 版本存储库大小                                          ================================================== ============================================================================= ===========================删除：删除： pam-devel i386 0.99.6.2-4.el5安装495 k- 开发i386        0.99 。6.2 - 4.el5    安装          495 k交易摘要交易摘要 ================================================== ============================================================================= ===========================安装0个包裹安装0 包（小号）       更新0包更新0 包（小号）        删除1个软件包&lt;==还好，并没有属性相依的问题，单纯移除一个软件除去1 包（小号）&lt;==还好，并没有属性相依的问题，单纯移除一个软件          这没关系[y / N]：y是这个确定[ ÿ / Ñ ]：ÿ 下载包：下载包： 运行rpm_check_debug运行rpm_check_debug运行事务测试运行事务测试  完成交易测试完成交易测试  交易测试成功交易测试成功  运行交易运行交易   擦除：pam-devel ######################### [1/1]擦除：pam - devel                     ######################### [1/1]   删除：pam-devel.i386 0：0.99.6.2-4.el5删除：pam - devel 。i386 0 ：0.99 。6.2 - 4.el5完成！完成！</code></pre><h3 id="实例3"><a href="#实例3" class="headerlink" title="实例3"></a>实例3</h3><p>利用yum的功能，找出以pam为开头的软件名称有哪些？</p><pre><code>[root @ www~] #yum list pam *root @ www ~] #yum list pam *已安装的软件包已安装的软件包 pam.i386 0.99.6.2-3.27.el5已安装。i386                   0.99 。6.2 - 3.27 。el5已安装pam_ccreds.i386 3-5安装。i386            3 - 5                     已安装pam_krb5.i386 2.2.14-1已安装。i386              2.2 。14 - 1                安装pam_passwdqc.i386 1.0.2-1.2.2已安装。i386          1.0 。2 - 1.2 。2             安装pam_pkcs11.i386 0.5.3-23已安装。i386            0.5 。3 - 23                已安装pam_smb.i386 1.1.7-7.2.1已安装。i386               1.1 。7 - 7.2 。1             已安装可用套餐&lt;==底下则是“可升级”的或“未安装”的可用套餐&lt;==底下则是“可升级”的或“未安装”的  pam.i386 0.99.6.2-4.el5碱。i386                   0.99 。6.2 - 4.el5 基础         pam-devel.i386 0.99.6.2-4.el5 base- 开发。i386             0.99 。6.2 - 4.el5 基础         pam_krb5.i386 2.2.14-10 base。i386              2.2 。14 - 10 基              </code></pre><hr><h2 id="国内yum源"><a href="#国内yum源" class="headerlink" title="国内yum源"></a>国内yum源</h2><p>网易（163）yum源是国内最好的yum源之一，无论是速度还是软件版本，都非常的不错。</p><p>将yum源设置为163 yum，可以提升软件包安装和更新的速度，同时避免一些常见软件版本无法找到。</p><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><p>首先备份/etc/yum.repos.d/CentOS-Base.repo</p><pre><code>mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup/ etc / yum 。回购。d / CentOS - Base 。repo / etc / yum 。回购。d / CentOS - Base 。回购。备用</code></pre><p>下载对应版本repo文件，放入/etc/yum.repos.d/（操作前请做好相应备份）</p><ul><li><a href="http://mirrors.163.com/.help/CentOS5-Base-163.repo" target="_blank" rel="noopener">CentOS5</a>：http：//mirrors.163.com/.help/CentOS5-Base-163.repo</li><li><a href="http://mirrors.163.com/.help/CentOS6-Base-163.repo" target="_blank" rel="noopener">CentOS6</a>：http：//mirrors.163.com/.help/CentOS6-Base-163.repo</li><li><a href="http://mirrors.163.com/.help/CentOS7-Base-163.repo" target="_blank" rel="noopener">CentOS7</a>：http：//mirrors.163.com/.help/CentOS7-Base-163.repo</li></ul><pre><code>wget http://mirrors.163.com/.help/CentOS6-Base-163.repo：//mirrors.163.com/.help/CentOS6-Base-163.repomv CentOS6-Base-163.repo CentOS-Base.repoCentOS6 - Base - 163.repo CentOS - Base 。回购 </code></pre><p>运行以下命令生成缓存</p><pre><code>百胜清洁一切yum makecache</code></pre><p>除了网易之外，国内还有其他不错的yum源，比如中科大和搜狐。</p><p>中科大的yum源，安装方法查看：<a href="https://lug.ustc.edu.cn/wiki/mirrors/help/centos" target="_blank" rel="noopener">https</a>：//lug.ustc.edu.cn/wiki/mirrors/help/centos</p><p>sohu的yum源安装方法查看：<a href="http://mirrors.sohu.com/help/centos.html" target="_blank" rel="noopener">http</a>：<a href="http://mirrors.sohu.com/help/centos.html" target="_blank" rel="noopener">//mirrors.sohu.com/help/centos.html</a></p><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><ul><li><a href="https://www.runoob.com/linux/linux-yum.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-yum.html</a></li></ul><p><em>如有侵权，联系 <a href="mailto:2025685938@qq.com" target="_blank" rel="noopener">2025685938@qq.com</a> 删除</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> yum </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11.Linux vi/vim</title>
      <link href="/posts/52263.html"/>
      <url>/posts/52263.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-vi-vim"><a href="#Linux-vi-vim" class="headerlink" title="Linux vi/vim"></a>Linux vi/vim</h1><p>所有的 Unix Like 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在。</p><p>但是目前我们使用比较多的是 vim 编辑器。</p><p>vim 具有程序编辑的能力，可以主动的以字体颜色辨别语法的正确性，方便程序设计。</p><p>相关文章：<a href="https://www.runoob.com/w3cnote/all-vim-cheatsheat.html" target="_blank" rel="noopener">史上最全Vim快捷键键位图 — 入门到进阶</a></p><hr><h2 id="什么是-vim？"><a href="#什么是-vim？" class="headerlink" title="什么是 vim？"></a>什么是 vim？</h2><p>Vim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。</p><p>简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。 vim 则可以说是程序开发者的一项很好用的工具。</p><p>连 vim 的官方网站 (<a href="http://www.vim.org/" target="_blank" rel="noopener">http://www.vim.org</a>) 自己也说 vim 是一个程序开发工具而不是文字处理软件。</p><p>vim 键盘图：</p><p><img src="https://www.runoob.com/wp-content/uploads/2015/10/vi-vim-cheat-sheet-sch.gif" alt="img"></p><hr><h2 id="vi-vim-的使用"><a href="#vi-vim-的使用" class="headerlink" title="vi/vim 的使用"></a>vi/vim 的使用</h2><p>基本上 vi/vim 共分为三种模式，分别是<strong>命令模式（Command mode）</strong>，<strong>输入模式（Insert mode）</strong>和<strong>底线命令模式（Last line mode）</strong>。 这三种模式的作用分别是：</p><h3 id="命令模式："><a href="#命令模式：" class="headerlink" title="命令模式："></a>命令模式：</h3><p>用户刚刚启动 vi/vim，便进入了命令模式。</p><p>此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。</p><p>以下是常用的几个命令：</p><ul><li><strong>i</strong> 切换到输入模式，以输入字符。</li><li><strong>x</strong> 删除当前光标所在处的字符。</li><li><strong>:</strong> 切换到底线命令模式，以在最底一行输入命令。</li></ul><p>若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。</p><p>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</p><h3 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h3><p>在命令模式下按下i就进入了输入模式。</p><p>在输入模式中，可以使用以下按键：</p><ul><li><strong>字符按键以及Shift组合</strong>，输入字符</li><li><strong>ENTER</strong>，回车键，换行</li><li><strong>BACK SPACE</strong>，退格键，删除光标前一个字符</li><li><strong>DEL</strong>，删除键，删除光标后一个字符</li><li><strong>方向键</strong>，在文本中移动光标</li><li><strong>HOME</strong>/<strong>END</strong>，移动光标到行首/行尾</li><li><strong>Page Up</strong>/<strong>Page Down</strong>，上/下翻页</li><li><strong>Insert</strong>，切换光标为输入/替换模式，光标将变成竖线/下划线</li><li><strong>ESC</strong>，退出输入模式，切换到命令模式</li></ul><h3 id="底线命令模式"><a href="#底线命令模式" class="headerlink" title="底线命令模式"></a>底线命令模式</h3><p>在命令模式下按下:（英文冒号）就进入了底线命令模式。</p><p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p><p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p><ul><li>q 退出程序</li><li>w 保存文件</li></ul><p>按ESC键可随时退出底线命令模式。</p><p>简单的说，我们可以将这三个模式想成底下的图标来表示：</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/07/vim-vi-workmodel.png" alt="img"></p><h2 id="vi-vim-使用实例"><a href="#vi-vim-使用实例" class="headerlink" title="vi/vim 使用实例"></a>vi/vim 使用实例</h2><h3 id="使用-vi-vim-进入一般模式"><a href="#使用-vi-vim-进入一般模式" class="headerlink" title="使用 vi/vim 进入一般模式"></a>使用 vi/vim 进入一般模式</h3><p>如果你想要使用 vi 来建立一个名为 test.txt 的文件时，你可以这样做：</p><pre><code>$ vim runoob.txt</code></pre><p>直接输入 <strong>vi 文件名</strong> 就能够进入 vi 的一般模式了。请注意，记得 vi 后面一定要加文件名，不管该文件存在与否！</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/07/078207F0-B204-4464-AAEF-982F45EDDAE9.jpg" alt="img"></p><p>在一般模式之中，只要按下 i, o, a 等字符就可以进入输入模式了！</p><p>在编辑模式当中，你可以发现在左下角状态栏中会出现 –INSERT- 的字样，那就是可以输入任意字符的提示。</p><p>这个时候，键盘上除了 <strong>Esc</strong> 这个按键之外，其他的按键都可以视作为一般的输入按钮了，所以你可以进行任何的编辑。</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/07/1C928383-471E-4AF1-A61E-9E2CCBD5A913.jpg" alt="img"></p><p>好了，假设我已经按照上面的样式给他编辑完毕了，那么应该要如何退出呢？是的！没错！就是给他按下 <strong>Esc</strong> 这个按钮即可！马上你就会发现画面左下角的 – INSERT – 不见了！</p><h3 id="在一般模式中按下-wq-储存后离开-vi"><a href="#在一般模式中按下-wq-储存后离开-vi" class="headerlink" title="在一般模式中按下 :wq 储存后离开 vi"></a>在一般模式中按下 <strong>:wq</strong> 储存后离开 vi</h3><p>OK，我们要存档了，存盘并离开的指令很简单，输入 <strong>:wq</strong> 即可保存离开！</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/07/B2FB5146-327C-4019-AC96-DD7A8EE7460C.jpg" alt="img"></p><hr><h2 id="vi-vim-按键说明"><a href="#vi-vim-按键说明" class="headerlink" title="vi/vim 按键说明"></a>vi/vim 按键说明</h2><p>除了上面简易范例的 i, Esc, :wq 之外，其实 vim 还有非常多的按键可以使用。</p><h3 id="第一部份：一般模式可用的光标移动、复制粘贴、搜索替换等"><a href="#第一部份：一般模式可用的光标移动、复制粘贴、搜索替换等" class="headerlink" title="第一部份：一般模式可用的光标移动、复制粘贴、搜索替换等"></a>第一部份：一般模式可用的光标移动、复制粘贴、搜索替换等</h3><table><thead><tr><th align="left">移动光标的方法</th><th></th></tr></thead><tbody><tr><td align="left">h 或 向左箭头键(←)</td><td>光标向左移动一个字符</td></tr><tr><td align="left">j 或 向下箭头键(↓)</td><td>光标向下移动一个字符</td></tr><tr><td align="left">k 或 向上箭头键(↑)</td><td>光标向上移动一个字符</td></tr><tr><td align="left">l 或 向右箭头键(→)</td><td>光标向右移动一个字符</td></tr><tr><td align="left">如果你将右手放在键盘上的话，你会发现 hjkl 是排列在一起的，因此可以使用这四个按钮来移动光标。 如果想要进行多次移动的话，例如向下移动 30 行，可以使用 “30j” 或 “30↓” 的组合按键， 亦即加上想要进行的次数(数字)后，按下动作即可！</td><td></td></tr><tr><td align="left">[Ctrl] + [f]</td><td>屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)</td></tr><tr><td align="left">[Ctrl] + [b]</td><td>屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)</td></tr><tr><td align="left">[Ctrl] + [d]</td><td>屏幕『向下』移动半页</td></tr><tr><td align="left">[Ctrl] + [u]</td><td>屏幕『向上』移动半页</td></tr><tr><td align="left">+</td><td>光标移动到非空格符的下一行</td></tr><tr><td align="left">-</td><td>光标移动到非空格符的上一行</td></tr><tr><td align="left">n<space></space></td><td>那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。例如 20<space> 则光标会向后面移动 20 个字符距离。</space></td></tr><tr><td align="left">0 或功能键[Home]</td><td>这是数字『 0 』：移动到这一行的最前面字符处 (常用)</td></tr><tr><td align="left">$ 或功能键[End]</td><td>移动到这一行的最后面字符处(常用)</td></tr><tr><td align="left">H</td><td>光标移动到这个屏幕的最上方那一行的第一个字符</td></tr><tr><td align="left">M</td><td>光标移动到这个屏幕的中央那一行的第一个字符</td></tr><tr><td align="left">L</td><td>光标移动到这个屏幕的最下方那一行的第一个字符</td></tr><tr><td align="left">G</td><td>移动到这个档案的最后一行(常用)</td></tr><tr><td align="left">nG</td><td>n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu)</td></tr><tr><td align="left">gg</td><td>移动到这个档案的第一行，相当于 1G 啊！ (常用)</td></tr><tr><td align="left">n<enter></enter></td><td>n 为数字。光标向下移动 n 行(常用)</td></tr><tr><td align="left">搜索替换</td><td></td></tr><tr><td align="left">/word</td><td>向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！ (常用)</td></tr><tr><td align="left">?word</td><td>向光标之上寻找一个字符串名称为 word 的字符串。</td></tr><tr><td align="left">n</td><td>这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 /vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！</td></tr><tr><td align="left">N</td><td>这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。 例如 /vbird 后，按下 N 则表示『向上』搜寻 vbird 。</td></tr><tr><td align="left">使用 /word 配合 n 及 N 是非常有帮助的！可以让你重复的找到一些你搜寻的关键词！</td><td></td></tr><tr><td align="left">:n1,n2s/word1/word2/g</td><td>n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！举例来说，在 100 到 200 行之间搜寻 vbird 并取代为 VBIRD 则： 『:100,200s/vbird/VBIRD/g』。(常用)</td></tr><tr><td align="left"><strong>:1,$s/word1/word2/g</strong>或 <strong>:%s/word1/word2/g</strong></td><td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！(常用)</td></tr><tr><td align="left"><strong>:1,$s/word1/word2/gc</strong>或 <strong>:%s/word1/word2/gc</strong></td><td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(常用)</td></tr><tr><td align="left">删除、复制与贴上</td><td></td></tr><tr><td align="left">x, X</td><td>在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)</td></tr><tr><td align="left">nx</td><td>n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。</td></tr><tr><td align="left">dd</td><td>删除游标所在的那一整行(常用)</td></tr><tr><td align="left">ndd</td><td>n 为数字。删除光标所在的向下 n 行，例如 20dd 则是删除 20 行 (常用)</td></tr><tr><td align="left">d1G</td><td>删除光标所在到第一行的所有数据</td></tr><tr><td align="left">dG</td><td>删除光标所在到最后一行的所有数据</td></tr><tr><td align="left">d$</td><td>删除游标所在处，到该行的最后一个字符</td></tr><tr><td align="left">d0</td><td>那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符</td></tr><tr><td align="left">yy</td><td>复制游标所在的那一行(常用)</td></tr><tr><td align="left">nyy</td><td>n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用)</td></tr><tr><td align="left">y1G</td><td>复制游标所在行到第一行的所有数据</td></tr><tr><td align="left">yG</td><td>复制游标所在行到最后一行的所有数据</td></tr><tr><td align="left">y0</td><td>复制光标所在的那个字符到该行行首的所有数据</td></tr><tr><td align="left">y$</td><td>复制光标所在的那个字符到该行行尾的所有数据</td></tr><tr><td align="left">p, P</td><td>p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！ 举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？ 那么原本的第 20 行会被推到变成 30 行。 (常用)</td></tr><tr><td align="left">J</td><td>将光标所在行与下一行的数据结合成同一行</td></tr><tr><td align="left">c</td><td>重复删除多个数据，例如向下删除 10 行，[ 10cj ]</td></tr><tr><td align="left">u</td><td>复原前一个动作。(常用)</td></tr><tr><td align="left">[Ctrl]+r</td><td>重做上一个动作。(常用)</td></tr><tr><td align="left">这个 u 与 [Ctrl]+r 是很常用的指令！一个是复原，另一个则是重做一次～ 利用这两个功能按键，你的编辑，嘿嘿！很快乐的啦！</td><td></td></tr><tr><td align="left">.</td><td>不要怀疑！这就是小数点！意思是重复前一个动作的意思。 如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了！ (常用)</td></tr></tbody></table><h3 id="第二部份：一般模式切换到编辑模式的可用的按钮说明"><a href="#第二部份：一般模式切换到编辑模式的可用的按钮说明" class="headerlink" title="第二部份：一般模式切换到编辑模式的可用的按钮说明"></a>第二部份：一般模式切换到编辑模式的可用的按钮说明</h3><table><thead><tr><th align="left">进入输入或取代的编辑模式</th><th></th></tr></thead><tbody><tr><td align="left">i, I</td><td>进入输入模式(Insert mode)： i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。 (常用)</td></tr><tr><td align="left">a, A</td><td>进入输入模式(Insert mode)： a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。(常用)</td></tr><tr><td align="left">o, O</td><td>进入输入模式(Insert mode)： 这是英文字母 o 的大小写。o 为『在目前光标所在的下一行处输入新的一行』； O 为在目前光标所在处的上一行输入新的一行！(常用)</td></tr><tr><td align="left">r, R</td><td>进入取代模式(Replace mode)： r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用)</td></tr><tr><td align="left">上面这些按键中，在 vi 画面的左下角处会出现『–INSERT–』或『–REPLACE–』的字样。 由名称就知道该动作了吧！！特别注意的是，我们上面也提过了，你想要在档案里面输入字符时， 一定要在左下角处看到 INSERT 或 REPLACE 才能输入喔！</td><td></td></tr><tr><td align="left">[Esc]</td><td>退出编辑模式，回到一般模式中(常用)</td></tr></tbody></table><h3 id="第三部份：一般模式切换到指令行模式的可用的按钮说明"><a href="#第三部份：一般模式切换到指令行模式的可用的按钮说明" class="headerlink" title="第三部份：一般模式切换到指令行模式的可用的按钮说明"></a>第三部份：一般模式切换到指令行模式的可用的按钮说明</h3><table><thead><tr><th align="left">指令行的储存、离开等指令</th><th></th></tr></thead><tbody><tr><td align="left">:w</td><td>将编辑的数据写入硬盘档案中(常用)</td></tr><tr><td align="left">:w!</td><td>若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td></tr><tr><td align="left">:q</td><td>离开 vi (常用)</td></tr><tr><td align="left">:q!</td><td>若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。</td></tr><tr><td align="left">注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～</td><td></td></tr><tr><td align="left">:wq</td><td>储存后离开，若为 :wq! 则为强制储存后离开 (常用)</td></tr><tr><td align="left">ZZ</td><td>这是大写的 Z 喔！若档案没有更动，则不储存离开，若档案已经被更动过，则储存后离开！</td></tr><tr><td align="left">:w [filename]</td><td>将编辑的数据储存成另一个档案（类似另存新档）</td></tr><tr><td align="left">:r [filename]</td><td>在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面</td></tr><tr><td align="left">:n1,n2 w [filename]</td><td>将 n1 到 n2 的内容储存成 filename 这个档案。</td></tr><tr><td align="left">:! command</td><td>暂时离开 vi 到指令行模式下执行 command 的显示结果！例如 『:! ls /home』即可在 vi 当中察看 /home 底下以 ls 输出的档案信息！</td></tr><tr><td align="left">vim 环境的变更</td><td></td></tr><tr><td align="left">:set nu</td><td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td></tr><tr><td align="left">:set nonu</td><td>与 set nu 相反，为取消行号！</td></tr></tbody></table><p>特别注意，在 vi/vim 中，数字是很有意义的！数字通常代表重复做几次的意思！ 也有可能是代表去到第几个什么什么的意思。</p><p>举例来说，要删除 50 行，则是用 『50dd』 对吧！ 数字加在动作之前，如我要向下移动 20 行呢？那就是『20j』或者是『20↓』即可。</p><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><ul><li><a href="https://www.runoob.com/linux/linux-vim.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-vim.html</a></li></ul><p><em>如有侵权，联系 <a href="mailto:2025685938@qq.com" target="_blank" rel="noopener">2025685938@qq.com</a> 删除</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10.Linux磁盘管理</title>
      <link href="/posts/37484.html"/>
      <url>/posts/37484.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux磁盘管理"><a href="#Linux磁盘管理" class="headerlink" title="Linux磁盘管理"></a>Linux磁盘管理</h1><p>Linux的磁盘管理好坏直接关系到整个系统的性能问题。</p><p>Linux的磁盘管理常用三个命令为DF，du和FDISK。</p><ul><li>DF：列出文件系统的整体磁盘使用量</li><li>du：检查磁盘空间使用量</li><li>FDISK：用于磁盘分区</li></ul><hr><h2 id="DF"><a href="#DF" class="headerlink" title="DF"></a>DF</h2><p>DF命令参数功能：检查文件系统的磁盘空间占用情况可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。</p><p>语法：</p><pre><code>df [-ahikHTm] [目录或文件名]</code></pre><p>选项与参数：</p><ul><li>-a：列出所有的文件系统，包括系统特有的/ proc等文件系统;</li><li>-k：以KBytes的容量显示各文件系统;</li><li>-m：以MBytes的容量显示各文件系统;</li><li>-h：以人们较易阅读的GBytes，MBytes，KBytes等格式自行显示;</li><li>-H：以M = 1000K取代M = 1024K的进位方式;</li><li>-T：显示文件系统类型，连同该分区的文件系统名称（例如ext3）也列出;</li><li>-i：不用硬盘容量，而以inode的数量来显示</li></ul><h3 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h3><p>将系统内所有的文件系统列出来！</p><pre><code>[root @ www~] #df文件系统1K块使用可用使用％挂载/ dev / hdc2 9920624 3823112 5585444 41％// dev / hdc3 4956316 141376 4559108 4％/ home/ dev / hdc1 101086 11126 84741 12％/ boottmpfs 371332 0 371332 0％/ dev / shm371332 0 371332 0 ％/ dev / shm                 </code></pre><p>在Linux底下如果df没有加任何选项，那么默认会将系统内所有的（不含特殊内存内的文件系统与交换）都以1千字的容量来列出来！</p><h3 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h3><p>将容量结果以易读的容量格式显示出来</p><pre><code>[root @ www~] #df -hroot @ www ~] #df - h使用的文件系统大小可用使用％挂载文件系统大小用于担保条件使用％安装在                 / dev / hdc2 9.5G 3.7G 5.4G 41％// dev / hdc2              9.5G 3.7G 5.4G 41 ％/       / dev / hdc3 4.8G 139M 4.4G 4％/ home的/ dev / hdc3上              4.8G 139M 4.4G 4 ％/ 家        / dev / hdc1 99M 11M 83M 12％/ boot/ dev / hdc1               99M 11M 83M 12 ％/ boot         tmpfs 363M 0 363M 0％/ dev / shm363M 0 363M 0 ％/ dev / shm           </code></pre><h3 id="实例3"><a href="#实例3" class="headerlink" title="实例3"></a>实例3</h3><p>将系统内的所有特殊文件格式及名称都列出来</p><pre><code>[root @ www~] #df -aTroot @ www ~] #df - aT文件系统类型1K块使用可用使用％挂载文件系统类型1K - 块     使用可用使用％安装在        / dev / hdc2 ext3 9920624 3823112 5585444 41％// dev / hdc2 ext3    9920624 3823112 5585444 41 ％/       proc proc 0 0 0  -  / proc0 0 0 - / proc                     sysfs sysfs 0 0 0  -  / sys0 0 0 - / sys                     devpts devpts 0 0 0  -  / dev / pts0 0 0 - / dev / pts                     / dev / hdc3 ext3 4956316 141376 4559108 4％/ home/ dev / hdc3 ext3    4956316 141376 4559108 4 ％/ home         / dev / hdc1 ext3 101086 11126 84741 12％/ boot/ dev / hdc1 ext3     101086 11126 84741 12 ％/ boot           tmpfs tmpfs 371332 0 371332 0％/ dev / shm371332 0 371332 0 ％/ dev / shm               none binfmt_misc 0 0 0  -  / proc / sys / fs / binfmt_misc0 0 0 - / proc / sys / fs / binfmt_misc                     sunrpc rpc_pipefs 0 0 0  -  / var / lib / nfs / rpc_pipefs0 0 0 - / var / lib / nfs / rpc_pipefs                     </code></pre><h3 id="实例4"><a href="#实例4" class="headerlink" title="实例4"></a>实例4</h3><p>将/ etc底下的可用的磁盘容量以易读的容量格式显示</p><pre><code>[root @ www~] #df -h / etcroot @ www ~] #df - h / etc使用的文件系统大小可用使用％挂载文件系统大小用于担保条件使用％安装在                 / dev / hdc2 9.5G 3.7G 5.4G 41％// dev / hdc2              9.5G 3.7G 5.4G 41 ％/       </code></pre><hr><h2 id="杜"><a href="#杜" class="headerlink" title="杜"></a>杜</h2><p>Linux du命令也是查看使用空间的，但是与df命令不同的是Linux du命令是对文件和目录磁盘使用的空间的查看，还是和df命令有一些区别的，这里介绍Linux du命令。</p><p>语法：</p><pre><code>du [-ahskm]文件或目录名称[ - ahskm ] 文件或目录名称 </code></pre><p>选项与参数：</p><ul><li>-a：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。</li><li>-h：以人们较易读的容量格式（G / M）显示;</li><li>-s：列出总量而已，而不列出每个各别的目录占用容量;</li><li>-S：不包括子目录下的总计，与-s有点差别。</li><li>-k：以KBytes列出容量显示;</li><li>-m：以MBytes列出容量显示;</li></ul><h3 id="实例1-1"><a href="#实例1-1" class="headerlink" title="实例1"></a>实例1</h3><p>列出目前目录下的所有文件容量</p><pre><code>[root @ www~] #duroot @ www ~] #du8 ./test4 &lt;==每个目录都会列出来8 ./ test4      &lt;==每个目录都会列出来       8 ./test28 ./ test2       ....中间省略........中间省略....12 ./.gconfd &lt;==包括隐藏文件的目录12 ./。gconfd    &lt;==包括隐藏文件的目录      220。&lt;==这个目录（。）所占用的总量220 。&lt;==这个目录（。）所占用的总量                </code></pre><p>直接输入du没有加任何选项时，则du会分析当前所在目录的文件与目录所占用的硬盘空间。</p><h3 id="实例2-1"><a href="#实例2-1" class="headerlink" title="实例2"></a>实例2</h3><p>将文件的容量也列出来</p><pre><code>[root @ www~] #du -aroot @ www ~] #du - a12 ./install.log.syslog &lt;==有文件的列表了12 ./ 安装。记录。syslog    &lt;==有文件的列表了      8 ./.bash_logout8 ./。bash_logout       8 ./test48个./ TEST4       8 ./test28 ./ test2       ....中间省略........中间省略....12 ./.gconfd12 ./。进程gconfd      220。220 。     </code></pre><h3 id="实例3-1"><a href="#实例3-1" class="headerlink" title="实例3"></a>实例3</h3><p>检查根目录底下每个目录所占用的容量</p><pre><code>[root @ www~] #dusm / *root @ www ~] #du - sm / *7 / bin6 /开机.....中间省略....0 / proc.....中间省略....1 / tmp3859 / usr &lt;==系统初期最大就是他了啦！77 / var</code></pre><p>通配符*来代表每个目录。</p><p>与df不一样的是，du这个命令其实会直接到文件系统内去搜寻所有的文件数据。</p><hr><h2 id="FDISK"><a href="#FDISK" class="headerlink" title="FDISK"></a>FDISK</h2><p>fdisk是Linux的磁盘分区表操作工具。</p><p>语法：</p><pre><code>fdisk [-l]装置名称[ - l ] 装置名称 </code></pre><p>选项与参数：</p><ul><li>-l：输出后面接的装置所有的分区内容。若仅有fdisk -l时，则系统将会把整个系统内能够搜寻到的装置的分区均列出来。</li></ul><h3 id="实例1-2"><a href="#实例1-2" class="headerlink" title="实例1"></a>实例1</h3><p>列出所有分区信息</p><pre><code>[root @ AY120919111755c246621 tmp] #fdisk -l根@ AY120919111755c246621 TMP ]＃fdisk的- 升磁盘/ dev / xvda：21.5 GB，21474836480字节磁盘/ dev / xvda ：21.5 GB ，21474836480 字节   255个头，63个扇区/轨道，2610个气缸255 个头，63个扇区/ 轨道，2610个气缸  单位= 16065 * 512 = 8225280字节的柱面单位= 气缸16065 * 512 = 8225280个字节     扇区大小（逻辑/物理）：512字节/ 512字节扇区大小（逻辑/ 物理）：512 字节/ 512 字节  I / O大小（最小/最佳）：512字节/ 512字节/ O大小（最小/ 最佳）：512 字节/ 512 字节  磁盘标识符：0x00000000磁盘标识符：0x00000000     设备启动开始结束块ID系统设备启动开始结束块ID 系统                           / dev / xvda1 * 1 2550 20480000 83 Linux/ dev / xvda1    * 1 2550 20480000 83 Linux                            / dev / xvda2 2550 2611 490496 82 Linux swap / Solaris/ dev / xvda2             2550 2611 490496 82 Linux swap / Solaris                    磁盘/ dev / xvdb：21.5 GB，21474836480字节磁盘/ dev / xvdb ：21.5 GB ，21474836480 字节   255个头，63个扇区/轨道，2610个气缸255 个头，63个扇区/ 轨道，2610个气缸  单位= 16065 * 512 = 8225280字节的柱面单位= 气缸16065 * 512 = 8225280个字节     扇区大小（逻辑/物理）：512字节/ 512字节扇区大小（逻辑/ 物理）：512 字节/ 512 字节  I / O大小（最小/最佳）：512字节/ 512字节/ O大小（最小/ 最佳）：512 字节/ 512 字节  磁盘标识符：0x56f40944磁盘标识符：0x56f40944     设备启动开始结束块ID系统设备启动开始结束块ID 系统                           / dev / xvdb2 1 2610 20964793+ 83 Linux/ dev / xvdb2                1 2610 20964793 + 83 Linux                </code></pre><h3 id="实例2-2"><a href="#实例2-2" class="headerlink" title="实例2"></a>实例2</h3><p>找出你系统中的根目录所在磁盘，并查阅该硬盘内的相关信息</p><pre><code>[root @ www~] #df / &lt;==注意：重点在找出磁盘文件名而已根@ WWW 〜]＃DF / &lt;==注意：重点在找出磁盘文件名而已            文件系统1K块使用可用使用％挂载文件系统1K - 块       二手可使用％安装在              / dev / hdc2 9920624 3823168 5585388 41％// dev / hdc2               9920624 3823168 5585388 41 ％/         [root @ www~] #fdisk / dev / hdc &lt;==仔细看，不要加上数字喔！[ 根@ WWW 〜]＃fdisk的/ dev的/ HDC   &lt;==仔细看，不要加上数字喔！此磁盘的柱面数设置为5005。该汽缸数量为这盘被设置到5005。  这没有什么不对，但这大于1024，有是没有错与那个，但是这是大于1024 ，  并且可能在某些设置中导致以下问题：并且可以在某些设置会导致问题与：1）在启动时运行的软件（例如，LILO的旧版本）1 ）运行在系统启动时软件（ē 。摹，旧版本的LILO ）2）从其他操作系统启动和分区软件2 ）从其他操作系统启动和分区软件   （例如，DOS FDISK，OS / 2 FDISK）（É 。克。，DOS FDISK ，OS / 2 FDISK ）命令（m求助）：&lt;==等待你的输入！命令（米为帮助）：&lt;==等待你的输入！      </code></pre><p>输入m后，就会看到底下这些命令介绍</p><pre><code>命令（m求助）：m &lt;==输入m后，就会看到底下这些命令介绍 （米为帮助）：米    &lt;== 输入米后，就会看到底下这些命令介绍 命令行动命令行动   a切换可引导标志   b编辑bsd disklabel   c切换dos兼容性标志   d删除分区&lt;==删除一个分区删除分区             &lt;==删除一个分区   l列出已知的分区类型   m打印此菜单打印此菜单    n添加一个新分区&lt;==新增一个分区新分区            &lt;==新增一个分区   o创建一个新的空DOS分区表新的空DOS分区表   p打印分区表&lt;==在屏幕上显示分割表打印分区表      &lt;==在屏幕上显示分割表   q退出而不保存更改&lt;==不储存离开fdisk程序&lt;==不储存离开fdisk的程序   创建一个新的空的Sun磁盘标签新的空太阳标签   t更改分区的系统ID的系统ID   你改变显示/输入单位   v验证分区表   w将表写入磁盘并退出&lt;==将刚刚的动作写入分割表   x额外功能（仅限专家）</code></pre><p>离开fdisk时按下<code>q</code>，那么所有的动作都不会生效！相反的，按下<code>w</code>就是动作生效的意思。</p><pre><code>命令（m求救）：p &lt;==这里可以输出目前磁盘的状态 （米为帮助）：p   &lt;== 这里可以输出目前磁盘的状态 磁盘/ dev / hdc：41.1 GB，41174138880字节&lt;==这个磁盘的文件名与容量磁盘/ dev / hdc ：41.1 GB ，41174138880 字节         &lt;==这个磁盘的文件名与容量   255个头，63个扇区/轨道，5005个圆柱&lt;==磁头，扇区与磁柱大小255 个头，63个扇区/ 轨道，5005个圆柱       &lt;==磁头，扇区与磁柱大小  单位= 16065 * 512 = 8225280字节的柱面&lt;==每个磁柱的大小单位= 气缸16065 * 512 = 8225280个字节&lt;==每个磁柱的大小        设备启动开始结束块ID系统设备启动开始结束块ID 系统                           / dev / hdc1 * 1 13 104391 83 Linux/ dev / hdc1    * 1 13 104391 83 Linux                                / dev / hdc2 14 1288 10241437+ 83 Linux/ dev / hdc2               14 1288 10241437 + 83 Linux                / dev / hdc3 1289 1925 5116702+ 83 Linux/ dev / hdc3             1289 1925 5116702 + 83 Linux                 / dev / hdc4 1926 5005 24740100 5扩展/ dev / hdc4             1926 5005 24740100 5 扩展                  / dev / hdc5 1926 2052 1020096 82 Linux swap / Solaris/ dev / hdc5             1926 2052 1020096 82 Linux swap / Solaris                   ＃装置文件名启动区否开始磁柱结束磁柱1K大小容量磁盘分区槽内的系统＃装置文件名启动区否开始磁柱结束磁柱1K大小容量磁盘分区槽内的系统命令（m求助）：q命令（米为帮助）：q </code></pre><p>想要不储存离开吗？按下q就对了！不要随便按w啊！</p><p>使用<code>p</code>可以列出目前这颗磁盘的分割表信息，这个信息的上半部在显示整体磁盘的状态。</p><hr><h3 id="磁盘格式化"><a href="#磁盘格式化" class="headerlink" title="磁盘格式化"></a>磁盘格式化</h3><p>磁盘分割完毕后自然就是要进行文件系统的格式化，格式化的命令非常的简单，使用<code>mkfs</code>（make filesystem）命令。</p><p>语法：</p><pre><code>mkfs [-t文件系统格式]装置文件名[ - t 文件系统格式] 装置文件名 </code></pre><p>选项与参数：</p><ul><li>-t：可以接文件系统格式，例如ext3，ext2，vfat等（系统有支持才会生效）</li></ul><h3 id="实例1-3"><a href="#实例1-3" class="headerlink" title="实例1"></a>实例1</h3><p>查看mkfs支持的文件格式</p><pre><code>[root @ www~] #mkfs [tab] [tab]root @ www ~] #mkfs [ tab ] [ tab ]mkfs mkfs.cramfs mkfs.ext2 mkfs.ext3 mkfs.msdos mkfs.vfat。cramfs mkfs 。ext2 mkfs 。ext3 mkfs 。msdos mkfs 。VFAT</code></pre><p>按下两个[tab]，会发现mkfs支持的文件格式如上所示。</p><h3 id="实例2-3"><a href="#实例2-3" class="headerlink" title="实例2"></a>实例2</h3><p>将分区/ dev / hdc6（可指定你自己的分区）格式化为ext3文件系统：</p><pre><code>[root @ www~] #mkfs -t ext3 / dev / hdc6根@ WWW 〜]＃的mkfs - 吨EXT3 / dev的/ hdc6mke2fs 1.39（2006年5月29日）1.39 （29 - 月- 2006年） Filesystem label = &lt;==这里指的是分割槽的名称（标签）Filesystem label = &lt;==这里指的是分割槽的名称（标签）                操作系统类型：Linux：Linux 块大小= 4096（log = 2）&lt;== block的大小配置为4K 块大小= 4096 （log = 2 ）&lt;== block 的大小配置为4K             片段大小= 4096（log = 2）片段大小= 4096 （log = 2 ） 251392 inodes，502023 blocks &lt;==由此配置决定的inode / block数量251392 inodes ，502023 blocks      &lt;==由此配置决定的inode / block 数量 为超级用户保留25101块（5.00％）25101 块（5.00 ％）保留用于该超级用户第一个数据块= 0第一个数据块= 0最大文件系统块= 515899392最大文件系统块= 51589939216个街区组16个街区组每组32768个块，每组32768个片段32768个每块组，32768个每片段组 每组15712个inode每组15712个inode存储在块上的超级块备份：存储在块上的超级块备份：        32768,98304,163840,229376,29491232768 ，98304 ，163840 ，229376 ，294912    编写inode表：完成编写inode表：完成 创建期刊（8192块）：完成&lt;==有日志记录创建期刊（8192 块）：完成&lt;==有日志记录  编写超级块和文件系统会计信息：完成编写超级块和文件系统会计信息：完成 该文件系统将每34次安装或自动检查该文件系统将每34次安装或自动检查180天，以先到者为准。使用tune2fs -c或-i覆盖。180 天，以先到者为准。使用tune2fs - c 或- i 覆盖。   ＃这样就创建起来我们所需要的Ext3文件系统了！简单明了！＃这样就创建起来我们所需要的Ext3文件系统了！简单明了！</code></pre><hr><h2 id="磁盘检验"><a href="#磁盘检验" class="headerlink" title="磁盘检验"></a>磁盘检验</h2><p>fsck（文件系统检查）用来检查和维护不一致的文件系统。</p><p>若系统掉电或磁盘发生问题，可利用的fsck命令对文件系统进行检查。</p><p>语法：</p><pre><code>fsck [-t文件系统] [-ACay]装置名称[ - t 文件系统] [ - ACay ] 装置名称  </code></pre><p>选项与参数：</p><ul><li>-t：给定档案系统的型式，若在/ etc / fstab中已有定义或内核本身已支援的则不需加上此参数</li><li>-s：依序一个一个地执行fsck的指令来检查</li><li>-A：对/ etc / fstab中所有列出来的分区（partition）做检查</li><li>-C：显示完整的检查进度</li><li>-d：打印出e2fsck的调试结果</li><li>-p：同时有-A条件时，同时有多个fsck的检查一起执行</li><li>-R：同时有-A条件时，省略/不检查</li><li>-V：详细显示模式</li><li>-a：如果检查有错则自动修复</li><li>-r：如果检查有错则由使用者回答是否修复</li><li>-y：选项指定检测每个文件是自动输入是，在不确定那些是不正常的时候，可以执行#fsck -y全部检查修复。</li></ul><h3 id="实例1-4"><a href="#实例1-4" class="headerlink" title="实例1"></a>实例1</h3><p>查看系统有多少文件系统支持的fsck命令：</p><pre><code>[root @ www~] #fsck [tab] [tab]root @ www ~] #fsck [ tab ] [ tab ]fsck fsck.cramfs fsck.ext2 fsck.ext3 fsck.msdos fsck.vfat。cramfs fsck 。ext2 fsck 。ext3 fsck 。msdos fsck 。VFAT</code></pre><h3 id="实例2-4"><a href="#实例2-4" class="headerlink" title="实例2"></a>实例2</h3><p>强制检测/ dev / hdc6分区：</p><pre><code>[root @ www~] #fsck -C -f -t ext3 / dev / hdc6 根@ WWW 〜]＃的fsck - Ç - ˚F - 吨EXT3 / dev的/ hdc6fsck 1。39（2006年5月29日）1.39 （29 - 月- 2006年） e2fsck 1。39（2006年5月29日）1.39 （29 - 月- 2006年） 通过1：检查inode，块和大小传1 ：检查索引节点，块，和大小   通过2：检查目录结构通过2 ：检查目录结构  通过3：检查目录连接通过3 ：检查目录连接  通过4：检查参考计数通过4 ：检查参考计数  通过5：检查组摘要信息通过5 ：检查组摘要信息   vbird_logical：11/251968个文件（9.1％非连续），36926/1004046个块：11 / 二五一九六八文件（9.1 ％非- 连续的），36926 / 一〇 〇四〇四六块  </code></pre><p>如果没有加上-f的选项，则由于这个文件系统不曾出现问题，检查的经过非常快速！若加上-f强制检查，才会一项一项的显示过程。</p><hr><h2 id="磁盘挂载与卸除"><a href="#磁盘挂载与卸除" class="headerlink" title="磁盘挂载与卸除"></a>磁盘挂载与卸除</h2><p>Linux的磁盘挂载使用<code>mount</code>命令，卸载使用<code>umount</code>命令。</p><p>磁盘挂载语法：</p><pre><code>mount [-t文件系统] [-L Label name] [-o额外选项] [-n]装置文件名挂载点</code></pre><h3 id="实例1-5"><a href="#实例1-5" class="headerlink" title="实例1"></a>实例1</h3><p>用默认的方式，将刚刚创建的/ dev / hdc6挂载到/ mnt / hdc6上面！</p><pre><code>[root @ www~] #mkdir / mnt / hdc6[root @ www~] #mount / dev / hdc6 / mnt / hdc6[root @ www~] #df文件系统1K块使用可用使用％挂载.....中间省略...../ dev / hdc6 1976312 42072 1833836 3％/ mnt / hdc6</code></pre><p>卸载磁盘命令<code>umount</code>语法：</p><pre><code>umount [-fn]装置文件名或挂载点</code></pre><p>选项与参数：</p><ul><li>-f：强制卸除！可用在类似网络文件系统（NFS）无法读取到的情况下;</li><li>-n：不升级/ etc / mtab情况下卸除。</li></ul><p>卸载的/ dev / hdc6</p><pre><code>[root @ www~] #umount / dev / hdc6     </code></pre><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><ul><li><a href="https://www.runoob.com/linux/linux-filesystem.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-filesystem.html</a></li></ul><p><em>如有侵权，联系 <a href="mailto:2025685938@qq.com" target="_blank" rel="noopener">2025685938@qq.com</a> 删除</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.Linux 用户和用户组管理</title>
      <link href="/posts/55268.html"/>
      <url>/posts/55268.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-用户和用户组管理"><a href="#Linux-用户和用户组管理" class="headerlink" title="Linux 用户和用户组管理"></a>Linux 用户和用户组管理</h1><p>Linux系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。</p><p>用户的账号一方面可以帮助系统管理员对使用系统的用户进行跟踪，并控制他们对系统资源的访问；另一方面也可以帮助用户组织文件，并为用户提供安全性保护。</p><p>每个用户账号都拥有一个唯一的用户名和各自的口令。</p><p>用户在登录时键入正确的用户名和口令后，就能够进入系统和自己的主目录。</p><p>实现用户账号的管理，要完成的工作主要有如下几个方面：</p><ul><li>用户账号的添加、删除与修改。</li><li>用户口令的管理。</li><li>用户组的管理。</li></ul><hr><h2 id="一、Linux系统用户账号的管理"><a href="#一、Linux系统用户账号的管理" class="headerlink" title="一、Linux系统用户账号的管理"></a>一、Linux系统用户账号的管理</h2><p>用户账号的管理工作主要涉及到用户账号的添加、修改和删除。</p><p>添加用户账号就是在系统中创建一个新账号，然后为新账号分配用户号、用户组、主目录和登录Shell等资源。刚添加的账号是被锁定的，无法使用。</p><h3 id="1、添加新的用户账号使用useradd命令，其语法如下："><a href="#1、添加新的用户账号使用useradd命令，其语法如下：" class="headerlink" title="1、添加新的用户账号使用useradd命令，其语法如下："></a>1、添加新的用户账号使用useradd命令，其语法如下：</h3><pre><code>useradd 选项 用户名</code></pre><p>参数说明：</p><ul><li><p>选项:</p><ul><li>-c comment 指定一段注释性描述。</li><li>-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。</li><li>-g 用户组 指定用户所属的用户组。</li><li>-G 用户组，用户组 指定用户所属的附加组。</li><li>-s Shell文件 指定用户的登录Shell。</li><li>-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。</li></ul></li><li><p>用户名:</p><p>指定新账号的登录名。</p></li></ul><h4 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h4><pre><code># useradd –d  /home/sam -m sam</code></pre><p>此命令创建了一个用户sam，其中-d和-m选项用来为登录名sam产生一个主目录 /home/sam（/home为默认的用户主目录所在的父目录）。</p><h4 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h4><pre><code># useradd -s /bin/sh -g group –G adm,root gem</code></pre><p>此命令新建了一个用户gem，该用户的登录Shell是 <code>/bin/sh</code>，它属于group用户组，同时又属于adm和root用户组，其中group用户组是其主组。</p><p>这里可能新建组：<code>#groupadd group及groupadd adm</code></p><p>增加用户账号就是在/etc/passwd文件中为新用户增加一条记录，同时更新其他系统文件如/etc/shadow, /etc/group等。</p><p>Linux提供了集成的系统管理工具userconf，它可以用来对用户账号进行统一管理。</p><h3 id="2、删除帐号"><a href="#2、删除帐号" class="headerlink" title="2、删除帐号"></a>2、删除帐号</h3><p>如果一个用户的账号不再使用，可以从系统中删除。删除用户账号就是要将/etc/passwd等系统文件中的该用户记录删除，必要时还删除用户的主目录。</p><p>删除一个已有的用户账号使用<code>userdel</code>命令，其格式如下：</p><pre><code>userdel 选项 用户名</code></pre><p>常用的选项是 <strong>-r</strong>，它的作用是把用户的主目录一起删除。</p><p>例如：</p><pre><code># userdel -r sam</code></pre><p>此命令删除用户sam在系统文件中（主要是/etc/passwd, /etc/shadow, /etc/group等）的记录，同时删除用户的主目录。</p><h3 id="3、修改帐号"><a href="#3、修改帐号" class="headerlink" title="3、修改帐号"></a>3、修改帐号</h3><p>修改用户账号就是根据实际情况更改用户的有关属性，如用户号、主目录、用户组、登录Shell等。</p><p>修改已有用户的信息使用<code>usermod</code>命令，其格式如下：</p><pre><code>usermod 选项 用户名</code></pre><p>常用的选项包括<code>-c, -d, -m, -g, -G, -s, -u以及-o等</code>，这些选项的意义与<code>useradd</code>命令中的选项一样，可以为用户指定新的资源值。</p><p>另外，有些系统可以使用选项：-l 新用户名</p><p>这个选项指定一个新的账号，即将原来的用户名改为新的用户名。</p><p>例如：</p><pre><code># usermod -s /bin/ksh -d /home/z –g developer sam</code></pre><p>此命令将用户sam的登录Shell修改为ksh，主目录改为/home/z，用户组改为developer。</p><h3 id="4、用户口令的管理"><a href="#4、用户口令的管理" class="headerlink" title="4、用户口令的管理"></a>4、用户口令的管理</h3><p>用户管理的一项重要内容是用户口令的管理。用户账号刚创建时没有口令，但是被系统锁定，无法使用，必须为其指定口令后才可以使用，即使是指定空口令。</p><p>指定和修改用户口令的Shell命令是<code>passwd</code>。超级用户可以为自己和其他用户指定口令，普通用户只能用它修改自己的口令。命令的格式为：</p><pre><code>passwd 选项 用户名</code></pre><p>可使用的选项：</p><ul><li>-l 锁定口令，即禁用账号。</li><li>-u 口令解锁。</li><li>-d 使账号无口令。</li><li>-f 强迫用户下次登录时修改口令。</li></ul><p>如果默认用户名，则修改当前用户的口令。</p><p>例如，假设当前用户是sam，则下面的命令修改该用户自己的口令：</p><pre><code>$ passwd Old password:****** New password:******* Re-enter new password:*******</code></pre><p>如果是超级用户，可以用下列形式指定任何用户的口令：</p><pre><code># passwd sam New password:******* Re-enter new password:*******</code></pre><p>普通用户修改自己的口令时，passwd命令会先询问原口令，验证后再要求用户输入两遍新口令，如果两次输入的口令一致，则将这个口令指定给用户；而超级用户为用户指定口令时，就不需要知道原口令。</p><p>为了系统安全起见，用户应该选择比较复杂的口令，例如最好使用8位长的口令，口令中包含有大写、小写字母和数字，并且应该与姓名、生日等不相同。</p><p>为用户指定空口令时，执行下列形式的命令：</p><pre><code># passwd -d sam</code></pre><p>此命令将用户 sam 的口令删除，这样用户 sam 下一次登录时，系统就不再允许该用户登录了。</p><p>passwd 命令还可以用 -l(lock) 选项锁定某一用户，使其不能登录，例如：</p><pre><code># passwd -l sam</code></pre><hr><h2 id="二、Linux系统用户组的管理"><a href="#二、Linux系统用户组的管理" class="headerlink" title="二、Linux系统用户组的管理"></a>二、Linux系统用户组的管理</h2><p>每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。不同Linux 系统对用户组的规定有所不同，如Linux下的用户属于与它同名的用户组，这个用户组在创建用户时同时创建。</p><p>用户组的管理涉及用户组的添加、删除和修改。组的增加、删除和修改实际上就是对/etc/group文件的更新。</p><h3 id="1、增加一个新的用户组使用groupadd命令。其格式如下："><a href="#1、增加一个新的用户组使用groupadd命令。其格式如下：" class="headerlink" title="1、增加一个新的用户组使用groupadd命令。其格式如下："></a>1、增加一个新的用户组使用groupadd命令。其格式如下：</h3><pre><code>groupadd 选项 用户组</code></pre><p>可以使用的选项有：</p><ul><li>-g GID 指定新用户组的组标识号（GID）。</li><li>-o 一般与-g选项同时使用，表示新用户组的GID可以与系统已有用户组的GID相同。</li></ul><h4 id="实例1："><a href="#实例1：" class="headerlink" title="实例1："></a>实例1：</h4><pre><code># groupadd group1</code></pre><p>此命令向系统中增加了一个新组group1，新组的组标识号是在当前已有的最大组标识号的基础上加1。</p><h4 id="实例2："><a href="#实例2：" class="headerlink" title="实例2："></a>实例2：</h4><pre><code># groupadd -g 101 group2</code></pre><p>此命令向系统中增加了一个新组group2，同时指定新组的组标识号是101。</p><h3 id="2、如果要删除一个已有的用户组，使用groupdel命令，其格式如下："><a href="#2、如果要删除一个已有的用户组，使用groupdel命令，其格式如下：" class="headerlink" title="2、如果要删除一个已有的用户组，使用groupdel命令，其格式如下："></a>2、如果要删除一个已有的用户组，使用groupdel命令，其格式如下：</h3><pre><code>groupdel 用户组</code></pre><h4 id="例如："><a href="#例如：" class="headerlink" title="例如："></a>例如：</h4><pre><code># groupdel group1</code></pre><p>此命令从系统中删除组group1。</p><h3 id="3、修改用户组的属性使用groupmod命令。其语法如下："><a href="#3、修改用户组的属性使用groupmod命令。其语法如下：" class="headerlink" title="3、修改用户组的属性使用groupmod命令。其语法如下："></a>3、修改用户组的属性使用groupmod命令。其语法如下：</h3><pre><code>groupmod 选项 用户组</code></pre><p>常用的选项有：</p><ul><li>-g GID 为用户组指定新的组标识号。</li><li>-o 与-g选项同时使用，用户组的新GID可以与系统已有用户组的GID相同。</li><li>-n新用户组 将用户组的名字改为新名字</li></ul><h4 id="实例1：-1"><a href="#实例1：-1" class="headerlink" title="实例1："></a>实例1：</h4><pre><code># groupmod -g 102 group2</code></pre><p>此命令将组group2的组标识号修改为102。</p><h4 id="实例2：-1"><a href="#实例2：-1" class="headerlink" title="实例2："></a>实例2：</h4><pre><code># groupmod –g 10000 -n group3 group2</code></pre><p>此命令将组group2的标识号改为10000，组名修改为group3。</p><h3 id="4、如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限。"><a href="#4、如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限。" class="headerlink" title="4、如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限。"></a>4、如果一个用户同时属于多个用户组，那么用户可以在用户组之间切换，以便具有其他用户组的权限。</h3><p>用户可以在登录后，使用命令newgrp切换到其他用户组，这个命令的参数就是目的用户组。例如：</p><pre><code>$ newgrp root</code></pre><p>这条命令将当前用户切换到root用户组，前提条件是root用户组确实是该用户的主组或附加组。类似于用户账号的管理，用户组的管理也可以通过集成的系统管理工具来完成。</p><hr><h2 id="三、与用户账号有关的系统文件"><a href="#三、与用户账号有关的系统文件" class="headerlink" title="三、与用户账号有关的系统文件"></a>三、与用户账号有关的系统文件</h2><p>完成用户管理的工作有许多种方法，但是每一种方法实际上都是对有关的系统文件进行修改。</p><p>与用户和用户组相关的信息都存放在一些系统文件中，这些文件包括/etc/passwd, /etc/shadow, /etc/group等。</p><p>下面分别介绍这些文件的内容。</p><h3 id="1、-etc-passwd文件是用户管理工作涉及的最重要的一个文件。"><a href="#1、-etc-passwd文件是用户管理工作涉及的最重要的一个文件。" class="headerlink" title="1、/etc/passwd文件是用户管理工作涉及的最重要的一个文件。"></a>1、/etc/passwd文件是用户管理工作涉及的最重要的一个文件。</h3><p>Linux系统中的每个用户都在/etc/passwd文件中有一个对应的记录行，它记录了这个用户的一些基本属性。</p><p>这个文件对所有用户都是可读的。它的内容类似下面的例子：</p><pre><code>＃ cat /etc/passwdroot:x:0:0:Superuser:/:daemon:x:1:1:System daemons:/etc:bin:x:2:2:Owner of system commands:/bin:sys:x:3:3:Owner of system files:/usr/sys:adm:x:4:4:System accounting:/usr/adm:uucp:x:5:5:UUCP administrator:/usr/lib/uucp:auth:x:7:21:Authentication administrator:/tcb/files/auth:cron:x:9:16:Cron daemon:/usr/spool/cron:listen:x:37:4:Network daemon:/usr/net/nls:lp:x:71:18:Printer administrator:/usr/spool/lp:sam:x:200:50:Sam san:/home/sam:/bin/sh</code></pre><p>从上面的例子我们可以看到，/etc/passwd中一行记录对应着一个用户，每行记录又被冒号(:)分隔为7个字段，其格式和具体含义如下：</p><pre><code>用户名:口令:用户标识号:组标识号:注释性描述:主目录:登录Shell</code></pre><h3 id="1）”用户名”是代表用户账号的字符串。"><a href="#1）”用户名”是代表用户账号的字符串。" class="headerlink" title="1）”用户名”是代表用户账号的字符串。"></a>1）”用户名”是代表用户账号的字符串。</h3><p>通常长度不超过8个字符，并且由大小写字母和/或数字组成。登录名中不能有冒号(:)，因为冒号在这里是分隔符。</p><p>为了兼容起见，登录名中最好不要包含点字符(.)，并且不使用连字符(-)和加号(+)打头。</p><h3 id="2）“口令”一些系统中，存放着加密后的用户口令字。"><a href="#2）“口令”一些系统中，存放着加密后的用户口令字。" class="headerlink" title="2）“口令”一些系统中，存放着加密后的用户口令字。"></a>2）“口令”一些系统中，存放着加密后的用户口令字。</h3><p>虽然这个字段存放的只是用户口令的加密串，不是明文，但是由于/etc/passwd文件对所有用户都可读，所以这仍是一个安全隐患。因此，现在许多Linux 系统（如SVR4）都使用了shadow技术，把真正的加密后的用户口令字存放到/etc/shadow文件中，而在/etc/passwd文件的口令字段中只存放一个特殊的字符，例如“x”或者“*”。</p><h3 id="3）“用户标识号”是一个整数，系统内部用它来标识用户。"><a href="#3）“用户标识号”是一个整数，系统内部用它来标识用户。" class="headerlink" title="3）“用户标识号”是一个整数，系统内部用它来标识用户。"></a>3）“用户标识号”是一个整数，系统内部用它来标识用户。</h3><p>一般情况下它与用户名是一一对应的。如果几个用户名对应的用户标识号是一样的，系统内部将把它们视为同一个用户，但是它们可以有不同的口令、不同的主目录以及不同的登录Shell等。</p><p>通常用户标识号的取值范围是0～65 535。0是超级用户root的标识号，1～99由系统保留，作为管理账号，普通用户的标识号从100开始。在Linux系统中，这个界限是500。</p><h3 id="4）“组标识号”字段记录的是用户所属的用户组。"><a href="#4）“组标识号”字段记录的是用户所属的用户组。" class="headerlink" title="4）“组标识号”字段记录的是用户所属的用户组。"></a>4）“组标识号”字段记录的是用户所属的用户组。</h3><p>它对应着/etc/group文件中的一条记录。</p><h3 id="5-“注释性描述”字段记录着用户的一些个人情况。"><a href="#5-“注释性描述”字段记录着用户的一些个人情况。" class="headerlink" title="5)“注释性描述”字段记录着用户的一些个人情况。"></a>5)“注释性描述”字段记录着用户的一些个人情况。</h3><p>例如用户的真实姓名、电话、地址等，这个字段并没有什么实际的用途。在不同的Linux 系统中，这个字段的格式并没有统一。在许多Linux系统中，这个字段存放的是一段任意的注释性描述文字，用做finger命令的输出。</p><h3 id="6-“主目录”，也就是用户的起始工作目录。"><a href="#6-“主目录”，也就是用户的起始工作目录。" class="headerlink" title="6)“主目录”，也就是用户的起始工作目录。"></a>6)“主目录”，也就是用户的起始工作目录。</h3><p>它是用户在登录到系统之后所处的目录。在大多数系统中，各用户的主目录都被组织在同一个特定的目录下，而用户主目录的名称就是该用户的登录名。各用户对自己的主目录有读、写、执行（搜索）权限，其他用户对此目录的访问权限则根据具体情况设置。</p><h3 id="7-用户登录后，要启动一个进程，负责将用户的操作传给内核，这个进程是用户登录到系统后运行的命令解释器或某个特定的程序，即Shell。"><a href="#7-用户登录后，要启动一个进程，负责将用户的操作传给内核，这个进程是用户登录到系统后运行的命令解释器或某个特定的程序，即Shell。" class="headerlink" title="7)用户登录后，要启动一个进程，负责将用户的操作传给内核，这个进程是用户登录到系统后运行的命令解释器或某个特定的程序，即Shell。"></a>7)用户登录后，要启动一个进程，负责将用户的操作传给内核，这个进程是用户登录到系统后运行的命令解释器或某个特定的程序，即Shell。</h3><p>Shell是用户与Linux系统之间的接口。Linux的Shell有许多种，每种都有不同的特点。常用的有sh(Bourne Shell), csh(C Shell), ksh(Korn Shell), tcsh(TENEX/TOPS-20 type C Shell), bash(Bourne Again Shell)等。</p><p>系统管理员可以根据系统情况和用户习惯为用户指定某个Shell。如果不指定Shell，那么系统使用sh为默认的登录Shell，即这个字段的值为/bin/sh。</p><p>用户的登录Shell也可以指定为某个特定的程序（此程序不是一个命令解释器）。</p><p>利用这一特点，我们可以限制用户只能运行指定的应用程序，在该应用程序运行结束后，用户就自动退出了系统。有些Linux 系统要求只有那些在系统中登记了的程序才能出现在这个字段中。</p><h3 id="8-系统中有一类用户称为伪用户（pseudo-users）。"><a href="#8-系统中有一类用户称为伪用户（pseudo-users）。" class="headerlink" title="8)系统中有一类用户称为伪用户（pseudo users）。"></a>8)系统中有一类用户称为伪用户（pseudo users）。</h3><p>这些用户在/etc/passwd文件中也占有一条记录，但是不能登录，因为它们的登录Shell为空。它们的存在主要是方便系统管理，满足相应的系统进程对文件属主的要求。</p><p>常见的伪用户如下所示：</p><pre><code>伪 用 户 含 义 bin 拥有可执行的用户命令文件 sys 拥有系统文件 adm 拥有帐户文件 uucp UUCP使用 lp lp或lpd子系统使用 nobody NFS使用</code></pre><hr><h2 id="拥有帐户文件"><a href="#拥有帐户文件" class="headerlink" title="拥有帐户文件"></a>拥有帐户文件</h2><p><strong>1、除了上面列出的伪用户外，还有许多标准的伪用户，例如：audit, cron, mail, usenet等，它们也都各自为相关的进程和文件所需要。</strong></p><p>由于/etc/passwd文件是所有用户都可读的，如果用户的密码太简单或规律比较明显的话，一台普通的计算机就能够很容易地将它破解，因此对安全性要求较高的Linux系统都把加密后的口令字分离出来，单独存放在一个文件中，这个文件是/etc/shadow文件。 有超级用户才拥有该文件读权限，这就保证了用户密码的安全性。</p><p><strong>2、/etc/shadow中的记录行与/etc/passwd中的一一对应，它由pwconv命令根据/etc/passwd中的数据自动产生</strong></p><p>它的文件格式与/etc/passwd类似，由若干个字段组成，字段之间用”:”隔开。这些字段是：</p><pre><code>登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志</code></pre><ol><li>“登录名”是与/etc/passwd文件中的登录名相一致的用户账号</li><li>“口令”字段存放的是加密后的用户口令字，长度为13个字符。如果为空，则对应用户没有口令，登录时不需要口令；如果含有不属于集合 { ./0-9A-Za-z }中的字符，则对应的用户不能登录。</li><li>“最后一次修改时间”表示的是从某个时刻起，到用户最后一次修改口令时的天数。时间起点对不同的系统可能不一样。例如在SCO Linux 中，这个时间起点是1970年1月1日。</li><li>“最小时间间隔”指的是两次修改口令之间所需的最小天数。</li><li>“最大时间间隔”指的是口令保持有效的最大天数。</li><li>“警告时间”字段表示的是从系统开始警告用户到用户密码正式失效之间的天数。</li><li>“不活动时间”表示的是用户没有登录活动但账号仍能保持有效的最大天数。</li><li>“失效时间”字段给出的是一个绝对的天数，如果使用了这个字段，那么就给出相应账号的生存期。期满后，该账号就不再是一个合法的账号，也就不能再用来登录了。</li></ol><p>下面是/etc/shadow的一个例子：</p><pre><code>＃ cat /etc/shadowroot:Dnakfw28zf38w:8764:0:168:7:::daemon:*::0:0::::bin:*::0:0::::sys:*::0:0::::adm:*::0:0::::uucp:*::0:0::::nuucp:*::0:0::::auth:*::0:0::::cron:*::0:0::::listen:*::0:0::::lp:*::0:0::::sam:EkdiSECLWPdSa:9740:0:0::::</code></pre><h3 id="3、用户组的所有信息都存放在-etc-group文件中。"><a href="#3、用户组的所有信息都存放在-etc-group文件中。" class="headerlink" title="3、用户组的所有信息都存放在/etc/group文件中。"></a>3、用户组的所有信息都存放在/etc/group文件中。</h3><p>将用户分组是Linux 系统中对用户进行管理及控制访问权限的一种手段。</p><p>每个用户都属于某个用户组；一个组中可以有多个用户，一个用户也可以属于不同的组。</p><p>当一个用户同时是多个组中的成员时，在/etc/passwd文件中记录的是用户所属的主组，也就是登录时所属的默认组，而其他组称为附加组。</p><p>用户要访问属于附加组的文件时，必须首先使用newgrp命令使自己成为所要访问的组中的成员。</p><p>用户组的所有信息都存放在/etc/group文件中。此文件的格式也类似于/etc/passwd文件，由冒号(:)隔开若干个字段，这些字段有：</p><pre><code>组名:口令:组标识号:组内用户列表</code></pre><ol><li>“组名”是用户组的名称，由字母或数字构成。与/etc/passwd中的登录名一样，组名不应重复。</li><li>“口令”字段存放的是用户组加密后的口令字。一般Linux 系统的用户组都没有口令，即这个字段一般为空，或者是*。</li><li>“组标识号”与用户标识号类似，也是一个整数，被系统内部用来标识组。</li><li>“组内用户列表”是属于这个组的所有用户的列表/b]，不同用户之间用逗号(,)分隔。这个用户组可能是用户的主组，也可能是附加组。</li></ol><p>/etc/group文件的一个例子如下：</p><pre><code>root::0:rootbin::2:root,binsys::3:root,uucpadm::4:root,admdaemon::5:root,daemonlp::7:root,lpusers::20:root,sam</code></pre><h3 id="四、添加批量用户"><a href="#四、添加批量用户" class="headerlink" title="四、添加批量用户"></a>四、添加批量用户</h3><p>添加和删除用户对每位Linux系统管理员都是轻而易举的事，比较棘手的是如果要添加几十个、上百个甚至上千个用户时，我们不太可能还使用useradd一个一个地添加，必然要找一种简便的创建大量用户的方法。Linux系统提供了创建大量用户的工具，可以让您立即创建大量用户，方法如下：</p><h3 id="（1）先编辑一个文本用户文件。"><a href="#（1）先编辑一个文本用户文件。" class="headerlink" title="（1）先编辑一个文本用户文件。"></a>（1）先编辑一个文本用户文件。</h3><p>每一列按照<code>/etc/passwd</code>密码文件的格式书写，要注意每个用户的用户名、UID、宿主目录都不可以相同，其中密码栏可以留做空白或输入x号。一个范例文件user.txt内容如下：</p><pre><code>user001::600:100:user:/home/user001:/bin/bashuser002::601:100:user:/home/user002:/bin/bashuser003::602:100:user:/home/user003:/bin/bashuser004::603:100:user:/home/user004:/bin/bashuser005::604:100:user:/home/user005:/bin/bashuser006::605:100:user:/home/user006:/bin/bash</code></pre><h3 id="（2）以root身份执行命令-usr-sbin-newusers，从刚创建的用户文件user-txt中导入数据，创建用户："><a href="#（2）以root身份执行命令-usr-sbin-newusers，从刚创建的用户文件user-txt中导入数据，创建用户：" class="headerlink" title="（2）以root身份执行命令 /usr/sbin/newusers，从刚创建的用户文件user.txt中导入数据，创建用户："></a>（2）以root身份执行命令 <code>/usr/sbin/newusers</code>，从刚创建的用户文件<code>user.txt</code>中导入数据，创建用户：</h3><pre><code># newusers &lt; user.txt</code></pre><p>然后可以执行命令 <code>vipw</code> 或 <code>vi /etc/passwd</code> 检查 <code>/etc/passwd</code> 文件是否已经出现这些用户的数据，并且用户的宿主目录是否已经创建。</p><h3 id="（3）执行命令-usr-sbin-pwunconv。"><a href="#（3）执行命令-usr-sbin-pwunconv。" class="headerlink" title="（3）执行命令/usr/sbin/pwunconv。"></a>（3）执行命令/usr/sbin/pwunconv。</h3><p>将 <code>/etc/shadow</code> 产生的 <code>shadow</code> 密码解码，然后回写到 <code>/etc/passwd</code> 中，并将<code>/etc/shadow</code>的<code>shadow</code>密码栏删掉。这是为了方便下一步的密码转换工作，即先取消 <code>shadow password</code> 功能。</p><pre><code># pwunconv</code></pre><h3 id="（4）编辑每个用户的密码对照文件。"><a href="#（4）编辑每个用户的密码对照文件。" class="headerlink" title="（4）编辑每个用户的密码对照文件。"></a>（4）编辑每个用户的密码对照文件。</h3><p>范例文件 <code>passwd.txt</code> 内容如下：</p><pre><code>user001:密码user002:密码user003:密码user004:密码user005:密码user006:密码</code></pre><h3 id="（5）以root身份执行命令-usr-sbin-chpasswd。"><a href="#（5）以root身份执行命令-usr-sbin-chpasswd。" class="headerlink" title="（5）以root身份执行命令 /usr/sbin/chpasswd。"></a>（5）以root身份执行命令 <code>/usr/sbin/chpasswd</code>。</h3><p>创建用户密码，<code>chpasswd</code> 会将经过 <code>/usr/bin/passwd</code> 命令编码过的密码写入 <code>/etc/passwd</code> 的密码栏。</p><pre><code># chpasswd &lt; passwd.txt</code></pre><h3 id="（6）确定密码经编码写入-etc-passwd的密码栏后。"><a href="#（6）确定密码经编码写入-etc-passwd的密码栏后。" class="headerlink" title="（6）确定密码经编码写入/etc/passwd的密码栏后。"></a>（6）确定密码经编码写入/etc/passwd的密码栏后。</h3><p>执行命令 <code>/usr/sbin/pwconv</code> 将密码编码为 <code>shadow password</code>，并将结果写入 <code>/etc/shadow</code>。</p><pre><code># pwconv</code></pre><p>这样就完成了大量用户的创建了，之后您可以到/home下检查这些用户宿主目录的权限设置是否都正确，并登录验证用户密码是否正确。</p><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><ul><li><a href="https://www.runoob.com/linux/linux-user-manage.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-user-manage.html</a></li></ul><p><em>如有侵权，联系 <a href="mailto:2025685938@qq.com" target="_blank" rel="noopener">2025685938@qq.com</a> 删除</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.Linux 文件与目录管理</title>
      <link href="/posts/56045.html"/>
      <url>/posts/56045.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-文件与目录管理"><a href="#Linux-文件与目录管理" class="headerlink" title="Linux 文件与目录管理"></a>Linux 文件与目录管理</h1><p>我们知道Linux的目录结构为树状结构，最顶级的目录为根目录 /。</p><p>其他目录通过挂载可以将它们添加到树中，通过解除挂载可以移除它们。</p><p>在开始本教程前我们需要先知道什么是绝对路径与相对路径。</p><ul><li><strong>绝对路径：</strong><br>路径的写法，由根目录 / 写起，例如： /usr/share/doc 这个目录。</li><li><strong>相对路径：</strong><br>路径的写法，不是由 / 写起，例如由 /usr/share/doc 要到 /usr/share/man 底下时，可以写成： cd ../man 这就是相对路径的写法啦！</li></ul><hr><h2 id="处理目录的常用命令"><a href="#处理目录的常用命令" class="headerlink" title="处理目录的常用命令"></a>处理目录的常用命令</h2><p>接下来我们就来看几个常见的处理目录的命令吧：</p><ul><li>ls: 列出目录</li><li>cd：切换目录</li><li>pwd：显示目前的目录</li><li>mkdir：创建一个新的目录</li><li>rmdir：删除一个空的目录</li><li>cp: 复制文件或目录</li><li>rm: 移除文件或目录</li><li>mv: 移动文件与目录，或修改文件与目录的名称</li></ul><p>你可以使用 <em>man [命令]</em> 来查看各个命令的使用文档，如 ：man cp。</p><h3 id="ls-列出目录"><a href="#ls-列出目录" class="headerlink" title="ls (列出目录)"></a>ls (列出目录)</h3><p>在Linux系统当中， ls 命令可能是最常被运行的。</p><p>语法：</p><pre><code>[root@www ~]# ls [-aAdfFhilnrRSt] 目录名称[root@www ~]# ls [--color={never,auto,always}] 目录名称[root@www ~]# ls [--full-time] 目录名称</code></pre><p>选项与参数：</p><ul><li>-a ：全部的文件，连同隐藏档( 开头为 . 的文件) 一起列出来(常用)</li><li>-d ：仅列出目录本身，而不是列出目录内的文件数据(常用)</li><li>-l ：长数据串列出，包含文件的属性与权限等等数据；(常用)</li></ul><p>将家目录下的所有文件列出来(含属性与隐藏档)</p><pre><code>[root@www ~]# ls -al ~</code></pre><h3 id="cd-切换目录"><a href="#cd-切换目录" class="headerlink" title="cd (切换目录)"></a>cd (切换目录)</h3><p>cd是Change Directory的缩写，这是用来变换工作目录的命令。</p><p>语法：</p><pre><code> cd [相对路径或绝对路径]#使用 mkdir 命令创建 runoob 目录[root@www ~]# mkdir runoob#使用绝对路径切换到 runoob 目录[root@www ~]# cd /root/runoob/#使用相对路径切换到 runoob 目录[root@www ~]# cd ./runoob/# 表示回到自己的家目录，亦即是 /root 这个目录[root@www runoob]# cd ~# 表示去到目前的上一级目录，亦即是 /root 的上一级目录的意思；[root@www ~]# cd ..</code></pre><p>接下来大家多操作几次应该就可以很好的理解 cd 命令的。</p><h3 id="pwd-显示目前所在的目录"><a href="#pwd-显示目前所在的目录" class="headerlink" title="pwd (显示目前所在的目录)"></a>pwd (显示目前所在的目录)</h3><p>pwd 是 <strong>Print Working Directory</strong> 的缩写，也就是显示目前所在目录的命令。</p><pre><code>[root@www ~]# pwd [-P]</code></pre><p>选项与参数：</p><ul><li><strong>-P</strong> ：显示出确实的路径，而非使用连结 (link) 路径。</li></ul><p>实例：单纯显示出目前的工作目录：</p><pre><code>[root@www ~]# pwd/root   &lt;== 显示出目录啦～</code></pre><p>实例显示出实际的工作目录，而非连结档本身的目录名而已。</p><pre><code>[root@www ~]# cd /var/mail   &lt;==注意，/var/mail是一个连结档[root@www mail]# pwd/var/mail         &lt;==列出目前的工作目录[root@www mail]# pwd -P/var/spool/mail   &lt;==怎么回事？有没有加 -P 差很多～[root@www mail]# ls -ld /var/maillrwxrwxrwx 1 root root 10 Sep  4 17:54 /var/mail -&gt; spool/mail# 看到这里应该知道为啥了吧？因为 /var/mail 是连结档，连结到 /var/spool/mail # 所以，加上 pwd -P 的选项后，会不以连结档的数据显示，而是显示正确的完整路径啊！</code></pre><h3 id="mkdir-创建新目录"><a href="#mkdir-创建新目录" class="headerlink" title="mkdir (创建新目录)"></a>mkdir (创建新目录)</h3><p>如果想要创建新的目录的话，那么就使用mkdir (make directory)吧。</p><p>语法：</p><pre><code>mkdir [-mp] 目录名称</code></pre><p>选项与参数：</p><ul><li>-m ：配置文件的权限喔！直接配置，不需要看默认权限 (umask) 的脸色～</li><li>-p ：帮助你直接将所需要的目录(包含上一级目录)递归创建起来！</li></ul><p>实例：请到/tmp底下尝试创建数个新目录看看：</p><pre><code>[root@www ~]# cd /tmp[root@www tmp]# mkdir test    &lt;==创建一名为 test 的新目录[root@www tmp]# mkdir test1/test2/test3/test4mkdir: cannot create directory `test1/test2/test3/test4': No such file or directory       &lt;== 没办法直接创建此目录啊！[root@www tmp]# mkdir -p test1/test2/test3/test4</code></pre><p>加了这个 -p 的选项，可以自行帮你创建多层目录！</p><p>实例：创建权限为 <strong>rwx–x–x</strong> 的目录。</p><pre><code>[root@www tmp]# mkdir -m 711 test2[root@www tmp]# ls -ldrwxr-xr-x  3 root  root 4096 Jul 18 12:50 testdrwxr-xr-x  3 root  root 4096 Jul 18 12:53 test1drwx--x--x  2 root  root 4096 Jul 18 12:54 test2</code></pre><p>上面的权限部分，如果没有加上 -m 来强制配置属性，系统会使用默认属性。</p><p>如果我们使用 -m ，如上例我们给予 -m 711 来给予新的目录 drwx–x–x 的权限。</p><h3 id="rmdir-删除空的目录"><a href="#rmdir-删除空的目录" class="headerlink" title="rmdir (删除空的目录)"></a>rmdir (删除空的目录)</h3><p>语法：</p><pre><code> rmdir [-p] 目录名称</code></pre><p>选项与参数：</p><ul><li><strong>-p ：</strong>连同上一级『空的』目录也一起删除</li></ul><p>删除 runoob 目录</p><pre><code>[root@www tmp]# rmdir runoob/</code></pre><p>将 mkdir 实例中创建的目录(/tmp 底下)删除掉！</p><pre><code>[root@www tmp]# ls -l   &lt;==看看有多少目录存在？drwxr-xr-x  3 root  root 4096 Jul 18 12:50 testdrwxr-xr-x  3 root  root 4096 Jul 18 12:53 test1drwx--x--x  2 root  root 4096 Jul 18 12:54 test2[root@www tmp]# rmdir test   &lt;==可直接删除掉，没问题[root@www tmp]# rmdir test1  &lt;==因为尚有内容，所以无法删除！rmdir: `test1': Directory not empty[root@www tmp]# rmdir -p test1/test2/test3/test4[root@www tmp]# ls -l        &lt;==您看看，底下的输出中test与test1不见了！drwx--x--x  2 root  root 4096 Jul 18 12:54 test2</code></pre><p>利用 -p 这个选项，立刻就可以将 test1/test2/test3/test4 一次删除。</p><p>不过要注意的是，这个 rmdir 仅能删除空的目录，你可以使用 rm 命令来删除非空目录。</p><h3 id="cp-复制文件或目录"><a href="#cp-复制文件或目录" class="headerlink" title="cp (复制文件或目录)"></a>cp (复制文件或目录)</h3><p>cp 即拷贝文件和目录。</p><p>语法:</p><pre><code>[root@www ~]# cp [-adfilprsu] 来源档(source) 目标档(destination)[root@www ~]# cp [options] source1 source2 source3 .... directory</code></pre><p>选项与参数：</p><ul><li><strong>-a：</strong>相当於 -pdr 的意思，至於 pdr 请参考下列说明；(常用)</li><li><strong>-d：</strong>若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身；</li><li><strong>-f：</strong>为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；</li><li><strong>-i：</strong>若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)</li><li><strong>-l：</strong>进行硬式连结(hard link)的连结档创建，而非复制文件本身；</li><li><strong>-p：</strong>连同文件的属性一起复制过去，而非使用默认属性(备份常用)；</li><li><strong>-r：</strong>递归持续复制，用於目录的复制行为；(常用)</li><li><strong>-s：</strong>复制成为符号连结档 (symbolic link)，亦即『捷径』文件；</li><li><strong>-u：</strong>若 destination 比 source 旧才升级 destination ！</li></ul><p>用 root 身份，将 root 目录下的 .bashrc 复制到 /tmp 下，并命名为 bashrc</p><pre><code>[root@www ~]# cp ~/.bashrc /tmp/bashrc[root@www ~]# cp -i ~/.bashrc /tmp/bashrccp: overwrite `/tmp/bashrc'? n  &lt;==n不覆盖，y为覆盖</code></pre><h3 id="rm-移除文件或目录"><a href="#rm-移除文件或目录" class="headerlink" title="rm (移除文件或目录)"></a>rm (移除文件或目录)</h3><p>语法：</p><pre><code> rm [-fir] 文件或目录</code></pre><p>选项与参数：</p><ul><li>-f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；</li><li>-i ：互动模式，在删除前会询问使用者是否动作</li><li>-r ：递归删除啊！最常用在目录的删除了！这是非常危险的选项！！！</li><li></li></ul><p>将刚刚在 cp 的实例中创建的 bashrc 删除掉！</p><pre><code>[root@www tmp]# rm -i bashrcrm: remove regular file `bashrc'? y</code></pre><p>如果加上 -i 的选项就会主动询问喔，避免你删除到错误的档名！</p><h3 id="mv-移动文件与目录，或修改名称"><a href="#mv-移动文件与目录，或修改名称" class="headerlink" title="mv (移动文件与目录，或修改名称)"></a>mv (移动文件与目录，或修改名称)</h3><p>语法：</p><pre><code>[root@www ~]# mv [-fiu] source destination[root@www ~]# mv [options] source1 source2 source3 .... directory</code></pre><p>选项与参数：</p><ul><li>-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；</li><li>-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！</li><li>-u ：若目标文件已经存在，且 source 比较新，才会升级 (update)</li></ul><p>复制一文件，创建一目录，将文件移动到目录中</p><pre><code>[root@www ~]# cd /tmp[root@www tmp]# cp ~/.bashrc bashrc[root@www tmp]# mkdir mvtest[root@www tmp]# mv bashrc mvtest</code></pre><p>将某个文件移动到某个目录去，就是这样做！</p><p>将刚刚的目录名称更名为 mvtest2</p><pre><code>[root@www tmp]# mv mvtest mvtest2</code></pre><hr><h2 id="Linux-文件内容查看"><a href="#Linux-文件内容查看" class="headerlink" title="Linux 文件内容查看"></a>Linux 文件内容查看</h2><p>Linux系统中使用以下命令来查看文件的内容：</p><ul><li>cat  由第一行开始显示文件内容</li><li>tac  从最后一行开始显示，可以看出 tac 是 cat 的倒著写！</li><li>nl   显示的时候，顺道输出行号！</li><li>more 一页一页的显示文件内容</li><li>less 与 more 类似，但是比 more 更好的是，他可以往前翻页！</li><li>head 只看头几行</li><li>tail 只看尾巴几行</li></ul><p>你可以使用 <em>man [命令]</em>来查看各个命令的使用文档，如 ：man cp。</p><h3 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h3><p>由第一行开始显示文件内容</p><p>语法：</p><pre><code>cat [-AbEnTv]</code></pre><p>选项与参数：</p><ul><li>-A ：相当於 -vET 的整合选项，可列出一些特殊字符而不是空白而已；</li><li>-b ：列出行号，仅针对非空白行做行号显示，空白行不标行号！</li><li>-E ：将结尾的断行字节 $ 显示出来；</li><li>-n ：列印出行号，连同空白行也会有行号，与 -b 的选项不同；</li><li>-T ：将 [tab] 按键以 ^I 显示出来；</li><li>-v ：列出一些看不出来的特殊字符</li></ul><p>检看 /etc/issue 这个文件的内容：</p><pre><code>[root@www ~]# cat /etc/issueCentOS release 6.4 (Final)Kernel \r on an \m</code></pre><h3 id="tac"><a href="#tac" class="headerlink" title="tac"></a>tac</h3><p>tac与cat命令刚好相反，文件内容从最后一行开始显示，可以看出 tac 是 cat 的倒着写！如：</p><pre><code>[root@www ~]# tac /etc/issueKernel \r on an \mCentOS release 6.4 (Final)</code></pre><h3 id="nl"><a href="#nl" class="headerlink" title="nl"></a>nl</h3><p>显示行号</p><p>语法：</p><pre><code>nl [-bnw] 文件</code></pre><p>选项与参数：</p><ul><li>-b ：指定行号指定的方式，主要有两种：<br>-b a ：表示不论是否为空行，也同样列出行号(类似 cat -n)；<br>-b t ：如果有空行，空的那一行不要列出行号(默认值)；</li><li>-n ：列出行号表示的方法，主要有三种：<br>-n ln ：行号在荧幕的最左方显示；<br>-n rn ：行号在自己栏位的最右方显示，且不加 0 ；<br>-n rz ：行号在自己栏位的最右方显示，且加 0 ；</li><li>-w ：行号栏位的占用的位数。</li></ul><p>实例一：用 nl 列出 /etc/issue 的内容</p><pre><code>[root@www ~]# nl /etc/issue     1  CentOS release 6.4 (Final)     2  Kernel \r on an \m</code></pre><h3 id="more"><a href="#more" class="headerlink" title="more"></a>more</h3><p>一页一页翻动</p><pre><code>[root@www ~]# more /etc/man_db.config ## Generated automatically from man.conf.in by the# configure script.## man.conf from man-1.6d....(中间省略)....--More--(28%)  &lt;== 重点在这一行喔！你的光标也会在这里等待你的命令</code></pre><p>在 more 这个程序的运行过程中，你有几个按键可以按的：</p><ul><li>空白键 (space)：代表向下翻一页；</li><li>Enter         ：代表向下翻『一行』；</li><li>/字串         ：代表在这个显示的内容当中，向下搜寻『字串』这个关键字；</li><li>:f            ：立刻显示出档名以及目前显示的行数；</li><li>q             ：代表立刻离开 more ，不再显示该文件内容。</li><li>b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管线无用。</li></ul><h3 id="less"><a href="#less" class="headerlink" title="less"></a>less</h3><p>一页一页翻动，以下实例输出/etc/man.config文件的内容：</p><pre><code>[root@www ~]# less /etc/man.config## Generated automatically from man.conf.in by the# configure script.## man.conf from man-1.6d....(中间省略)....:   &lt;== 这里可以等待你输入命令！</code></pre><p>less运行时可以输入的命令有：</p><ul><li>空白键    ：向下翻动一页；</li><li>[pagedown]：向下翻动一页；</li><li>[pageup]  ：向上翻动一页；</li><li>/字串     ：向下搜寻『字串』的功能；</li><li>?字串     ：向上搜寻『字串』的功能；</li><li>n         ：重复前一个搜寻 (与 / 或 ? 有关！)</li><li>N         ：反向的重复前一个搜寻 (与 / 或 ? 有关！)</li><li>q         ：离开 less 这个程序；</li></ul><h3 id="head"><a href="#head" class="headerlink" title="head"></a>head</h3><p>取出文件前面几行</p><p>语法：</p><pre><code>head [-n number] 文件 </code></pre><p>选项与参数：</p><ul><li>-n ：后面接数字，代表显示几行的意思</li></ul><pre><code>[root@www ~]# head /etc/man.config</code></pre><p>默认的情况中，显示前面 10 行！若要显示前 20 行，就得要这样：</p><pre><code>[root@www ~]# head -n 20 /etc/man.config</code></pre><h3 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h3><p>取出文件后面几行</p><p>语法：</p><pre><code>tail [-n number] 文件 </code></pre><p>选项与参数：</p><ul><li>-n ：后面接数字，代表显示几行的意思</li><li>-f ：表示持续侦测后面所接的档名，要等到按下[ctrl]-c才会结束tail的侦测</li></ul><pre><code>[root@www ~]# tail /etc/man.config# 默认的情况中，显示最后的十行！若要显示最后的 20 行，就得要这样：[root@www ~]# tail -n 20 /etc/man.config</code></pre><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><ul><li><a href="https://www.runoob.com/linux/linux-file-content-manage.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-file-content-manage.html</a></li></ul><p><em>如有侵权，联系 <a href="mailto:2025685938@qq.com" target="_blank" rel="noopener">2025685938@qq.com</a> 删除</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.Linux 文件基本属性</title>
      <link href="/posts/44543.html"/>
      <url>/posts/44543.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-文件基本属性"><a href="#Linux-文件基本属性" class="headerlink" title="Linux 文件基本属性"></a>Linux 文件基本属性</h1><p>Linux系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。为了保护系统的安全性，Linux系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。</p><p>在Linux中我们可以使用ll或者ls –l命令来显示一个文件的属性以及文件所属的用户和组，如：</p><pre><code>[root@www /]# ls -ltotal 64dr-xr-xr-x   2 root root 4096 Dec 14  2012 bindr-xr-xr-x   4 root root 4096 Apr 19  2012 boot……</code></pre><p>实例中，bin文件的第一个属性用”d”表示。”d”在Linux中代表该文件是一个目录文件。</p><p>在Linux中第一个字符代表这个文件是目录、文件或链接文件等等。</p><ul><li>当为[ <strong>d</strong> ]则是目录</li><li>当为[ <strong>-</strong> ]则是文件；</li><li>若是[ <strong>l</strong> ]则表示为链接文档(link file)；</li><li>若是[ <strong>b</strong> ]则表示为装置文件里面的可供储存的接口设备(可随机存取装置)；</li><li>若是[ <strong>c</strong> ]则表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置)。</li></ul><p>接下来的字符中，以三个为一组，且均为『rwx』 的三个参数的组合。其中，[ r ]代表可读(read)、[ w ]代表可写(write)、[ x ]代表可执行(execute)。 要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号[ - ]而已。</p><p>每个文件的属性由左边第一部分的10个字符来确定（如下图）。</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/363003_1227493859FdXT.png" alt="363003_1227493859FdXT"></p><p>第0位确定文件类型，第1-3位确定属主（该文件的所有者）拥有该文件的权限。</p><p>第4-6位确定属组（所有者的同组用户）拥有该文件的权限，第7-9位确定其他用户拥有该文件的权限。</p><p>其中，第1、4、7位表示读权限，如果用”r”字符表示，则有读权限，如果用”-“字符表示，则没有读权限；</p><p>第2、5、8位表示写权限，如果用”w”字符表示，则有写权限，如果用”-“字符表示没有写权限；第3、6、9位表示可执行权限，如果用”x”字符表示，则有执行权限，如果用”-“字符表示，则没有执行权限。</p><hr><h2 id="Linux文件属主和属组"><a href="#Linux文件属主和属组" class="headerlink" title="Linux文件属主和属组"></a>Linux文件属主和属组</h2><pre><code>[root@www /]# ls -ltotal 64drwxr-xr-x 2 root  root  4096 Feb 15 14:46 crondrwxr-xr-x 3 mysql mysql 4096 Apr 21  2014 mysql……</code></pre><p>对于文件来说，它都有一个特定的所有者，也就是对该文件具有所有权的用户。</p><p>同时，在Linux系统中，用户是按组分类的，一个用户属于一个或多个组。</p><p>文件所有者以外的用户又可以分为文件所有者的同组用户和其他用户。</p><p>因此，Linux系统按文件所有者、文件所有者同组用户和其他用户来规定了不同的文件访问权限。</p><p>在以上实例中，mysql 文件是一个目录文件，属主和属组都为 mysql，属主有可读、可写、可执行的权限；与属主同组的其他用户有可读和可执行的权限；其他用户也有可读和可执行的权限。</p><p>对于 root 用户来说，一般情况下，文件的权限对其不起作用。</p><h3 id="更改文件属性"><a href="#更改文件属性" class="headerlink" title="更改文件属性"></a>更改文件属性</h3><h4 id="1、chgrp：更改文件属组"><a href="#1、chgrp：更改文件属组" class="headerlink" title="1、chgrp：更改文件属组"></a>1、chgrp：更改文件属组</h4><p>语法：</p><pre><code>chgrp [-R] 属组名 文件名</code></pre><p>参数选项</p><ul><li>-R：递归更改文件属组，就是在更改某个目录文件的属组时，如果加上-R的参数，那么该目录下的所有文件的属组都会更改。</li></ul><h4 id="2、chown：更改文件属主，也可以同时更改文件属组"><a href="#2、chown：更改文件属主，也可以同时更改文件属组" class="headerlink" title="2、chown：更改文件属主，也可以同时更改文件属组"></a>2、chown：更改文件属主，也可以同时更改文件属组</h4><p>语法：</p><pre><code>chown [–R] 属主名 文件名chown [-R] 属主名：属组名 文件名</code></pre><p>进入 /root 目录（~）将install.log的拥有者改为bin这个账号：</p><pre><code>[root@www ~] cd ~[root@www ~]# chown bin install.log[root@www ~]# ls -l-rw-r--r--  1 bin  users 68495 Jun 25 08:53 install.log</code></pre><p>将install.log的拥有者与群组改回为root：</p><pre><code>[root@www ~]# chown root:root install.log[root@www ~]# ls -l-rw-r--r--  1 root root 68495 Jun 25 08:53 install.log</code></pre><h4 id="3、chmod：更改文件9个属性"><a href="#3、chmod：更改文件9个属性" class="headerlink" title="3、chmod：更改文件9个属性"></a>3、chmod：更改文件9个属性</h4><p>Linux文件属性有两种设置方法，一种是数字，一种是符号。</p><p>Linux文件的基本权限就有九个，分别是owner/group/others三种身份各有自己的read/write/execute权限。</p><p>先复习一下刚刚上面提到的数据：文件的权限字符为：『-rwxrwxrwx』， 这九个权限是三个三个一组的！其中，我们可以使用数字来代表各个权限，各权限的分数对照表如下：</p><ul><li>r:4</li><li>w:2</li><li>x:1</li></ul><p>每种身份(owner/group/others)各自的三个权限(r/w/x)分数是需要累加的，例如当权限为： [-rwxrwx—] 分数则是：</p><ul><li>owner = rwx = 4+2+1 = 7</li><li>group = rwx = 4+2+1 = 7</li><li>others= — = 0+0+0 = 0</li></ul><p>所以等一下我们设定权限的变更时，该文件的权限数字就是770啦！变更权限的指令chmod的语法是这样的：</p><pre><code> chmod [-R] xyz 文件或目录</code></pre><p>选项与参数：</p><ul><li>xyz : 就是刚刚提到的数字类型的权限属性，为 rwx 属性数值的相加。</li><li>-R : 进行递归(recursive)的持续变更，亦即连同次目录下的所有文件都会变更</li></ul><p>举例来说，如果要将.bashrc这个文件所有的权限都设定启用，那么命令如下：</p><pre><code>[root@www ~]# ls -al .bashrc-rw-r--r--  1 root root 395 Jul  4 11:45 .bashrc[root@www ~]# chmod 777 .bashrc[root@www ~]# ls -al .bashrc-rwxrwxrwx  1 root root 395 Jul  4 11:45 .bashrc</code></pre><p>那如果要将权限变成 <em>-rwxr-xr–</em> 呢？那么权限的分数就成为 [4+2+1][4+0+1][4+0+0]=754。</p><h4 id="符号类型改变文件权限"><a href="#符号类型改变文件权限" class="headerlink" title="符号类型改变文件权限"></a>符号类型改变文件权限</h4><p>还有一个改变权限的方法，从之前的介绍中我们可以发现，基本上就九个权限分别是：</p><ul><li>(1)user</li><li>(2)group</li><li>(3)others</li></ul><p>那么我们就可以使用 <strong>u, g, o</strong> 来代表三种身份的权限！</p><p>此外， <strong>a</strong> 则代表 <strong>all</strong>，即全部的身份。读写的权限可以写成 <strong>r, w, x</strong>，也就是可以使用下表的方式来看：</p><table><thead><tr><th>chmod</th><th>u g o a</th><th>+(加入) -(除去) =(设定)</th><th>r w x</th><th>文件或目录</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>如果我们需要将文件权限设置为 <strong>-rwxr-xr–</strong> ，可以使用 <strong>chmod u=rwx,g=rx,o=r 文件名</strong> 来设定:</p><pre><code>#  touch test1    // 创建 test1 文件# ls -al test1    // 查看 test1 默认权限-rw-r--r-- 1 root root 0 Nov 15 10:32 test1# chmod u=rwx,g=rx,o=r  test1    // 修改 test1 权限# ls -al test1-rwxr-xr-- 1 root root 0 Nov 15 10:32 test1</code></pre><p>而如果是要将权限去掉而不改变其他已存在的权限呢？例如要拿掉全部人的可执行权限，则：</p><pre><code>#  chmod  a-x test1# ls -al test1-rw-r--r-- 1 root root 0 Nov 15 10:32 test1</code></pre><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><ul><li><a href="https://www.runoob.com/linux/linux-file-attr-permission.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-file-attr-permission.html</a></li></ul><p><em>如有侵权，联系 <a href="mailto:2025685938@qq.com" target="_blank" rel="noopener">2025685938@qq.com</a> 删除</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.Linux 远程登录</title>
      <link href="/posts/29833.html"/>
      <url>/posts/29833.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-远程登录"><a href="#Linux-远程登录" class="headerlink" title="Linux 远程登录"></a>Linux 远程登录</h1><p>Linux一般作为服务器使用，而服务器一般放在机房，你不可能在机房操作你的Linux服务器。</p><p>这时我们就需要远程登录到Linux服务器来管理维护系统。</p><p>Linux系统中是通过ssh服务实现的远程登录功能，默认ssh服务端口号为 22。</p><p>Window系统上 Linux 远程登录客户端有SecureCRT, Putty, SSH Secure Shell等，本文以Putty为例来登录远程服务器。</p><p>putty下载地址：<a href="http://www.putty.org/" target="_blank" rel="noopener">http://www.putty.org/</a></p><p>如果你下载了putty，请双击putty.exe 然后弹出如下的窗口。</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/5_1.png" alt="5_1"></p><p>在Host Name( or IP address) 下面的框中输入你要登录的远程服务器IP(可以通过ifconfig命令查看服务器ip)，然后回车。</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/5_12.png" alt="5_12"></p><p>此时，提示我们输入要登录的用户名。</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/5_13.png" alt="5_13"></p><p>输入root 然后回车，再输入密码，就能登录到远程的linux系统了。</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/5_14.png" alt="5_14"></p><hr><h2 id="使用密钥认证机制远程登录linux"><a href="#使用密钥认证机制远程登录linux" class="headerlink" title="使用密钥认证机制远程登录linux"></a>使用密钥认证机制远程登录linux</h2><p>SSH 为 Secure Shell 的缩写，由 IETF 的网络工作小组（Network Working Group）所制定。</p><p>SSH 为建立在应用层和传输层基础上的安全协议。</p><p>首先使用工具 PUTTYGEN.EXE 生成密钥对。打开工具PUTTYGEN.EXE后如下图所示：</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/5_15.png" alt="5_15"></p><p>该工具可以生成三种格式的key ：SSH-1(RSA) SSH-2(RSA) SSH-2(DSA) ，我们采用默认的格式即SSH-2(RSA)。Number of bits in a generated key 这个是指生成的key的大小，这个数值越大，生成的key就越复杂，安全性就越高。这里我们写2048.</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/5_16.png" alt="5_16"></p><p>然后单击Generate 开始生成密钥对：</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/5_17.png" alt="5_17"></p><p>注意的是，在这个过程中鼠标要来回的动，否则这个进度条是不会动的。</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/5_18.png" alt="5_18"></p><p>到这里，密钥对已经生成了。你可以给你的密钥输入一个密码，（在Key Passphrase那里）也可以留空。然后点 Save public key 保存公钥，点 Save private Key 保存私钥。笔者建议你放到一个比较安全的地方，一来防止别人偷窥，二来防止误删除。接下来就该到远程linux主机上设置了。</p><p>1）创建目录 /root/.ssh 并设置权限</p><p>[root@localhost ~]# mkdir /root/.ssh mkdir 命令用来创建目录，以后会详细介绍，暂时只了解即可。</p><p>[root@localhost ~]# chmod 700 /root/.ssh chmod 命令是用来修改文件属性权限的，以后会详细介绍。</p><p>2）创建文件 / root/.ssh/authorized_keys</p><p>[root@localhost ~]# vim /root/.ssh/authorized_keys vim 命令是编辑一个文本文件的命令，同样在后续章节详细介绍。</p><p>3）打开刚才生成的public key 文件，建议使用写字板打开，这样看着舒服一些，复制从AAAA开头至 “—- END SSH2 PUBLIC KEY —-“ 该行上的所有内容，粘贴到/root/.ssh/authorized_keys 文件中，要保证所有字符在一行。（可以先把复制的内容拷贝至记事本，然后编辑成一行载粘贴到该文件中）。</p><p>在这里要简单介绍一下，如何粘贴，用vim打开那个文件后，该文件不存在，所以vim会自动创建。按一下字母”i”然后同时按shift + Insert 进行粘贴（或者单击鼠标右键即可），前提是已经复制到剪切板中了。粘贴好后，然后把光标移动到该行最前面输入 <strong>ssh-rsa</strong> ，然后按空格。再按ESC，然后输入冒号wq 即 :wq 就保存了。格式如下图：</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/5_19.png" alt="5_19"></p><p>4）再设置putty选项，点窗口左侧的SSh –&gt; Auth ，单击窗口右侧的Browse… 选择刚刚生成的私钥， 再点Open ，此时输入root，就不用输入密码就能登录了。</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/5_20.png" alt="5_20"></p><p>如果在前面你设置了Key Passphrase ，那么此时就会提示你输入密码的。为了更加安全建议大家要设置一个Key Passphrase。</p><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><ul><li><a href="https://www.runoob.com/linux/linux-remote-login.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-remote-login.html</a></li></ul><p><em>如有侵权，联系 <a href="mailto:2025685938@qq.com" target="_blank" rel="noopener">2025685938@qq.com</a> 删除</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.Linux 忘记密码解决方法</title>
      <link href="/posts/31173.html"/>
      <url>/posts/31173.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-忘记密码解决方法"><a href="#Linux-忘记密码解决方法" class="headerlink" title="Linux 忘记密码解决方法"></a>Linux 忘记密码解决方法</h1><p>很多朋友经常会忘记Linux系统的root密码，linux系统忘记root密码的情况该怎么办呢？重新安装系统吗？当然不用！进入单用户模式更改一下root密码即可。</p><p>步骤如下：</p><h3 id="重启linux系统"><a href="#重启linux系统" class="headerlink" title="重启linux系统"></a>重启linux系统</h3><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/4_21.png" alt="4_21"></p><p>3 秒之内要按一下回车，出现如下界面</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/4_22.png" alt="4_22"></p><p>然后输入e</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/4_23.png" alt="4_23"></p><p>在 第二行最后边输入 single，有一个空格。具体方法为按向下尖头移动到第二行，按”e”进入编辑模式</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/4_24.png" alt="4_24">在后边加上single 回车</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/4_25.png" alt="4_25"></p><p>最后按”b”启动，启动后就进入了单用户模式了</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/4_26.png" alt="4_26"></p><p>此时已经进入到单用户模式了，你可以更改root密码了。更密码的命令为 passwd</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/4_27.png" alt="4_27"></p><p>【<strong>使用系统安装光盘的救援模式</strong>】</p><p>救援模式即rescue ，这个模式主要是应用于，系统无法进入的情况。如，grub损坏或者某一个配置文件修改出错。如何使用rescue模式呢？</p><p>光盘启动，按F5 进入rescue模式</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/4_28.png" alt="4_28"></p><p>输入linux rescue 回车</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/4_29.png" alt="4_29"></p><p>选择语言，笔者建议你选择英语</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/4_30.png" alt="4_30"></p><p>选择us 键盘</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/4_31.png" alt="4_31"></p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/4_32.png" alt="4_32"></p><p>这里问你是否启动网络，有时候可能会联网调试。我们选no</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/4_33.png" alt="4_33"></p><p>这里告诉我们，接下来会把系统挂载在/mnt/sysimage 中。</p><p>其中有三个选项:</p><ul><li>Continue 就是挂载后继续下一步。 </li><li>Read-Only 挂载成只读，这样更安全，有时文件系统损坏时，只读模式会防止文件系统近一步损坏。</li><li>Skip就是不挂载，进入一个命令窗口模式。 </li></ul><p>这里我们选择Continue。</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/4_34.png" alt="4_34"></p><p>至此，系统已经挂载到了/mnt/sysimage中。接下来回车，输入chroot /mnt/sysimage 进入管理员环境。</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/4_35.png" alt="4_35"></p><p><strong>提示：</strong> 其实也可以到rescue模式下更改root的密码的。这个rescue模式和windows PE系统很相近。</p><p>当运行了chroot /mnt/sysimage/ 后，再ls 看到目录结构和原来系统中的目录结构是一样的。</p><p>没错！现在的环境和原来系统的环境是一模一样的。你可以输入exit 或者按Ctrl + D退出这个环境。然后你再ls 看一下</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/4_36.png" alt="4_36"></p><p>这个目录其实就是rescue模式下的目录结构，而我们的系统文件全部在 /mnt/sysimage目录下。</p><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><ul><li><a href="https://www.runoob.com/linux/linux-forget-password.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-forget-password.html</a></li></ul><p><em>如有侵权，联系 <a href="mailto:2025685938@qq.com" target="_blank" rel="noopener">2025685938@qq.com</a> 删除</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.Linux 系统目录结构</title>
      <link href="/posts/38302.html"/>
      <url>/posts/38302.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-系统目录结构"><a href="#Linux-系统目录结构" class="headerlink" title="Linux 系统目录结构"></a>Linux 系统目录结构</h1><p>登录系统后，在当前命令窗口下输入命令：</p><pre><code> ls / </code></pre><p>你会看到如下图所示:</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/4_20.png" alt="img"></p><h2 id="树状目录结构："><a href="#树状目录结构：" class="headerlink" title="树状目录结构："></a>树状目录结构：</h2><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/003vPl7Rty6E8kZRlAEdc690.jpg" alt="img"></p><p>以下是对这些目录的解释：</p><ul><li><p><strong>/bin</strong>：<br>bin是Binary的缩写, 这个目录存放着最经常使用的命令。</p></li><li><p><strong>/boot：</strong><br>这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。</p></li><li><p><strong>/dev ：</strong><br>dev是Device(设备)的缩写, 该目录下存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。</p></li><li><p><strong>/etc：</strong><br>这个目录用来存放所有的系统管理所需要的配置文件和子目录。</p></li><li><p><strong>/home</strong>：<br>用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。</p></li><li><p><strong>/lib</strong>：<br>这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。</p></li><li><p><strong>/lost+found</strong>：<br>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</p></li><li><p><strong>/media</strong>：<br>linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。</p></li><li><p><strong>/mnt</strong>：<br>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在/mnt/上，然后进入该目录就可以查看光驱里的内容了。</p></li><li><p><strong>/opt</strong>：<br> 这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</p></li><li><p><strong>/proc</strong>：<br>这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。<br>这个目录的内容不在硬盘上而是在内存里，我们也可以直接修改里面的某些文件，比如可以通过下面的命令来屏蔽主机的ping命令，使别人无法ping你的机器：</p><pre><code>echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all</code></pre></li><li><p><strong>/root</strong>：<br>该目录为系统管理员，也称作超级权限者的用户主目录。</p></li><li><p><strong>/sbin</strong>：<br>s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。</p></li><li><p><strong>/selinux</strong>：<br> 这个目录是Redhat/CentOS所特有的目录，Selinux是一个安全机制，类似于windows的防火墙，但是这套机制比较复杂，这个目录就是存放selinux相关的文件的。</p></li><li><p><strong>/srv</strong>：<br> 该目录存放一些服务启动之后需要提取的数据。</p></li><li><p><strong>/sys</strong>：</p><p> 这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。</p><p>sysfs文件系统集成了下面3种文件系统的信息：针对进程信息的proc文件系统、针对设备的devfs文件系统以及针对伪终端的devpts文件系统。</p></li></ul><pre><code>该文件系统是内核设备树的一个直观反映。当一个内核对象被创建的时候，对应的文件和目录也在内核对象子系统中被创建。</code></pre><ul><li><p><strong>/tmp</strong>：<br>这个目录是用来存放一些临时文件的。</p></li><li><p><strong>/usr</strong>：<br> 这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。</p></li><li><p><strong>/usr/bin：</strong><br>系统用户使用的应用程序。</p></li><li><p><strong>/usr/sbin：</strong><br>超级用户使用的比较高级的管理程序和系统守护程序。</p></li><li><p><strong>/usr/src：</strong><br>内核源代码默认的放置目录。</p></li><li><p><strong>/var</strong>：<br>这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</p></li><li><p><strong>/run</strong>：<br>是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。如果你的系统上有 /var/run 目录，应该让它指向 run。</p></li></ul><p>在 Linux 系统中，有几个目录是比较重要的，平时需要注意不要误删除或者随意更改内部文件。</p><p><strong>/etc</strong>： 上边也提到了，这个是系统中的配置文件，如果你更改了该目录下的某个文件可能会导致系统不能启动。</p><p><strong>/bin, /sbin, /usr/bin, /usr/sbin</strong>: 这是系统预设的执行文件的放置目录，比如 ls 就是在/bin/ls 目录下的。</p><p>值得提出的是，/bin, /usr/bin 是给系统用户使用的指令（除root外的通用户），而/sbin, /usr/sbin 则是给root使用的指令。</p><p><strong>/var</strong>： 这是一个非常重要的目录，系统上跑了很多程序，那么每个程序都会有相应的日志产生，而这些日志就被记录到这个目录下，具体在/var/log 目录下，另外mail的预设放置也是在这里。</p><p>在Linux文件系统中有两个特殊的目录，一个用户所在的工作目录，也叫当前目录，可以使用一个点 <strong>.</strong> 来表示；另一个是当前目录的上一级目录，也叫父目录，可以使用两个点 <strong>..</strong> 来表示。</p><ul><li>. ：代表当前的目录，也可以使用 ./ 来表示；</li><li>.. ：代表上一层目录，也可以 ../ 来代表。</li></ul><p>如果一个目录或文件名以一个点 . 开始，表示这个目录或文件是一个隐藏目录或文件(如：.bashrc)。即以默认方式查找时，不显示该目录或文件。</p><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><ul><li><a href="https://www.runoob.com/linux/linux-system-contents.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-system-contents.html</a></li></ul><p><em>如有侵权，联系 <a href="mailto:2025685938@qq.com" target="_blank" rel="noopener">2025685938@qq.com</a> 删除</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.Linux 系统启动过程</title>
      <link href="/posts/22177.html"/>
      <url>/posts/22177.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-系统启动过程"><a href="#Linux-系统启动过程" class="headerlink" title="Linux 系统启动过程"></a>Linux 系统启动过程</h1><p>linux启动时我们会看到许多启动信息。</p><p>Linux系统的启动过程并不是大家想象中的那么复杂，其过程可以分为5个阶段：</p><ul><li>内核的引导。</li><li>运行 init。</li><li>系统初始化。</li><li>建立终端 。</li><li>用户登录系统。</li></ul><blockquote><p>  init程序的类型：</p><ul><li><strong>SysV:</strong> init, CentOS 5之前, 配置文件： /etc/inittab。</li><li><strong>Upstart:</strong> init,CentOS 6, 配置文件： /etc/inittab, /etc/init/*.conf。</li><li><strong>Systemd：</strong> systemd, CentOS 7,配置文件： /usr/lib/systemd/system、 /etc/systemd/system。</li></ul></blockquote><hr><h2 id="内核引导"><a href="#内核引导" class="headerlink" title="内核引导"></a>内核引导</h2><p>当计算机打开电源后，首先是BIOS开机自检，按照BIOS中设置的启动设备（通常是硬盘）来启动。</p><p>操作系统接管硬件以后，首先读入 /boot 目录下的内核文件。</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/bg2013081702.png" alt="img"></p><hr><h2 id="运行init"><a href="#运行init" class="headerlink" title="运行init"></a>运行init</h2><p>init 进程是系统所有进程的起点，你可以把它比拟成系统所有进程的老祖宗，没有这个进程，系统中任何进程都不会启动。</p><p>init 程序首先是需要读取配置文件 /etc/inittab。</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/bg2013081703.png" alt="img"></p><h3 id="运行级别"><a href="#运行级别" class="headerlink" title="运行级别"></a>运行级别</h3><p>许多程序需要开机启动。它们在Windows叫做”服务”（service），在Linux就叫做”守护进程”（daemon）。</p><p>init进程的一大任务，就是去运行这些开机启动的程序。</p><p>但是，不同的场合需要启动不同的程序，比如用作服务器时，需要启动Apache，用作桌面就不需要。</p><p>Linux允许为不同的场合，分配不同的开机启动程序，这就叫做”运行级别”（runlevel）。也就是说，启动时根据”运行级别”，确定要运行哪些程序。</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/bg2013081704.png" alt="img"></p><p>Linux系统有7个运行级别(runlevel)：</p><ul><li>运行级别0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动</li><li>运行级别1：单用户工作状态，root权限，用于系统维护，禁止远程登陆</li><li>运行级别2：多用户状态(没有NFS)</li><li>运行级别3：完全的多用户状态(有NFS)，登陆后进入控制台命令行模式</li><li>运行级别4：系统未使用，保留</li><li>运行级别5：X11控制台，登陆后进入图形GUI模式</li><li>运行级别6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动</li></ul><hr><h2 id="系统初始化"><a href="#系统初始化" class="headerlink" title="系统初始化"></a>系统初始化</h2><p>在init的配置文件中有这么一行： si::sysinit:/etc/rc.d/rc.sysinit　它调用执行了/etc/rc.d/rc.sysinit，而rc.sysinit是一个bash shell的脚本，它主要是完成一些系统初始化的工作，rc.sysinit是每一个运行级别都要首先运行的重要脚本。</p><p>它主要完成的工作有：激活交换分区，检查磁盘，加载硬件模块以及其它一些需要优先执行任务。</p><pre><code>l5:5:wait:/etc/rc.d/rc 5</code></pre><p>这一行表示以5为参数运行/etc/rc.d/rc，/etc/rc.d/rc是一个Shell脚本，它接受5作为参数，去执行/etc/rc.d/rc5.d/目录下的所有的rc启动脚本，/etc/rc.d/rc5.d/目录中的这些启动脚本实际上都是一些连接文件，而不是真正的rc启动脚本，真正的rc启动脚本实际上都是放在/etc/rc.d/init.d/目录下。</p><p>而这些rc启动脚本有着类似的用法，它们一般能接受start、stop、restart、status等参数。</p><p>/etc/rc.d/rc5.d/中的rc启动脚本通常是K或S开头的连接文件，对于以 S 开头的启动脚本，将以start参数来运行。</p><p>而如果发现存在相应的脚本也存在K打头的连接，而且已经处于运行态了(以/var/lock/subsys/下的文件作为标志)，则将首先以stop为参数停止这些已经启动了的守护进程，然后再重新运行。</p><p>这样做是为了保证是当init改变运行级别时，所有相关的守护进程都将重启。</p><p>至于在每个运行级中将运行哪些守护进程，用户可以通过chkconfig或setup中的”System Services”来自行设定。</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/bg2013081705.png" alt="img"></p><hr><h2 id="建立终端"><a href="#建立终端" class="headerlink" title="建立终端"></a>建立终端</h2><p>rc执行完毕后，返回init。这时基本系统环境已经设置好了，各种守护进程也已经启动了。</p><p>init接下来会打开6个终端，以便用户登录系统。在inittab中的以下6行就是定义了6个终端：</p><pre><code>1:2345:respawn:/sbin/mingetty tty12:2345:respawn:/sbin/mingetty tty23:2345:respawn:/sbin/mingetty tty34:2345:respawn:/sbin/mingetty tty45:2345:respawn:/sbin/mingetty tty56:2345:respawn:/sbin/mingetty tty6</code></pre><p>从上面可以看出在2、3、4、5的运行级别中都将以respawn方式运行mingetty程序，mingetty程序能打开终端、设置模式。</p><p>同时它会显示一个文本登录界面，这个界面就是我们经常看到的登录界面，在这个登录界面中会提示用户输入用户名，而用户输入的用户将作为参数传给login程序来验证用户的身份。</p><hr><h2 id="用户登录系统"><a href="#用户登录系统" class="headerlink" title="用户登录系统"></a>用户登录系统</h2><p>一般来说，用户的登录方式有三种：</p><ul><li>（1）命令行登录</li><li>（2）ssh登录</li><li>（3）图形界面登录</li></ul><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/bg2013081706.png" alt="img"></p><p>对于运行级别为5的图形方式用户来说，他们的登录是通过一个图形化的登录界面。登录成功后可以直接进入 KDE、Gnome 等窗口管理器。</p><p>而本文主要讲的还是文本方式登录的情况：当我们看到mingetty的登录界面时，我们就可以输入用户名和密码来登录系统了。</p><p>Linux 的账号验证程序是 login，login 会接收 mingetty 传来的用户名作为用户名参数。</p><p>然后 login 会对用户名进行分析：如果用户名不是 root，且存在 /etc/nologin 文件，login 将输出 nologin 文件的内容，然后退出。</p><p>这通常用来系统维护时防止非root用户登录。只有/etc/securetty中登记了的终端才允许 root 用户登录，如果不存在这个文件，则 root 用户可以在任何终端上登录。</p><p>/etc/usertty文件用于对用户作出附加访问限制，如果不存在这个文件，则没有其他限制。</p><hr><h2 id="图形模式与文字模式的切换方式"><a href="#图形模式与文字模式的切换方式" class="headerlink" title="图形模式与文字模式的切换方式"></a>图形模式与文字模式的切换方式</h2><p>Linux预设提供了六个命令窗口终端机让我们来登录。</p><p>默认我们登录的就是第一个窗口，也就是tty1，这个六个窗口分别为tty1,tty2 … tty6，你可以按下Ctrl + Alt + F1 ~ F6 来切换它们。</p><p>如果你安装了图形界面，默认情况下是进入图形界面的，此时你就可以按Ctrl + Alt + F1 ~ F6来进入其中一个命令窗口界面。</p><p>当你进入命令窗口界面后再返回图形界面只要按下Ctrl + Alt + F7 就回来了。</p><p>如果你用的vmware 虚拟机，命令窗口切换的快捷键为 Alt + Space + F1<del>F6. 如果你在图形界面下请按Alt + Shift + Ctrl + F1</del>F6 切换至命令窗口。</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/bg2013081707.png" alt="img"></p><hr><h2 id="Linux-关机"><a href="#Linux-关机" class="headerlink" title="Linux 关机"></a>Linux 关机</h2><p>在linux领域内大多用在服务器上，很少遇到关机的操作。毕竟服务器上跑一个服务是永无止境的，除非特殊情况下，不得已才会关机。</p><p>正确的关机流程为：sync &gt; shutdown &gt; reboot &gt; halt</p><p>关机指令为：shutdown ，你可以man shutdown 来看一下帮助文档。</p><p>例如你可以运行如下命令关机：</p><pre><code>sync 将数据由内存同步到硬盘中。shutdown 关机指令，你可以man shutdown 来看一下帮助文档。例如你可以运行如下命令关机：shutdown –h 10 ‘This server will shutdown after 10 mins’ 这个命令告诉大家，计算机将在10分钟后关机，并且会显示在登陆用户的当前屏幕中。shutdown –h now 立马关机shutdown –h 20:25 系统会在今天20:25关机shutdown –h +10 十分钟后关机shutdown –r now 系统立马重启shutdown –r +10 系统十分钟后重启reboot 就是重启，等同于 shutdown –r nowhalt 关闭系统，等同于shutdown –h now 和 poweroff</code></pre><p>最后总结一下，不管是重启系统还是关闭系统，首先要运行 <strong>sync</strong> 命令，把内存中的数据写到磁盘中。</p><p>关机的命令有 <strong>shutdown –h now halt poweroff</strong> 和 <strong>init 0</strong> , 重启系统的命令有 <strong>shutdown –r now reboot init 6</strong>。</p><hr><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2013/08/linux_boot_process.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2013/08/linux_boot_process.html</a></li><li><a href="https://www.runoob.com/linux/linux-system-boot.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-system-boot.html</a></li></ul><p><em>如有侵权，联系 <a href="mailto:2025685938@qq.com" target="_blank" rel="noopener">2025685938@qq.com</a> 删除</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.Linux 安装</title>
      <link href="/posts/57704.html"/>
      <url>/posts/57704.html</url>
      
        <content type="html"><![CDATA[<h2 id="Linux-安装"><a href="#Linux-安装" class="headerlink" title="Linux 安装"></a>Linux 安装</h2><p>本章节我们将为大家介绍 Linux 的安装。</p><p>本章节以 centos6.4 为例。</p><h3 id="centos-下载地址："><a href="#centos-下载地址：" class="headerlink" title="centos 下载地址："></a>centos 下载地址：</h3><p>可以去官网下载最新版本：<a href="https://www.centos.org/download/" target="_blank" rel="noopener">https://www.centos.org/download/</a></p><p><img src="https://www.runoob.com/wp-content/uploads/2017/06/1497342019-2668-2a90-3944-9027-0352de39b1fe.jpg" alt="img"></p><p>以下针对各个版本的ISO镜像文件，进行一一说明：</p><ul><li><strong>CentOS-7.0-x86_64-DVD-1503-01.iso</strong> : 标准安装版，一般下载这个就可以了（推荐）</li><li><strong>CentOS-7.0-x86_64-NetInstall-1503-01.iso</strong> : 网络安装镜像（从网络安装或者救援系统）</li><li><strong>CentOS-7.0-x86_64-Everything-1503-01.iso</strong>: 对完整版安装盘的软件进行补充，集成所有软件。（包含centos7的一套完整的软件包，可以用来安装系统或者填充本地镜像）</li><li><strong>CentOS-7.0-x86_64-GnomeLive-1503-01.iso</strong>: GNOME桌面版</li><li><strong>CentOS-7.0-x86_64-KdeLive-1503-01.iso</strong>: KDE桌面版</li><li><strong>CentOS-7.0-x86_64-livecd-1503-01.iso</strong> : 光盘上运行的系统，类拟于winpe</li><li><strong>CentOS-7.0-x86_64-minimal-1503-01.iso</strong> : 精简版，自带的软件最少</li></ul><blockquote><p>  <strong>注：</strong>建议安装64位Linux系统。</p><p>  旧版本下载地址：<a href="https://wiki.centos.org/Download" target="_blank" rel="noopener">https://wiki.centos.org/Download</a></p></blockquote><p>接下来你需要将下载的Linux系统刻录成光盘或U盘。</p><p><strong>注：</strong>你也可以在Window上安装VMware虚拟机来安装Linux系统。</p><hr><h3 id="Linux-安装步骤"><a href="#Linux-安装步骤" class="headerlink" title="Linux 安装步骤"></a>Linux 安装步骤</h3><p>1、首先，使用光驱或U盘或你下载的Linux ISO文件进行安装。</p><p>界面说明：</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/image001.png" alt="image001"></p><p>Install or upgrade an existing system 安装或升级现有的系统</p><p>install system with basic video driver 安装过程中采用基本的显卡驱动</p><p>Rescue installed system 进入系统修复模式</p><p>Boot from local drive   退出安装从硬盘启动</p><p>Memory test  内存检测</p><p>注：用联想E49安装时选择第一项安装时会出现屏幕显示异常的问题，后改用第二项安装时就没有出现问题</p><p>2、这时直接”skip”就可以了</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/image002.png" alt="image002"></p><p>3、出现引导界面，点击”next”</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/image003.png" alt="image003"></p><p>4、选中”English（English）”否则会有部分乱码问题</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/image004.png" alt="image004"></p><p>5、键盘布局选择”U.S.English”</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/image005.png" alt="image005"></p><p>6、选择”Basic Storage Devices”点击”Next”</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/image006.png" alt="image006"></p><p>7、询问是否忽略所有数据，新电脑安装系统选择”Yes,discard any data”</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/image007.png" alt="image007"></p><p>8、Hostname填写格式”英文名.姓”</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/image008.png" alt="image008"></p><p>9、网络设置安装图示顺序点击就可以了</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/image009.png" alt="image009"></p><p>10、时区可以在地图上点击，选择”shanghai”并取消System clock uses UTC前面的对勾</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/image010.png" alt="image010"></p><p>11、设置root的密码</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/image011.png" alt="image011"></p><p>12、硬盘分区，一定要按照图示点选</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/image012.png" alt="image012"></p><p>13、调整分区，必须要有/home这个分区，如果没有这个分区，安装部分软件会出现不能安装的问题</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/image013.png" alt="image013"></p><p>14、询问是否格式化分区</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/image014.png" alt="image014"></p><p>15、将更改写入到硬盘</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/image015.png" alt="image015"></p><p>16、引导程序安装位置</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/image016.png" alt="image016"></p><p>17、最重要的一步，也是本教程最关键的一步，也是其他教程没有提及的一步，按图示顺序点击</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/image017.png" alt="image017"></p><p>18、取消以下内容的所有选项</p><p><strong>Applications</strong></p><p><strong>Base System</strong></p><p><strong>Servers</strong></p><p>并对Desktops进行如下设置</p><p>即取消如下选项：</p><p><strong>Desktop Debugging and Performance Tools</strong></p><p><strong>Desktop Platform</strong></p><p><strong>Remote Desktop Clients</strong></p><p><strong>Input Methods**</strong>中仅保留ibus-pinyin-1.3.8-1.el6.x86_64,其他的全部取消**</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/image018.png" alt="image018"></p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/image019.png" alt="image019"></p><p>19、选中Languages，并选中右侧的Chinese Support然后点击红色区域</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/image020.png" alt="image020"></p><p>20、调整完成后如下图所示</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/image021.png" alt="image021"></p><p>21、至此，一个最精简的桌面环境就设置完成了，</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/image022.png" alt="image022"></p><p>22、安装完成，重启</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/image023.png" alt="image023"></p><p>23、重启之后，的License Information</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/image024.png" alt="image024"></p><p>24、Create User</p><p>Username：填写您的英文名（不带.姓）</p><p>Full Name：填写您的英文名.姓（首字母大写）</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/image025.png" alt="image025"></p><p>25、”Date and Time” 选中 “Synchronize data and time over the network”</p><p>Finsh之后系统将重启</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/image026.png" alt="image026"></p><p>26、第一次登录，登录前不要做任何更改，这个很重要！！！登录之后紧接着退出</p><p>第二次登录，选择语言，在红色区域选择下拉小三角，选other，选中”汉语（中国）”</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/image027.png" alt="image027"></p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/image028.png" alt="image028"></p><p>27、登录之后，请一定按照如下顺序点击！</p><p>至此，CentOS安装完成，如有其他问题，请随时与我联系！！</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/image029.png" alt="image029"></p><h2 id="如果你使用的是-VMware，可以参考：VMware-安装-Centos7"><a href="#如果你使用的是-VMware，可以参考：VMware-安装-Centos7" class="headerlink" title="如果你使用的是 VMware，可以参考：VMware 安装 Centos7"></a><em>如果你使用的是 VMware，可以参考：</em><a href="https://www.runoob.com/w3cnote/vmware-install-centos7.html" target="_blank" rel="noopener">VMware 安装 Centos7</a></h2><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><ul><li><a href="https://www.runoob.com/linux/linux-install.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-install.html</a></li></ul><p><em>如有侵权，联系 <a href="mailto:2025685938@qq.com" target="_blank" rel="noopener">2025685938@qq.com</a> 删除</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.Linux 简介</title>
      <link href="/posts/23330.html"/>
      <url>/posts/23330.html</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-教程"><a href="#Linux-教程" class="headerlink" title="Linux 教程"></a>Linux 教程</h1><h2 id="Linux-简介"><a href="#Linux-简介" class="headerlink" title="Linux 简介"></a>Linux 简介</h2><hr><p>Linux 内核最初只是由芬兰人林纳斯·托瓦兹（Linus Torvalds）在赫尔辛基大学上学时出于个人爱好而编写的。</p><p>Linux 是一套免费使用和自由传播的类 Unix 操作系统，是一个基于 POSIX 和 UNIX 的多用户、多任务、支持多线程和多 CPU 的操作系统。</p><p>Linux 能运行主要的 UNIX 工具软件、应用程序和网络协议。它支持 32 位和 64 位硬件。Linux 继承了 Unix 以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</p><hr><h3 id="Linux-的发行版"><a href="#Linux-的发行版" class="headerlink" title="Linux 的发行版"></a>Linux 的发行版</h3><p>Linux 的发行版说简单点就是将 Linux 内核与应用软件做一个打包。</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/1511849829609658.jpg" alt="img"></p><p>目前市面上较知名的发行版有：Ubuntu、RedHat、CentOS、Debian、Fedora、SuSE、OpenSUSE、Arch Linux、SolusOS 等。</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/06/wKioL1bvVPWAu7hqAAEyirVUn3c446.jpg-wh_651x-s_3197843091.jpg" alt="img"></p><hr><h3 id="Linux-应用领域"><a href="#Linux-应用领域" class="headerlink" title="Linux 应用领域"></a>Linux 应用领域</h3><p>今天各种场合都有使用各种 Linux 发行版，从嵌入式设备到超级计算机，并且在服务器领域确定了地位，通常服务器使用 LAMP（Linux + Apache + MySQL + PHP）或 LNMP（Linux + Nginx+ MySQL + PHP）组合。</p><p>目前 Linux 不仅在家庭与企业中使用，并且在政府中也很受欢迎。</p><ul><li>巴西联邦政府由于支持 Linux 而世界闻名。</li><li>有新闻报道俄罗斯军队自己制造的 Linux 发布版的，做为 G.H.ost 项目已经取得成果。</li><li>印度的 Kerala 联邦计划在向全联邦的高中推广使用 Linux。</li><li>中华人民共和国为取得技术独立，在龙芯处理器中排他性地使用 Linux。</li><li>在西班牙的一些地区开发了自己的 Linux 发布版，并且在政府与教育领域广泛使用，如 Extremadura 地区的 gnuLinEx 和 Andalusia 地区的 Guadalinex。</li><li>葡萄牙同样使用自己的 Linux 发布版 Caixa Mágica，用于 Magalh?es 笔记本电脑和 e-escola 政府软件。</li><li>法国和德国同样开始逐步采用 Linux。</li></ul><hr><h3 id="Linux-vs-Windows"><a href="#Linux-vs-Windows" class="headerlink" title="Linux vs Windows"></a>Linux vs Windows</h3><p>目前国内 Linux 更多的是应用于服务器上，而桌面操作系统更多使用的是 Windows。主要区别如下</p><table><thead><tr><th align="left">比较</th><th align="left">Windows</th><th align="left">Linux</th></tr></thead><tbody><tr><td align="left">界面</td><td align="left">界面统一，外壳程序固定所有 Windows 程序菜单几乎一致，快捷键也几乎相同</td><td align="left">图形界面风格依发布版不同而不同，可能互不兼容。GNU/Linux 的终端机是从 UNIX 传承下来，基本命令和操作方法也几乎一致。</td></tr><tr><td align="left">驱动程序</td><td align="left">驱动程序丰富，版本更新频繁。默认安装程序里面一般包含有该版本发布时流行的硬件驱动程序，之后所出的新硬件驱动依赖于硬件厂商提供。对于一些老硬件，如果没有了原配的驱动有时很难支持。另外，有时硬件厂商未提供所需版本的 Windows 下的驱动，也会比较头痛。</td><td align="left">由志愿者开发，由 Linux 核心开发小组发布，很多硬件厂商基于版权考虑并未提供驱动程序，尽管多数无需手动安装，但是涉及安装则相对复杂，使得新用户面对驱动程序问题（是否存在和安装方法）会一筹莫展。但是在开源开发模式下，许多老硬件尽管在Windows下很难支持的也容易找到驱动。HP、Intel、AMD 等硬件厂商逐步不同程度支持开源驱动，问题正在得到缓解。</td></tr><tr><td align="left">使用</td><td align="left">使用比较简单，容易入门。图形化界面对没有计算机背景知识的用户使用十分有利。</td><td align="left">图形界面使用简单，容易入门。文字界面，需要学习才能掌握。</td></tr><tr><td align="left">学习</td><td align="left">系统构造复杂、变化频繁，且知识、技能淘汰快，深入学习困难。</td><td align="left">系统构造简单、稳定，且知识、技能传承性好，深入学习相对容易。</td></tr><tr><td align="left">软件</td><td align="left">每一种特定功能可能都需要商业软件的支持，需要购买相应的授权。</td><td align="left">大部分软件都可以自由获取，同样功能的软件选择较少。</td></tr></tbody></table><h2 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h2><ul><li><a href="https://www.runoob.com/linux/linux-intro.html" target="_blank" rel="noopener">https://www.runoob.com/linux/linux-intro.html</a></li></ul><p><em>如有侵权，联系 <a href="mailto:2025685938@qq.com" target="_blank" rel="noopener">2025685938@qq.com</a> 删除</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Linux笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
